//-----------------------------------------------------------------------
// Copyright (c) 2014 Microsoft Corporation. All rights reserved.
// Use of this sample source code is subject to the terms of the Microsoft license 
// agreement under which you licensed this sample source code and is provided AS-IS.
// If you did not accept the terms of the license agreement, you are not authorized 
// to use this sample source code. For the terms of the license, please see the 
// license agreement between you and Microsoft.
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_MEETS
{
    /// <summary>
    /// This is a proxy class generated by WSDL tool.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "MeetingsSoap", Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Workspace[]))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Template[]))]
    public partial class MeetingsSoap : System.Web.Services.Protocols.SoapHttpClientProtocol
    {
        private System.Threading.SendOrPostCallback CreateWorkspaceOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteWorkspaceOperationCompleted;

        private System.Threading.SendOrPostCallback GetMeetingWorkspacesOperationCompleted;

        private System.Threading.SendOrPostCallback SetWorkspaceTitleOperationCompleted;

        private System.Threading.SendOrPostCallback AddMeetingFromICalOperationCompleted;

        private System.Threading.SendOrPostCallback AddMeetingOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateMeetingFromICalOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateMeetingOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveMeetingOperationCompleted;

        private System.Threading.SendOrPostCallback SetAttendeeResponseOperationCompleted;

        private System.Threading.SendOrPostCallback GetMeetingsInformationOperationCompleted;

        private System.Threading.SendOrPostCallback RestoreMeetingOperationCompleted;

        /// <summary>
        /// Initializes a new instance of MeetingsSoap class.
        /// </summary>
        public MeetingsSoap()
        {

        }

        /// <remarks/>
        public event CreateWorkspaceCompletedEventHandler CreateWorkspaceCompleted;

        /// <remarks/>
        public event DeleteWorkspaceCompletedEventHandler DeleteWorkspaceCompleted;

        /// <remarks/>
        public event GetMeetingWorkspacesCompletedEventHandler GetMeetingWorkspacesCompleted;

        /// <remarks/>
        public event SetWorkspaceTitleCompletedEventHandler SetWorkspaceTitleCompleted;

        /// <remarks/>
        public event AddMeetingFromICalCompletedEventHandler AddMeetingFromICalCompleted;

        /// <remarks/>
        public event AddMeetingCompletedEventHandler AddMeetingCompleted;

        /// <remarks/>
        public event UpdateMeetingFromICalCompletedEventHandler UpdateMeetingFromICalCompleted;

        /// <remarks/>
        public event UpdateMeetingCompletedEventHandler UpdateMeetingCompleted;

        /// <remarks/>
        public event RemoveMeetingCompletedEventHandler RemoveMeetingCompleted;

        /// <remarks/>
        public event SetAttendeeResponseCompletedEventHandler SetAttendeeResponseCompleted;

        /// <remarks/>
        public event GetMeetingsInformationCompletedEventHandler GetMeetingsInformationCompleted;

        /// <remarks/>
        public event RestoreMeetingCompletedEventHandler RestoreMeetingCompleted;

        /// <summary>
        /// This operation creates a new meeting workspace subsite. 
        /// </summary>
        /// <param name="title">The title of the new meeting workspace. </param>
        /// <param name="templateName">The name of the site template to use for the new meeting workspace.</param>
        /// <param name="lcid">The language code identifier (LCID) for the new workspace. </param>
        /// <param name="lcidSpecified">Whether the lcid parameter is specified</param>
        /// <param name="timeZoneInformation">The time zone on the system of the meeting organizer.</param>
        /// <returns>The information about the newly created meeting workspace.</returns>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/CreateWorkspace", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CreateWorkspaceResponseCreateWorkspaceResult CreateWorkspace(string title, string templateName, uint lcid, [System.Xml.Serialization.XmlIgnoreAttribute()] bool lcidSpecified, TimeZoneInf timeZoneInformation)
        {
            object[] results = this.Invoke("CreateWorkspace", new object[] {
                        title,
                        templateName,
                        lcid,
                        lcidSpecified,
                        timeZoneInformation});
            return ((CreateWorkspaceResponseCreateWorkspaceResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateWorkspace(string title, string templateName, uint lcid, bool lcidSpecified, TimeZoneInf timeZoneInformation, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateWorkspace", new object[] {
                        title,
                        templateName,
                        lcid,
                        lcidSpecified,
                        timeZoneInformation}, callback, asyncState);
        }

        /// <remarks/>
        public CreateWorkspaceResponseCreateWorkspaceResult EndCreateWorkspace(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((CreateWorkspaceResponseCreateWorkspaceResult)(results[0]));
        }

        /// <remarks/>
        public void CreateWorkspaceAsync(string title, string templateName, uint lcid, bool lcidSpecified, TimeZoneInf timeZoneInformation)
        {
            this.CreateWorkspaceAsync(title, templateName, lcid, lcidSpecified, timeZoneInformation, null);
        }

        /// <remarks/>
        public void CreateWorkspaceAsync(string title, string templateName, uint lcid, bool lcidSpecified, TimeZoneInf timeZoneInformation, object userState)
        {
            if ((this.CreateWorkspaceOperationCompleted == null))
            {
                this.CreateWorkspaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateWorkspaceOperationCompleted);
            }
            this.InvokeAsync("CreateWorkspace", new object[] {
                        title,
                        templateName,
                        lcid,
                        lcidSpecified,
                        timeZoneInformation}, this.CreateWorkspaceOperationCompleted, userState);
        }

        private void OnCreateWorkspaceOperationCompleted(object arg)
        {
            if ((this.CreateWorkspaceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateWorkspaceCompleted(this, new CreateWorkspaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <summary>
        /// This operation deletes a workspace. 
        /// </summary>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/DeleteWorkspace", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteWorkspace()
        {
            this.Invoke("DeleteWorkspace", new object[0]);
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteWorkspace(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteWorkspace", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteWorkspace(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteWorkspaceAsync()
        {
            this.DeleteWorkspaceAsync(null);
        }

        /// <remarks/>
        public void DeleteWorkspaceAsync(object userState)
        {
            if ((this.DeleteWorkspaceOperationCompleted == null))
            {
                this.DeleteWorkspaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteWorkspaceOperationCompleted);
            }
            this.InvokeAsync("DeleteWorkspace", new object[0], this.DeleteWorkspaceOperationCompleted, userState);
        }

        private void OnDeleteWorkspaceOperationCompleted(object arg)
        {
            if ((this.DeleteWorkspaceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteWorkspaceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <summary>
        /// This operation obtains a list of created meeting workspace subsites from a parent Web site. 
        /// </summary>
        /// <param name="recurring">Specifies whether the meeting workspaces returned are limited to those that can be associated with a recurring meeting.</param>
        /// <param name="recurringSpecified">Whether recurring parameter is specified</param>
        /// <returns>A list of meeting workspaces</returns>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/GetMeetingWorkspaces", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetMeetingWorkspacesResponseGetMeetingWorkspacesResult GetMeetingWorkspaces(bool recurring, [System.Xml.Serialization.XmlIgnoreAttribute()] bool recurringSpecified)
        {
            object[] results = this.Invoke("GetMeetingWorkspaces", new object[] {
                        recurring,
                        recurringSpecified});
            return ((GetMeetingWorkspacesResponseGetMeetingWorkspacesResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetMeetingWorkspaces(bool recurring, bool recurringSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetMeetingWorkspaces", new object[] {
                        recurring,
                        recurringSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public GetMeetingWorkspacesResponseGetMeetingWorkspacesResult EndGetMeetingWorkspaces(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetMeetingWorkspacesResponseGetMeetingWorkspacesResult)(results[0]));
        }

        /// <remarks/>
        public void GetMeetingWorkspacesAsync(bool recurring, bool recurringSpecified)
        {
            this.GetMeetingWorkspacesAsync(recurring, recurringSpecified, null);
        }

        /// <remarks/>
        public void GetMeetingWorkspacesAsync(bool recurring, bool recurringSpecified, object userState)
        {
            if ((this.GetMeetingWorkspacesOperationCompleted == null))
            {
                this.GetMeetingWorkspacesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMeetingWorkspacesOperationCompleted);
            }
            this.InvokeAsync("GetMeetingWorkspaces", new object[] {
                        recurring,
                        recurringSpecified}, this.GetMeetingWorkspacesOperationCompleted, userState);
        }

        private void OnGetMeetingWorkspacesOperationCompleted(object arg)
        {
            if ((this.GetMeetingWorkspacesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMeetingWorkspacesCompleted(this, new GetMeetingWorkspacesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <summary>
        /// This operation specifies a user-friendly name for a workspace. 
        /// </summary>
        /// <param name="title">The new title of the meeting workspace. </param>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/SetWorkspaceTitle", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetWorkspaceTitle(string title)
        {
            this.Invoke("SetWorkspaceTitle", new object[] {
                        title});
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetWorkspaceTitle(string title, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetWorkspaceTitle", new object[] {
                        title}, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetWorkspaceTitle(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetWorkspaceTitleAsync(string title)
        {
            this.SetWorkspaceTitleAsync(title, null);
        }

        /// <remarks/>
        public void SetWorkspaceTitleAsync(string title, object userState)
        {
            if ((this.SetWorkspaceTitleOperationCompleted == null))
            {
                this.SetWorkspaceTitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWorkspaceTitleOperationCompleted);
            }
            this.InvokeAsync("SetWorkspaceTitle", new object[] {
                        title}, this.SetWorkspaceTitleOperationCompleted, userState);
        }

        private void OnSetWorkspaceTitleOperationCompleted(object arg)
        {
            if ((this.SetWorkspaceTitleCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWorkspaceTitleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <summary>
        /// This operation adds a meeting to an existing workspace, based on a calendar object. 
        /// </summary>
        /// <param name="organizerEmail">Represents the e-mail address of the meeting organizer. </param>
        /// <param name="icalText">Information about the meeting instance to add.</param>
        /// <returns>Contains information about the meeting instance newly-added to the Meeting Workspace.</returns>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/AddMeetingFromICal", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AddMeetingFromICalResponseAddMeetingFromICalResult AddMeetingFromICal(string organizerEmail, string icalText)
        {
            object[] results = this.Invoke("AddMeetingFromICal", new object[] {
                        organizerEmail,
                        icalText});
            return ((AddMeetingFromICalResponseAddMeetingFromICalResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddMeetingFromICal(string organizerEmail, string icalText, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddMeetingFromICal", new object[] {
                        organizerEmail,
                        icalText}, callback, asyncState);
        }

        /// <remarks/>
        public AddMeetingFromICalResponseAddMeetingFromICalResult EndAddMeetingFromICal(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((AddMeetingFromICalResponseAddMeetingFromICalResult)(results[0]));
        }

        /// <remarks/>
        public void AddMeetingFromICalAsync(string organizerEmail, string icalText)
        {
            this.AddMeetingFromICalAsync(organizerEmail, icalText, null);
        }

        /// <remarks/>
        public void AddMeetingFromICalAsync(string organizerEmail, string icalText, object userState)
        {
            if ((this.AddMeetingFromICalOperationCompleted == null))
            {
                this.AddMeetingFromICalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMeetingFromICalOperationCompleted);
            }
            this.InvokeAsync("AddMeetingFromICal", new object[] {
                        organizerEmail,
                        icalText}, this.AddMeetingFromICalOperationCompleted, userState);
        }

        private void OnAddMeetingFromICalOperationCompleted(object arg)
        {
            if ((this.AddMeetingFromICalCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMeetingFromICalCompleted(this, new AddMeetingFromICalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <summary>
        /// This operation adds a meeting to an existing workspace. 
        /// </summary>
        /// <param name="organizerEmail">The e-mail address of the meeting organizer. </param>
        /// <param name="uid">A unique identifier represents this meeting.</param>
        /// <param name="sequence">The sequence or revision number of this meeting instance. </param>
        /// <param name="sequenceSpecified">Whether the sequence parameter is specified.</param>
        /// <param name="utcDateStamp">The time at which this meeting instance was created.</param>
        /// <param name="utcDateStampSpecified">Whether the utcDateStamp parameter is specified.</param>
        /// <param name="title">The subject of this meeting.</param>
        /// <param name="location">The physical or virtual location in which this meeting is to take place. </param>
        /// <param name="utcDateStart">The time at which this meeting begins.</param>
        /// <param name="utcDateEnd">The time at which this meeting ends. </param>
        /// <param name="nonGregorian">Specifies whether the meeting organizer is using the Gregorian calendar. </param>
        /// <param name="nonGregorianSpecified">Whether the nonGregorian parameter is specified.</param>
        /// <returns>Contains information about newly-added meeting instance.</returns>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/AddMeeting", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AddMeetingResponseAddMeetingResult AddMeeting(string organizerEmail, string uid, uint sequence, [System.Xml.Serialization.XmlIgnoreAttribute()] bool sequenceSpecified, System.DateTime utcDateStamp, [System.Xml.Serialization.XmlIgnoreAttribute()] bool utcDateStampSpecified, string title, string location, System.DateTime utcDateStart, System.DateTime utcDateEnd, bool nonGregorian, [System.Xml.Serialization.XmlIgnoreAttribute()] bool nonGregorianSpecified)
        {
            object[] results = this.Invoke("AddMeeting", new object[] {
                        organizerEmail,
                        uid,
                        sequence,
                        sequenceSpecified,
                        utcDateStamp,
                        utcDateStampSpecified,
                        title,
                        location,
                        utcDateStart,
                        utcDateEnd,
                        nonGregorian,
                        nonGregorianSpecified});
            return ((AddMeetingResponseAddMeetingResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddMeeting(string organizerEmail, string uid, uint sequence, bool sequenceSpecified, System.DateTime utcDateStamp, bool utcDateStampSpecified, string title, string location, System.DateTime utcDateStart, System.DateTime utcDateEnd, bool nonGregorian, bool nonGregorianSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddMeeting", new object[] {
                        organizerEmail,
                        uid,
                        sequence,
                        sequenceSpecified,
                        utcDateStamp,
                        utcDateStampSpecified,
                        title,
                        location,
                        utcDateStart,
                        utcDateEnd,
                        nonGregorian,
                        nonGregorianSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public AddMeetingResponseAddMeetingResult EndAddMeeting(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((AddMeetingResponseAddMeetingResult)(results[0]));
        }

        /// <remarks/>
        public void AddMeetingAsync(string organizerEmail, string uid, uint sequence, bool sequenceSpecified, System.DateTime utcDateStamp, bool utcDateStampSpecified, string title, string location, System.DateTime utcDateStart, System.DateTime utcDateEnd, bool nonGregorian, bool nonGregorianSpecified)
        {
            this.AddMeetingAsync(organizerEmail, uid, sequence, sequenceSpecified, utcDateStamp, utcDateStampSpecified, title, location, utcDateStart, utcDateEnd, nonGregorian, nonGregorianSpecified, null);
        }

        /// <remarks/>
        public void AddMeetingAsync(string organizerEmail, string uid, uint sequence, bool sequenceSpecified, System.DateTime utcDateStamp, bool utcDateStampSpecified, string title, string location, System.DateTime utcDateStart, System.DateTime utcDateEnd, bool nonGregorian, bool nonGregorianSpecified, object userState)
        {
            if ((this.AddMeetingOperationCompleted == null))
            {
                this.AddMeetingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMeetingOperationCompleted);
            }
            this.InvokeAsync("AddMeeting", new object[] {
                        organizerEmail,
                        uid,
                        sequence,
                        sequenceSpecified,
                        utcDateStamp,
                        utcDateStampSpecified,
                        title,
                        location,
                        utcDateStart,
                        utcDateEnd,
                        nonGregorian,
                        nonGregorianSpecified}, this.AddMeetingOperationCompleted, userState);
        }

        private void OnAddMeetingOperationCompleted(object arg)
        {
            if ((this.AddMeetingCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMeetingCompleted(this, new AddMeetingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <summary>
        /// This operation updates content of a meeting in a workspace, based on a calendar object. 
        /// </summary>
        /// <param name="icalText">Updated information about the meeting instance. </param>
        /// <param name="ignoreAttendees">Specifies whether this is a scheduling-only update or whether it affects attendees. </param>
        /// <param name="ignoreAttendeesSpecified">Whether the ignoreAttendees parameter is specified.</param>
        /// <returns>Contains information used to update a meeting instance. </returns>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/UpdateMeetingFromICal", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UpdateMeetingFromICalResponseUpdateMeetingFromICalResult UpdateMeetingFromICal(string icalText, bool ignoreAttendees, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ignoreAttendeesSpecified)
        {
            object[] results = this.Invoke("UpdateMeetingFromICal", new object[] {
                        icalText,
                        ignoreAttendees,
                        ignoreAttendeesSpecified});
            return ((UpdateMeetingFromICalResponseUpdateMeetingFromICalResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateMeetingFromICal(string icalText, bool ignoreAttendees, bool ignoreAttendeesSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateMeetingFromICal", new object[] {
                        icalText,
                        ignoreAttendees,
                        ignoreAttendeesSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public UpdateMeetingFromICalResponseUpdateMeetingFromICalResult EndUpdateMeetingFromICal(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((UpdateMeetingFromICalResponseUpdateMeetingFromICalResult)(results[0]));
        }

        /// <remarks/>
        public void UpdateMeetingFromICalAsync(string icalText, bool ignoreAttendees, bool ignoreAttendeesSpecified)
        {
            this.UpdateMeetingFromICalAsync(icalText, ignoreAttendees, ignoreAttendeesSpecified, null);
        }

        /// <remarks/>
        public void UpdateMeetingFromICalAsync(string icalText, bool ignoreAttendees, bool ignoreAttendeesSpecified, object userState)
        {
            if ((this.UpdateMeetingFromICalOperationCompleted == null))
            {
                this.UpdateMeetingFromICalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMeetingFromICalOperationCompleted);
            }
            this.InvokeAsync("UpdateMeetingFromICal", new object[] {
                        icalText,
                        ignoreAttendees,
                        ignoreAttendeesSpecified}, this.UpdateMeetingFromICalOperationCompleted, userState);
        }

        private void OnUpdateMeetingFromICalOperationCompleted(object arg)
        {
            if ((this.UpdateMeetingFromICalCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMeetingFromICalCompleted(this, new UpdateMeetingFromICalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <summary>
        /// This operation updates the content of a meeting in a workspace. 
        /// </summary>
        /// <param name="uid">A unique identifier represents the meeting to update.</param>
        /// <param name="sequence">The updated sequence number of this meeting. </param>
        /// <param name="sequenceSpecified">Whether the sequence parameter is specified</param>
        /// <param name="utcDateStamp">The time at which the meeting is updated.</param>
        /// <param name="utcDateStampSpecified">Whether the utcDateStamp parameter is specified</param>
        /// <param name="title">The updated subject of this meeting. </param>
        /// <param name="location">The updated physical or virtual location in which this meeting is to take place. </param>
        /// <param name="utcDateStart">The updated start time of this meeting.</param>
        /// <param name="utcDateEnd">The updated end time of this meeting. </param>
        /// <param name="nonGregorian">Specifies whether the updated meeting is not in the Gregorian calendar. </param>
        /// <param name="nonGregorianSpecified">Whether the nonGregorian parameter is specified.</param>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/UpdateMeeting", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateMeeting(string uid, uint sequence, [System.Xml.Serialization.XmlIgnoreAttribute()] bool sequenceSpecified, System.DateTime utcDateStamp, [System.Xml.Serialization.XmlIgnoreAttribute()] bool utcDateStampSpecified, string title, string location, System.DateTime utcDateStart, System.DateTime utcDateEnd, bool nonGregorian, [System.Xml.Serialization.XmlIgnoreAttribute()] bool nonGregorianSpecified)
        {
            this.Invoke("UpdateMeeting", new object[] {
                        uid,
                        sequence,
                        sequenceSpecified,
                        utcDateStamp,
                        utcDateStampSpecified,
                        title,
                        location,
                        utcDateStart,
                        utcDateEnd,
                        nonGregorian,
                        nonGregorianSpecified});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateMeeting(string uid, uint sequence, bool sequenceSpecified, System.DateTime utcDateStamp, bool utcDateStampSpecified, string title, string location, System.DateTime utcDateStart, System.DateTime utcDateEnd, bool nonGregorian, bool nonGregorianSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateMeeting", new object[] {
                        uid,
                        sequence,
                        sequenceSpecified,
                        utcDateStamp,
                        utcDateStampSpecified,
                        title,
                        location,
                        utcDateStart,
                        utcDateEnd,
                        nonGregorian,
                        nonGregorianSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdateMeeting(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UpdateMeetingAsync(string uid, uint sequence, bool sequenceSpecified, System.DateTime utcDateStamp, bool utcDateStampSpecified, string title, string location, System.DateTime utcDateStart, System.DateTime utcDateEnd, bool nonGregorian, bool nonGregorianSpecified)
        {
            this.UpdateMeetingAsync(uid, sequence, sequenceSpecified, utcDateStamp, utcDateStampSpecified, title, location, utcDateStart, utcDateEnd, nonGregorian, nonGregorianSpecified, null);
        }

        /// <remarks/>
        public void UpdateMeetingAsync(string uid, uint sequence, bool sequenceSpecified, System.DateTime utcDateStamp, bool utcDateStampSpecified, string title, string location, System.DateTime utcDateStart, System.DateTime utcDateEnd, bool nonGregorian, bool nonGregorianSpecified, object userState)
        {
            if ((this.UpdateMeetingOperationCompleted == null))
            {
                this.UpdateMeetingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMeetingOperationCompleted);
            }
            this.InvokeAsync("UpdateMeeting", new object[] {
                        uid,
                        sequence,
                        sequenceSpecified,
                        utcDateStamp,
                        utcDateStampSpecified,
                        title,
                        location,
                        utcDateStart,
                        utcDateEnd,
                        nonGregorian,
                        nonGregorianSpecified}, this.UpdateMeetingOperationCompleted, userState);
        }

        private void OnUpdateMeetingOperationCompleted(object arg)
        {
            if ((this.UpdateMeetingCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMeetingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <summary>
        /// This operation deletes a meeting from an existing workspace. 
        /// </summary>
        /// <param name="recurrenceId">The instance of a recurring meeting to delete. </param>
        /// <param name="recurrenceIdSpecified">Whether the recurrenceId parameter is specified.</param>
        /// <param name="uid">A unique identifier represents the meeting to delete.</param>
        /// <param name="sequence">The sequence number of a meeting instance to delete. </param>
        /// <param name="sequenceSpecified">Whether the sequence parameter is specified.</param>
        /// <param name="utcDateStamp">The time stamp for the time at which this meeting instance was deleted.</param>
        /// <param name="utcDateStampSpecified">Whether the utcDateStamp parameter is specified.</param>
        /// <param name="cancelMeeting">Specifies whether the meeting is being cancelled in addition to being deleted from the workspace.</param>
        /// <param name="cancelMeetingSpecified">Whether the cancelMeeting parameter is specified.</param>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/RemoveMeeting", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveMeeting(uint recurrenceId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool recurrenceIdSpecified, string uid, uint sequence, [System.Xml.Serialization.XmlIgnoreAttribute()] bool sequenceSpecified, System.DateTime utcDateStamp, [System.Xml.Serialization.XmlIgnoreAttribute()] bool utcDateStampSpecified, bool cancelMeeting, [System.Xml.Serialization.XmlIgnoreAttribute()] bool cancelMeetingSpecified)
        {
            this.Invoke("RemoveMeeting", new object[] {
                        recurrenceId,
                        recurrenceIdSpecified,
                        uid,
                        sequence,
                        sequenceSpecified,
                        utcDateStamp,
                        utcDateStampSpecified,
                        cancelMeeting,
                        cancelMeetingSpecified});
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveMeeting(uint recurrenceId, bool recurrenceIdSpecified, string uid, uint sequence, bool sequenceSpecified, System.DateTime utcDateStamp, bool utcDateStampSpecified, bool cancelMeeting, bool cancelMeetingSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RemoveMeeting", new object[] {
                        recurrenceId,
                        recurrenceIdSpecified,
                        uid,
                        sequence,
                        sequenceSpecified,
                        utcDateStamp,
                        utcDateStampSpecified,
                        cancelMeeting,
                        cancelMeetingSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public void EndRemoveMeeting(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void RemoveMeetingAsync(uint recurrenceId, bool recurrenceIdSpecified, string uid, uint sequence, bool sequenceSpecified, System.DateTime utcDateStamp, bool utcDateStampSpecified, bool cancelMeeting, bool cancelMeetingSpecified)
        {
            this.RemoveMeetingAsync(recurrenceId, recurrenceIdSpecified, uid, sequence, sequenceSpecified, utcDateStamp, utcDateStampSpecified, cancelMeeting, cancelMeetingSpecified, null);
        }

        /// <remarks/>
        public void RemoveMeetingAsync(uint recurrenceId, bool recurrenceIdSpecified, string uid, uint sequence, bool sequenceSpecified, System.DateTime utcDateStamp, bool utcDateStampSpecified, bool cancelMeeting, bool cancelMeetingSpecified, object userState)
        {
            if ((this.RemoveMeetingOperationCompleted == null))
            {
                this.RemoveMeetingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveMeetingOperationCompleted);
            }
            this.InvokeAsync("RemoveMeeting", new object[] {
                        recurrenceId,
                        recurrenceIdSpecified,
                        uid,
                        sequence,
                        sequenceSpecified,
                        utcDateStamp,
                        utcDateStampSpecified,
                        cancelMeeting,
                        cancelMeetingSpecified}, this.RemoveMeetingOperationCompleted, userState);
        }

        private void OnRemoveMeetingOperationCompleted(object arg)
        {
            if ((this.RemoveMeetingCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveMeetingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <summary>
        /// This operation specifies attendee response to a meeting request in a workspace. 
        /// </summary>
        /// <param name="attendeeEmail">The e-mail address of the responding attendee.</param>
        /// <param name="recurrenceId">The instance of a recurring meeting associated with the response. </param>
        /// <param name="recurrenceIdSpecified">Whether the recurrenceId parameter is specified.</param>
        /// <param name="uid">A unique identifier represents the meeting associated with the response.</param>
        /// <param name="sequence">The sequence number of a meeting instance associated with the response. </param>
        /// <param name="sequenceSpecified">Whether the sequence parameter is specified.</param>
        /// <param name="utcDateTimeOrganizerCriticalChange">The time stamp at which the attendee responded to the meeting, translated to the time zone of the meeting organizer.</param>
        /// <param name="utcDateTimeOrganizerCriticalChangeSpecified">Whether the utcDateTimeOrganizerCriticalChange parameter is specified.</param>
        /// <param name="utcDateTimeAttendeeCriticalChange">The time stamp that contains the time at which the attendee responded to the meeting, translated to the time zone of the attendee.</param>
        /// <param name="utcDateTimeAttendeeCriticalChangeSpecified">Whether the utcDateTimeAttendeeCriticalChange parameter is specified.</param>
        /// <param name="response">Attendee acceptance or rejection of the meeting invitation. </param>
        /// <param name="responseSpecified">Whether the response parameter is specified.</param>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/SetAttendeeResponse", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetAttendeeResponse(string attendeeEmail, uint recurrenceId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool recurrenceIdSpecified, string uid, uint sequence, [System.Xml.Serialization.XmlIgnoreAttribute()] bool sequenceSpecified, System.DateTime utcDateTimeOrganizerCriticalChange, [System.Xml.Serialization.XmlIgnoreAttribute()] bool utcDateTimeOrganizerCriticalChangeSpecified, System.DateTime utcDateTimeAttendeeCriticalChange, [System.Xml.Serialization.XmlIgnoreAttribute()] bool utcDateTimeAttendeeCriticalChangeSpecified, AttendeeResponse response, [System.Xml.Serialization.XmlIgnoreAttribute()] bool responseSpecified)
        {
            this.Invoke("SetAttendeeResponse", new object[] {
                        attendeeEmail,
                        recurrenceId,
                        recurrenceIdSpecified,
                        uid,
                        sequence,
                        sequenceSpecified,
                        utcDateTimeOrganizerCriticalChange,
                        utcDateTimeOrganizerCriticalChangeSpecified,
                        utcDateTimeAttendeeCriticalChange,
                        utcDateTimeAttendeeCriticalChangeSpecified,
                        response,
                        responseSpecified});
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetAttendeeResponse(string attendeeEmail, uint recurrenceId, bool recurrenceIdSpecified, string uid, uint sequence, bool sequenceSpecified, System.DateTime utcDateTimeOrganizerCriticalChange, bool utcDateTimeOrganizerCriticalChangeSpecified, System.DateTime utcDateTimeAttendeeCriticalChange, bool utcDateTimeAttendeeCriticalChangeSpecified, AttendeeResponse response, bool responseSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetAttendeeResponse", new object[] {
                        attendeeEmail,
                        recurrenceId,
                        recurrenceIdSpecified,
                        uid,
                        sequence,
                        sequenceSpecified,
                        utcDateTimeOrganizerCriticalChange,
                        utcDateTimeOrganizerCriticalChangeSpecified,
                        utcDateTimeAttendeeCriticalChange,
                        utcDateTimeAttendeeCriticalChangeSpecified,
                        response,
                        responseSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetAttendeeResponse(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetAttendeeResponseAsync(string attendeeEmail, uint recurrenceId, bool recurrenceIdSpecified, string uid, uint sequence, bool sequenceSpecified, System.DateTime utcDateTimeOrganizerCriticalChange, bool utcDateTimeOrganizerCriticalChangeSpecified, System.DateTime utcDateTimeAttendeeCriticalChange, bool utcDateTimeAttendeeCriticalChangeSpecified, AttendeeResponse response, bool responseSpecified)
        {
            this.SetAttendeeResponseAsync(attendeeEmail, recurrenceId, recurrenceIdSpecified, uid, sequence, sequenceSpecified, utcDateTimeOrganizerCriticalChange, utcDateTimeOrganizerCriticalChangeSpecified, utcDateTimeAttendeeCriticalChange, utcDateTimeAttendeeCriticalChangeSpecified, response, responseSpecified, null);
        }

        /// <remarks/>
        public void SetAttendeeResponseAsync(string attendeeEmail, uint recurrenceId, bool recurrenceIdSpecified, string uid, uint sequence, bool sequenceSpecified, System.DateTime utcDateTimeOrganizerCriticalChange, bool utcDateTimeOrganizerCriticalChangeSpecified, System.DateTime utcDateTimeAttendeeCriticalChange, bool utcDateTimeAttendeeCriticalChangeSpecified, AttendeeResponse response, bool responseSpecified, object userState)
        {
            if ((this.SetAttendeeResponseOperationCompleted == null))
            {
                this.SetAttendeeResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAttendeeResponseOperationCompleted);
            }
            this.InvokeAsync("SetAttendeeResponse", new object[] {
                        attendeeEmail,
                        recurrenceId,
                        recurrenceIdSpecified,
                        uid,
                        sequence,
                        sequenceSpecified,
                        utcDateTimeOrganizerCriticalChange,
                        utcDateTimeOrganizerCriticalChangeSpecified,
                        utcDateTimeAttendeeCriticalChange,
                        utcDateTimeAttendeeCriticalChangeSpecified,
                        response,
                        responseSpecified}, this.SetAttendeeResponseOperationCompleted, userState);
        }

        private void OnSetAttendeeResponseOperationCompleted(object arg)
        {
            if ((this.SetAttendeeResponseCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAttendeeResponseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <summary>
        /// This operation queries information from a Web site about meeting workspaces on it or information about a meeting workspace itself. 
        /// </summary>
        /// <param name="requestFlags">This field contains bit flags that specify what information to request from the Web site.</param>
        /// <param name="requestFlagsSpecified">Whether the requestFlags parameter is specified.</param>
        /// <param name="lcid">The language code identifier (LCID) of the meeting workspace templates to be returned. </param>
        /// <param name="lcidSpecified">Whether the lcid parameter is specified.</param>
        /// <returns>Contains the information about meeting workspace.</returns>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/GetMeetingsInformation", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetMeetingsInformationResponseGetMeetingsInformationResult GetMeetingsInformation(uint requestFlags, [System.Xml.Serialization.XmlIgnoreAttribute()] bool requestFlagsSpecified, uint lcid, [System.Xml.Serialization.XmlIgnoreAttribute()] bool lcidSpecified)
        {
            object[] results = this.Invoke("GetMeetingsInformation", new object[] {
                        requestFlags,
                        requestFlagsSpecified,
                        lcid,
                        lcidSpecified});
            return ((GetMeetingsInformationResponseGetMeetingsInformationResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetMeetingsInformation(uint requestFlags, bool requestFlagsSpecified, uint lcid, bool lcidSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetMeetingsInformation", new object[] {
                        requestFlags,
                        requestFlagsSpecified,
                        lcid,
                        lcidSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public GetMeetingsInformationResponseGetMeetingsInformationResult EndGetMeetingsInformation(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetMeetingsInformationResponseGetMeetingsInformationResult)(results[0]));
        }

        /// <remarks/>
        public void GetMeetingsInformationAsync(uint requestFlags, bool requestFlagsSpecified, uint lcid, bool lcidSpecified)
        {
            this.GetMeetingsInformationAsync(requestFlags, requestFlagsSpecified, lcid, lcidSpecified, null);
        }

        /// <remarks/>
        public void GetMeetingsInformationAsync(uint requestFlags, bool requestFlagsSpecified, uint lcid, bool lcidSpecified, object userState)
        {
            if ((this.GetMeetingsInformationOperationCompleted == null))
            {
                this.GetMeetingsInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMeetingsInformationOperationCompleted);
            }
            this.InvokeAsync("GetMeetingsInformation", new object[] {
                        requestFlags,
                        requestFlagsSpecified,
                        lcid,
                        lcidSpecified}, this.GetMeetingsInformationOperationCompleted, userState);
        }

        private void OnGetMeetingsInformationOperationCompleted(object arg)
        {
            if ((this.GetMeetingsInformationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMeetingsInformationCompleted(this, new GetMeetingsInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <summary>
        /// This operation restores a previously deleted meeting to a workspace. 
        /// </summary>
        /// <param name="uid">A unique identifier represents the meeting to restore.</param>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/RestoreMeeting", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RestoreMeeting(string uid)
        {
            this.Invoke("RestoreMeeting", new object[] {
                        uid});
        }

        /// <remarks/>
        public System.IAsyncResult BeginRestoreMeeting(string uid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RestoreMeeting", new object[] {
                        uid}, callback, asyncState);
        }

        /// <remarks/>
        public void EndRestoreMeeting(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void RestoreMeetingAsync(string uid)
        {
            this.RestoreMeetingAsync(uid, null);
        }

        /// <remarks/>
        public void RestoreMeetingAsync(string uid, object userState)
        {
            if ((this.RestoreMeetingOperationCompleted == null))
            {
                this.RestoreMeetingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRestoreMeetingOperationCompleted);
            }
            this.InvokeAsync("RestoreMeeting", new object[] {
                        uid}, this.RestoreMeetingOperationCompleted, userState);
        }

        private void OnRestoreMeetingOperationCompleted(object arg)
        {
            if ((this.RestoreMeetingCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RestoreMeetingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <summary>
    /// Represents the information about a time zone. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class TimeZoneInf
    {

        private int biasField;

        private SysTime standardDateField;

        private int standardBiasField;

        private SysTime daylightDateField;

        private int daylightBiasField;

        /// <summary>
        /// The current bias for local time translation, in minutes. 
        /// </summary>
        public int bias
        {
            get
            {
                return this.biasField;
            }
            set
            {
                this.biasField = value;
            }
        }

        /// <summary>
        /// The date and time at which standard time begins, as specified in [RFC2445].
        /// </summary>
        public SysTime standardDate
        {
            get
            {
                return this.standardDateField;
            }
            set
            {
                this.standardDateField = value;
            }
        }

        /// <summary>
        /// The value used during local time translations that occur during standard time. 
        /// </summary>
        public int standardBias
        {
            get
            {
                return this.standardBiasField;
            }
            set
            {
                this.standardBiasField = value;
            }
        }

        /// <summary>
        /// The date and time at which daylight saving time begins, as specified in [RFC2445].
        /// </summary>
        public SysTime daylightDate
        {
            get
            {
                return this.daylightDateField;
            }
            set
            {
                this.daylightDateField = value;
            }
        }

        /// <summary>
        /// The value used during local time translations for daylight saving time. 
        /// </summary>
        public int daylightBias
        {
            get
            {
                return this.daylightBiasField;
            }
            set
            {
                this.daylightBiasField = value;
            }
        }
    }

    /// <summary>
    /// Represents a system date and time.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class SysTime
    {

        private ushort yearField;

        private ushort monthField;

        private ushort dayOfWeekField;

        private ushort dayField;

        private ushort hourField;

        private ushort minuteField;

        private ushort secondField;

        private ushort millisecondsField;

        /// <summary>
        /// The year.
        /// </summary>
        public ushort year
        {
            get
            {
                return this.yearField;
            }
            set
            {
                this.yearField = value;
            }
        }

        /// <summary>
        /// The month of the year. 
        /// </summary>
        public ushort month
        {
            get
            {
                return this.monthField;
            }
            set
            {
                this.monthField = value;
            }
        }

        /// <summary>
        /// The day of the week. 
        /// </summary>
        public ushort dayOfWeek
        {
            get
            {
                return this.dayOfWeekField;
            }
            set
            {
                this.dayOfWeekField = value;
            }
        }

        /// <summary>
        /// The day of the month. 
        /// </summary>
        public ushort day
        {
            get
            {
                return this.dayField;
            }
            set
            {
                this.dayField = value;
            }
        }

        /// <summary>
        /// The hour of the day. 
        /// </summary>
        public ushort hour
        {
            get
            {
                return this.hourField;
            }
            set
            {
                this.hourField = value;
            }
        }

        /// <summary>
        /// The minute of the hour. 
        /// </summary>
        public ushort minute
        {
            get
            {
                return this.minuteField;
            }
            set
            {
                this.minuteField = value;
            }
        }

        /// <summary>
        /// The second of the minute. 
        /// </summary>
        public ushort second
        {
            get
            {
                return this.secondField;
            }
            set
            {
                this.secondField = value;
            }
        }

        /// <summary>
        /// The millisecond of the second. 
        /// </summary>
        public ushort milliseconds
        {
            get
            {
                return this.millisecondsField;
            }
            set
            {
                this.millisecondsField = value;
            }
        }
    }

    /// <summary>
    /// Contains the status of a workspace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class WorkspaceStatus
    {

        private string uniquePermissionsField;

        private string meetingCountField;

        private string anonymousAccessField;

        private string allowAuthenticatedUsersField;

        /// <summary>
        /// Specifies whether the meeting workspace subsite contains unique role assignments. 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string UniquePermissions
        {
            get
            {
                return this.uniquePermissionsField;
            }
            set
            {
                this.uniquePermissionsField = value;
            }
        }

        /// <summary>
        /// The number of single meeting instances on the subsite. 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string MeetingCount
        {
            get
            {
                return this.meetingCountField;
            }
            set
            {
                this.meetingCountField = value;
            }
        }

        /// <summary>
        /// Specifies whether anonymous access has been granted for a meeting workspace subsite. 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string AnonymousAccess
        {
            get
            {
                return this.anonymousAccessField;
            }
            set
            {
                this.anonymousAccessField = value;
            }
        }

        /// <summary>
        /// Specifies whether access to a meeting workspace subsite has been granted to authenticated users. 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string AllowAuthenticatedUsers
        {
            get
            {
                return this.allowAuthenticatedUsersField;
            }
            set
            {
                this.allowAuthenticatedUsersField = value;
            }
        }
    }

    /// <summary>
    /// Contains information about a site template.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class Template
    {

        private string nameField;

        private string titleField;

        private int idField;

        private bool idFieldSpecified;

        private string descriptionField;

        private string imageUrlField;

        /// <summary>
        /// The short name of the site template.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <summary>
        /// The title of the site template.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleField = value;
            }
        }

        /// <summary>
        /// The identification number of the site template.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        /// <summary>
        /// Whether the Id is specified.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdSpecified
        {
            get
            {
                return this.idFieldSpecified;
            }
            set
            {
                this.idFieldSpecified = value;
            }
        }

        /// <summary>
        /// A description of the site template.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }

        /// <summary>
        /// The URL of an image or icon of the site template.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ImageUrl
        {
            get
            {
                return this.imageUrlField;
            }
            set
            {
                this.imageUrlField = value;
            }
        }
    }

    /// <summary>
    /// Specifies information about a meeting instance newly added or updated in a workspace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class AttendeeUpdateStatus
    {

        private int codeField;

        private bool codeFieldSpecified;

        private string detailField;

        private string manageUserPageField;

        /// <summary>
        /// An error code associated with the text message that describes the problem that the protocol server encountered while updating the meeting instance. 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Code
        {
            get
            {
                return this.codeField;
            }
            set
            {
                this.codeField = value;
            }
        }

        /// <summary>
        /// Whether the Code element is specified.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSpecified
        {
            get
            {
                return this.codeFieldSpecified;
            }
            set
            {
                this.codeFieldSpecified = value;
            }
        }

        /// <summary>
        /// The error that occurred during the update of the meeting instance. 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Detail
        {
            get
            {
                return this.detailField;
            }
            set
            {
                this.detailField = value;
            }
        }

        /// <summary>
        /// The URL of a page in the meeting workspace that displays the list of attendees in the meeting instance for viewing or editing.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ManageUserPage
        {
            get
            {
                return this.manageUserPageField;
            }
            set
            {
                this.manageUserPageField = value;
            }
        }
    }

    /// <summary>
    /// Specifies information about a meeting instance newly added to a workspace. 
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AddMeetingFromICal))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class AddMeeting
    {

        private string urlField;

        private string hostTitleField;

        private bool uniquePermissionsField;

        private bool uniquePermissionsFieldSpecified;

        private int meetingCountField;

        private bool meetingCountFieldSpecified;

        private bool anonymousAccessField;

        private bool anonymousAccessFieldSpecified;

        private bool allowAuthenticatedUsersField;

        private bool allowAuthenticatedUsersFieldSpecified;

        /// <summary>
        /// The absolute URL of the meeting instance in the workspace, with an indicator of the instance in the absolute URL query section.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Url
        {
            get
            {
                return this.urlField;
            }
            set
            {
                this.urlField = value;
            }
        }

        /// <summary>
        /// The name of the meeting organizer.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string HostTitle
        {
            get
            {
                return this.hostTitleField;
            }
            set
            {
                this.hostTitleField = value;
            }
        }

        /// <summary>
        /// Specifies whether the meeting workspace subsite contains unique role assignments.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool UniquePermissions
        {
            get
            {
                return this.uniquePermissionsField;
            }
            set
            {
                this.uniquePermissionsField = value;
            }
        }

        /// <summary>
        /// Whether the UniquePermissions element is specified.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UniquePermissionsSpecified
        {
            get
            {
                return this.uniquePermissionsFieldSpecified;
            }
            set
            {
                this.uniquePermissionsFieldSpecified = value;
            }
        }

        /// <summary>
        /// The number of meeting instances in the workspace, including the one just added.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MeetingCount
        {
            get
            {
                return this.meetingCountField;
            }
            set
            {
                this.meetingCountField = value;
            }
        }

        /// <summary>
        /// Whether the MeetingCount element is specified.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MeetingCountSpecified
        {
            get
            {
                return this.meetingCountFieldSpecified;
            }
            set
            {
                this.meetingCountFieldSpecified = value;
            }
        }

        /// <summary>
        /// Specifies whether anonymous access has been granted for a meeting workspace subsite.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool AnonymousAccess
        {
            get
            {
                return this.anonymousAccessField;
            }
            set
            {
                this.anonymousAccessField = value;
            }
        }

        /// <summary>
        /// Whether the AnonymousAccess element is specified.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AnonymousAccessSpecified
        {
            get
            {
                return this.anonymousAccessFieldSpecified;
            }
            set
            {
                this.anonymousAccessFieldSpecified = value;
            }
        }

        /// <summary>
        /// Specifies whether access to a meeting workspace subsite has been granted to authenticated users.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool AllowAuthenticatedUsers
        {
            get
            {
                return this.allowAuthenticatedUsersField;
            }
            set
            {
                this.allowAuthenticatedUsersField = value;
            }
        }

        /// <summary>
        /// Whether the AllowAuthenticatedUsers element is specified.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowAuthenticatedUsersSpecified
        {
            get
            {
                return this.allowAuthenticatedUsersFieldSpecified;
            }
            set
            {
                this.allowAuthenticatedUsersFieldSpecified = value;
            }
        }
    }

    /// <summary>
    /// Specifies information about a meeting instance newly added using iCalendar format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class AddMeetingFromICal : AddMeeting
    {

        private AttendeeUpdateStatus attendeeUpdateStatusField;

        /// <summary>
        /// Specifies information about a meeting instance newly added or updated in a workspace.
        /// </summary>
        public AttendeeUpdateStatus AttendeeUpdateStatus
        {
            get
            {
                return this.attendeeUpdateStatusField;
            }
            set
            {
                this.attendeeUpdateStatusField = value;
            }
        }
    }

    /// <summary>
    /// Contains information about a meeting workspace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class Workspace
    {

        private string urlField;

        private string titleField;

        /// <summary>
        /// The URL of the meeting workspace.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Url
        {
            get
            {
                return this.urlField;
            }
            set
            {
                this.urlField = value;
            }
        }

        /// <summary>
        /// The title of the meeting workspace.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleField = value;
            }
        }
    }

    /// <summary>
    /// Contains information about a newly created meeting workspace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class CreateWorkspace
    {

        private string urlField;

        /// <summary>
        /// The URL of the newly created meeting workspace.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Url
        {
            get
            {
                return this.urlField;
            }
            set
            {
                this.urlField = value;
            }
        }
    }

    /// <summary>
    /// Containing information about the newly created meeting workspace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class CreateWorkspaceResponseCreateWorkspaceResult
    {

        private CreateWorkspace createWorkspaceField;

        private string[] textField;

        /// <summary>
        /// Contains information about a newly created meeting workspace.
        /// </summary>
        public CreateWorkspace CreateWorkspace
        {
            get
            {
                return this.createWorkspaceField;
            }
            set
            {
                this.createWorkspaceField = value;
            }
        }

        /// <summary>
        /// The URL of the newly created meeting workspace.
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string[] Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                this.textField = value;
            }
        }
    }

    /// <summary>
    /// Contain information about the meeting workspaces.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class GetMeetingWorkspacesResponseGetMeetingWorkspacesResult
    {

        private Workspace[] meetingWorkspacesField;

        private string[] textField;

        /// <summary>
        /// A list of meeting workspaces.
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
        public Workspace[] MeetingWorkspaces
        {
            get
            {
                return this.meetingWorkspacesField;
            }
            set
            {
                this.meetingWorkspacesField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string[] Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                this.textField = value;
            }
        }
    }

    /// <summary>
    /// Contains information about the meeting instance newly-added to the Meeting Workspace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class AddMeetingFromICalResponseAddMeetingFromICalResult
    {

        private AddMeetingFromICal addMeetingFromICalField;

        private string[] textField;

        /// <summary>
        /// Specifies information about a meeting instance newly added using iCalendar format.
        /// </summary>
        public AddMeetingFromICal AddMeetingFromICal
        {
            get
            {
                return this.addMeetingFromICalField;
            }
            set
            {
                this.addMeetingFromICalField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string[] Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                this.textField = value;
            }
        }
    }

    /// <summary>
    /// Contains information about newly-added meeting instance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class AddMeetingResponseAddMeetingResult
    {

        private AddMeeting addMeetingField;

        private string[] textField;

        /// <summary>
        /// The meeting instance
        /// </summary>
        public AddMeeting AddMeeting
        {
            get
            {
                return this.addMeetingField;
            }
            set
            {
                this.addMeetingField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string[] Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                this.textField = value;
            }
        }
    }

    /// <summary>
    /// Contains information used to update a meeting instance. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class UpdateMeetingFromICalResponseUpdateMeetingFromICalResult
    {

        private UpdateMeetingFromICalResponseUpdateMeetingFromICalResultUpdateMeetingFromICal updateMeetingFromICalField;

        private string[] textField;

        /// <summary>
        /// Information about meeting.
        /// </summary>
        public UpdateMeetingFromICalResponseUpdateMeetingFromICalResultUpdateMeetingFromICal UpdateMeetingFromICal
        {
            get
            {
                return this.updateMeetingFromICalField;
            }
            set
            {
                this.updateMeetingFromICalField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string[] Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                this.textField = value;
            }
        }
    }

    /// <summary>
    /// Contains information used to update a meeting instance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class UpdateMeetingFromICalResponseUpdateMeetingFromICalResultUpdateMeetingFromICal
    {

        private AttendeeUpdateStatus attendeeUpdateStatusField;

        /// <summary>
        /// Information about a meeting instance newly added or updated
        /// </summary>
        public AttendeeUpdateStatus AttendeeUpdateStatus
        {
            get
            {
                return this.attendeeUpdateStatusField;
            }
            set
            {
                this.attendeeUpdateStatusField = value;
            }
        }
    }

    /// <summary>
    /// Represents response of attendee.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public enum AttendeeResponse
    {

        /// <summary>
        /// The attendee has accepted the meeting invitation.
        /// </summary>
        responseAccepted,

        /// <summary>
        /// The attendee has tentatively accepted the meeting invitation.
        /// </summary>
        responseTentative,

        /// <summary>
        /// The attendee has declined the meeting invitation.
        /// </summary>
        responseDeclined,
    }

    /// <summary>
    /// Contains information about meeting 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class GetMeetingsInformationResponseGetMeetingsInformationResult
    {

        private GetMeetingsInformationResponseGetMeetingsInformationResultMeetingsInformation meetingsInformationField;

        private string[] textField;

        /// <summary>
        /// The meeting information
        /// </summary>
        public GetMeetingsInformationResponseGetMeetingsInformationResultMeetingsInformation MeetingsInformation
        {
            get
            {
                return this.meetingsInformationField;
            }
            set
            {
                this.meetingsInformationField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string[] Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                this.textField = value;
            }
        }
    }

    /// <summary>
    /// Represent the meeting information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class GetMeetingsInformationResponseGetMeetingsInformationResultMeetingsInformation
    {

        private string allowCreateField;

        private string[] listTemplateLanguagesField;

        private Template[] listTemplatesField;

        private WorkspaceStatus workspaceStatusField;

        private string[] textField;

        /// <summary>
        /// Specifies whether the user has permission to create meeting workspaces on this subsite. 
        /// </summary>
        public string AllowCreate
        {
            get
            {
                return this.allowCreateField;
            }
            set
            {
                this.allowCreateField = value;
            }
        }

        /// <summary>
        /// Lists the site template languages supported. 
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute("LCID", IsNullable = false)]
        public string[] ListTemplateLanguages
        {
            get
            {
                return this.listTemplateLanguagesField;
            }
            set
            {
                this.listTemplateLanguagesField = value;
            }
        }

        /// <summary>
        /// The list of site templates supported. 
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
        public Template[] ListTemplates
        {
            get
            {
                return this.listTemplatesField;
            }
            set
            {
                this.listTemplatesField = value;
            }
        }

        /// <summary>
        /// The status of a workspace. 
        /// </summary>
        public WorkspaceStatus WorkspaceStatus
        {
            get
            {
                return this.workspaceStatusField;
            }
            set
            {
                this.workspaceStatusField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string[] Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                this.textField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void CreateWorkspaceCompletedEventHandler(object sender, CreateWorkspaceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateWorkspaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateWorkspaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public CreateWorkspaceResponseCreateWorkspaceResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((CreateWorkspaceResponseCreateWorkspaceResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void DeleteWorkspaceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetMeetingWorkspacesCompletedEventHandler(object sender, GetMeetingWorkspacesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMeetingWorkspacesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetMeetingWorkspacesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public GetMeetingWorkspacesResponseGetMeetingWorkspacesResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((GetMeetingWorkspacesResponseGetMeetingWorkspacesResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void SetWorkspaceTitleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void AddMeetingFromICalCompletedEventHandler(object sender, AddMeetingFromICalCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddMeetingFromICalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddMeetingFromICalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public AddMeetingFromICalResponseAddMeetingFromICalResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((AddMeetingFromICalResponseAddMeetingFromICalResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void AddMeetingCompletedEventHandler(object sender, AddMeetingCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddMeetingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddMeetingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public AddMeetingResponseAddMeetingResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((AddMeetingResponseAddMeetingResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void UpdateMeetingFromICalCompletedEventHandler(object sender, UpdateMeetingFromICalCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateMeetingFromICalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateMeetingFromICalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public UpdateMeetingFromICalResponseUpdateMeetingFromICalResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((UpdateMeetingFromICalResponseUpdateMeetingFromICalResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void UpdateMeetingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void RemoveMeetingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void SetAttendeeResponseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetMeetingsInformationCompletedEventHandler(object sender, GetMeetingsInformationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMeetingsInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetMeetingsInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public GetMeetingsInformationResponseGetMeetingsInformationResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((GetMeetingsInformationResponseGetMeetingsInformationResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void RestoreMeetingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}