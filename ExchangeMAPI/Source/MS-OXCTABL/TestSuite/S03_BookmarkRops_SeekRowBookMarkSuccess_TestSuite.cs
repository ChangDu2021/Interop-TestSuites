//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCTABL {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.6.100.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite : PtfTestClassBase {
        
        public S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "2000000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void RopSeekRowBookmarkResponseDelegate1(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount, bool rowNoLongerVisible);
        
        public delegate void RopQueryPositionResponseDelegate1(Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition, bool isRowCount);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        
        static System.Reflection.EventInfo RopSeekRowBookmarkResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopSeekRowBookmarkResponse");
        
        static System.Reflection.EventInfo RopQueryPositionResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopQueryPositionResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter IMS_OXCTABLAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCTABLAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter))));
            this.Manager.Subscribe(RopQueryPositionResponseInfo, this.IMS_OXCTABLAdapterInstance);
            this.Manager.Subscribe(RopSeekRowBookmarkResponseInfo, this.IMS_OXCTABLAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite() {
            this.Manager.BeginTest("MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp11 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp11 == 0)) {
                this.Manager.Comment("reaching state \'S8\'");
                goto label3;
            }
            if ((temp11 == 1)) {
                this.Manager.Comment("reaching state \'S9\'");
                this.Manager.Comment("executing step \'call InitializeTable(HIERARCHY_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(1)));
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S20\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp1;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp1 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R829");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp1, "return of RopSetColumns, state S24");
                this.Manager.Comment("reaching state \'S28\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp2;
                this.Manager.Comment("executing step \'call RopCreateBookmark()\'");
                temp2 = this.IMS_OXCTABLAdapterInstance.RopCreateBookmark();
                this.Manager.Checkpoint("MS-OXCTABL_R857");
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("checking step \'return RopCreateBookmark/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp2, "return of RopCreateBookmark, state S32");
                this.Manager.Comment("reaching state \'S36\'");
                bool temp3;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(872,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(872, out temp3);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                this.Manager.Comment("reaching state \'S40\'");
                int temp10 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteCheckRequirementEnabledChecker3)));
                if ((temp10 == 0)) {
                    this.Manager.Comment("reaching state \'S44\'");
                    bool temp4;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(761,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(761, out temp4);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp4);
                    this.Manager.Comment("reaching state \'S49\'");
                    int temp6 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteCheckRequirementEnabledChecker2)));
                    if ((temp6 == 0)) {
                        this.Manager.Comment("reaching state \'S54\'");
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp5;
                        this.Manager.Comment("executing step \'call RopSeekRowBookmark(True,True,True)\'");
                        temp5 = this.IMS_OXCTABLAdapterInstance.RopSeekRowBookmark(true, true, true);
                        this.Manager.Checkpoint("MS-OXCTABL_R852");
                        this.Manager.Checkpoint("MS-OXCTABL_R504");
                        this.Manager.Checkpoint("MS-OXCTABL_R522");
                        this.Manager.Comment("reaching state \'S61\'");
                        this.Manager.Comment("checking step \'return RopSeekRowBookmark/success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp5, "return of RopSeekRowBookmark, state S61");
                        this.Manager.Comment("reaching state \'S69\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopSeekRowBookmarkResponseInfo, null, new RopSeekRowBookmarkResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteRopSeekRowBookmarkResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S77\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopSeekRowBookmarkResponseInfo, null, new RopSeekRowBookmarkResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteRopSeekRowBookmarkResponseChecker)));
                        }
                        goto label0;
                    }
                    if ((temp6 == 1)) {
                        this.Manager.Comment("reaching state \'S55\'");
                        this.Manager.Assert(false, "reached non-accepting end state \'S55\'.");
                        goto label0;
                    }
                    throw new InvalidOperationException("never reached");
                label0:
;
                    goto label2;
                }
                if ((temp10 == 1)) {
                    this.Manager.Comment("reaching state \'S45\'");
                    bool temp7;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(761,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(761, out temp7);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp7);
                    this.Manager.Comment("reaching state \'S50\'");
                    int temp9 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteCheckRequirementEnabledChecker4)), new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteCheckRequirementEnabledChecker5)));
                    if ((temp9 == 0)) {
                        this.Manager.Comment("reaching state \'S56\'");
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp8;
                        this.Manager.Comment("executing step \'call RopSeekRowBookmark(True,True,True)\'");
                        temp8 = this.IMS_OXCTABLAdapterInstance.RopSeekRowBookmark(true, true, true);
                        this.Manager.Checkpoint("MS-OXCTABL_R852");
                        this.Manager.Checkpoint("MS-OXCTABL_R761");
                        this.Manager.Checkpoint("MS-OXCTABL_R504");
                        this.Manager.Checkpoint("MS-OXCTABL_R522");
                        this.Manager.Comment("reaching state \'S62\'");
                        this.Manager.Comment("checking step \'return RopSeekRowBookmark/success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp8, "return of RopSeekRowBookmark, state S62");
                        this.Manager.Comment("reaching state \'S70\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopSeekRowBookmarkResponseInfo, null, new RopSeekRowBookmarkResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteRopSeekRowBookmarkResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S78\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopSeekRowBookmarkResponseInfo, null, new RopSeekRowBookmarkResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteRopSeekRowBookmarkResponseChecker1)));
                        }
                        goto label1;
                    }
                    if ((temp9 == 1)) {
                        this.Manager.Comment("reaching state \'S57\'");
                        this.Manager.Assert(false, "reached non-accepting end state \'S57\'.");
                        goto label1;
                    }
                    throw new InvalidOperationException("never reached");
                label1:
;
                    goto label2;
                }
                throw new InvalidOperationException("never reached");
            label2:
;
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S40");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S49");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteRopSeekRowBookmarkResponseChecker(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount, bool rowNoLongerVisible) {
            this.Manager.Comment("checking step \'event RopSeekRowBookmarkResponse(True,True,False,True,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowBookmarkResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowBookmarkResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowBookmarkResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowBookmarkResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopSeekRowBookmarkResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R178, MS-OXCTABL_R503, MS-OXCTABL_R188, M" +
                        "S-OXCTABL_R166, MS-OXCTABL_R190, MS-OXCTABL_R183");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R178");
            this.Manager.Checkpoint("MS-OXCTABL_R503");
            this.Manager.Checkpoint("MS-OXCTABL_R188");
            this.Manager.Checkpoint("MS-OXCTABL_R166");
            this.Manager.Checkpoint("MS-OXCTABL_R190");
            this.Manager.Checkpoint("MS-OXCTABL_R183");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S49");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S40");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S50");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteRopSeekRowBookmarkResponseChecker1(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount, bool rowNoLongerVisible) {
            this.Manager.Comment("checking step \'event RopSeekRowBookmarkResponse(True,True,False,True,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowBookmarkResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowBookmarkResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowBookmarkResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowBookmarkResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopSeekRowBookmarkResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R178, MS-OXCTABL_R503, MS-OXCTABL_R188, M" +
                        "S-OXCTABL_R166, MS-OXCTABL_R190, MS-OXCTABL_R183");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R178");
            this.Manager.Checkpoint("MS-OXCTABL_R503");
            this.Manager.Checkpoint("MS-OXCTABL_R188");
            this.Manager.Checkpoint("MS-OXCTABL_R166");
            this.Manager.Checkpoint("MS-OXCTABL_R190");
            this.Manager.Checkpoint("MS-OXCTABL_R183");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S50");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1() {
            this.Manager.BeginTest("MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp12;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp12);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp12);
            this.Manager.Comment("reaching state \'S3\'");
            int temp25 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp25 == 0)) {
                this.Manager.Comment("reaching state \'S10\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S17\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S21\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp13;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp13 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S25\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp13, "return of RopSetColumns, state S25");
                this.Manager.Comment("reaching state \'S29\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp14;
                this.Manager.Comment("executing step \'call RopQueryPosition()\'");
                temp14 = this.IMS_OXCTABLAdapterInstance.RopQueryPosition();
                this.Manager.Checkpoint("MS-OXCTABL_R846");
                this.Manager.Comment("reaching state \'S33\'");
                this.Manager.Comment("checking step \'return RopQueryPosition/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp14, "return of RopQueryPosition, state S33");
                this.Manager.Comment("reaching state \'S37\'");
                int temp24 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1RopQueryPositionResponseChecker)), new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1RopQueryPositionResponseChecker1)), new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1RopQueryPositionResponseChecker2)));
                if ((temp24 == 0)) {
                    S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS41();
                    goto label7;
                }
                if ((temp24 == 1)) {
                    S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS41();
                    goto label7;
                }
                if ((temp24 == 2)) {
                    S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS41();
                    goto label7;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1RopQueryPositionResponseChecker)), new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1RopQueryPositionResponseChecker1)), new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1RopQueryPositionResponseChecker2)));
            label7:
;
                goto label8;
            }
            if ((temp25 == 1)) {
                this.Manager.Comment("reaching state \'S11\'");
                goto label8;
            }
            throw new InvalidOperationException("never reached");
        label8:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1RopQueryPositionResponseChecker(Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition, bool isRowCount) {
            this.Manager.Comment("checking step \'event RopQueryPositionResponse(CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopQueryPositionResponse, state S37");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRowCount, "isRowCount of RopQueryPositionResponse, state S37");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R491");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R491");
        }
        
        private void S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS41() {
            this.Manager.Comment("reaching state \'S41\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp15;
            this.Manager.Comment("executing step \'call RopCreateBookmark()\'");
            temp15 = this.IMS_OXCTABLAdapterInstance.RopCreateBookmark();
            this.Manager.Checkpoint("MS-OXCTABL_R526");
            this.Manager.Comment("reaching state \'S46\'");
            this.Manager.Comment("checking step \'return RopCreateBookmark/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp15, "return of RopCreateBookmark, state S46");
            this.Manager.Comment("reaching state \'S51\'");
            bool temp16;
            this.Manager.Comment("executing step \'call CheckRequirementEnabled(872,out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(872, out temp16);
            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp16);
            this.Manager.Comment("reaching state \'S58\'");
            int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1CheckRequirementEnabledChecker)), new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1CheckRequirementEnabledChecker3)));
            if ((temp23 == 0)) {
                this.Manager.Comment("reaching state \'S63\'");
                bool temp17;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(761,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(761, out temp17);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp17);
                this.Manager.Comment("reaching state \'S71\'");
                int temp19 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1CheckRequirementEnabledChecker1)), new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1CheckRequirementEnabledChecker2)));
                if ((temp19 == 0)) {
                    this.Manager.Comment("reaching state \'S79\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp18;
                    this.Manager.Comment("executing step \'call RopSeekRowBookmark(True,True,True)\'");
                    temp18 = this.IMS_OXCTABLAdapterInstance.RopSeekRowBookmark(true, true, true);
                    this.Manager.Checkpoint("MS-OXCTABL_R508");
                    this.Manager.Checkpoint("MS-OXCTABL_R504");
                    this.Manager.Checkpoint("MS-OXCTABL_R522");
                    this.Manager.Comment("reaching state \'S91\'");
                    this.Manager.Comment("checking step \'return RopSeekRowBookmark/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp18, "return of RopSeekRowBookmark, state S91");
                    this.Manager.Comment("reaching state \'S97\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopSeekRowBookmarkResponseInfo, null, new RopSeekRowBookmarkResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1RopSeekRowBookmarkResponseChecker))) != -1)) {
                        S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS103();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopSeekRowBookmarkResponseInfo, null, new RopSeekRowBookmarkResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1RopSeekRowBookmarkResponseChecker)));
                    }
                    goto label4;
                }
                if ((temp19 == 1)) {
                    this.Manager.Comment("reaching state \'S80\'");
                    this.Manager.Assert(false, "reached non-accepting end state \'S80\'.");
                    goto label4;
                }
                throw new InvalidOperationException("never reached");
            label4:
;
                goto label6;
            }
            if ((temp23 == 1)) {
                this.Manager.Comment("reaching state \'S64\'");
                bool temp20;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(761,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(761, out temp20);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp20);
                this.Manager.Comment("reaching state \'S72\'");
                int temp22 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1CheckRequirementEnabledChecker4)), new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1CheckRequirementEnabledChecker5)));
                if ((temp22 == 0)) {
                    this.Manager.Comment("reaching state \'S81\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp21;
                    this.Manager.Comment("executing step \'call RopSeekRowBookmark(True,True,True)\'");
                    temp21 = this.IMS_OXCTABLAdapterInstance.RopSeekRowBookmark(true, true, true);
                    this.Manager.Checkpoint("MS-OXCTABL_R508");
                    this.Manager.Checkpoint("MS-OXCTABL_R761");
                    this.Manager.Checkpoint("MS-OXCTABL_R504");
                    this.Manager.Checkpoint("MS-OXCTABL_R522");
                    this.Manager.Comment("reaching state \'S92\'");
                    this.Manager.Comment("checking step \'return RopSeekRowBookmark/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp21, "return of RopSeekRowBookmark, state S92");
                    this.Manager.Comment("reaching state \'S98\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopSeekRowBookmarkResponseInfo, null, new RopSeekRowBookmarkResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1RopSeekRowBookmarkResponseChecker1))) != -1)) {
                        S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS104();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopSeekRowBookmarkResponseInfo, null, new RopSeekRowBookmarkResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1RopSeekRowBookmarkResponseChecker1)));
                    }
                    goto label5;
                }
                if ((temp22 == 1)) {
                    this.Manager.Comment("reaching state \'S82\'");
                    this.Manager.Assert(false, "reached non-accepting end state \'S82\'.");
                    goto label5;
                }
                throw new InvalidOperationException("never reached");
            label5:
;
                goto label6;
            }
            throw new InvalidOperationException("never reached");
        label6:
;
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S58");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S71");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1RopSeekRowBookmarkResponseChecker(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount, bool rowNoLongerVisible) {
            this.Manager.Comment("checking step \'event RopSeekRowBookmarkResponse(True,True,False,True,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowBookmarkResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowBookmarkResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowBookmarkResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowBookmarkResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopSeekRowBookmarkResponse, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R178, MS-OXCTABL_R503, MS-OXCTABL_R188, M" +
                        "S-OXCTABL_R166, MS-OXCTABL_R190, MS-OXCTABL_R183");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R178");
            this.Manager.Checkpoint("MS-OXCTABL_R503");
            this.Manager.Checkpoint("MS-OXCTABL_R188");
            this.Manager.Checkpoint("MS-OXCTABL_R166");
            this.Manager.Checkpoint("MS-OXCTABL_R190");
            this.Manager.Checkpoint("MS-OXCTABL_R183");
        }
        
        private void S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS103() {
            this.Manager.Comment("reaching state \'S103\'");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S71");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S58");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S72");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1RopSeekRowBookmarkResponseChecker1(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount, bool rowNoLongerVisible) {
            this.Manager.Comment("checking step \'event RopSeekRowBookmarkResponse(True,True,False,True,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowBookmarkResponse, state S98");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowBookmarkResponse, state S98");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowBookmarkResponse, state S98");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowBookmarkResponse, state S98");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopSeekRowBookmarkResponse, state S98");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R178, MS-OXCTABL_R503, MS-OXCTABL_R188, M" +
                        "S-OXCTABL_R166, MS-OXCTABL_R190, MS-OXCTABL_R183");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R178");
            this.Manager.Checkpoint("MS-OXCTABL_R503");
            this.Manager.Checkpoint("MS-OXCTABL_R188");
            this.Manager.Checkpoint("MS-OXCTABL_R166");
            this.Manager.Checkpoint("MS-OXCTABL_R190");
            this.Manager.Checkpoint("MS-OXCTABL_R183");
        }
        
        private void S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS104() {
            this.Manager.Comment("reaching state \'S104\'");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S72");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1RopQueryPositionResponseChecker1(Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition, bool isRowCount) {
            this.Manager.Comment("checking step \'event RopQueryPositionResponse(BEGIN,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopQueryPositionResponse, state S37");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRowCount, "isRowCount of RopQueryPositionResponse, state S37");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R491");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R491");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1RopQueryPositionResponseChecker2(Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition, bool isRowCount) {
            this.Manager.Comment("checking step \'event RopQueryPositionResponse(END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopQueryPositionResponse, state S37");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRowCount, "isRowCount of RopQueryPositionResponse, state S37");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R491");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R491");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2() {
            this.Manager.BeginTest("MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp26;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp26);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp26);
            this.Manager.Comment("reaching state \'S5\'");
            int temp39 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp39 == 0)) {
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S22\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp27;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp27 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp27, "return of RopSetColumns, state S26");
                this.Manager.Comment("reaching state \'S30\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp28;
                this.Manager.Comment("executing step \'call RopQueryPosition()\'");
                temp28 = this.IMS_OXCTABLAdapterInstance.RopQueryPosition();
                this.Manager.Checkpoint("MS-OXCTABL_R846");
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("checking step \'return RopQueryPosition/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp28, "return of RopQueryPosition, state S34");
                this.Manager.Comment("reaching state \'S38\'");
                int temp38 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2RopQueryPositionResponseChecker)), new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2RopQueryPositionResponseChecker1)), new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2RopQueryPositionResponseChecker2)));
                if ((temp38 == 0)) {
                    S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS42();
                    goto label12;
                }
                if ((temp38 == 1)) {
                    S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS42();
                    goto label12;
                }
                if ((temp38 == 2)) {
                    S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS42();
                    goto label12;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2RopQueryPositionResponseChecker)), new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2RopQueryPositionResponseChecker1)), new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2RopQueryPositionResponseChecker2)));
            label12:
;
                goto label13;
            }
            if ((temp39 == 1)) {
                this.Manager.Comment("reaching state \'S13\'");
                goto label13;
            }
            throw new InvalidOperationException("never reached");
        label13:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2RopQueryPositionResponseChecker(Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition, bool isRowCount) {
            this.Manager.Comment("checking step \'event RopQueryPositionResponse(CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopQueryPositionResponse, state S38");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRowCount, "isRowCount of RopQueryPositionResponse, state S38");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R491");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R491");
        }
        
        private void S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS42() {
            this.Manager.Comment("reaching state \'S42\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp29;
            this.Manager.Comment("executing step \'call RopCreateBookmark()\'");
            temp29 = this.IMS_OXCTABLAdapterInstance.RopCreateBookmark();
            this.Manager.Checkpoint("MS-OXCTABL_R526");
            this.Manager.Comment("reaching state \'S47\'");
            this.Manager.Comment("checking step \'return RopCreateBookmark/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp29, "return of RopCreateBookmark, state S47");
            this.Manager.Comment("reaching state \'S52\'");
            bool temp30;
            this.Manager.Comment("executing step \'call CheckRequirementEnabled(872,out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(872, out temp30);
            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp30);
            this.Manager.Comment("reaching state \'S59\'");
            int temp37 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2CheckRequirementEnabledChecker)), new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2CheckRequirementEnabledChecker3)));
            if ((temp37 == 0)) {
                this.Manager.Comment("reaching state \'S65\'");
                bool temp31;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(761,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(761, out temp31);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp31);
                this.Manager.Comment("reaching state \'S73\'");
                int temp33 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2CheckRequirementEnabledChecker1)), new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2CheckRequirementEnabledChecker2)));
                if ((temp33 == 0)) {
                    this.Manager.Comment("reaching state \'S83\'");
                    this.Manager.Assert(false, "reached non-accepting end state \'S83\'.");
                    goto label9;
                }
                if ((temp33 == 1)) {
                    this.Manager.Comment("reaching state \'S84\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp32;
                    this.Manager.Comment("executing step \'call RopSeekRowBookmark(True,True,False)\'");
                    temp32 = this.IMS_OXCTABLAdapterInstance.RopSeekRowBookmark(true, true, false);
                    this.Manager.Checkpoint("MS-OXCTABL_R508");
                    this.Manager.Checkpoint("MS-OXCTABL_R504");
                    this.Manager.Checkpoint("MS-OXCTABL_R522");
                    this.Manager.Comment("reaching state \'S93\'");
                    this.Manager.Comment("checking step \'return RopSeekRowBookmark/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp32, "return of RopSeekRowBookmark, state S93");
                    this.Manager.Comment("reaching state \'S99\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopSeekRowBookmarkResponseInfo, null, new RopSeekRowBookmarkResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2RopSeekRowBookmarkResponseChecker))) != -1)) {
                        S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS103();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopSeekRowBookmarkResponseInfo, null, new RopSeekRowBookmarkResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2RopSeekRowBookmarkResponseChecker)));
                    }
                    goto label9;
                }
                throw new InvalidOperationException("never reached");
            label9:
;
                goto label11;
            }
            if ((temp37 == 1)) {
                this.Manager.Comment("reaching state \'S66\'");
                bool temp34;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(761,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(761, out temp34);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp34);
                this.Manager.Comment("reaching state \'S74\'");
                int temp36 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2CheckRequirementEnabledChecker4)), new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2CheckRequirementEnabledChecker5)));
                if ((temp36 == 0)) {
                    this.Manager.Comment("reaching state \'S85\'");
                    this.Manager.Assert(false, "reached non-accepting end state \'S85\'.");
                    goto label10;
                }
                if ((temp36 == 1)) {
                    this.Manager.Comment("reaching state \'S86\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp35;
                    this.Manager.Comment("executing step \'call RopSeekRowBookmark(True,True,False)\'");
                    temp35 = this.IMS_OXCTABLAdapterInstance.RopSeekRowBookmark(true, true, false);
                    this.Manager.Checkpoint("MS-OXCTABL_R508");
                    this.Manager.Checkpoint("MS-OXCTABL_R761");
                    this.Manager.Checkpoint("MS-OXCTABL_R504");
                    this.Manager.Checkpoint("MS-OXCTABL_R522");
                    this.Manager.Comment("reaching state \'S94\'");
                    this.Manager.Comment("checking step \'return RopSeekRowBookmark/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp35, "return of RopSeekRowBookmark, state S94");
                    this.Manager.Comment("reaching state \'S100\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopSeekRowBookmarkResponseInfo, null, new RopSeekRowBookmarkResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2RopSeekRowBookmarkResponseChecker1))) != -1)) {
                        S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS104();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopSeekRowBookmarkResponseInfo, null, new RopSeekRowBookmarkResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2RopSeekRowBookmarkResponseChecker1)));
                    }
                    goto label10;
                }
                throw new InvalidOperationException("never reached");
            label10:
;
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S59");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S73");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S73");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2RopSeekRowBookmarkResponseChecker(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount, bool rowNoLongerVisible) {
            this.Manager.Comment("checking step \'event RopSeekRowBookmarkResponse(True,False,True,True,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowBookmarkResponse, state S99");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowBookmarkResponse, state S99");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowBookmarkResponse, state S99");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowBookmarkResponse, state S99");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopSeekRowBookmarkResponse, state S99");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R180, MS-OXCTABL_R187, MS-OXCTABL_R183");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R180");
            this.Manager.Checkpoint("MS-OXCTABL_R187");
            this.Manager.Checkpoint("MS-OXCTABL_R183");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S59");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S74");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S74");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2RopSeekRowBookmarkResponseChecker1(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount, bool rowNoLongerVisible) {
            this.Manager.Comment("checking step \'event RopSeekRowBookmarkResponse(True,False,True,True,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowBookmarkResponse, state S100");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowBookmarkResponse, state S100");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowBookmarkResponse, state S100");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowBookmarkResponse, state S100");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopSeekRowBookmarkResponse, state S100");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R180, MS-OXCTABL_R187, MS-OXCTABL_R183");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R180");
            this.Manager.Checkpoint("MS-OXCTABL_R187");
            this.Manager.Checkpoint("MS-OXCTABL_R183");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2RopQueryPositionResponseChecker1(Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition, bool isRowCount) {
            this.Manager.Comment("checking step \'event RopQueryPositionResponse(BEGIN,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopQueryPositionResponse, state S38");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRowCount, "isRowCount of RopQueryPositionResponse, state S38");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R491");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R491");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2RopQueryPositionResponseChecker2(Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition, bool isRowCount) {
            this.Manager.Comment("checking step \'event RopQueryPositionResponse(END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopQueryPositionResponse, state S38");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRowCount, "isRowCount of RopQueryPositionResponse, state S38");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R491");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R491");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3() {
            this.Manager.BeginTest("MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3");
            this.Manager.Comment("reaching state \'S6\'");
            bool temp40;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp40);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp40);
            this.Manager.Comment("reaching state \'S7\'");
            int temp53 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp53 == 0)) {
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S19\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S23\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp41;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp41 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp41, "return of RopSetColumns, state S27");
                this.Manager.Comment("reaching state \'S31\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp42;
                this.Manager.Comment("executing step \'call RopQueryPosition()\'");
                temp42 = this.IMS_OXCTABLAdapterInstance.RopQueryPosition();
                this.Manager.Checkpoint("MS-OXCTABL_R846");
                this.Manager.Comment("reaching state \'S35\'");
                this.Manager.Comment("checking step \'return RopQueryPosition/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp42, "return of RopQueryPosition, state S35");
                this.Manager.Comment("reaching state \'S39\'");
                int temp52 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3RopQueryPositionResponseChecker)), new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3RopQueryPositionResponseChecker1)), new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3RopQueryPositionResponseChecker2)));
                if ((temp52 == 0)) {
                    S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS42();
                    goto label17;
                }
                if ((temp52 == 1)) {
                    S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS43();
                    goto label17;
                }
                if ((temp52 == 2)) {
                    S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS43();
                    goto label17;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3RopQueryPositionResponseChecker)), new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3RopQueryPositionResponseChecker1)), new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3RopQueryPositionResponseChecker2)));
            label17:
;
                goto label18;
            }
            if ((temp53 == 1)) {
                this.Manager.Comment("reaching state \'S15\'");
                goto label18;
            }
            throw new InvalidOperationException("never reached");
        label18:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3RopQueryPositionResponseChecker(Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition, bool isRowCount) {
            this.Manager.Comment("checking step \'event RopQueryPositionResponse(END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopQueryPositionResponse, state S39");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRowCount, "isRowCount of RopQueryPositionResponse, state S39");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R491");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R491");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3RopQueryPositionResponseChecker1(Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition, bool isRowCount) {
            this.Manager.Comment("checking step \'event RopQueryPositionResponse(CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopQueryPositionResponse, state S39");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRowCount, "isRowCount of RopQueryPositionResponse, state S39");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R491");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R491");
        }
        
        private void S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS43() {
            this.Manager.Comment("reaching state \'S43\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp43;
            this.Manager.Comment("executing step \'call RopCreateBookmark()\'");
            temp43 = this.IMS_OXCTABLAdapterInstance.RopCreateBookmark();
            this.Manager.Checkpoint("MS-OXCTABL_R526");
            this.Manager.Comment("reaching state \'S48\'");
            this.Manager.Comment("checking step \'return RopCreateBookmark/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp43, "return of RopCreateBookmark, state S48");
            this.Manager.Comment("reaching state \'S53\'");
            bool temp44;
            this.Manager.Comment("executing step \'call CheckRequirementEnabled(872,out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(872, out temp44);
            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp44);
            this.Manager.Comment("reaching state \'S60\'");
            int temp51 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3CheckRequirementEnabledChecker)), new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3CheckRequirementEnabledChecker3)));
            if ((temp51 == 0)) {
                this.Manager.Comment("reaching state \'S67\'");
                bool temp45;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(761,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(761, out temp45);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp45);
                this.Manager.Comment("reaching state \'S75\'");
                int temp47 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3CheckRequirementEnabledChecker1)), new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3CheckRequirementEnabledChecker2)));
                if ((temp47 == 0)) {
                    this.Manager.Comment("reaching state \'S87\'");
                    this.Manager.Assert(false, "reached non-accepting end state \'S87\'.");
                    goto label14;
                }
                if ((temp47 == 1)) {
                    this.Manager.Comment("reaching state \'S88\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp46;
                    this.Manager.Comment("executing step \'call RopSeekRowBookmark(False,True,False)\'");
                    temp46 = this.IMS_OXCTABLAdapterInstance.RopSeekRowBookmark(false, true, false);
                    this.Manager.Checkpoint("MS-OXCTABL_R508");
                    this.Manager.Checkpoint("MS-OXCTABL_R504");
                    this.Manager.Checkpoint("MS-OXCTABL_R522");
                    this.Manager.Comment("reaching state \'S95\'");
                    this.Manager.Comment("checking step \'return RopSeekRowBookmark/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp46, "return of RopSeekRowBookmark, state S95");
                    this.Manager.Comment("reaching state \'S101\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopSeekRowBookmarkResponseInfo, null, new RopSeekRowBookmarkResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3RopSeekRowBookmarkResponseChecker))) != -1)) {
                        S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS103();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopSeekRowBookmarkResponseInfo, null, new RopSeekRowBookmarkResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3RopSeekRowBookmarkResponseChecker)));
                    }
                    goto label14;
                }
                throw new InvalidOperationException("never reached");
            label14:
;
                goto label16;
            }
            if ((temp51 == 1)) {
                this.Manager.Comment("reaching state \'S68\'");
                bool temp48;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(761,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(761, out temp48);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp48);
                this.Manager.Comment("reaching state \'S76\'");
                int temp50 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3CheckRequirementEnabledChecker4)), new ExpectedReturn(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3CheckRequirementEnabledChecker5)));
                if ((temp50 == 0)) {
                    this.Manager.Comment("reaching state \'S89\'");
                    this.Manager.Assert(false, "reached non-accepting end state \'S89\'.");
                    goto label15;
                }
                if ((temp50 == 1)) {
                    this.Manager.Comment("reaching state \'S90\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp49;
                    this.Manager.Comment("executing step \'call RopSeekRowBookmark(False,True,False)\'");
                    temp49 = this.IMS_OXCTABLAdapterInstance.RopSeekRowBookmark(false, true, false);
                    this.Manager.Checkpoint("MS-OXCTABL_R508");
                    this.Manager.Checkpoint("MS-OXCTABL_R761");
                    this.Manager.Checkpoint("MS-OXCTABL_R504");
                    this.Manager.Checkpoint("MS-OXCTABL_R522");
                    this.Manager.Comment("reaching state \'S96\'");
                    this.Manager.Comment("checking step \'return RopSeekRowBookmark/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp49, "return of RopSeekRowBookmark, state S96");
                    this.Manager.Comment("reaching state \'S102\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopSeekRowBookmarkResponseInfo, null, new RopSeekRowBookmarkResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3RopSeekRowBookmarkResponseChecker1))) != -1)) {
                        S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuiteS104();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite.RopSeekRowBookmarkResponseInfo, null, new RopSeekRowBookmarkResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3RopSeekRowBookmarkResponseChecker1)));
                    }
                    goto label15;
                }
                throw new InvalidOperationException("never reached");
            label15:
;
                goto label16;
            }
            throw new InvalidOperationException("never reached");
        label16:
;
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S60");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S75");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S75");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3RopSeekRowBookmarkResponseChecker(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount, bool rowNoLongerVisible) {
            this.Manager.Comment("checking step \'event RopSeekRowBookmarkResponse(True,False,True,True,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowBookmarkResponse, state S101");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowBookmarkResponse, state S101");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowBookmarkResponse, state S101");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowBookmarkResponse, state S101");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopSeekRowBookmarkResponse, state S101");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R180, MS-OXCTABL_R187, MS-OXCTABL_R183");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R180");
            this.Manager.Checkpoint("MS-OXCTABL_R187");
            this.Manager.Checkpoint("MS-OXCTABL_R183");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S60");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S76");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S76");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3RopSeekRowBookmarkResponseChecker1(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount, bool rowNoLongerVisible) {
            this.Manager.Comment("checking step \'event RopSeekRowBookmarkResponse(True,False,True,True,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowBookmarkResponse, state S102");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowBookmarkResponse, state S102");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowBookmarkResponse, state S102");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowBookmarkResponse, state S102");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopSeekRowBookmarkResponse, state S102");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R180, MS-OXCTABL_R187, MS-OXCTABL_R183");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R180");
            this.Manager.Checkpoint("MS-OXCTABL_R187");
            this.Manager.Checkpoint("MS-OXCTABL_R183");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3RopQueryPositionResponseChecker2(Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition, bool isRowCount) {
            this.Manager.Comment("checking step \'event RopQueryPositionResponse(BEGIN,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopQueryPositionResponse, state S39");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRowCount, "isRowCount of RopQueryPositionResponse, state S39");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R491");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R491");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowBookMarkSuccess_TestSuite3CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        #endregion
    }
}