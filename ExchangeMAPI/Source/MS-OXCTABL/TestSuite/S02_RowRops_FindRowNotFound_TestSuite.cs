//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCTABL {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S02_RowRops_FindRowNotFound_TestSuite : PtfTestClassBase {
        
        public S02_RowRops_FindRowNotFound_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "2000000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
              
        public delegate void RopFindRowResponseDelegate1(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData);
 
        public delegate void RopQueryRowsResponseDelegate1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger);
        
        public delegate void RopQueryPositionResponseDelegate1(Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition, bool isRowCount);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.EventInfo RopQueryPositionResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopQueryPositionResponse");
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        
        static System.Reflection.EventInfo RopQueryRowsResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopQueryRowsResponse");
        
        static System.Reflection.EventInfo RopFindRowResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopFindRowResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter IMS_OXCTABLAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCTABLAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter))));
            this.Manager.Subscribe(RopFindRowResponseInfo, this.IMS_OXCTABLAdapterInstance);
            this.Manager.Subscribe(RopQueryPositionResponseInfo, this.IMS_OXCTABLAdapterInstance);
            this.Manager.Subscribe(RopQueryRowsResponseInfo, this.IMS_OXCTABLAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuite() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp56 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp56 == 0)) {
                this.Manager.Comment("reaching state \'S2\'");
                goto label21;
            }
            if ((temp56 == 1)) {
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S5\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp1;
                this.Manager.Comment("executing step \'call RopQueryPosition()\'");
                temp1 = this.IMS_OXCTABLAdapterInstance.RopQueryPosition();
                this.Manager.Checkpoint("MS-OXCTABL_R846");
                this.Manager.Comment("reaching state \'S6\'");
                this.Manager.Comment("checking step \'return RopQueryPosition/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp1, "return of RopQueryPosition, state S6");
                this.Manager.Comment("reaching state \'S7\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopQueryPositionResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S8\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp2;
                    this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                    temp2 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
					this.Manager.Checkpoint("MS-OXCTABL_R831");
                    this.Manager.Checkpoint("MS-OXCTABL_R45");
                    this.Manager.Comment("reaching state \'S9\'");
                    this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp2, "return of RopSetColumns, state S9");
                    this.Manager.Comment("reaching state \'S10\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp3;
                    this.Manager.Comment("executing step \'call RopCreateBookmark()\'");
                    temp3 = this.IMS_OXCTABLAdapterInstance.RopCreateBookmark();
                    this.Manager.Checkpoint("MS-OXCTABL_R526");
                    this.Manager.Comment("reaching state \'S11\'");
                    this.Manager.Comment("checking step \'return RopCreateBookmark/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp3, "return of RopCreateBookmark, state S11");
                    this.Manager.Comment("reaching state \'S12\'");
                    bool temp4;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp4);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp4);
                    this.Manager.Comment("reaching state \'S13\'");
                    int temp55 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker21)));
                    if ((temp55 == 0)) {
                        this.Manager.Comment("reaching state \'S14\'");
                        bool temp5;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp5);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp5);
                        this.Manager.Comment("reaching state \'S16\'");
                        int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker18)));
                        if ((temp29 == 0)) {
                            this.Manager.Comment("reaching state \'S18\'");
                            bool temp6;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp6);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp6);
                            this.Manager.Comment("reaching state \'S22\'");
                            int temp26 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker17)));
                            if ((temp26 == 0)) {
                                this.Manager.Comment("reaching state \'S26\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp7;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp7 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S84\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp7, "return of RopQueryRows, state S84");
                                this.Manager.Comment("reaching state \'S100\'");
                                bool temp8;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp8);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp8);
                                this.Manager.Comment("reaching state \'S38\'");
                                int temp25 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker3)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker10)));
                                if ((temp25 == 0)) {
                                    this.Manager.Comment("reaching state \'S40\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopQueryRowsResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S44\'");
                                        bool temp9;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp9);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp9);
                                        this.Manager.Comment("reaching state \'S48\'");
                                        int temp16 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker4)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker7)));
                                        if ((temp16 == 0)) {
                                            this.Manager.Comment("reaching state \'S52\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp10;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_END,True)\'");
                                            temp10 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, true);
 											this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S60\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/ecNotFound\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp10, "return of RopFindRow, state S60");
                                            this.Manager.Comment("reaching state \'S68\'");
                                            bool temp11;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp11);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp11);
                                            this.Manager.Comment("reaching state \'S76\'");
                                            int temp12 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker5)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker6)));
                                            if ((temp12 == 0)) {
                                                this.Manager.Comment("reaching state \'S84\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S100\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker)));
                                                }
                                                goto label0;
                                            }
                                            if ((temp12 == 1)) {
                                                this.Manager.Comment("reaching state \'S85\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker1))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S101\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker1)));
                                                }
                                                goto label0;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label0:
;
                                            goto label2;
                                        }
                                        if ((temp16 == 1)) {
                                            this.Manager.Comment("reaching state \'S53\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp13;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_END,True)\'");
                                            temp13 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S61\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/unexpected\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.unexpected, temp13, "return of RopFindRow, state S61");
                                            this.Manager.Comment("reaching state \'S69\'");
                                            bool temp14;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp14);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp14);
                                            this.Manager.Comment("reaching state \'S77\'");
                                            int temp15 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker8)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker9)));
                                            if ((temp15 == 0)) {
                                                this.Manager.Comment("reaching state \'S86\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker2))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S102\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker2)));
                                                }
                                                goto label1;
                                            }
                                            if ((temp15 == 1)) {
                                                this.Manager.Comment("reaching state \'S87\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker3))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S103\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker3)));
                                                }
                                                goto label1;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label1:
;
                                            goto label2;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label2:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopQueryRowsResponseChecker)));
                                    }
                                    goto label6;
                                }
                                if ((temp25 == 1)) {
                                    this.Manager.Comment("reaching state \'S41\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopQueryRowsResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S45\'");
                                        bool temp17;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp17);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp17);
                                        this.Manager.Comment("reaching state \'S49\'");
                                        int temp24 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker11)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker14)));
                                        if ((temp24 == 0)) {
                                            this.Manager.Comment("reaching state \'S54\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp18;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_END,True)\'");
                                            temp18 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S62\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/ecNotFound\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp18, "return of RopFindRow, state S62");
                                            this.Manager.Comment("reaching state \'S70\'");
                                            bool temp19;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp19);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp19);
                                            this.Manager.Comment("reaching state \'S78\'");
                                            int temp20 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker12)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker13)));
                                            if ((temp20 == 0)) {
                                                this.Manager.Comment("reaching state \'S88\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker4))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S104\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker4)));
                                                }
                                                goto label3;
                                            }
                                            if ((temp20 == 1)) {
                                                this.Manager.Comment("reaching state \'S89\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker5))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S105\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker5)));
                                                }
                                                goto label3;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label3:
;
                                            goto label5;
                                        }
                                        if ((temp24 == 1)) {
                                            this.Manager.Comment("reaching state \'S55\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp21;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_END,True)\'");
                                            temp21 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S63\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/unexpected\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.unexpected, temp21, "return of RopFindRow, state S63");
                                            this.Manager.Comment("reaching state \'S71\'");
                                            bool temp22;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp22);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp22);
                                            this.Manager.Comment("reaching state \'S79\'");
                                            int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker15)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker16)));
                                            if ((temp23 == 0)) {
                                                this.Manager.Comment("reaching state \'S90\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker6))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S106\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker6)));
                                                }
                                                goto label4;
                                            }
                                            if ((temp23 == 1)) {
                                                this.Manager.Comment("reaching state \'S91\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker7))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S107\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker7)));
                                                }
                                                goto label4;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label4:
;
                                            goto label5;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label5:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopQueryRowsResponseChecker1)));
                                    }
                                    goto label6;
                                }
                                throw new InvalidOperationException("never reached");
                            label6:
;
                                goto label7;
                            }
                            if ((temp26 == 1)) {
                                this.Manager.Comment("reaching state \'S27\'");
                                this.Manager.Assert(false, "reached non-accepting end state \'S27\'.");
                                goto label7;
                            }
                            throw new InvalidOperationException("never reached");
                        label7:
;
                            goto label9;
                        }
                        if ((temp29 == 1)) {
                            this.Manager.Comment("reaching state \'S19\'");
                            bool temp27;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp27);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp27);
                            this.Manager.Comment("reaching state \'S23\'");
                            int temp28 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker19)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker20)));
                            if ((temp28 == 0)) {
                                this.Manager.Comment("reaching state \'S28\'");
                                this.Manager.Assert(false, "reached non-accepting end state \'S28\'.");
                                goto label8;
                            }
                            if ((temp28 == 1)) {
                                this.Manager.Comment("reaching state \'S29\'");
                                this.Manager.Assert(false, "reached non-accepting end state \'S29\'.");
                                goto label8;
                            }
                            throw new InvalidOperationException("never reached");
                        label8:
;
                            goto label9;
                        }
                        throw new InvalidOperationException("never reached");
                    label9:
;
                        goto label20;
                    }
                    if ((temp55 == 1)) {
                        this.Manager.Comment("reaching state \'S15\'");
                        bool temp30;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp30);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp30);
                        this.Manager.Comment("reaching state \'S17\'");
                        int temp54 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker22)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker39)));
                        if ((temp54 == 0)) {
                            this.Manager.Comment("reaching state \'S20\'");
                            bool temp31;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp31);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp31);
                            this.Manager.Comment("reaching state \'S24\'");
                            int temp51 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker23)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker38)));
                            if ((temp51 == 0)) {
                                this.Manager.Comment("reaching state \'S30\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp32;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp32 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S35\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/unexpected\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.unexpected, temp32, "return of RopQueryRows, state S35");
                                this.Manager.Comment("reaching state \'S37\'");
                                bool temp33;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp33);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp33);
                                this.Manager.Comment("reaching state \'S39\'");
                                int temp50 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker24)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker31)));
                                if ((temp50 == 0)) {
                                    this.Manager.Comment("reaching state \'S42\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopQueryRowsResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S46\'");
                                        bool temp34;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp34);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp34);
                                        this.Manager.Comment("reaching state \'S50\'");
                                        int temp41 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker25)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker28)));
                                        if ((temp41 == 0)) {
                                            this.Manager.Comment("reaching state \'S56\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp35;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_END,True)\'");
                                            temp35 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S64\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/unexpected\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.unexpected, temp35, "return of RopFindRow, state S64");
                                            this.Manager.Comment("reaching state \'S72\'");
                                            bool temp36;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp36);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp36);
                                            this.Manager.Comment("reaching state \'S80\'");
                                            int temp37 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker26)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker27)));
                                            if ((temp37 == 0)) {
                                                this.Manager.Comment("reaching state \'S92\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker8))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S108\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker8)));
                                                }
                                                goto label10;
                                            }
                                            if ((temp37 == 1)) {
                                                this.Manager.Comment("reaching state \'S93\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker9))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S109\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker9)));
                                                }
                                                goto label10;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label10:
;
                                            goto label12;
                                        }
                                        if ((temp41 == 1)) {
                                            this.Manager.Comment("reaching state \'S57\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp38;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_END,True)\'");
                                            temp38 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Checkpoint("MS-OXCTABL_R827");
                                            this.Manager.Comment("reaching state \'S65\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/ecNullObject\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp38, "return of RopFindRow, state S65");
                                            this.Manager.Comment("reaching state \'S73\'");
                                            bool temp39;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp39);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp39);
                                            this.Manager.Comment("reaching state \'S81\'");
                                            int temp40 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker29)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker30)));
                                            if ((temp40 == 0)) {
                                                this.Manager.Comment("reaching state \'S94\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker10))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S110\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker10)));
                                                }
                                                goto label11;
                                            }
                                            if ((temp40 == 1)) {
                                                this.Manager.Comment("reaching state \'S95\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker11))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S111\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker11)));
                                                }
                                                goto label11;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label11:
;
                                            goto label12;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label12:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopQueryRowsResponseChecker2)));
                                    }
                                    goto label16;
                                }
                                if ((temp50 == 1)) {
                                    this.Manager.Comment("reaching state \'S43\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopQueryRowsResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S47\'");
                                        bool temp42;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp42);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp42);
                                        this.Manager.Comment("reaching state \'S51\'");
                                        int temp49 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker32)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker35)));
                                        if ((temp49 == 0)) {
                                            this.Manager.Comment("reaching state \'S58\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp43;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_END,True)\'");
                                            temp43 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Checkpoint("MS-OXCTABL_R827");
                                            this.Manager.Comment("reaching state \'S66\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/ecNullObject\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp43, "return of RopFindRow, state S66");
                                            this.Manager.Comment("reaching state \'S74\'");
                                            bool temp44;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp44);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp44);
                                            this.Manager.Comment("reaching state \'S82\'");
                                            int temp45 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker33)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker34)));
                                            if ((temp45 == 0)) {
                                                this.Manager.Comment("reaching state \'S96\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker12))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S112\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker12)));
                                                }
                                                goto label13;
                                            }
                                            if ((temp45 == 1)) {
                                                this.Manager.Comment("reaching state \'S97\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker13))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S113\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker13)));
                                                }
                                                goto label13;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label13:
;
                                            goto label15;
                                        }
                                        if ((temp49 == 1)) {
                                            this.Manager.Comment("reaching state \'S59\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp46;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_END,True)\'");
                                            temp46 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S67\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/unexpected\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.unexpected, temp46, "return of RopFindRow, state S67");
                                            this.Manager.Comment("reaching state \'S75\'");
                                            bool temp47;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp47);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp47);
                                            this.Manager.Comment("reaching state \'S83\'");
                                            int temp48 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker36)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker37)));
                                            if ((temp48 == 0)) {
                                                this.Manager.Comment("reaching state \'S98\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker14))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S114\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker14)));
                                                }
                                                goto label14;
                                            }
                                            if ((temp48 == 1)) {
                                                this.Manager.Comment("reaching state \'S99\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker15))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S115\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker15)));
                                                }
                                                goto label14;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label14:
;
                                            goto label15;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label15:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopQueryRowsResponseChecker3)));
                                    }
                                    goto label16;
                                }
                                throw new InvalidOperationException("never reached");
                            label16:
;
                                goto label17;
                            }
                            if ((temp51 == 1)) {
                                this.Manager.Comment("reaching state \'S31\'");
                                this.Manager.Assert(false, "reached non-accepting end state \'S31\'.");
                                goto label17;
                            }
                            throw new InvalidOperationException("never reached");
                        label17:
;
                            goto label19;
                        }
                        if ((temp54 == 1)) {
                            this.Manager.Comment("reaching state \'S21\'");
                            bool temp52;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp52);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp52);
                            this.Manager.Comment("reaching state \'S25\'");
                            int temp53 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker40)), new ExpectedReturn(S02_RowRops_FindRowNotFound_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker41)));
                            if ((temp53 == 0)) {
                                this.Manager.Comment("reaching state \'S32\'");
                                this.Manager.Assert(false, "reached non-accepting end state \'S32\'.");
                                goto label18;
                            }
                            if ((temp53 == 1)) {
                                this.Manager.Comment("reaching state \'S33\'");
                                this.Manager.Assert(false, "reached non-accepting end state \'S33\'.");
                                goto label18;
                            }
                            throw new InvalidOperationException("never reached");
                        label18:
;
                            goto label19;
                        }
                        throw new InvalidOperationException("never reached");
                    label19:
;
                        goto label20;
                    }
                    throw new InvalidOperationException("never reached");
                label20:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowNotFound_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopQueryPositionResponseChecker)));
                }
                goto label21;
            }
            throw new InvalidOperationException("never reached");
        label21:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopQueryPositionResponseChecker(Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition, bool isRowCount) {
            this.Manager.Comment("checking step \'event RopQueryPositionResponse(BEGIN,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopQueryPositionResponse, state S7");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRowCount, "isRowCount of RopQueryPositionResponse, state S7");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R491");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R491");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S13");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S16");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S22");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S38");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S40");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S40");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S40");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S40");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S40");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S40");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S40");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S40");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S40");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S40");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                      "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S48");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S76");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S84");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R536, MS-OXCTABL_R544001");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R536");
            this.Manager.Checkpoint("MS-OXCTABL_R544001");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S76");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker1(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S85");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R536, MS-OXCTABL_R544001");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R536");
            this.Manager.Checkpoint("MS-OXCTABL_R544001");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S48");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S77");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker2(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S86");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R536, MS-OXCTABL_R544001");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R536");
            this.Manager.Checkpoint("MS-OXCTABL_R544001");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S77");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker3(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S87");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R536, MS-OXCTABL_R544001");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R536");
            this.Manager.Checkpoint("MS-OXCTABL_R544001");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S38");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S41");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S41");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S41");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S41");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S41");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S41");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S41");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S41");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S41");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S41");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S49");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S78");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker4(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S88");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R536, MS-OXCTABL_R544001");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R536");
            this.Manager.Checkpoint("MS-OXCTABL_R544001");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S78");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker5(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S89");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R536, MS-OXCTABL_R544001");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R536");
            this.Manager.Checkpoint("MS-OXCTABL_R544001");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S49");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S79");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker6(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S90");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R536, MS-OXCTABL_R544001");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R536");
            this.Manager.Checkpoint("MS-OXCTABL_R544001");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S79");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker7(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S91");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R536, MS-OXCTABL_R544001");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R536");
            this.Manager.Checkpoint("MS-OXCTABL_R544001");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S22");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S16");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S23");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S23");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S13");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S17");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S24");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S39");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S42");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S42");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S42");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S42");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S42");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S42");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S42");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S42");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S42");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S42");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S50");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S80");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker8(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S92");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R536, MS-OXCTABL_R544001");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R536");
            this.Manager.Checkpoint("MS-OXCTABL_R544001");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S80");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker9(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S93");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R536, MS-OXCTABL_R544001");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R536");
            this.Manager.Checkpoint("MS-OXCTABL_R544001");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S50");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S81");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker10(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S94");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R536, MS-OXCTABL_R544001");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R536");
            this.Manager.Checkpoint("MS-OXCTABL_R544001");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker30(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S81");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker11(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S95");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R536, MS-OXCTABL_R544001");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R536");
            this.Manager.Checkpoint("MS-OXCTABL_R544001");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker31(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S39");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S43");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S43");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S43");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S43");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S43");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S43");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S43");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker32(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S51");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker33(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S82");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker12(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S96");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R536, MS-OXCTABL_R544001");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R536");
            this.Manager.Checkpoint("MS-OXCTABL_R544001");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker34(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S82");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker13(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S97");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R536, MS-OXCTABL_R544001");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R536");
            this.Manager.Checkpoint("MS-OXCTABL_R544001");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker35(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S51");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker36(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S83");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker14(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S98");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S98");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S98");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S98");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S98");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S98");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R536, MS-OXCTABL_R544001");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R536");
            this.Manager.Checkpoint("MS-OXCTABL_R544001");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker37(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S83");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteRopFindRowResponseChecker15(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S99");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S99");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S99");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S99");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S99");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S99");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R536, MS-OXCTABL_R544001");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R536");
            this.Manager.Checkpoint("MS-OXCTABL_R544001");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker38(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S24");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker39(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S17");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker40(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S25");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowNotFound_TestSuiteCheckRequirementEnabledChecker41(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S25");
        }
        #endregion
    }
}
