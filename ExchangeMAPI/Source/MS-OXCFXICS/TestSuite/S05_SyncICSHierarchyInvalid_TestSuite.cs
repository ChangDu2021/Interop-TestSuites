//-----------------------------------------------------------------------
// Copyright (c) 2014 Microsoft Corporation. All rights reserved.
// Use of this sample source code is subject to the terms of the Microsoft license 
// agreement under which you licensed this sample source code and is provided AS-IS.
// If you did not accept the terms of the license agreement, you are not authorized 
// to use this sample source code. For the terms of the license, please see the 
// license agreement between you and Microsoft.
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCFXICS {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.6.100.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S05_SyncICSHierarchyInvalid_TestSuite : PtfTestClassBase {
        
        public S05_SyncICSHierarchyInvalid_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCFXICS.IMS_OXCFXICSAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCFXICS.IMS_OXCFXICSAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCFXICS.IMS_OXCFXICSAdapter IMS_OXCFXICSAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCFXICSAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.IMS_OXCFXICSAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCFXICS.IMS_OXCFXICSAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite() {
            this.Manager.BeginTest("MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCFXICSAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp15 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_SyncICSHierarchyInvalid_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_SyncICSHierarchyInvalid_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp15 == 0)) {
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("executing step \'call Connect(1,PrivateMailboxServer)\'");
                this.IMS_OXCFXICSAdapterInstance.Connect(1, ((Microsoft.Protocols.TestSuites.Common.ConnectionType)(1)));
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("checking step \'return Connect\'");
                this.Manager.Comment("reaching state \'S20\'");
                int temp1;
                int temp2;
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp3;
                this.Manager.Comment("executing step \'call Logon(1,Private,out _,out _)\'");
                temp3 = this.IMS_OXCFXICSAdapterInstance.Logon(1, ((Microsoft.Protocols.TestSuites.Common.LogonFlags)(1)), out temp1, out temp2);
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return Logon/[out 1,out 1]:Success\'");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp1, "logonHandleIndex of Logon, state S24");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp2, "inboxFolderIdIndex of Logon, state S24");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp3, "return of Logon, state S24");
                this.Manager.Comment("reaching state \'S28\'");
                int temp4;
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp5;
                this.Manager.Comment("executing step \'call OpenFolder(1,1,1,out _)\'");
                temp5 = this.IMS_OXCFXICSAdapterInstance.OpenFolder(1, 1, 1, out temp4);
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("checking step \'return OpenFolder/[out 2]:Success\'");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp4, "folderHandleIndex of OpenFolder, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp5, "return of OpenFolder, state S32");
                this.Manager.Comment("reaching state \'S36\'");
                int temp6;
                int temp7;
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp8;
                this.Manager.Comment("executing step \'call CreateFolder(1,2,\"test\",out _,out _)\'");
                temp8 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 2, "test", out temp6, out temp7);
                this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                this.Manager.Comment("reaching state \'S40\'");
                this.Manager.Comment("checking step \'return CreateFolder/[out 2,out 3]:Success\'");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp6, "folderIdIndex of CreateFolder, state S40");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp7, "folderHandleIndex of CreateFolder, state S40");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp8, "return of CreateFolder, state S40");
                this.Manager.Comment("reaching state \'S44\'");
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp9;
                this.Manager.Comment("executing step \'call GetLocalReplicaIds(1,1,3)\'");
                temp9 = this.IMS_OXCFXICSAdapterInstance.GetLocalReplicaIds(1, 1, 3u);
                this.Manager.Checkpoint("MS-OXCFXICS_R925");
                this.Manager.Comment("reaching state \'S48\'");
                this.Manager.Comment("checking step \'return GetLocalReplicaIds/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp9, "return of GetLocalReplicaIds, state S48");
                this.Manager.Comment("reaching state \'S52\'");
                int temp10;
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp11;
                this.Manager.Comment("executing step \'call SynchronizationConfigure(1,3,Hierarchy,UseCpid,None,Eid,[\"Pi" +
                        "dTagAttachLongFilename\"],out _)\'");
                temp11 = this.IMS_OXCFXICSAdapterInstance.SynchronizationConfigure(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes.Hierarchy, Microsoft.Protocols.TestSuites.MS_OXCFXICS.SendOptionAlls.UseCpid, ((Microsoft.Protocols.TestSuites.Common.SynchronizationFlag)(0)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationExtraFlag)(1)), this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "PidTagAttachLongFilename",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}), out temp10);
                this.Manager.Checkpoint("MS-OXCFXICS_R669");
                this.Manager.Checkpoint("MS-OXCFXICS_R641");
                this.Manager.Comment("reaching state \'S56\'");
                this.Manager.Comment("checking step \'return SynchronizationConfigure/[out 4]:Success\'");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, temp10, "downloadcontextHandleIndex of SynchronizationConfigure, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp11, "return of SynchronizationConfigure, state S56");
                this.Manager.Comment("reaching state \'S60\'");
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp12;
                this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                temp12 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                this.Manager.Comment("reaching state \'S66\'");
                this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp12, "return of DeleteFolder, state S66");
                this.Manager.Comment("reaching state \'S72\'");
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp13;
                this.Manager.Comment("executing step \'call Release(1,3)\'");
                temp13 = this.IMS_OXCFXICSAdapterInstance.Release(1, 3);
                this.Manager.Comment("reaching state \'S78\'");
                this.Manager.Comment("checking step \'return Release/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp13, "return of Release, state S78");
                this.Manager.Comment("reaching state \'S84\'");
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp14;
                this.Manager.Comment("executing step \'call Release(1,4)\'");
                temp14 = this.IMS_OXCFXICSAdapterInstance.Release(1, 4);
                this.Manager.Comment("reaching state \'S90\'");
                this.Manager.Comment("checking step \'return Release/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp14, "return of Release, state S90");
                this.Manager.Comment("reaching state \'S96\'");
                goto label0;
            }
            if ((temp15 == 1)) {
                this.Manager.Comment("reaching state \'S9\'");
                goto label0;
            }
            throw new InvalidOperationException("never reached");
        label0:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite1() {
            this.Manager.BeginTest("MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite1");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp16;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCFXICSAdapterInstance.CheckMAPIHTTPTransportSupported(out temp16);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp16);
            this.Manager.Comment("reaching state \'S3\'");
            int temp31 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_SyncICSHierarchyInvalid_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_SyncICSHierarchyInvalid_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp31 == 0)) {
                this.Manager.Comment("reaching state \'S10\'");
                this.Manager.Comment("executing step \'call Connect(1,PrivateMailboxServer)\'");
                this.IMS_OXCFXICSAdapterInstance.Connect(1, ((Microsoft.Protocols.TestSuites.Common.ConnectionType)(1)));
                this.Manager.Comment("reaching state \'S17\'");
                this.Manager.Comment("checking step \'return Connect\'");
                this.Manager.Comment("reaching state \'S21\'");
                int temp17;
                int temp18;
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp19;
                this.Manager.Comment("executing step \'call Logon(1,Private,out _,out _)\'");
                temp19 = this.IMS_OXCFXICSAdapterInstance.Logon(1, ((Microsoft.Protocols.TestSuites.Common.LogonFlags)(1)), out temp17, out temp18);
                this.Manager.Comment("reaching state \'S25\'");
                this.Manager.Comment("checking step \'return Logon/[out 1,out 1]:Success\'");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp17, "logonHandleIndex of Logon, state S25");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp18, "inboxFolderIdIndex of Logon, state S25");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp19, "return of Logon, state S25");
                this.Manager.Comment("reaching state \'S29\'");
                int temp20;
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp21;
                this.Manager.Comment("executing step \'call OpenFolder(1,1,1,out _)\'");
                temp21 = this.IMS_OXCFXICSAdapterInstance.OpenFolder(1, 1, 1, out temp20);
                this.Manager.Comment("reaching state \'S33\'");
                this.Manager.Comment("checking step \'return OpenFolder/[out 2]:Success\'");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp20, "folderHandleIndex of OpenFolder, state S33");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp21, "return of OpenFolder, state S33");
                this.Manager.Comment("reaching state \'S37\'");
                int temp22;
                int temp23;
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp24;
                this.Manager.Comment("executing step \'call CreateFolder(1,2,\"test\",out _,out _)\'");
                temp24 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 2, "test", out temp22, out temp23);
                this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                this.Manager.Comment("reaching state \'S41\'");
                this.Manager.Comment("checking step \'return CreateFolder/[out 2,out 3]:Success\'");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp22, "folderIdIndex of CreateFolder, state S41");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp23, "folderHandleIndex of CreateFolder, state S41");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp24, "return of CreateFolder, state S41");
                this.Manager.Comment("reaching state \'S45\'");
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp25;
                this.Manager.Comment("executing step \'call GetLocalReplicaIds(1,1,3)\'");
                temp25 = this.IMS_OXCFXICSAdapterInstance.GetLocalReplicaIds(1, 1, 3u);
                this.Manager.Checkpoint("MS-OXCFXICS_R925");
                this.Manager.Comment("reaching state \'S49\'");
                this.Manager.Comment("checking step \'return GetLocalReplicaIds/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp25, "return of GetLocalReplicaIds, state S49");
                this.Manager.Comment("reaching state \'S53\'");
                int temp26;
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp27;
                this.Manager.Comment("executing step \'call SynchronizationConfigure(1,3,Hierarchy,Unicode,Reserved,Eid," +
                        "[\"PidTagAttachLongFilename\"],out _)\'");
                temp27 = this.IMS_OXCFXICSAdapterInstance.SynchronizationConfigure(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes.Hierarchy, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SendOptionAlls)(1)), Microsoft.Protocols.TestSuites.Common.SynchronizationFlag.Reserved, ((Microsoft.Protocols.TestSuites.Common.SynchronizationExtraFlag)(1)), this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "PidTagAttachLongFilename",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}), out temp26);
                this.Manager.Checkpoint("MS-OXCFXICS_R2180");
                this.Manager.Comment("reaching state \'S57\'");
                this.Manager.Comment("checking step \'return SynchronizationConfigure/[out -1]:RpcFormat\'");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, -1, temp26, "downloadcontextHandleIndex of SynchronizationConfigure, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult.RpcFormat, temp27, "return of SynchronizationConfigure, state S57");
                this.Manager.Comment("reaching state \'S61\'");
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp28;
                this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                temp28 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                this.Manager.Comment("reaching state \'S67\'");
                this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp28, "return of DeleteFolder, state S67");
                this.Manager.Comment("reaching state \'S73\'");
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp29;
                this.Manager.Comment("executing step \'call Release(1,3)\'");
                temp29 = this.IMS_OXCFXICSAdapterInstance.Release(1, 3);
                this.Manager.Comment("reaching state \'S79\'");
                this.Manager.Comment("checking step \'return Release/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp29, "return of Release, state S79");
                this.Manager.Comment("reaching state \'S85\'");
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp30;
                this.Manager.Comment("executing step \'call Release(1,-1)\'");
                temp30 = this.IMS_OXCFXICSAdapterInstance.Release(1, -1);
                this.Manager.Comment("reaching state \'S91\'");
                this.Manager.Comment("checking step \'return Release/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp30, "return of Release, state S91");
                this.Manager.Comment("reaching state \'S97\'");
                goto label1;
            }
            if ((temp31 == 1)) {
                this.Manager.Comment("reaching state \'S11\'");
                goto label1;
            }
            throw new InvalidOperationException("never reached");
        label1:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite2() {
            this.Manager.BeginTest("MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite2");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp32;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCFXICSAdapterInstance.CheckMAPIHTTPTransportSupported(out temp32);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp32);
            this.Manager.Comment("reaching state \'S5\'");
            int temp54 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_SyncICSHierarchyInvalid_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_SyncICSHierarchyInvalid_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp54 == 0)) {
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("executing step \'call Connect(1,PrivateMailboxServer)\'");
                this.IMS_OXCFXICSAdapterInstance.Connect(1, ((Microsoft.Protocols.TestSuites.Common.ConnectionType)(1)));
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("checking step \'return Connect\'");
                this.Manager.Comment("reaching state \'S22\'");
                int temp33;
                int temp34;
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp35;
                this.Manager.Comment("executing step \'call Logon(1,Private,out _,out _)\'");
                temp35 = this.IMS_OXCFXICSAdapterInstance.Logon(1, ((Microsoft.Protocols.TestSuites.Common.LogonFlags)(1)), out temp33, out temp34);
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("checking step \'return Logon/[out 1,out 1]:Success\'");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp33, "logonHandleIndex of Logon, state S26");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp34, "inboxFolderIdIndex of Logon, state S26");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp35, "return of Logon, state S26");
                this.Manager.Comment("reaching state \'S30\'");
                int temp36;
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp37;
                this.Manager.Comment("executing step \'call OpenFolder(1,1,1,out _)\'");
                temp37 = this.IMS_OXCFXICSAdapterInstance.OpenFolder(1, 1, 1, out temp36);
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("checking step \'return OpenFolder/[out 2]:Success\'");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp36, "folderHandleIndex of OpenFolder, state S34");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp37, "return of OpenFolder, state S34");
                this.Manager.Comment("reaching state \'S38\'");
                int temp38;
                int temp39;
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp40;
                this.Manager.Comment("executing step \'call CreateFolder(1,2,\"test\",out _,out _)\'");
                temp40 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 2, "test", out temp38, out temp39);
                this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                this.Manager.Comment("reaching state \'S42\'");
                this.Manager.Comment("checking step \'return CreateFolder/[out 2,out 3]:Success\'");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp38, "folderIdIndex of CreateFolder, state S42");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp39, "folderHandleIndex of CreateFolder, state S42");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp40, "return of CreateFolder, state S42");
                this.Manager.Comment("reaching state \'S46\'");
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp41;
                this.Manager.Comment("executing step \'call GetLocalReplicaIds(1,1,3)\'");
                temp41 = this.IMS_OXCFXICSAdapterInstance.GetLocalReplicaIds(1, 1, 3u);
                this.Manager.Checkpoint("MS-OXCFXICS_R925");
                this.Manager.Comment("reaching state \'S50\'");
                this.Manager.Comment("checking step \'return GetLocalReplicaIds/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp41, "return of GetLocalReplicaIds, state S50");
                this.Manager.Comment("reaching state \'S54\'");
                bool temp42;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(3463,out _)\'");
                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(3463, out temp42);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp42);
                this.Manager.Comment("reaching state \'S58\'");
                int temp53 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_SyncICSHierarchyInvalid_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite2CheckRequirementEnabledChecker)), new ExpectedReturn(S05_SyncICSHierarchyInvalid_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite2CheckRequirementEnabledChecker1)));
                if ((temp53 == 0)) {
                    this.Manager.Comment("reaching state \'S62\'");
                    int temp43;
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp44;
                    this.Manager.Comment("executing step \'call SynchronizationConfigure(1,3,Hierarchy,Invalid,None,Eid,[\"Pi" +
                            "dTagAttachLongFilename\"],out _)\'");
                    temp44 = this.IMS_OXCFXICSAdapterInstance.SynchronizationConfigure(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes.Hierarchy, Microsoft.Protocols.TestSuites.MS_OXCFXICS.SendOptionAlls.Invalid, ((Microsoft.Protocols.TestSuites.Common.SynchronizationFlag)(0)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationExtraFlag)(1)), this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "PidTagAttachLongFilename",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}), out temp43);
                    this.Manager.Checkpoint("MS-OXCFXICS_R669");
                    this.Manager.Checkpoint("MS-OXCFXICS_R641");
                    this.Manager.Comment("reaching state \'S68\'");
                    this.Manager.Comment("checking step \'return SynchronizationConfigure/[out 4]:Success\'");
                    TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, temp43, "downloadcontextHandleIndex of SynchronizationConfigure, state S68");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp44, "return of SynchronizationConfigure, state S68");
                    this.Manager.Comment("reaching state \'S74\'");
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp45;
                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                    temp45 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                    this.Manager.Comment("reaching state \'S80\'");
                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp45, "return of DeleteFolder, state S80");
                    this.Manager.Comment("reaching state \'S86\'");
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp46;
                    this.Manager.Comment("executing step \'call Release(1,3)\'");
                    temp46 = this.IMS_OXCFXICSAdapterInstance.Release(1, 3);
                    this.Manager.Comment("reaching state \'S92\'");
                    this.Manager.Comment("checking step \'return Release/Success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp46, "return of Release, state S92");
                    this.Manager.Comment("reaching state \'S98\'");
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp47;
                    this.Manager.Comment("executing step \'call Release(1,4)\'");
                    temp47 = this.IMS_OXCFXICSAdapterInstance.Release(1, 4);
                    this.Manager.Comment("reaching state \'S102\'");
                    this.Manager.Comment("checking step \'return Release/Success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp47, "return of Release, state S102");
                    this.Manager.Comment("reaching state \'S106\'");
                    goto label2;
                }
                if ((temp53 == 1)) {
                    this.Manager.Comment("reaching state \'S63\'");
                    int temp48;
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp49;
                    this.Manager.Comment("executing step \'call SynchronizationConfigure(1,3,Hierarchy,Invalid,None,Eid,[\"Pi" +
                            "dTagAttachLongFilename\"],out _)\'");
                    temp49 = this.IMS_OXCFXICSAdapterInstance.SynchronizationConfigure(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes.Hierarchy, Microsoft.Protocols.TestSuites.MS_OXCFXICS.SendOptionAlls.Invalid, ((Microsoft.Protocols.TestSuites.Common.SynchronizationFlag)(0)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationExtraFlag)(1)), this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "PidTagAttachLongFilename",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}), out temp48);
                    this.Manager.Comment("reaching state \'S69\'");
                    this.Manager.Comment("checking step \'return SynchronizationConfigure/[out -1]:InvalidParameter\'");
                    TestManagerHelpers.AssertAreEqual<int>(this.Manager, -1, temp48, "downloadcontextHandleIndex of SynchronizationConfigure, state S69");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult.InvalidParameter, temp49, "return of SynchronizationConfigure, state S69");
                    this.Manager.Comment("reaching state \'S75\'");
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp50;
                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                    temp50 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                    this.Manager.Comment("reaching state \'S81\'");
                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp50, "return of DeleteFolder, state S81");
                    this.Manager.Comment("reaching state \'S87\'");
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp51;
                    this.Manager.Comment("executing step \'call Release(1,3)\'");
                    temp51 = this.IMS_OXCFXICSAdapterInstance.Release(1, 3);
                    this.Manager.Comment("reaching state \'S93\'");
                    this.Manager.Comment("checking step \'return Release/Success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp51, "return of Release, state S93");
                    this.Manager.Comment("reaching state \'S99\'");
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp52;
                    this.Manager.Comment("executing step \'call Release(1,-1)\'");
                    temp52 = this.IMS_OXCFXICSAdapterInstance.Release(1, -1);
                    this.Manager.Comment("reaching state \'S103\'");
                    this.Manager.Comment("checking step \'return Release/Success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp52, "return of Release, state S103");
                    this.Manager.Comment("reaching state \'S107\'");
                    goto label2;
                }
                throw new InvalidOperationException("never reached");
            label2:
;
                goto label3;
            }
            if ((temp54 == 1)) {
                this.Manager.Comment("reaching state \'S13\'");
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite2CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S58");
        }
        
        private void MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite2CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S58");
        }
        
        private void MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite3() {
            this.Manager.BeginTest("MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite3");
            this.Manager.Comment("reaching state \'S6\'");
            bool temp55;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCFXICSAdapterInstance.CheckMAPIHTTPTransportSupported(out temp55);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp55);
            this.Manager.Comment("reaching state \'S7\'");
            int temp77 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_SyncICSHierarchyInvalid_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite3CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_SyncICSHierarchyInvalid_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite3CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp77 == 0)) {
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call Connect(1,PrivateMailboxServer)\'");
                this.IMS_OXCFXICSAdapterInstance.Connect(1, ((Microsoft.Protocols.TestSuites.Common.ConnectionType)(1)));
                this.Manager.Comment("reaching state \'S19\'");
                this.Manager.Comment("checking step \'return Connect\'");
                this.Manager.Comment("reaching state \'S23\'");
                int temp56;
                int temp57;
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp58;
                this.Manager.Comment("executing step \'call Logon(1,Private,out _,out _)\'");
                temp58 = this.IMS_OXCFXICSAdapterInstance.Logon(1, ((Microsoft.Protocols.TestSuites.Common.LogonFlags)(1)), out temp56, out temp57);
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("checking step \'return Logon/[out 1,out 1]:Success\'");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp56, "logonHandleIndex of Logon, state S27");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp57, "inboxFolderIdIndex of Logon, state S27");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp58, "return of Logon, state S27");
                this.Manager.Comment("reaching state \'S31\'");
                int temp59;
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp60;
                this.Manager.Comment("executing step \'call OpenFolder(1,1,1,out _)\'");
                temp60 = this.IMS_OXCFXICSAdapterInstance.OpenFolder(1, 1, 1, out temp59);
                this.Manager.Comment("reaching state \'S35\'");
                this.Manager.Comment("checking step \'return OpenFolder/[out 2]:Success\'");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp59, "folderHandleIndex of OpenFolder, state S35");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp60, "return of OpenFolder, state S35");
                this.Manager.Comment("reaching state \'S39\'");
                int temp61;
                int temp62;
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp63;
                this.Manager.Comment("executing step \'call CreateFolder(1,2,\"test\",out _,out _)\'");
                temp63 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 2, "test", out temp61, out temp62);
                this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                this.Manager.Comment("reaching state \'S43\'");
                this.Manager.Comment("checking step \'return CreateFolder/[out 2,out 3]:Success\'");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp61, "folderIdIndex of CreateFolder, state S43");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp62, "folderHandleIndex of CreateFolder, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp63, "return of CreateFolder, state S43");
                this.Manager.Comment("reaching state \'S47\'");
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp64;
                this.Manager.Comment("executing step \'call GetLocalReplicaIds(1,1,3)\'");
                temp64 = this.IMS_OXCFXICSAdapterInstance.GetLocalReplicaIds(1, 1, 3u);
                this.Manager.Checkpoint("MS-OXCFXICS_R925");
                this.Manager.Comment("reaching state \'S51\'");
                this.Manager.Comment("checking step \'return GetLocalReplicaIds/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp64, "return of GetLocalReplicaIds, state S51");
                this.Manager.Comment("reaching state \'S55\'");
                bool temp65;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2695,out _)\'");
                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2695, out temp65);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp65);
                this.Manager.Comment("reaching state \'S59\'");
                int temp76 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_SyncICSHierarchyInvalid_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite3CheckRequirementEnabledChecker)), new ExpectedReturn(S05_SyncICSHierarchyInvalid_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite3CheckRequirementEnabledChecker1)));
                if ((temp76 == 0)) {
                    this.Manager.Comment("reaching state \'S64\'");
                    int temp66;
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp67;
                    this.Manager.Comment("executing step \'call SynchronizationConfigure(1,3,InvalidParameter,Unicode,Unicod" +
                            "e,Eid,[\"PidTagAttachLongFilename\"],out _)\'");
                    temp67 = this.IMS_OXCFXICSAdapterInstance.SynchronizationConfigure(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes.InvalidParameter, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SendOptionAlls)(1)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationFlag)(1)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationExtraFlag)(1)), this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "PidTagAttachLongFilename",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}), out temp66);
                    this.Manager.Checkpoint("MS-OXCFXICS_R2695");
                    this.Manager.Comment("reaching state \'S70\'");
                    this.Manager.Comment("checking step \'return SynchronizationConfigure/[out -1]:InvalidParameter\'");
                    TestManagerHelpers.AssertAreEqual<int>(this.Manager, -1, temp66, "downloadcontextHandleIndex of SynchronizationConfigure, state S70");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult.InvalidParameter, temp67, "return of SynchronizationConfigure, state S70");
                    this.Manager.Comment("reaching state \'S76\'");
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp68;
                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                    temp68 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                    this.Manager.Comment("reaching state \'S82\'");
                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp68, "return of DeleteFolder, state S82");
                    this.Manager.Comment("reaching state \'S88\'");
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp69;
                    this.Manager.Comment("executing step \'call Release(1,3)\'");
                    temp69 = this.IMS_OXCFXICSAdapterInstance.Release(1, 3);
                    this.Manager.Comment("reaching state \'S94\'");
                    this.Manager.Comment("checking step \'return Release/Success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp69, "return of Release, state S94");
                    this.Manager.Comment("reaching state \'S100\'");
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp70;
                    this.Manager.Comment("executing step \'call Release(1,-1)\'");
                    temp70 = this.IMS_OXCFXICSAdapterInstance.Release(1, -1);
                    this.Manager.Comment("reaching state \'S104\'");
                    this.Manager.Comment("checking step \'return Release/Success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp70, "return of Release, state S104");
                    this.Manager.Comment("reaching state \'S108\'");
                    goto label4;
                }
                if ((temp76 == 1)) {
                    this.Manager.Comment("reaching state \'S65\'");
                    int temp71;
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp72;
                    this.Manager.Comment("executing step \'call SynchronizationConfigure(1,3,InvalidParameter,Unicode,Unicod" +
                            "e,Eid,[\"PidTagAttachLongFilename\"],out _)\'");
                    temp72 = this.IMS_OXCFXICSAdapterInstance.SynchronizationConfigure(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes.InvalidParameter, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SendOptionAlls)(1)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationFlag)(1)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationExtraFlag)(1)), this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "PidTagAttachLongFilename",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}), out temp71);
                    this.Manager.Comment("reaching state \'S71\'");
                    this.Manager.Comment("checking step \'return SynchronizationConfigure/[out -1]:NotSupported\'");
                    TestManagerHelpers.AssertAreEqual<int>(this.Manager, -1, temp71, "downloadcontextHandleIndex of SynchronizationConfigure, state S71");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult.NotSupported, temp72, "return of SynchronizationConfigure, state S71");
                    this.Manager.Comment("reaching state \'S77\'");
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp73;
                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                    temp73 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                    this.Manager.Comment("reaching state \'S83\'");
                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp73, "return of DeleteFolder, state S83");
                    this.Manager.Comment("reaching state \'S89\'");
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp74;
                    this.Manager.Comment("executing step \'call Release(1,3)\'");
                    temp74 = this.IMS_OXCFXICSAdapterInstance.Release(1, 3);
                    this.Manager.Comment("reaching state \'S95\'");
                    this.Manager.Comment("checking step \'return Release/Success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp74, "return of Release, state S95");
                    this.Manager.Comment("reaching state \'S101\'");
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp75;
                    this.Manager.Comment("executing step \'call Release(1,-1)\'");
                    temp75 = this.IMS_OXCFXICSAdapterInstance.Release(1, -1);
                    this.Manager.Comment("reaching state \'S105\'");
                    this.Manager.Comment("checking step \'return Release/Success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp75, "return of Release, state S105");
                    this.Manager.Comment("reaching state \'S109\'");
                    goto label4;
                }
                throw new InvalidOperationException("never reached");
            label4:
;
                goto label5;
            }
            if ((temp77 == 1)) {
                this.Manager.Comment("reaching state \'S15\'");
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite3CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        
        private void MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite3CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S59");
        }
        
        private void MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite3CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S59");
        }
        
        private void MSOXCFXICS_S05_SyncICSHierarchyInvalid_TestSuite3CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        #endregion
    }
}