//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCFXICS {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.6.100.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S06_SyncICSContentsUpdateReadStateFail_TestSuite : PtfTestClassBase {
        
        public S06_SyncICSContentsUpdateReadStateFail_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCFXICS.IMS_OXCFXICSAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCFXICS.IMS_OXCFXICSAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCFXICS.IMS_OXCFXICSAdapter IMS_OXCFXICSAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCFXICSAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.IMS_OXCFXICSAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCFXICS.IMS_OXCFXICSAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuite() {
            this.Manager.BeginTest("MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCFXICSAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp607 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp607 == 0)) {
                this.Manager.Comment("reaching state \'S2\'");
                bool temp1;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(1193,out _)\'");
                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(1193, out temp1);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1);
                this.Manager.Comment("reaching state \'S4\'");
                int temp606 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker31)));
                if ((temp606 == 0)) {
                    this.Manager.Comment("reaching state \'S5\'");
                    bool temp2;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2665,out _)\'");
                    this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2665, out temp2);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp2);
                    this.Manager.Comment("reaching state \'S7\'");
                    int temp303 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker16)));
                    if ((temp303 == 0)) {
                        this.Manager.Comment("reaching state \'S10\'");
                        bool temp3;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2666,out _)\'");
                        this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2666, out temp3);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                        this.Manager.Comment("reaching state \'S14\'");
                        int temp152 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker9)));
                        if ((temp152 == 0)) {
                            this.Manager.Comment("reaching state \'S19\'");
                            this.Manager.Comment("executing step \'call Connect(1,PublicFolderServer)\'");
                            this.IMS_OXCFXICSAdapterInstance.Connect(1, ((Microsoft.Protocols.TestSuites.Common.ConnectionType)(0)));
                            this.Manager.Comment("reaching state \'S27\'");
                            this.Manager.Comment("checking step \'return Connect\'");
                            this.Manager.Comment("reaching state \'S35\'");
                            int temp4;
                            int temp5;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp6;
                            this.Manager.Comment("executing step \'call Logon(1,Private,out _,out _)\'");
                            temp6 = this.IMS_OXCFXICSAdapterInstance.Logon(1, ((Microsoft.Protocols.TestSuites.Common.LogonFlags)(1)), out temp4, out temp5);
                            this.Manager.Comment("reaching state \'S43\'");
                            this.Manager.Comment("checking step \'return Logon/[out 1,out 1]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp4, "logonHandleIndex of Logon, state S43");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp5, "inboxFolderIdIndex of Logon, state S43");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp6, "return of Logon, state S43");
                            this.Manager.Comment("reaching state \'S51\'");
                            int temp7;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp8;
                            this.Manager.Comment("executing step \'call OpenFolder(1,1,1,out _)\'");
                            temp8 = this.IMS_OXCFXICSAdapterInstance.OpenFolder(1, 1, 1, out temp7);
                            this.Manager.Comment("reaching state \'S59\'");
                            this.Manager.Comment("checking step \'return OpenFolder/[out 2]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp7, "folderHandleIndex of OpenFolder, state S59");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp8, "return of OpenFolder, state S59");
                            this.Manager.Comment("reaching state \'S67\'");
                            int temp9;
                            int temp10;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp11;
                            this.Manager.Comment("executing step \'call CreateFolder(1,2,\"test\",out _,out _)\'");
                            temp11 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 2, "test", out temp9, out temp10);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                            this.Manager.Comment("reaching state \'S75\'");
                            this.Manager.Comment("checking step \'return CreateFolder/[out 2,out 3]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp9, "folderIdIndex of CreateFolder, state S75");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp10, "folderHandleIndex of CreateFolder, state S75");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp11, "return of CreateFolder, state S75");
                            this.Manager.Comment("reaching state \'S83\'");
                            int temp12;
                            int temp13;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp14;
                            this.Manager.Comment("executing step \'call CreateFolder(1,3,\"SubFolder\",out _,out _)\'");
                            temp14 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 3, "SubFolder", out temp12, out temp13);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                            this.Manager.Comment("reaching state \'S91\'");
                            this.Manager.Comment("checking step \'return CreateFolder/[out 3,out 4]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp12, "folderIdIndex of CreateFolder, state S91");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, temp13, "folderHandleIndex of CreateFolder, state S91");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp14, "return of CreateFolder, state S91");
                            this.Manager.Comment("reaching state \'S99\'");
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp15;
                            this.Manager.Comment("executing step \'call GetLocalReplicaIds(1,1,3)\'");
                            temp15 = this.IMS_OXCFXICSAdapterInstance.GetLocalReplicaIds(1, 1, 3u);
                            this.Manager.Checkpoint("MS-OXCFXICS_R925");
                            this.Manager.Comment("reaching state \'S107\'");
                            this.Manager.Comment("checking step \'return GetLocalReplicaIds/Success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp15, "return of GetLocalReplicaIds, state S107");
                            this.Manager.Comment("reaching state \'S115\'");
                            int temp16;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp17;
                            this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                            temp17 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp16);
                            this.Manager.Checkpoint("MS-OXCFXICS_R778");
                            this.Manager.Checkpoint("MS-OXCFXICS_R769");
                            this.Manager.Comment("reaching state \'S123\'");
                            this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 5]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, temp16, "synchronizationHandleIndex of SynchronizationOpenCollector, state S123");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp17, "return of SynchronizationOpenCollector, state S123");
                            this.Manager.Comment("reaching state \'S131\'");
                            int temp18;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp19;
                            this.Manager.Comment("executing step \'call SynchronizationImportMessageChange(1,5,0,Normal,out _)\'");
                            temp19 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportMessageChange(1, 5, 0, ((Microsoft.Protocols.TestSuites.Common.ImportFlag)(0)), out temp18);
                            this.Manager.Checkpoint("MS-OXCFXICS_R814");
                            this.Manager.Checkpoint("MS-OXCFXICS_R805");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1897");
                            this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                            this.Manager.Checkpoint("MS-OXCFXICS_R782");
                            this.Manager.Comment("reaching state \'S139\'");
                            this.Manager.Comment("checking step \'return SynchronizationImportMessageChange/[out 6]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, temp18, "importMessageHandleIndex of SynchronizationImportMessageChange, state S139");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp19, "return of SynchronizationImportMessageChange, state S139");
                            this.Manager.Comment("reaching state \'S147\'");
                            int temp20;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp21;
                            this.Manager.Comment("executing step \'call SaveChangesMessage(1,6,out _)\'");
                            temp21 = this.IMS_OXCFXICSAdapterInstance.SaveChangesMessage(1, 6, out temp20);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1910");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1906");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1898");
                            this.Manager.Comment("reaching state \'S155\'");
                            this.Manager.Comment("checking step \'return SaveChangesMessage/[out 4]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, temp20, "messageIdIndex of SaveChangesMessage, state S155");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp21, "return of SaveChangesMessage, state S155");
                            this.Manager.Comment("reaching state \'S163\'");
                            int temp22;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp23;
                            this.Manager.Comment("executing step \'call SynchronizationConfigure(1,4,Contents,Unicode|ForceUnicode,N" +
                                    "one,Eid,[\"PidTagCreationTime\"],out _)\'");
                            temp23 = this.IMS_OXCFXICSAdapterInstance.SynchronizationConfigure(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SendOptionAlls)(9)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationFlag)(0)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationExtraFlag)(1)), this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "PidTagCreationTime",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}), out temp22);
                            this.Manager.Checkpoint("MS-OXCFXICS_R669");
                            this.Manager.Checkpoint("MS-OXCFXICS_R641");
                            this.Manager.Comment("reaching state \'S171\'");
                            this.Manager.Comment("checking step \'return SynchronizationConfigure/[out 7]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 7, temp22, "downloadcontextHandleIndex of SynchronizationConfigure, state S171");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp23, "return of SynchronizationConfigure, state S171");
                            this.Manager.Comment("reaching state \'S179\'");
                            bool temp24;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(2657,out _)\'");
                            this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2657, out temp24);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp24);
                            this.Manager.Comment("reaching state \'S187\'");
                            int temp77 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker3)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker6)));
                            if ((temp77 == 0)) {
                                this.Manager.Comment("reaching state \'S197\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp25;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagIdsetGiven,True,0)\'");
                                temp25 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(0)), true, 0);
                                this.Manager.Comment("reaching state \'S213\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/InvalidParameter\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult.InvalidParameter, temp25, "return of SynchronizationUploadState, state S213");
                                this.Manager.Comment("reaching state \'S229\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp26;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeen,False,0)\'");
                                temp26 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(1)), false, 0);
                                this.Manager.Comment("reaching state \'S245\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp26, "return of SynchronizationUploadState, state S245");
                                this.Manager.Comment("reaching state \'S261\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp27;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetRead,False,0)\'");
                                temp27 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetRead, false, 0);
                                this.Manager.Comment("reaching state \'S277\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp27, "return of SynchronizationUploadState, state S277");
                                this.Manager.Comment("reaching state \'S293\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp28;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeenFAI,False,0)\'");
                                temp28 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetSeenFAI, false, 0);
                                this.Manager.Comment("reaching state \'S309\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp28, "return of SynchronizationUploadState, state S309");
                                this.Manager.Comment("reaching state \'S325\'");
                                int temp29;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream temp30;
                                bool temp31;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp32;
                                this.Manager.Comment("executing step \'call FastTransferSourceGetBuffer(1,7,Normal,out _,out _,out _)\'");
                                temp32 = this.IMS_OXCFXICSAdapterInstance.FastTransferSourceGetBuffer(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.BufferSize.Normal, out temp29, out temp30, out temp31);
                                this.Manager.Checkpoint("MS-OXCFXICS_R384");
                                this.Manager.Checkpoint("MS-OXCFXICS_R3321");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2188");
                                this.Manager.Checkpoint("MS-OXCFXICS_R1180");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2175");
                                this.Manager.Checkpoint("MS-OXCFXICS_R532");
                                this.Manager.Comment("reaching state \'S341\'");
                                this.Manager.Comment("checking step \'return FastTransferSourceGetBuffer/[out 1,out AbstractFastTransfer" +
                                        "Stream(StreamType=contentsSync,AbstractHierarchySync=AbstractHierarchySync(Folde" +
                                        "rchangeInfo=AbstractFolderChange(IsPidTagFolderIdExist=False,IsPidTagParentFolde" +
                                        "rIdExist=False,IsPidTagSourceKeyValueZero=False,IsPidTagParentSourceKeyValueZero" +
                                        "=False),FolderCount=0,FinalICSState=AbstractState(AbstractICSStateIndex=0,IdSetG" +
                                        "iven=null,IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChan" +
                                        "geNumber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsParentFolderBeforeChi" +
                                        "ld=False,AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted=" +
                                        "null,IsPidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False)),A" +
                                        "bstractContentsSync=AbstractContentsSync(IsprogessTotalPresent=False,MessageInfo" +
                                        "={},AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted={},Is" +
                                        "PidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False),IsReadSta" +
                                        "teChangesExist=False,FinalICSState=AbstractState(AbstractICSStateIndex=1,IdSetGi" +
                                        "ven={},IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChangeN" +
                                        "umber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsSortByMessageDeliveryTim" +
                                        "e=False,IsSortByLastModificationTime=False),AbstractFolderContent=AbstractFolder" +
                                        "Content(IsPidTagEcWarningOut=False,IsNoPermissionObjNotOut=False,IsPidTagNewFXFo" +
                                        "lderOut=False,IsFolderContentNotOut=False,IsFolderPropertiesNotOut=False,IsSubFo" +
                                        "lderPrecededByPidTagFXDelProp=False,AbsFolderMessage=AbstractFolderMessage(IsFol" +
                                        "derMessagesPrecededByPidTagFXDelProp=False,MessageList=AbstractMessageList(IsPid" +
                                        "TagEcWarningOut=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageCon" +
                                        "tent(IsNoPermissionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildre" +
                                        "n(AttachmentPrecededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=F" +
                                        "alse),StringPropertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,St" +
                                        "ringPropertiesInOtherCodePage=False,IsRTFFormat=False))))),AbstractTopFolder=Abs" +
                                        "tractTopFolder(AbsFolderContent=AbstractFolderContent(IsPidTagEcWarningOut=False" +
                                        ",IsNoPermissionObjNotOut=False,IsPidTagNewFXFolderOut=False,IsFolderContentNotOu" +
                                        "t=False,IsFolderPropertiesNotOut=False,IsSubFolderPrecededByPidTagFXDelProp=Fals" +
                                        "e,AbsFolderMessage=AbstractFolderMessage(IsFolderMessagesPrecededByPidTagFXDelPr" +
                                        "op=False,MessageList=AbstractMessageList(IsPidTagEcWarningOut=False,AbsMessage=A" +
                                        "bsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=F" +
                                        "alse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelP" +
                                        "rop=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fa" +
                                        "lse,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=Fals" +
                                        "e,IsRTFFormat=False))))),SubFolderInScope=False),AbstractState=AbstractState(Abs" +
                                        "tractICSStateIndex=0,IdSetGiven=null,IsNewCnsetReadPropertyChangeNumber=False,Is" +
                                        "NewCnsetSeenFAIPropertyChangeNumber=False,IsNewCnsetSeenPropertyChangeNumber=Fal" +
                                        "se),AbstractMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=Fa" +
                                        "lse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelPr" +
                                        "op=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fal" +
                                        "se,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=False" +
                                        ",IsRTFFormat=False),AbstractMessageList=AbstractMessageList(IsPidTagEcWarningOut" +
                                        "=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermis" +
                                        "sionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildren(AttachmentPre" +
                                        "cededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),StringPro" +
                                        "pertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,StringPropertiesI" +
                                        "nOtherCodePage=False,IsRTFFormat=False))),IsSameReadstateChangeNumber=False),out" +
                                        " False]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp29, "transferBufferIndex of FastTransferSourceGetBuffer, state S341");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(new string[] {
                                                "StreamType",
                                                "AbstractHierarchySync",
                                                "AbstractContentsSync",
                                                "AbstractFolderContent",
                                                "AbstractTopFolder",
                                                "AbstractState",
                                                "AbstractMessageContent",
                                                "AbstractMessageList",
                                                "IsSameReadstateChangeNumber"}, new object[] {
                                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.FastTransferStreamType.contentsSync,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractHierarchySync>(new string[] {
                                                            "FolderchangeInfo",
                                                            "FolderCount",
                                                            "FinalICSState",
                                                            "IsParentFolderBeforeChild",
                                                            "AbstractDeletion"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderChange>(new string[] {
                                                                        "IsPidTagFolderIdExist",
                                                                        "IsPidTagParentFolderIdExist",
                                                                        "IsPidTagSourceKeyValueZero",
                                                                        "IsPidTagParentSourceKeyValueZero"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            0,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        0,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractContentsSync>(new string[] {
                                                            "IsprogessTotalPresent",
                                                            "MessageInfo",
                                                            "AbstractDeletion",
                                                            "IsReadStateChangesExist",
                                                            "FinalICSState",
                                                            "IsSortByMessageDeliveryTime",
                                                            "IsSortByLastModificationTime"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Modeling.Set<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo>>(new string[] {
                                                                        "Rep"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo, Microsoft.Xrt.Runtime.Singleton>()}),
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        1,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "IsNoPermissionObjNotOut",
                                                            "IsPidTagNewFXFolderOut",
                                                            "IsFolderContentNotOut",
                                                            "IsFolderPropertiesNotOut",
                                                            "IsSubFolderPrecededByPidTagFXDelProp",
                                                            "AbsFolderMessage"}, new object[] {
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                        "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                        "MessageList"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                    "IsPidTagEcWarningOut",
                                                                                    "AbsMessage"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                "AbsMessageContent"}, new object[] {
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                            "IsNoPermissionMessageNotOut",
                                                                                                            "AbsMessageChildren",
                                                                                                            "StringPropertiesInUnicode",
                                                                                                            "StringPropertiesInUnicodeCodePage",
                                                                                                            "StringPropertiesInOtherCodePage",
                                                                                                            "IsRTFFormat"}, new object[] {
                                                                                                            false,
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                        false,
                                                                                                                        false}),
                                                                                                            false,
                                                                                                            false,
                                                                                                            false,
                                                                                                            false})})})})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractTopFolder>(new string[] {
                                                            "AbsFolderContent",
                                                            "SubFolderInScope"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                                        "IsPidTagEcWarningOut",
                                                                        "IsNoPermissionObjNotOut",
                                                                        "IsPidTagNewFXFolderOut",
                                                                        "IsFolderContentNotOut",
                                                                        "IsFolderPropertiesNotOut",
                                                                        "IsSubFolderPrecededByPidTagFXDelProp",
                                                                        "AbsFolderMessage"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                                    "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                                    "MessageList"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                                "IsPidTagEcWarningOut",
                                                                                                "AbsMessage"}, new object[] {
                                                                                                false,
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                            "AbsMessageContent"}, new object[] {
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                                        "IsNoPermissionMessageNotOut",
                                                                                                                        "AbsMessageChildren",
                                                                                                                        "StringPropertiesInUnicode",
                                                                                                                        "StringPropertiesInUnicodeCodePage",
                                                                                                                        "StringPropertiesInOtherCodePage",
                                                                                                                        "IsRTFFormat"}, new object[] {
                                                                                                                        false,
                                                                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                                    "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                                    "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                                    false,
                                                                                                                                    false}),
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false})})})})}),
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                            "AbstractICSStateIndex",
                                                            "IdSetGiven",
                                                            "IsNewCnsetReadPropertyChangeNumber",
                                                            "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                            "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                            0,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                            "IsNoPermissionMessageNotOut",
                                                            "AbsMessageChildren",
                                                            "StringPropertiesInUnicode",
                                                            "StringPropertiesInUnicodeCodePage",
                                                            "StringPropertiesInOtherCodePage",
                                                            "IsRTFFormat"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "AbsMessage"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                        "AbsMessageContent"}, new object[] {
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                    "IsNoPermissionMessageNotOut",
                                                                                    "AbsMessageChildren",
                                                                                    "StringPropertiesInUnicode",
                                                                                    "StringPropertiesInUnicodeCodePage",
                                                                                    "StringPropertiesInOtherCodePage",
                                                                                    "IsRTFFormat"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                "AttachmentPrecededByPidTagFXDelProp",
                                                                                                "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                false,
                                                                                                false}),
                                                                                    false,
                                                                                    false,
                                                                                    false,
                                                                                    false})})}),
                                                false}), temp30, "abstractFastTransferStream of FastTransferSourceGetBuffer, state S341");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp31, "transferDataSmallOrEqualToBufferSize of FastTransferSourceGetBuffer, state S341");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp32, "return of FastTransferSourceGetBuffer, state S341");
                                this.Manager.Comment("reaching state \'S357\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp33;
                                this.Manager.Comment("executing step \'call ModifyPermissions(1,3,None)\'");
                                temp33 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels)(0)));
                                this.Manager.Comment("reaching state \'S373\'");
                                this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp33, "return of ModifyPermissions, state S373");
                                this.Manager.Comment("reaching state \'S389\'");
                                int temp34;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp35;
                                this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                                temp35 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp34);
                                this.Manager.Checkpoint("MS-OXCFXICS_R778");
                                this.Manager.Checkpoint("MS-OXCFXICS_R769");
                                this.Manager.Comment("reaching state \'S405\'");
                                this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 8]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 8, temp34, "synchronizationHandleIndex of SynchronizationOpenCollector, state S405");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp35, "return of SynchronizationOpenCollector, state S405");
                                this.Manager.Comment("reaching state \'S421\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp36;
                                this.Manager.Comment("executing step \'call SynchronizationImportReadStateChanges(1,8,6,False)\'");
                                temp36 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportReadStateChanges(1, 8, 6, false);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2260");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                                this.Manager.Checkpoint("MS-OXCFXICS_R905");
                                this.Manager.Comment("reaching state \'S437\'");
                                this.Manager.Comment("checking step \'return SynchronizationImportReadStateChanges/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp36, "return of SynchronizationImportReadStateChanges, state S437");
                                this.Manager.Comment("reaching state \'S453\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp37;
                                this.Manager.Comment("executing step \'call GetPropertiesSpecific(1,6,[\"PidTagMessageFlags\"])\'");
                                temp37 = this.IMS_OXCFXICSAdapterInstance.GetPropertiesSpecific(1, 6, this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "PidTagMessageFlags",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                                this.Manager.Comment("reaching state \'S469\'");
                                this.Manager.Comment("checking step \'return GetPropertiesSpecific/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp37, "return of GetPropertiesSpecific, state S469");
                                this.Manager.Comment("reaching state \'S485\'");
                                bool temp38;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2813,out _)\'");
                                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2813, out temp38);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp38);
                                this.Manager.Comment("reaching state \'S501\'");
                                int temp50 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker4)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker5)));
                                if ((temp50 == 0)) {
                                    this.Manager.Comment("reaching state \'S521\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp39;
                                    this.Manager.Comment("executing step \'call ModifyPermissions(1,3,Owner)\'");
                                    temp39 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels.Owner);
                                    this.Manager.Comment("reaching state \'S553\'");
                                    this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp39, "return of ModifyPermissions, state S553");
                                    this.Manager.Comment("reaching state \'S585\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp40;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp40 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S617\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp40, "return of DeleteFolder, state S617");
                                    this.Manager.Comment("reaching state \'S649\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp41;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp41 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S681\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp41, "return of DeleteFolder, state S681");
                                    this.Manager.Comment("reaching state \'S713\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp42;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp42 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S745\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp42, "return of Release, state S745");
                                    this.Manager.Comment("reaching state \'S777\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp43;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp43 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S809\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp43, "return of Release, state S809");
                                    this.Manager.Comment("reaching state \'S841\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp44;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp44 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S869\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp44, "return of Release, state S869");
                                    this.Manager.Comment("reaching state \'S885\'");
                                    goto label0;
                                }
                                if ((temp50 == 1)) {
                                    this.Manager.Comment("reaching state \'S522\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp45;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp45 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S554\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp45, "return of DeleteFolder, state S554");
                                    this.Manager.Comment("reaching state \'S586\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp46;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp46 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S618\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp46, "return of DeleteFolder, state S618");
                                    this.Manager.Comment("reaching state \'S650\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp47;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp47 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S682\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp47, "return of Release, state S682");
                                    this.Manager.Comment("reaching state \'S714\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp48;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp48 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S746\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp48, "return of Release, state S746");
                                    this.Manager.Comment("reaching state \'S778\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp49;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp49 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S810\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp49, "return of Release, state S810");
                                    this.Manager.Comment("reaching state \'S842\'");
                                    goto label0;
                                }
                                throw new InvalidOperationException("never reached");
                            label0:
;
                                goto label2;
                            }
                            if ((temp77 == 1)) {
                                this.Manager.Comment("reaching state \'S198\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp51;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagIdsetGiven,True,0)\'");
                                temp51 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(0)), true, 0);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2657");
                                this.Manager.Comment("reaching state \'S214\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp51, "return of SynchronizationUploadState, state S214");
                                this.Manager.Comment("reaching state \'S230\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp52;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeen,False,0)\'");
                                temp52 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(1)), false, 0);
                                this.Manager.Comment("reaching state \'S246\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp52, "return of SynchronizationUploadState, state S246");
                                this.Manager.Comment("reaching state \'S262\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp53;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetRead,False,0)\'");
                                temp53 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetRead, false, 0);
                                this.Manager.Comment("reaching state \'S278\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp53, "return of SynchronizationUploadState, state S278");
                                this.Manager.Comment("reaching state \'S294\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp54;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeenFAI,False,0)\'");
                                temp54 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetSeenFAI, false, 0);
                                this.Manager.Comment("reaching state \'S310\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp54, "return of SynchronizationUploadState, state S310");
                                this.Manager.Comment("reaching state \'S326\'");
                                int temp55;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream temp56;
                                bool temp57;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp58;
                                this.Manager.Comment("executing step \'call FastTransferSourceGetBuffer(1,7,Normal,out _,out _,out _)\'");
                                temp58 = this.IMS_OXCFXICSAdapterInstance.FastTransferSourceGetBuffer(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.BufferSize.Normal, out temp55, out temp56, out temp57);
                                this.Manager.Checkpoint("MS-OXCFXICS_R384");
                                this.Manager.Checkpoint("MS-OXCFXICS_R3321");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2188");
                                this.Manager.Checkpoint("MS-OXCFXICS_R1180");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2175");
                                this.Manager.Checkpoint("MS-OXCFXICS_R532");
                                this.Manager.Comment("reaching state \'S342\'");
                                this.Manager.Comment("checking step \'return FastTransferSourceGetBuffer/[out 1,out AbstractFastTransfer" +
                                        "Stream(StreamType=contentsSync,AbstractHierarchySync=AbstractHierarchySync(Folde" +
                                        "rchangeInfo=AbstractFolderChange(IsPidTagFolderIdExist=False,IsPidTagParentFolde" +
                                        "rIdExist=False,IsPidTagSourceKeyValueZero=False,IsPidTagParentSourceKeyValueZero" +
                                        "=False),FolderCount=0,FinalICSState=AbstractState(AbstractICSStateIndex=0,IdSetG" +
                                        "iven=null,IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChan" +
                                        "geNumber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsParentFolderBeforeChi" +
                                        "ld=False,AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted=" +
                                        "null,IsPidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False)),A" +
                                        "bstractContentsSync=AbstractContentsSync(IsprogessTotalPresent=False,MessageInfo" +
                                        "={},AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted={},Is" +
                                        "PidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False),IsReadSta" +
                                        "teChangesExist=False,FinalICSState=AbstractState(AbstractICSStateIndex=1,IdSetGi" +
                                        "ven={},IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChangeN" +
                                        "umber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsSortByMessageDeliveryTim" +
                                        "e=False,IsSortByLastModificationTime=False),AbstractFolderContent=AbstractFolder" +
                                        "Content(IsPidTagEcWarningOut=False,IsNoPermissionObjNotOut=False,IsPidTagNewFXFo" +
                                        "lderOut=False,IsFolderContentNotOut=False,IsFolderPropertiesNotOut=False,IsSubFo" +
                                        "lderPrecededByPidTagFXDelProp=False,AbsFolderMessage=AbstractFolderMessage(IsFol" +
                                        "derMessagesPrecededByPidTagFXDelProp=False,MessageList=AbstractMessageList(IsPid" +
                                        "TagEcWarningOut=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageCon" +
                                        "tent(IsNoPermissionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildre" +
                                        "n(AttachmentPrecededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=F" +
                                        "alse),StringPropertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,St" +
                                        "ringPropertiesInOtherCodePage=False,IsRTFFormat=False))))),AbstractTopFolder=Abs" +
                                        "tractTopFolder(AbsFolderContent=AbstractFolderContent(IsPidTagEcWarningOut=False" +
                                        ",IsNoPermissionObjNotOut=False,IsPidTagNewFXFolderOut=False,IsFolderContentNotOu" +
                                        "t=False,IsFolderPropertiesNotOut=False,IsSubFolderPrecededByPidTagFXDelProp=Fals" +
                                        "e,AbsFolderMessage=AbstractFolderMessage(IsFolderMessagesPrecededByPidTagFXDelPr" +
                                        "op=False,MessageList=AbstractMessageList(IsPidTagEcWarningOut=False,AbsMessage=A" +
                                        "bsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=F" +
                                        "alse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelP" +
                                        "rop=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fa" +
                                        "lse,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=Fals" +
                                        "e,IsRTFFormat=False))))),SubFolderInScope=False),AbstractState=AbstractState(Abs" +
                                        "tractICSStateIndex=0,IdSetGiven=null,IsNewCnsetReadPropertyChangeNumber=False,Is" +
                                        "NewCnsetSeenFAIPropertyChangeNumber=False,IsNewCnsetSeenPropertyChangeNumber=Fal" +
                                        "se),AbstractMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=Fa" +
                                        "lse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelPr" +
                                        "op=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fal" +
                                        "se,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=False" +
                                        ",IsRTFFormat=False),AbstractMessageList=AbstractMessageList(IsPidTagEcWarningOut" +
                                        "=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermis" +
                                        "sionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildren(AttachmentPre" +
                                        "cededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),StringPro" +
                                        "pertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,StringPropertiesI" +
                                        "nOtherCodePage=False,IsRTFFormat=False))),IsSameReadstateChangeNumber=False),out" +
                                        " False]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp55, "transferBufferIndex of FastTransferSourceGetBuffer, state S342");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(new string[] {
                                                "StreamType",
                                                "AbstractHierarchySync",
                                                "AbstractContentsSync",
                                                "AbstractFolderContent",
                                                "AbstractTopFolder",
                                                "AbstractState",
                                                "AbstractMessageContent",
                                                "AbstractMessageList",
                                                "IsSameReadstateChangeNumber"}, new object[] {
                                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.FastTransferStreamType.contentsSync,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractHierarchySync>(new string[] {
                                                            "FolderchangeInfo",
                                                            "FolderCount",
                                                            "FinalICSState",
                                                            "IsParentFolderBeforeChild",
                                                            "AbstractDeletion"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderChange>(new string[] {
                                                                        "IsPidTagFolderIdExist",
                                                                        "IsPidTagParentFolderIdExist",
                                                                        "IsPidTagSourceKeyValueZero",
                                                                        "IsPidTagParentSourceKeyValueZero"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            0,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        0,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractContentsSync>(new string[] {
                                                            "IsprogessTotalPresent",
                                                            "MessageInfo",
                                                            "AbstractDeletion",
                                                            "IsReadStateChangesExist",
                                                            "FinalICSState",
                                                            "IsSortByMessageDeliveryTime",
                                                            "IsSortByLastModificationTime"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Modeling.Set<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo>>(new string[] {
                                                                        "Rep"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo, Microsoft.Xrt.Runtime.Singleton>()}),
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        1,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "IsNoPermissionObjNotOut",
                                                            "IsPidTagNewFXFolderOut",
                                                            "IsFolderContentNotOut",
                                                            "IsFolderPropertiesNotOut",
                                                            "IsSubFolderPrecededByPidTagFXDelProp",
                                                            "AbsFolderMessage"}, new object[] {
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                        "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                        "MessageList"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                    "IsPidTagEcWarningOut",
                                                                                    "AbsMessage"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                "AbsMessageContent"}, new object[] {
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                            "IsNoPermissionMessageNotOut",
                                                                                                            "AbsMessageChildren",
                                                                                                            "StringPropertiesInUnicode",
                                                                                                            "StringPropertiesInUnicodeCodePage",
                                                                                                            "StringPropertiesInOtherCodePage",
                                                                                                            "IsRTFFormat"}, new object[] {
                                                                                                            false,
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                        false,
                                                                                                                        false}),
                                                                                                            false,
                                                                                                            false,
                                                                                                            false,
                                                                                                            false})})})})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractTopFolder>(new string[] {
                                                            "AbsFolderContent",
                                                            "SubFolderInScope"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                                        "IsPidTagEcWarningOut",
                                                                        "IsNoPermissionObjNotOut",
                                                                        "IsPidTagNewFXFolderOut",
                                                                        "IsFolderContentNotOut",
                                                                        "IsFolderPropertiesNotOut",
                                                                        "IsSubFolderPrecededByPidTagFXDelProp",
                                                                        "AbsFolderMessage"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                                    "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                                    "MessageList"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                                "IsPidTagEcWarningOut",
                                                                                                "AbsMessage"}, new object[] {
                                                                                                false,
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                            "AbsMessageContent"}, new object[] {
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                                        "IsNoPermissionMessageNotOut",
                                                                                                                        "AbsMessageChildren",
                                                                                                                        "StringPropertiesInUnicode",
                                                                                                                        "StringPropertiesInUnicodeCodePage",
                                                                                                                        "StringPropertiesInOtherCodePage",
                                                                                                                        "IsRTFFormat"}, new object[] {
                                                                                                                        false,
                                                                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                                    "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                                    "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                                    false,
                                                                                                                                    false}),
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false})})})})}),
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                            "AbstractICSStateIndex",
                                                            "IdSetGiven",
                                                            "IsNewCnsetReadPropertyChangeNumber",
                                                            "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                            "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                            0,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                            "IsNoPermissionMessageNotOut",
                                                            "AbsMessageChildren",
                                                            "StringPropertiesInUnicode",
                                                            "StringPropertiesInUnicodeCodePage",
                                                            "StringPropertiesInOtherCodePage",
                                                            "IsRTFFormat"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "AbsMessage"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                        "AbsMessageContent"}, new object[] {
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                    "IsNoPermissionMessageNotOut",
                                                                                    "AbsMessageChildren",
                                                                                    "StringPropertiesInUnicode",
                                                                                    "StringPropertiesInUnicodeCodePage",
                                                                                    "StringPropertiesInOtherCodePage",
                                                                                    "IsRTFFormat"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                "AttachmentPrecededByPidTagFXDelProp",
                                                                                                "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                false,
                                                                                                false}),
                                                                                    false,
                                                                                    false,
                                                                                    false,
                                                                                    false})})}),
                                                false}), temp56, "abstractFastTransferStream of FastTransferSourceGetBuffer, state S342");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp57, "transferDataSmallOrEqualToBufferSize of FastTransferSourceGetBuffer, state S342");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp58, "return of FastTransferSourceGetBuffer, state S342");
                                this.Manager.Comment("reaching state \'S358\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp59;
                                this.Manager.Comment("executing step \'call ModifyPermissions(1,3,None)\'");
                                temp59 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels)(0)));
                                this.Manager.Comment("reaching state \'S374\'");
                                this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp59, "return of ModifyPermissions, state S374");
                                this.Manager.Comment("reaching state \'S390\'");
                                int temp60;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp61;
                                this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                                temp61 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp60);
                                this.Manager.Checkpoint("MS-OXCFXICS_R778");
                                this.Manager.Checkpoint("MS-OXCFXICS_R769");
                                this.Manager.Comment("reaching state \'S406\'");
                                this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 8]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 8, temp60, "synchronizationHandleIndex of SynchronizationOpenCollector, state S406");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp61, "return of SynchronizationOpenCollector, state S406");
                                this.Manager.Comment("reaching state \'S422\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp62;
                                this.Manager.Comment("executing step \'call SynchronizationImportReadStateChanges(1,8,6,False)\'");
                                temp62 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportReadStateChanges(1, 8, 6, false);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2260");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                                this.Manager.Checkpoint("MS-OXCFXICS_R905");
                                this.Manager.Comment("reaching state \'S438\'");
                                this.Manager.Comment("checking step \'return SynchronizationImportReadStateChanges/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp62, "return of SynchronizationImportReadStateChanges, state S438");
                                this.Manager.Comment("reaching state \'S454\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp63;
                                this.Manager.Comment("executing step \'call GetPropertiesSpecific(1,6,[\"PidTagMessageFlags\"])\'");
                                temp63 = this.IMS_OXCFXICSAdapterInstance.GetPropertiesSpecific(1, 6, this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "PidTagMessageFlags",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                                this.Manager.Comment("reaching state \'S470\'");
                                this.Manager.Comment("checking step \'return GetPropertiesSpecific/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp63, "return of GetPropertiesSpecific, state S470");
                                this.Manager.Comment("reaching state \'S486\'");
                                bool temp64;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2813,out _)\'");
                                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2813, out temp64);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp64);
                                this.Manager.Comment("reaching state \'S502\'");
                                int temp76 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker7)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker8)));
                                if ((temp76 == 0)) {
                                    this.Manager.Comment("reaching state \'S523\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp65;
                                    this.Manager.Comment("executing step \'call ModifyPermissions(1,3,Owner)\'");
                                    temp65 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels.Owner);
                                    this.Manager.Comment("reaching state \'S555\'");
                                    this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp65, "return of ModifyPermissions, state S555");
                                    this.Manager.Comment("reaching state \'S587\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp66;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp66 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S619\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp66, "return of DeleteFolder, state S619");
                                    this.Manager.Comment("reaching state \'S651\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp67;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp67 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S683\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp67, "return of DeleteFolder, state S683");
                                    this.Manager.Comment("reaching state \'S715\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp68;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp68 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S747\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp68, "return of Release, state S747");
                                    this.Manager.Comment("reaching state \'S779\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp69;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp69 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S811\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp69, "return of Release, state S811");
                                    this.Manager.Comment("reaching state \'S843\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp70;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp70 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S870\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp70, "return of Release, state S870");
                                    this.Manager.Comment("reaching state \'S886\'");
                                    goto label1;
                                }
                                if ((temp76 == 1)) {
                                    this.Manager.Comment("reaching state \'S524\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp71;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp71 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S556\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp71, "return of DeleteFolder, state S556");
                                    this.Manager.Comment("reaching state \'S588\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp72;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp72 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S620\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp72, "return of DeleteFolder, state S620");
                                    this.Manager.Comment("reaching state \'S652\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp73;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp73 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S684\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp73, "return of Release, state S684");
                                    this.Manager.Comment("reaching state \'S716\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp74;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp74 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S748\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp74, "return of Release, state S748");
                                    this.Manager.Comment("reaching state \'S780\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp75;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp75 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S812\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp75, "return of Release, state S812");
                                    this.Manager.Comment("reaching state \'S844\'");
                                    goto label1;
                                }
                                throw new InvalidOperationException("never reached");
                            label1:
;
                                goto label2;
                            }
                            throw new InvalidOperationException("never reached");
                        label2:
;
                            goto label6;
                        }
                        if ((temp152 == 1)) {
                            this.Manager.Comment("reaching state \'S20\'");
                            this.Manager.Comment("executing step \'call Connect(1,PublicFolderServer)\'");
                            this.IMS_OXCFXICSAdapterInstance.Connect(1, ((Microsoft.Protocols.TestSuites.Common.ConnectionType)(0)));
                            this.Manager.Comment("reaching state \'S28\'");
                            this.Manager.Comment("checking step \'return Connect\'");
                            this.Manager.Comment("reaching state \'S36\'");
                            int temp78;
                            int temp79;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp80;
                            this.Manager.Comment("executing step \'call Logon(1,Private,out _,out _)\'");
                            temp80 = this.IMS_OXCFXICSAdapterInstance.Logon(1, ((Microsoft.Protocols.TestSuites.Common.LogonFlags)(1)), out temp78, out temp79);
                            this.Manager.Comment("reaching state \'S44\'");
                            this.Manager.Comment("checking step \'return Logon/[out 1,out 1]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp78, "logonHandleIndex of Logon, state S44");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp79, "inboxFolderIdIndex of Logon, state S44");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp80, "return of Logon, state S44");
                            this.Manager.Comment("reaching state \'S52\'");
                            int temp81;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp82;
                            this.Manager.Comment("executing step \'call OpenFolder(1,1,1,out _)\'");
                            temp82 = this.IMS_OXCFXICSAdapterInstance.OpenFolder(1, 1, 1, out temp81);
                            this.Manager.Comment("reaching state \'S60\'");
                            this.Manager.Comment("checking step \'return OpenFolder/[out 2]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp81, "folderHandleIndex of OpenFolder, state S60");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp82, "return of OpenFolder, state S60");
                            this.Manager.Comment("reaching state \'S68\'");
                            int temp83;
                            int temp84;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp85;
                            this.Manager.Comment("executing step \'call CreateFolder(1,2,\"test\",out _,out _)\'");
                            temp85 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 2, "test", out temp83, out temp84);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                            this.Manager.Comment("reaching state \'S76\'");
                            this.Manager.Comment("checking step \'return CreateFolder/[out 2,out 3]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp83, "folderIdIndex of CreateFolder, state S76");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp84, "folderHandleIndex of CreateFolder, state S76");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp85, "return of CreateFolder, state S76");
                            this.Manager.Comment("reaching state \'S84\'");
                            int temp86;
                            int temp87;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp88;
                            this.Manager.Comment("executing step \'call CreateFolder(1,3,\"SubFolder\",out _,out _)\'");
                            temp88 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 3, "SubFolder", out temp86, out temp87);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                            this.Manager.Comment("reaching state \'S92\'");
                            this.Manager.Comment("checking step \'return CreateFolder/[out 3,out 4]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp86, "folderIdIndex of CreateFolder, state S92");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, temp87, "folderHandleIndex of CreateFolder, state S92");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp88, "return of CreateFolder, state S92");
                            this.Manager.Comment("reaching state \'S100\'");
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp89;
                            this.Manager.Comment("executing step \'call GetLocalReplicaIds(1,1,3)\'");
                            temp89 = this.IMS_OXCFXICSAdapterInstance.GetLocalReplicaIds(1, 1, 3u);
                            this.Manager.Checkpoint("MS-OXCFXICS_R925");
                            this.Manager.Comment("reaching state \'S108\'");
                            this.Manager.Comment("checking step \'return GetLocalReplicaIds/Success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp89, "return of GetLocalReplicaIds, state S108");
                            this.Manager.Comment("reaching state \'S116\'");
                            int temp90;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp91;
                            this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                            temp91 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp90);
                            this.Manager.Checkpoint("MS-OXCFXICS_R778");
                            this.Manager.Checkpoint("MS-OXCFXICS_R769");
                            this.Manager.Comment("reaching state \'S124\'");
                            this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 5]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, temp90, "synchronizationHandleIndex of SynchronizationOpenCollector, state S124");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp91, "return of SynchronizationOpenCollector, state S124");
                            this.Manager.Comment("reaching state \'S132\'");
                            int temp92;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp93;
                            this.Manager.Comment("executing step \'call SynchronizationImportMessageChange(1,5,0,Normal,out _)\'");
                            temp93 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportMessageChange(1, 5, 0, ((Microsoft.Protocols.TestSuites.Common.ImportFlag)(0)), out temp92);
                            this.Manager.Checkpoint("MS-OXCFXICS_R814");
                            this.Manager.Checkpoint("MS-OXCFXICS_R805");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1897");
                            this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                            this.Manager.Checkpoint("MS-OXCFXICS_R782");
                            this.Manager.Comment("reaching state \'S140\'");
                            this.Manager.Comment("checking step \'return SynchronizationImportMessageChange/[out 6]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, temp92, "importMessageHandleIndex of SynchronizationImportMessageChange, state S140");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp93, "return of SynchronizationImportMessageChange, state S140");
                            this.Manager.Comment("reaching state \'S148\'");
                            int temp94;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp95;
                            this.Manager.Comment("executing step \'call SaveChangesMessage(1,6,out _)\'");
                            temp95 = this.IMS_OXCFXICSAdapterInstance.SaveChangesMessage(1, 6, out temp94);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1910");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1906");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1898");
                            this.Manager.Comment("reaching state \'S156\'");
                            this.Manager.Comment("checking step \'return SaveChangesMessage/[out 4]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, temp94, "messageIdIndex of SaveChangesMessage, state S156");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp95, "return of SaveChangesMessage, state S156");
                            this.Manager.Comment("reaching state \'S164\'");
                            int temp96;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp97;
                            this.Manager.Comment("executing step \'call SynchronizationConfigure(1,4,Contents,Unicode|ForceUnicode,N" +
                                    "one,Eid,[\"PidTagCreationTime\"],out _)\'");
                            temp97 = this.IMS_OXCFXICSAdapterInstance.SynchronizationConfigure(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SendOptionAlls)(9)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationFlag)(0)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationExtraFlag)(1)), this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "PidTagCreationTime",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}), out temp96);
                            this.Manager.Checkpoint("MS-OXCFXICS_R669");
                            this.Manager.Checkpoint("MS-OXCFXICS_R641");
                            this.Manager.Comment("reaching state \'S172\'");
                            this.Manager.Comment("checking step \'return SynchronizationConfigure/[out 7]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 7, temp96, "downloadcontextHandleIndex of SynchronizationConfigure, state S172");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp97, "return of SynchronizationConfigure, state S172");
                            this.Manager.Comment("reaching state \'S180\'");
                            bool temp98;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(2657,out _)\'");
                            this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2657, out temp98);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp98);
                            this.Manager.Comment("reaching state \'S188\'");
                            int temp151 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker10)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker13)));
                            if ((temp151 == 0)) {
                                this.Manager.Comment("reaching state \'S199\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp99;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagIdsetGiven,True,0)\'");
                                temp99 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(0)), true, 0);
                                this.Manager.Comment("reaching state \'S215\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/InvalidParameter\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult.InvalidParameter, temp99, "return of SynchronizationUploadState, state S215");
                                this.Manager.Comment("reaching state \'S231\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp100;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeen,False,0)\'");
                                temp100 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(1)), false, 0);
                                this.Manager.Comment("reaching state \'S247\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp100, "return of SynchronizationUploadState, state S247");
                                this.Manager.Comment("reaching state \'S263\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp101;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetRead,False,0)\'");
                                temp101 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetRead, false, 0);
                                this.Manager.Comment("reaching state \'S279\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp101, "return of SynchronizationUploadState, state S279");
                                this.Manager.Comment("reaching state \'S295\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp102;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeenFAI,False,0)\'");
                                temp102 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetSeenFAI, false, 0);
                                this.Manager.Comment("reaching state \'S311\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp102, "return of SynchronizationUploadState, state S311");
                                this.Manager.Comment("reaching state \'S327\'");
                                int temp103;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream temp104;
                                bool temp105;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp106;
                                this.Manager.Comment("executing step \'call FastTransferSourceGetBuffer(1,7,Normal,out _,out _,out _)\'");
                                temp106 = this.IMS_OXCFXICSAdapterInstance.FastTransferSourceGetBuffer(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.BufferSize.Normal, out temp103, out temp104, out temp105);
                                this.Manager.Checkpoint("MS-OXCFXICS_R384");
                                this.Manager.Checkpoint("MS-OXCFXICS_R3321");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2188");
                                this.Manager.Checkpoint("MS-OXCFXICS_R1180");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2175");
                                this.Manager.Checkpoint("MS-OXCFXICS_R532");
                                this.Manager.Comment("reaching state \'S343\'");
                                this.Manager.Comment("checking step \'return FastTransferSourceGetBuffer/[out 1,out AbstractFastTransfer" +
                                        "Stream(StreamType=contentsSync,AbstractHierarchySync=AbstractHierarchySync(Folde" +
                                        "rchangeInfo=AbstractFolderChange(IsPidTagFolderIdExist=False,IsPidTagParentFolde" +
                                        "rIdExist=False,IsPidTagSourceKeyValueZero=False,IsPidTagParentSourceKeyValueZero" +
                                        "=False),FolderCount=0,FinalICSState=AbstractState(AbstractICSStateIndex=0,IdSetG" +
                                        "iven=null,IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChan" +
                                        "geNumber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsParentFolderBeforeChi" +
                                        "ld=False,AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted=" +
                                        "null,IsPidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False)),A" +
                                        "bstractContentsSync=AbstractContentsSync(IsprogessTotalPresent=False,MessageInfo" +
                                        "={},AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted={},Is" +
                                        "PidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False),IsReadSta" +
                                        "teChangesExist=False,FinalICSState=AbstractState(AbstractICSStateIndex=1,IdSetGi" +
                                        "ven={},IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChangeN" +
                                        "umber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsSortByMessageDeliveryTim" +
                                        "e=False,IsSortByLastModificationTime=False),AbstractFolderContent=AbstractFolder" +
                                        "Content(IsPidTagEcWarningOut=False,IsNoPermissionObjNotOut=False,IsPidTagNewFXFo" +
                                        "lderOut=False,IsFolderContentNotOut=False,IsFolderPropertiesNotOut=False,IsSubFo" +
                                        "lderPrecededByPidTagFXDelProp=False,AbsFolderMessage=AbstractFolderMessage(IsFol" +
                                        "derMessagesPrecededByPidTagFXDelProp=False,MessageList=AbstractMessageList(IsPid" +
                                        "TagEcWarningOut=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageCon" +
                                        "tent(IsNoPermissionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildre" +
                                        "n(AttachmentPrecededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=F" +
                                        "alse),StringPropertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,St" +
                                        "ringPropertiesInOtherCodePage=False,IsRTFFormat=False))))),AbstractTopFolder=Abs" +
                                        "tractTopFolder(AbsFolderContent=AbstractFolderContent(IsPidTagEcWarningOut=False" +
                                        ",IsNoPermissionObjNotOut=False,IsPidTagNewFXFolderOut=False,IsFolderContentNotOu" +
                                        "t=False,IsFolderPropertiesNotOut=False,IsSubFolderPrecededByPidTagFXDelProp=Fals" +
                                        "e,AbsFolderMessage=AbstractFolderMessage(IsFolderMessagesPrecededByPidTagFXDelPr" +
                                        "op=False,MessageList=AbstractMessageList(IsPidTagEcWarningOut=False,AbsMessage=A" +
                                        "bsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=F" +
                                        "alse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelP" +
                                        "rop=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fa" +
                                        "lse,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=Fals" +
                                        "e,IsRTFFormat=False))))),SubFolderInScope=False),AbstractState=AbstractState(Abs" +
                                        "tractICSStateIndex=0,IdSetGiven=null,IsNewCnsetReadPropertyChangeNumber=False,Is" +
                                        "NewCnsetSeenFAIPropertyChangeNumber=False,IsNewCnsetSeenPropertyChangeNumber=Fal" +
                                        "se),AbstractMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=Fa" +
                                        "lse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelPr" +
                                        "op=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fal" +
                                        "se,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=False" +
                                        ",IsRTFFormat=False),AbstractMessageList=AbstractMessageList(IsPidTagEcWarningOut" +
                                        "=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermis" +
                                        "sionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildren(AttachmentPre" +
                                        "cededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),StringPro" +
                                        "pertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,StringPropertiesI" +
                                        "nOtherCodePage=False,IsRTFFormat=False))),IsSameReadstateChangeNumber=False),out" +
                                        " False]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp103, "transferBufferIndex of FastTransferSourceGetBuffer, state S343");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(new string[] {
                                                "StreamType",
                                                "AbstractHierarchySync",
                                                "AbstractContentsSync",
                                                "AbstractFolderContent",
                                                "AbstractTopFolder",
                                                "AbstractState",
                                                "AbstractMessageContent",
                                                "AbstractMessageList",
                                                "IsSameReadstateChangeNumber"}, new object[] {
                                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.FastTransferStreamType.contentsSync,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractHierarchySync>(new string[] {
                                                            "FolderchangeInfo",
                                                            "FolderCount",
                                                            "FinalICSState",
                                                            "IsParentFolderBeforeChild",
                                                            "AbstractDeletion"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderChange>(new string[] {
                                                                        "IsPidTagFolderIdExist",
                                                                        "IsPidTagParentFolderIdExist",
                                                                        "IsPidTagSourceKeyValueZero",
                                                                        "IsPidTagParentSourceKeyValueZero"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            0,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        0,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractContentsSync>(new string[] {
                                                            "IsprogessTotalPresent",
                                                            "MessageInfo",
                                                            "AbstractDeletion",
                                                            "IsReadStateChangesExist",
                                                            "FinalICSState",
                                                            "IsSortByMessageDeliveryTime",
                                                            "IsSortByLastModificationTime"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Modeling.Set<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo>>(new string[] {
                                                                        "Rep"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo, Microsoft.Xrt.Runtime.Singleton>()}),
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        1,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "IsNoPermissionObjNotOut",
                                                            "IsPidTagNewFXFolderOut",
                                                            "IsFolderContentNotOut",
                                                            "IsFolderPropertiesNotOut",
                                                            "IsSubFolderPrecededByPidTagFXDelProp",
                                                            "AbsFolderMessage"}, new object[] {
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                        "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                        "MessageList"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                    "IsPidTagEcWarningOut",
                                                                                    "AbsMessage"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                "AbsMessageContent"}, new object[] {
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                            "IsNoPermissionMessageNotOut",
                                                                                                            "AbsMessageChildren",
                                                                                                            "StringPropertiesInUnicode",
                                                                                                            "StringPropertiesInUnicodeCodePage",
                                                                                                            "StringPropertiesInOtherCodePage",
                                                                                                            "IsRTFFormat"}, new object[] {
                                                                                                            false,
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                        false,
                                                                                                                        false}),
                                                                                                            false,
                                                                                                            false,
                                                                                                            false,
                                                                                                            false})})})})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractTopFolder>(new string[] {
                                                            "AbsFolderContent",
                                                            "SubFolderInScope"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                                        "IsPidTagEcWarningOut",
                                                                        "IsNoPermissionObjNotOut",
                                                                        "IsPidTagNewFXFolderOut",
                                                                        "IsFolderContentNotOut",
                                                                        "IsFolderPropertiesNotOut",
                                                                        "IsSubFolderPrecededByPidTagFXDelProp",
                                                                        "AbsFolderMessage"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                                    "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                                    "MessageList"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                                "IsPidTagEcWarningOut",
                                                                                                "AbsMessage"}, new object[] {
                                                                                                false,
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                            "AbsMessageContent"}, new object[] {
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                                        "IsNoPermissionMessageNotOut",
                                                                                                                        "AbsMessageChildren",
                                                                                                                        "StringPropertiesInUnicode",
                                                                                                                        "StringPropertiesInUnicodeCodePage",
                                                                                                                        "StringPropertiesInOtherCodePage",
                                                                                                                        "IsRTFFormat"}, new object[] {
                                                                                                                        false,
                                                                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                                    "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                                    "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                                    false,
                                                                                                                                    false}),
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false})})})})}),
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                            "AbstractICSStateIndex",
                                                            "IdSetGiven",
                                                            "IsNewCnsetReadPropertyChangeNumber",
                                                            "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                            "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                            0,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                            "IsNoPermissionMessageNotOut",
                                                            "AbsMessageChildren",
                                                            "StringPropertiesInUnicode",
                                                            "StringPropertiesInUnicodeCodePage",
                                                            "StringPropertiesInOtherCodePage",
                                                            "IsRTFFormat"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "AbsMessage"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                        "AbsMessageContent"}, new object[] {
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                    "IsNoPermissionMessageNotOut",
                                                                                    "AbsMessageChildren",
                                                                                    "StringPropertiesInUnicode",
                                                                                    "StringPropertiesInUnicodeCodePage",
                                                                                    "StringPropertiesInOtherCodePage",
                                                                                    "IsRTFFormat"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                "AttachmentPrecededByPidTagFXDelProp",
                                                                                                "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                false,
                                                                                                false}),
                                                                                    false,
                                                                                    false,
                                                                                    false,
                                                                                    false})})}),
                                                false}), temp104, "abstractFastTransferStream of FastTransferSourceGetBuffer, state S343");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp105, "transferDataSmallOrEqualToBufferSize of FastTransferSourceGetBuffer, state S343");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp106, "return of FastTransferSourceGetBuffer, state S343");
                                this.Manager.Comment("reaching state \'S359\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp107;
                                this.Manager.Comment("executing step \'call ModifyPermissions(1,3,None)\'");
                                temp107 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels)(0)));
                                this.Manager.Comment("reaching state \'S375\'");
                                this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp107, "return of ModifyPermissions, state S375");
                                this.Manager.Comment("reaching state \'S391\'");
                                int temp108;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp109;
                                this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                                temp109 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp108);
                                this.Manager.Checkpoint("MS-OXCFXICS_R778");
                                this.Manager.Checkpoint("MS-OXCFXICS_R769");
                                this.Manager.Comment("reaching state \'S407\'");
                                this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 8]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 8, temp108, "synchronizationHandleIndex of SynchronizationOpenCollector, state S407");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp109, "return of SynchronizationOpenCollector, state S407");
                                this.Manager.Comment("reaching state \'S423\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp110;
                                this.Manager.Comment("executing step \'call SynchronizationImportReadStateChanges(1,8,6,False)\'");
                                temp110 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportReadStateChanges(1, 8, 6, false);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2260");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                                this.Manager.Checkpoint("MS-OXCFXICS_R905");
                                this.Manager.Comment("reaching state \'S439\'");
                                this.Manager.Comment("checking step \'return SynchronizationImportReadStateChanges/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp110, "return of SynchronizationImportReadStateChanges, state S439");
                                this.Manager.Comment("reaching state \'S455\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp111;
                                this.Manager.Comment("executing step \'call GetPropertiesSpecific(1,6,[\"PidTagMessageFlags\"])\'");
                                temp111 = this.IMS_OXCFXICSAdapterInstance.GetPropertiesSpecific(1, 6, this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "PidTagMessageFlags",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                                this.Manager.Comment("reaching state \'S471\'");
                                this.Manager.Comment("checking step \'return GetPropertiesSpecific/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp111, "return of GetPropertiesSpecific, state S471");
                                this.Manager.Comment("reaching state \'S487\'");
                                bool temp112;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2813,out _)\'");
                                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2813, out temp112);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp112);
                                this.Manager.Comment("reaching state \'S503\'");
                                int temp124 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker11)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker12)));
                                if ((temp124 == 0)) {
                                    this.Manager.Comment("reaching state \'S525\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp113;
                                    this.Manager.Comment("executing step \'call ModifyPermissions(1,3,Owner)\'");
                                    temp113 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels.Owner);
                                    this.Manager.Comment("reaching state \'S557\'");
                                    this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp113, "return of ModifyPermissions, state S557");
                                    this.Manager.Comment("reaching state \'S589\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp114;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp114 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S621\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp114, "return of DeleteFolder, state S621");
                                    this.Manager.Comment("reaching state \'S653\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp115;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp115 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S685\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp115, "return of DeleteFolder, state S685");
                                    this.Manager.Comment("reaching state \'S717\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp116;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp116 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S749\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp116, "return of Release, state S749");
                                    this.Manager.Comment("reaching state \'S781\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp117;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp117 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S813\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp117, "return of Release, state S813");
                                    this.Manager.Comment("reaching state \'S845\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp118;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp118 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S871\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp118, "return of Release, state S871");
                                    this.Manager.Comment("reaching state \'S887\'");
                                    goto label3;
                                }
                                if ((temp124 == 1)) {
                                    this.Manager.Comment("reaching state \'S526\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp119;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp119 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S558\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp119, "return of DeleteFolder, state S558");
                                    this.Manager.Comment("reaching state \'S590\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp120;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp120 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S622\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp120, "return of DeleteFolder, state S622");
                                    this.Manager.Comment("reaching state \'S654\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp121;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp121 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S686\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp121, "return of Release, state S686");
                                    this.Manager.Comment("reaching state \'S718\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp122;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp122 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S750\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp122, "return of Release, state S750");
                                    this.Manager.Comment("reaching state \'S782\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp123;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp123 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S814\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp123, "return of Release, state S814");
                                    this.Manager.Comment("reaching state \'S846\'");
                                    goto label3;
                                }
                                throw new InvalidOperationException("never reached");
                            label3:
;
                                goto label5;
                            }
                            if ((temp151 == 1)) {
                                this.Manager.Comment("reaching state \'S200\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp125;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagIdsetGiven,True,0)\'");
                                temp125 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(0)), true, 0);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2657");
                                this.Manager.Comment("reaching state \'S216\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp125, "return of SynchronizationUploadState, state S216");
                                this.Manager.Comment("reaching state \'S232\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp126;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeen,False,0)\'");
                                temp126 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(1)), false, 0);
                                this.Manager.Comment("reaching state \'S248\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp126, "return of SynchronizationUploadState, state S248");
                                this.Manager.Comment("reaching state \'S264\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp127;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetRead,False,0)\'");
                                temp127 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetRead, false, 0);
                                this.Manager.Comment("reaching state \'S280\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp127, "return of SynchronizationUploadState, state S280");
                                this.Manager.Comment("reaching state \'S296\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp128;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeenFAI,False,0)\'");
                                temp128 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetSeenFAI, false, 0);
                                this.Manager.Comment("reaching state \'S312\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp128, "return of SynchronizationUploadState, state S312");
                                this.Manager.Comment("reaching state \'S328\'");
                                int temp129;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream temp130;
                                bool temp131;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp132;
                                this.Manager.Comment("executing step \'call FastTransferSourceGetBuffer(1,7,Normal,out _,out _,out _)\'");
                                temp132 = this.IMS_OXCFXICSAdapterInstance.FastTransferSourceGetBuffer(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.BufferSize.Normal, out temp129, out temp130, out temp131);
                                this.Manager.Checkpoint("MS-OXCFXICS_R384");
                                this.Manager.Checkpoint("MS-OXCFXICS_R3321");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2188");
                                this.Manager.Checkpoint("MS-OXCFXICS_R1180");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2175");
                                this.Manager.Checkpoint("MS-OXCFXICS_R532");
                                this.Manager.Comment("reaching state \'S344\'");
                                this.Manager.Comment("checking step \'return FastTransferSourceGetBuffer/[out 1,out AbstractFastTransfer" +
                                        "Stream(StreamType=contentsSync,AbstractHierarchySync=AbstractHierarchySync(Folde" +
                                        "rchangeInfo=AbstractFolderChange(IsPidTagFolderIdExist=False,IsPidTagParentFolde" +
                                        "rIdExist=False,IsPidTagSourceKeyValueZero=False,IsPidTagParentSourceKeyValueZero" +
                                        "=False),FolderCount=0,FinalICSState=AbstractState(AbstractICSStateIndex=0,IdSetG" +
                                        "iven=null,IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChan" +
                                        "geNumber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsParentFolderBeforeChi" +
                                        "ld=False,AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted=" +
                                        "null,IsPidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False)),A" +
                                        "bstractContentsSync=AbstractContentsSync(IsprogessTotalPresent=False,MessageInfo" +
                                        "={},AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted={},Is" +
                                        "PidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False),IsReadSta" +
                                        "teChangesExist=False,FinalICSState=AbstractState(AbstractICSStateIndex=1,IdSetGi" +
                                        "ven={},IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChangeN" +
                                        "umber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsSortByMessageDeliveryTim" +
                                        "e=False,IsSortByLastModificationTime=False),AbstractFolderContent=AbstractFolder" +
                                        "Content(IsPidTagEcWarningOut=False,IsNoPermissionObjNotOut=False,IsPidTagNewFXFo" +
                                        "lderOut=False,IsFolderContentNotOut=False,IsFolderPropertiesNotOut=False,IsSubFo" +
                                        "lderPrecededByPidTagFXDelProp=False,AbsFolderMessage=AbstractFolderMessage(IsFol" +
                                        "derMessagesPrecededByPidTagFXDelProp=False,MessageList=AbstractMessageList(IsPid" +
                                        "TagEcWarningOut=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageCon" +
                                        "tent(IsNoPermissionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildre" +
                                        "n(AttachmentPrecededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=F" +
                                        "alse),StringPropertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,St" +
                                        "ringPropertiesInOtherCodePage=False,IsRTFFormat=False))))),AbstractTopFolder=Abs" +
                                        "tractTopFolder(AbsFolderContent=AbstractFolderContent(IsPidTagEcWarningOut=False" +
                                        ",IsNoPermissionObjNotOut=False,IsPidTagNewFXFolderOut=False,IsFolderContentNotOu" +
                                        "t=False,IsFolderPropertiesNotOut=False,IsSubFolderPrecededByPidTagFXDelProp=Fals" +
                                        "e,AbsFolderMessage=AbstractFolderMessage(IsFolderMessagesPrecededByPidTagFXDelPr" +
                                        "op=False,MessageList=AbstractMessageList(IsPidTagEcWarningOut=False,AbsMessage=A" +
                                        "bsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=F" +
                                        "alse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelP" +
                                        "rop=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fa" +
                                        "lse,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=Fals" +
                                        "e,IsRTFFormat=False))))),SubFolderInScope=False),AbstractState=AbstractState(Abs" +
                                        "tractICSStateIndex=0,IdSetGiven=null,IsNewCnsetReadPropertyChangeNumber=False,Is" +
                                        "NewCnsetSeenFAIPropertyChangeNumber=False,IsNewCnsetSeenPropertyChangeNumber=Fal" +
                                        "se),AbstractMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=Fa" +
                                        "lse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelPr" +
                                        "op=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fal" +
                                        "se,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=False" +
                                        ",IsRTFFormat=False),AbstractMessageList=AbstractMessageList(IsPidTagEcWarningOut" +
                                        "=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermis" +
                                        "sionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildren(AttachmentPre" +
                                        "cededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),StringPro" +
                                        "pertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,StringPropertiesI" +
                                        "nOtherCodePage=False,IsRTFFormat=False))),IsSameReadstateChangeNumber=False),out" +
                                        " False]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp129, "transferBufferIndex of FastTransferSourceGetBuffer, state S344");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(new string[] {
                                                "StreamType",
                                                "AbstractHierarchySync",
                                                "AbstractContentsSync",
                                                "AbstractFolderContent",
                                                "AbstractTopFolder",
                                                "AbstractState",
                                                "AbstractMessageContent",
                                                "AbstractMessageList",
                                                "IsSameReadstateChangeNumber"}, new object[] {
                                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.FastTransferStreamType.contentsSync,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractHierarchySync>(new string[] {
                                                            "FolderchangeInfo",
                                                            "FolderCount",
                                                            "FinalICSState",
                                                            "IsParentFolderBeforeChild",
                                                            "AbstractDeletion"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderChange>(new string[] {
                                                                        "IsPidTagFolderIdExist",
                                                                        "IsPidTagParentFolderIdExist",
                                                                        "IsPidTagSourceKeyValueZero",
                                                                        "IsPidTagParentSourceKeyValueZero"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            0,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        0,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractContentsSync>(new string[] {
                                                            "IsprogessTotalPresent",
                                                            "MessageInfo",
                                                            "AbstractDeletion",
                                                            "IsReadStateChangesExist",
                                                            "FinalICSState",
                                                            "IsSortByMessageDeliveryTime",
                                                            "IsSortByLastModificationTime"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Modeling.Set<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo>>(new string[] {
                                                                        "Rep"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo, Microsoft.Xrt.Runtime.Singleton>()}),
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        1,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "IsNoPermissionObjNotOut",
                                                            "IsPidTagNewFXFolderOut",
                                                            "IsFolderContentNotOut",
                                                            "IsFolderPropertiesNotOut",
                                                            "IsSubFolderPrecededByPidTagFXDelProp",
                                                            "AbsFolderMessage"}, new object[] {
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                        "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                        "MessageList"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                    "IsPidTagEcWarningOut",
                                                                                    "AbsMessage"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                "AbsMessageContent"}, new object[] {
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                            "IsNoPermissionMessageNotOut",
                                                                                                            "AbsMessageChildren",
                                                                                                            "StringPropertiesInUnicode",
                                                                                                            "StringPropertiesInUnicodeCodePage",
                                                                                                            "StringPropertiesInOtherCodePage",
                                                                                                            "IsRTFFormat"}, new object[] {
                                                                                                            false,
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                        false,
                                                                                                                        false}),
                                                                                                            false,
                                                                                                            false,
                                                                                                            false,
                                                                                                            false})})})})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractTopFolder>(new string[] {
                                                            "AbsFolderContent",
                                                            "SubFolderInScope"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                                        "IsPidTagEcWarningOut",
                                                                        "IsNoPermissionObjNotOut",
                                                                        "IsPidTagNewFXFolderOut",
                                                                        "IsFolderContentNotOut",
                                                                        "IsFolderPropertiesNotOut",
                                                                        "IsSubFolderPrecededByPidTagFXDelProp",
                                                                        "AbsFolderMessage"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                                    "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                                    "MessageList"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                                "IsPidTagEcWarningOut",
                                                                                                "AbsMessage"}, new object[] {
                                                                                                false,
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                            "AbsMessageContent"}, new object[] {
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                                        "IsNoPermissionMessageNotOut",
                                                                                                                        "AbsMessageChildren",
                                                                                                                        "StringPropertiesInUnicode",
                                                                                                                        "StringPropertiesInUnicodeCodePage",
                                                                                                                        "StringPropertiesInOtherCodePage",
                                                                                                                        "IsRTFFormat"}, new object[] {
                                                                                                                        false,
                                                                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                                    "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                                    "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                                    false,
                                                                                                                                    false}),
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false})})})})}),
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                            "AbstractICSStateIndex",
                                                            "IdSetGiven",
                                                            "IsNewCnsetReadPropertyChangeNumber",
                                                            "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                            "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                            0,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                            "IsNoPermissionMessageNotOut",
                                                            "AbsMessageChildren",
                                                            "StringPropertiesInUnicode",
                                                            "StringPropertiesInUnicodeCodePage",
                                                            "StringPropertiesInOtherCodePage",
                                                            "IsRTFFormat"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "AbsMessage"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                        "AbsMessageContent"}, new object[] {
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                    "IsNoPermissionMessageNotOut",
                                                                                    "AbsMessageChildren",
                                                                                    "StringPropertiesInUnicode",
                                                                                    "StringPropertiesInUnicodeCodePage",
                                                                                    "StringPropertiesInOtherCodePage",
                                                                                    "IsRTFFormat"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                "AttachmentPrecededByPidTagFXDelProp",
                                                                                                "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                false,
                                                                                                false}),
                                                                                    false,
                                                                                    false,
                                                                                    false,
                                                                                    false})})}),
                                                false}), temp130, "abstractFastTransferStream of FastTransferSourceGetBuffer, state S344");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp131, "transferDataSmallOrEqualToBufferSize of FastTransferSourceGetBuffer, state S344");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp132, "return of FastTransferSourceGetBuffer, state S344");
                                this.Manager.Comment("reaching state \'S360\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp133;
                                this.Manager.Comment("executing step \'call ModifyPermissions(1,3,None)\'");
                                temp133 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels)(0)));
                                this.Manager.Comment("reaching state \'S376\'");
                                this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp133, "return of ModifyPermissions, state S376");
                                this.Manager.Comment("reaching state \'S392\'");
                                int temp134;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp135;
                                this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                                temp135 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp134);
                                this.Manager.Checkpoint("MS-OXCFXICS_R778");
                                this.Manager.Checkpoint("MS-OXCFXICS_R769");
                                this.Manager.Comment("reaching state \'S408\'");
                                this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 8]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 8, temp134, "synchronizationHandleIndex of SynchronizationOpenCollector, state S408");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp135, "return of SynchronizationOpenCollector, state S408");
                                this.Manager.Comment("reaching state \'S424\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp136;
                                this.Manager.Comment("executing step \'call SynchronizationImportReadStateChanges(1,8,6,False)\'");
                                temp136 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportReadStateChanges(1, 8, 6, false);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2260");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                                this.Manager.Checkpoint("MS-OXCFXICS_R905");
                                this.Manager.Comment("reaching state \'S440\'");
                                this.Manager.Comment("checking step \'return SynchronizationImportReadStateChanges/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp136, "return of SynchronizationImportReadStateChanges, state S440");
                                this.Manager.Comment("reaching state \'S456\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp137;
                                this.Manager.Comment("executing step \'call GetPropertiesSpecific(1,6,[\"PidTagMessageFlags\"])\'");
                                temp137 = this.IMS_OXCFXICSAdapterInstance.GetPropertiesSpecific(1, 6, this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "PidTagMessageFlags",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                                this.Manager.Comment("reaching state \'S472\'");
                                this.Manager.Comment("checking step \'return GetPropertiesSpecific/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp137, "return of GetPropertiesSpecific, state S472");
                                this.Manager.Comment("reaching state \'S488\'");
                                bool temp138;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2813,out _)\'");
                                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2813, out temp138);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp138);
                                this.Manager.Comment("reaching state \'S504\'");
                                int temp150 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker14)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker15)));
                                if ((temp150 == 0)) {
                                    this.Manager.Comment("reaching state \'S527\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp139;
                                    this.Manager.Comment("executing step \'call ModifyPermissions(1,3,Owner)\'");
                                    temp139 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels.Owner);
                                    this.Manager.Comment("reaching state \'S559\'");
                                    this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp139, "return of ModifyPermissions, state S559");
                                    this.Manager.Comment("reaching state \'S591\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp140;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp140 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S623\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp140, "return of DeleteFolder, state S623");
                                    this.Manager.Comment("reaching state \'S655\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp141;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp141 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S687\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp141, "return of DeleteFolder, state S687");
                                    this.Manager.Comment("reaching state \'S719\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp142;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp142 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S751\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp142, "return of Release, state S751");
                                    this.Manager.Comment("reaching state \'S783\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp143;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp143 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S815\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp143, "return of Release, state S815");
                                    this.Manager.Comment("reaching state \'S847\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp144;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp144 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S872\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp144, "return of Release, state S872");
                                    this.Manager.Comment("reaching state \'S888\'");
                                    goto label4;
                                }
                                if ((temp150 == 1)) {
                                    this.Manager.Comment("reaching state \'S528\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp145;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp145 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S560\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp145, "return of DeleteFolder, state S560");
                                    this.Manager.Comment("reaching state \'S592\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp146;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp146 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S624\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp146, "return of DeleteFolder, state S624");
                                    this.Manager.Comment("reaching state \'S656\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp147;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp147 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S688\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp147, "return of Release, state S688");
                                    this.Manager.Comment("reaching state \'S720\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp148;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp148 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S752\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp148, "return of Release, state S752");
                                    this.Manager.Comment("reaching state \'S784\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp149;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp149 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S816\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp149, "return of Release, state S816");
                                    this.Manager.Comment("reaching state \'S848\'");
                                    goto label4;
                                }
                                throw new InvalidOperationException("never reached");
                            label4:
;
                                goto label5;
                            }
                            throw new InvalidOperationException("never reached");
                        label5:
;
                            goto label6;
                        }
                        throw new InvalidOperationException("never reached");
                    label6:
;
                        goto label14;
                    }
                    if ((temp303 == 1)) {
                        this.Manager.Comment("reaching state \'S9\'");
                        bool temp153;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2666,out _)\'");
                        this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2666, out temp153);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp153);
                        this.Manager.Comment("reaching state \'S13\'");
                        int temp302 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker17)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker24)));
                        if ((temp302 == 0)) {
                            this.Manager.Comment("reaching state \'S17\'");
                            this.Manager.Comment("executing step \'call Connect(1,PublicFolderServer)\'");
                            this.IMS_OXCFXICSAdapterInstance.Connect(1, ((Microsoft.Protocols.TestSuites.Common.ConnectionType)(0)));
                            this.Manager.Comment("reaching state \'S25\'");
                            this.Manager.Comment("checking step \'return Connect\'");
                            this.Manager.Comment("reaching state \'S33\'");
                            int temp154;
                            int temp155;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp156;
                            this.Manager.Comment("executing step \'call Logon(1,Private,out _,out _)\'");
                            temp156 = this.IMS_OXCFXICSAdapterInstance.Logon(1, ((Microsoft.Protocols.TestSuites.Common.LogonFlags)(1)), out temp154, out temp155);
                            this.Manager.Comment("reaching state \'S41\'");
                            this.Manager.Comment("checking step \'return Logon/[out 1,out 1]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp154, "logonHandleIndex of Logon, state S41");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp155, "inboxFolderIdIndex of Logon, state S41");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp156, "return of Logon, state S41");
                            this.Manager.Comment("reaching state \'S49\'");
                            int temp157;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp158;
                            this.Manager.Comment("executing step \'call OpenFolder(1,1,1,out _)\'");
                            temp158 = this.IMS_OXCFXICSAdapterInstance.OpenFolder(1, 1, 1, out temp157);
                            this.Manager.Comment("reaching state \'S57\'");
                            this.Manager.Comment("checking step \'return OpenFolder/[out 2]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp157, "folderHandleIndex of OpenFolder, state S57");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp158, "return of OpenFolder, state S57");
                            this.Manager.Comment("reaching state \'S65\'");
                            int temp159;
                            int temp160;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp161;
                            this.Manager.Comment("executing step \'call CreateFolder(1,2,\"test\",out _,out _)\'");
                            temp161 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 2, "test", out temp159, out temp160);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                            this.Manager.Comment("reaching state \'S73\'");
                            this.Manager.Comment("checking step \'return CreateFolder/[out 2,out 3]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp159, "folderIdIndex of CreateFolder, state S73");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp160, "folderHandleIndex of CreateFolder, state S73");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp161, "return of CreateFolder, state S73");
                            this.Manager.Comment("reaching state \'S81\'");
                            int temp162;
                            int temp163;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp164;
                            this.Manager.Comment("executing step \'call CreateFolder(1,3,\"SubFolder\",out _,out _)\'");
                            temp164 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 3, "SubFolder", out temp162, out temp163);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                            this.Manager.Comment("reaching state \'S89\'");
                            this.Manager.Comment("checking step \'return CreateFolder/[out 3,out 4]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp162, "folderIdIndex of CreateFolder, state S89");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, temp163, "folderHandleIndex of CreateFolder, state S89");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp164, "return of CreateFolder, state S89");
                            this.Manager.Comment("reaching state \'S97\'");
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp165;
                            this.Manager.Comment("executing step \'call GetLocalReplicaIds(1,1,3)\'");
                            temp165 = this.IMS_OXCFXICSAdapterInstance.GetLocalReplicaIds(1, 1, 3u);
                            this.Manager.Checkpoint("MS-OXCFXICS_R925");
                            this.Manager.Comment("reaching state \'S105\'");
                            this.Manager.Comment("checking step \'return GetLocalReplicaIds/Success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp165, "return of GetLocalReplicaIds, state S105");
                            this.Manager.Comment("reaching state \'S113\'");
                            int temp166;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp167;
                            this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                            temp167 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp166);
                            this.Manager.Checkpoint("MS-OXCFXICS_R778");
                            this.Manager.Checkpoint("MS-OXCFXICS_R769");
                            this.Manager.Comment("reaching state \'S121\'");
                            this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 5]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, temp166, "synchronizationHandleIndex of SynchronizationOpenCollector, state S121");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp167, "return of SynchronizationOpenCollector, state S121");
                            this.Manager.Comment("reaching state \'S129\'");
                            int temp168;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp169;
                            this.Manager.Comment("executing step \'call SynchronizationImportMessageChange(1,5,0,Normal,out _)\'");
                            temp169 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportMessageChange(1, 5, 0, ((Microsoft.Protocols.TestSuites.Common.ImportFlag)(0)), out temp168);
                            this.Manager.Checkpoint("MS-OXCFXICS_R814");
                            this.Manager.Checkpoint("MS-OXCFXICS_R805");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1897");
                            this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                            this.Manager.Checkpoint("MS-OXCFXICS_R782");
                            this.Manager.Comment("reaching state \'S137\'");
                            this.Manager.Comment("checking step \'return SynchronizationImportMessageChange/[out 6]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, temp168, "importMessageHandleIndex of SynchronizationImportMessageChange, state S137");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp169, "return of SynchronizationImportMessageChange, state S137");
                            this.Manager.Comment("reaching state \'S145\'");
                            int temp170;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp171;
                            this.Manager.Comment("executing step \'call SaveChangesMessage(1,6,out _)\'");
                            temp171 = this.IMS_OXCFXICSAdapterInstance.SaveChangesMessage(1, 6, out temp170);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1910");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1906");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1898");
                            this.Manager.Comment("reaching state \'S153\'");
                            this.Manager.Comment("checking step \'return SaveChangesMessage/[out 4]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, temp170, "messageIdIndex of SaveChangesMessage, state S153");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp171, "return of SaveChangesMessage, state S153");
                            this.Manager.Comment("reaching state \'S161\'");
                            int temp172;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp173;
                            this.Manager.Comment("executing step \'call SynchronizationConfigure(1,4,Contents,Unicode|ForceUnicode,N" +
                                    "one,Eid,[\"PidTagCreationTime\"],out _)\'");
                            temp173 = this.IMS_OXCFXICSAdapterInstance.SynchronizationConfigure(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SendOptionAlls)(9)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationFlag)(0)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationExtraFlag)(1)), this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "PidTagCreationTime",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}), out temp172);
                            this.Manager.Checkpoint("MS-OXCFXICS_R669");
                            this.Manager.Checkpoint("MS-OXCFXICS_R641");
                            this.Manager.Comment("reaching state \'S169\'");
                            this.Manager.Comment("checking step \'return SynchronizationConfigure/[out 7]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 7, temp172, "downloadcontextHandleIndex of SynchronizationConfigure, state S169");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp173, "return of SynchronizationConfigure, state S169");
                            this.Manager.Comment("reaching state \'S177\'");
                            bool temp174;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(2657,out _)\'");
                            this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2657, out temp174);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp174);
                            this.Manager.Comment("reaching state \'S185\'");
                            int temp227 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker18)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker21)));
                            if ((temp227 == 0)) {
                                this.Manager.Comment("reaching state \'S193\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp175;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagIdsetGiven,True,0)\'");
                                temp175 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(0)), true, 0);
                                this.Manager.Comment("reaching state \'S209\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/InvalidParameter\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult.InvalidParameter, temp175, "return of SynchronizationUploadState, state S209");
                                this.Manager.Comment("reaching state \'S225\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp176;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeen,False,0)\'");
                                temp176 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(1)), false, 0);
                                this.Manager.Comment("reaching state \'S241\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp176, "return of SynchronizationUploadState, state S241");
                                this.Manager.Comment("reaching state \'S257\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp177;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetRead,False,0)\'");
                                temp177 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetRead, false, 0);
                                this.Manager.Comment("reaching state \'S273\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp177, "return of SynchronizationUploadState, state S273");
                                this.Manager.Comment("reaching state \'S289\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp178;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeenFAI,False,0)\'");
                                temp178 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetSeenFAI, false, 0);
                                this.Manager.Comment("reaching state \'S305\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp178, "return of SynchronizationUploadState, state S305");
                                this.Manager.Comment("reaching state \'S321\'");
                                int temp179;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream temp180;
                                bool temp181;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp182;
                                this.Manager.Comment("executing step \'call FastTransferSourceGetBuffer(1,7,Normal,out _,out _,out _)\'");
                                temp182 = this.IMS_OXCFXICSAdapterInstance.FastTransferSourceGetBuffer(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.BufferSize.Normal, out temp179, out temp180, out temp181);
                                this.Manager.Checkpoint("MS-OXCFXICS_R384");
                                this.Manager.Checkpoint("MS-OXCFXICS_R3321");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2188");
                                this.Manager.Checkpoint("MS-OXCFXICS_R1180");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2175");
                                this.Manager.Checkpoint("MS-OXCFXICS_R532");
                                this.Manager.Comment("reaching state \'S337\'");
                                this.Manager.Comment("checking step \'return FastTransferSourceGetBuffer/[out 1,out AbstractFastTransfer" +
                                        "Stream(StreamType=contentsSync,AbstractHierarchySync=AbstractHierarchySync(Folde" +
                                        "rchangeInfo=AbstractFolderChange(IsPidTagFolderIdExist=False,IsPidTagParentFolde" +
                                        "rIdExist=False,IsPidTagSourceKeyValueZero=False,IsPidTagParentSourceKeyValueZero" +
                                        "=False),FolderCount=0,FinalICSState=AbstractState(AbstractICSStateIndex=0,IdSetG" +
                                        "iven=null,IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChan" +
                                        "geNumber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsParentFolderBeforeChi" +
                                        "ld=False,AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted=" +
                                        "null,IsPidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False)),A" +
                                        "bstractContentsSync=AbstractContentsSync(IsprogessTotalPresent=False,MessageInfo" +
                                        "={},AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted={},Is" +
                                        "PidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False),IsReadSta" +
                                        "teChangesExist=False,FinalICSState=AbstractState(AbstractICSStateIndex=1,IdSetGi" +
                                        "ven={},IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChangeN" +
                                        "umber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsSortByMessageDeliveryTim" +
                                        "e=False,IsSortByLastModificationTime=False),AbstractFolderContent=AbstractFolder" +
                                        "Content(IsPidTagEcWarningOut=False,IsNoPermissionObjNotOut=False,IsPidTagNewFXFo" +
                                        "lderOut=False,IsFolderContentNotOut=False,IsFolderPropertiesNotOut=False,IsSubFo" +
                                        "lderPrecededByPidTagFXDelProp=False,AbsFolderMessage=AbstractFolderMessage(IsFol" +
                                        "derMessagesPrecededByPidTagFXDelProp=False,MessageList=AbstractMessageList(IsPid" +
                                        "TagEcWarningOut=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageCon" +
                                        "tent(IsNoPermissionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildre" +
                                        "n(AttachmentPrecededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=F" +
                                        "alse),StringPropertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,St" +
                                        "ringPropertiesInOtherCodePage=False,IsRTFFormat=False))))),AbstractTopFolder=Abs" +
                                        "tractTopFolder(AbsFolderContent=AbstractFolderContent(IsPidTagEcWarningOut=False" +
                                        ",IsNoPermissionObjNotOut=False,IsPidTagNewFXFolderOut=False,IsFolderContentNotOu" +
                                        "t=False,IsFolderPropertiesNotOut=False,IsSubFolderPrecededByPidTagFXDelProp=Fals" +
                                        "e,AbsFolderMessage=AbstractFolderMessage(IsFolderMessagesPrecededByPidTagFXDelPr" +
                                        "op=False,MessageList=AbstractMessageList(IsPidTagEcWarningOut=False,AbsMessage=A" +
                                        "bsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=F" +
                                        "alse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelP" +
                                        "rop=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fa" +
                                        "lse,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=Fals" +
                                        "e,IsRTFFormat=False))))),SubFolderInScope=False),AbstractState=AbstractState(Abs" +
                                        "tractICSStateIndex=0,IdSetGiven=null,IsNewCnsetReadPropertyChangeNumber=False,Is" +
                                        "NewCnsetSeenFAIPropertyChangeNumber=False,IsNewCnsetSeenPropertyChangeNumber=Fal" +
                                        "se),AbstractMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=Fa" +
                                        "lse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelPr" +
                                        "op=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fal" +
                                        "se,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=False" +
                                        ",IsRTFFormat=False),AbstractMessageList=AbstractMessageList(IsPidTagEcWarningOut" +
                                        "=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermis" +
                                        "sionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildren(AttachmentPre" +
                                        "cededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),StringPro" +
                                        "pertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,StringPropertiesI" +
                                        "nOtherCodePage=False,IsRTFFormat=False))),IsSameReadstateChangeNumber=False),out" +
                                        " False]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp179, "transferBufferIndex of FastTransferSourceGetBuffer, state S337");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(new string[] {
                                                "StreamType",
                                                "AbstractHierarchySync",
                                                "AbstractContentsSync",
                                                "AbstractFolderContent",
                                                "AbstractTopFolder",
                                                "AbstractState",
                                                "AbstractMessageContent",
                                                "AbstractMessageList",
                                                "IsSameReadstateChangeNumber"}, new object[] {
                                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.FastTransferStreamType.contentsSync,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractHierarchySync>(new string[] {
                                                            "FolderchangeInfo",
                                                            "FolderCount",
                                                            "FinalICSState",
                                                            "IsParentFolderBeforeChild",
                                                            "AbstractDeletion"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderChange>(new string[] {
                                                                        "IsPidTagFolderIdExist",
                                                                        "IsPidTagParentFolderIdExist",
                                                                        "IsPidTagSourceKeyValueZero",
                                                                        "IsPidTagParentSourceKeyValueZero"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            0,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        0,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractContentsSync>(new string[] {
                                                            "IsprogessTotalPresent",
                                                            "MessageInfo",
                                                            "AbstractDeletion",
                                                            "IsReadStateChangesExist",
                                                            "FinalICSState",
                                                            "IsSortByMessageDeliveryTime",
                                                            "IsSortByLastModificationTime"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Modeling.Set<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo>>(new string[] {
                                                                        "Rep"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo, Microsoft.Xrt.Runtime.Singleton>()}),
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        1,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "IsNoPermissionObjNotOut",
                                                            "IsPidTagNewFXFolderOut",
                                                            "IsFolderContentNotOut",
                                                            "IsFolderPropertiesNotOut",
                                                            "IsSubFolderPrecededByPidTagFXDelProp",
                                                            "AbsFolderMessage"}, new object[] {
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                        "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                        "MessageList"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                    "IsPidTagEcWarningOut",
                                                                                    "AbsMessage"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                "AbsMessageContent"}, new object[] {
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                            "IsNoPermissionMessageNotOut",
                                                                                                            "AbsMessageChildren",
                                                                                                            "StringPropertiesInUnicode",
                                                                                                            "StringPropertiesInUnicodeCodePage",
                                                                                                            "StringPropertiesInOtherCodePage",
                                                                                                            "IsRTFFormat"}, new object[] {
                                                                                                            false,
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                        false,
                                                                                                                        false}),
                                                                                                            false,
                                                                                                            false,
                                                                                                            false,
                                                                                                            false})})})})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractTopFolder>(new string[] {
                                                            "AbsFolderContent",
                                                            "SubFolderInScope"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                                        "IsPidTagEcWarningOut",
                                                                        "IsNoPermissionObjNotOut",
                                                                        "IsPidTagNewFXFolderOut",
                                                                        "IsFolderContentNotOut",
                                                                        "IsFolderPropertiesNotOut",
                                                                        "IsSubFolderPrecededByPidTagFXDelProp",
                                                                        "AbsFolderMessage"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                                    "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                                    "MessageList"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                                "IsPidTagEcWarningOut",
                                                                                                "AbsMessage"}, new object[] {
                                                                                                false,
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                            "AbsMessageContent"}, new object[] {
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                                        "IsNoPermissionMessageNotOut",
                                                                                                                        "AbsMessageChildren",
                                                                                                                        "StringPropertiesInUnicode",
                                                                                                                        "StringPropertiesInUnicodeCodePage",
                                                                                                                        "StringPropertiesInOtherCodePage",
                                                                                                                        "IsRTFFormat"}, new object[] {
                                                                                                                        false,
                                                                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                                    "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                                    "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                                    false,
                                                                                                                                    false}),
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false})})})})}),
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                            "AbstractICSStateIndex",
                                                            "IdSetGiven",
                                                            "IsNewCnsetReadPropertyChangeNumber",
                                                            "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                            "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                            0,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                            "IsNoPermissionMessageNotOut",
                                                            "AbsMessageChildren",
                                                            "StringPropertiesInUnicode",
                                                            "StringPropertiesInUnicodeCodePage",
                                                            "StringPropertiesInOtherCodePage",
                                                            "IsRTFFormat"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "AbsMessage"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                        "AbsMessageContent"}, new object[] {
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                    "IsNoPermissionMessageNotOut",
                                                                                    "AbsMessageChildren",
                                                                                    "StringPropertiesInUnicode",
                                                                                    "StringPropertiesInUnicodeCodePage",
                                                                                    "StringPropertiesInOtherCodePage",
                                                                                    "IsRTFFormat"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                "AttachmentPrecededByPidTagFXDelProp",
                                                                                                "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                false,
                                                                                                false}),
                                                                                    false,
                                                                                    false,
                                                                                    false,
                                                                                    false})})}),
                                                false}), temp180, "abstractFastTransferStream of FastTransferSourceGetBuffer, state S337");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp181, "transferDataSmallOrEqualToBufferSize of FastTransferSourceGetBuffer, state S337");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp182, "return of FastTransferSourceGetBuffer, state S337");
                                this.Manager.Comment("reaching state \'S353\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp183;
                                this.Manager.Comment("executing step \'call ModifyPermissions(1,3,None)\'");
                                temp183 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels)(0)));
                                this.Manager.Comment("reaching state \'S369\'");
                                this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp183, "return of ModifyPermissions, state S369");
                                this.Manager.Comment("reaching state \'S385\'");
                                int temp184;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp185;
                                this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                                temp185 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp184);
                                this.Manager.Checkpoint("MS-OXCFXICS_R778");
                                this.Manager.Checkpoint("MS-OXCFXICS_R769");
                                this.Manager.Comment("reaching state \'S401\'");
                                this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 8]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 8, temp184, "synchronizationHandleIndex of SynchronizationOpenCollector, state S401");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp185, "return of SynchronizationOpenCollector, state S401");
                                this.Manager.Comment("reaching state \'S417\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp186;
                                this.Manager.Comment("executing step \'call SynchronizationImportReadStateChanges(1,8,6,False)\'");
                                temp186 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportReadStateChanges(1, 8, 6, false);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2260");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                                this.Manager.Checkpoint("MS-OXCFXICS_R905");
                                this.Manager.Comment("reaching state \'S433\'");
                                this.Manager.Comment("checking step \'return SynchronizationImportReadStateChanges/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp186, "return of SynchronizationImportReadStateChanges, state S433");
                                this.Manager.Comment("reaching state \'S449\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp187;
                                this.Manager.Comment("executing step \'call GetPropertiesSpecific(1,6,[\"PidTagMessageFlags\"])\'");
                                temp187 = this.IMS_OXCFXICSAdapterInstance.GetPropertiesSpecific(1, 6, this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "PidTagMessageFlags",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                                this.Manager.Comment("reaching state \'S465\'");
                                this.Manager.Comment("checking step \'return GetPropertiesSpecific/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp187, "return of GetPropertiesSpecific, state S465");
                                this.Manager.Comment("reaching state \'S481\'");
                                bool temp188;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2813,out _)\'");
                                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2813, out temp188);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp188);
                                this.Manager.Comment("reaching state \'S497\'");
                                int temp200 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker19)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker20)));
                                if ((temp200 == 0)) {
                                    this.Manager.Comment("reaching state \'S513\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp189;
                                    this.Manager.Comment("executing step \'call ModifyPermissions(1,3,Owner)\'");
                                    temp189 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels.Owner);
                                    this.Manager.Comment("reaching state \'S545\'");
                                    this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp189, "return of ModifyPermissions, state S545");
                                    this.Manager.Comment("reaching state \'S577\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp190;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp190 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S609\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp190, "return of DeleteFolder, state S609");
                                    this.Manager.Comment("reaching state \'S641\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp191;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp191 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S673\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp191, "return of DeleteFolder, state S673");
                                    this.Manager.Comment("reaching state \'S705\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp192;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp192 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S737\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp192, "return of Release, state S737");
                                    this.Manager.Comment("reaching state \'S769\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp193;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp193 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S801\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp193, "return of Release, state S801");
                                    this.Manager.Comment("reaching state \'S833\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp194;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp194 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S865\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp194, "return of Release, state S865");
                                    this.Manager.Comment("reaching state \'S881\'");
                                    goto label7;
                                }
                                if ((temp200 == 1)) {
                                    this.Manager.Comment("reaching state \'S514\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp195;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp195 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S546\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp195, "return of DeleteFolder, state S546");
                                    this.Manager.Comment("reaching state \'S578\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp196;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp196 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S610\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp196, "return of DeleteFolder, state S610");
                                    this.Manager.Comment("reaching state \'S642\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp197;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp197 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S674\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp197, "return of Release, state S674");
                                    this.Manager.Comment("reaching state \'S706\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp198;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp198 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S738\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp198, "return of Release, state S738");
                                    this.Manager.Comment("reaching state \'S770\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp199;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp199 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S802\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp199, "return of Release, state S802");
                                    this.Manager.Comment("reaching state \'S834\'");
                                    goto label7;
                                }
                                throw new InvalidOperationException("never reached");
                            label7:
;
                                goto label9;
                            }
                            if ((temp227 == 1)) {
                                this.Manager.Comment("reaching state \'S194\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp201;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagIdsetGiven,True,0)\'");
                                temp201 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(0)), true, 0);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2657");
                                this.Manager.Comment("reaching state \'S210\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp201, "return of SynchronizationUploadState, state S210");
                                this.Manager.Comment("reaching state \'S226\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp202;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeen,False,0)\'");
                                temp202 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(1)), false, 0);
                                this.Manager.Comment("reaching state \'S242\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp202, "return of SynchronizationUploadState, state S242");
                                this.Manager.Comment("reaching state \'S258\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp203;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetRead,False,0)\'");
                                temp203 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetRead, false, 0);
                                this.Manager.Comment("reaching state \'S274\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp203, "return of SynchronizationUploadState, state S274");
                                this.Manager.Comment("reaching state \'S290\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp204;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeenFAI,False,0)\'");
                                temp204 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetSeenFAI, false, 0);
                                this.Manager.Comment("reaching state \'S306\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp204, "return of SynchronizationUploadState, state S306");
                                this.Manager.Comment("reaching state \'S322\'");
                                int temp205;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream temp206;
                                bool temp207;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp208;
                                this.Manager.Comment("executing step \'call FastTransferSourceGetBuffer(1,7,Normal,out _,out _,out _)\'");
                                temp208 = this.IMS_OXCFXICSAdapterInstance.FastTransferSourceGetBuffer(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.BufferSize.Normal, out temp205, out temp206, out temp207);
                                this.Manager.Checkpoint("MS-OXCFXICS_R384");
                                this.Manager.Checkpoint("MS-OXCFXICS_R3321");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2188");
                                this.Manager.Checkpoint("MS-OXCFXICS_R1180");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2175");
                                this.Manager.Checkpoint("MS-OXCFXICS_R532");
                                this.Manager.Comment("reaching state \'S338\'");
                                this.Manager.Comment("checking step \'return FastTransferSourceGetBuffer/[out 1,out AbstractFastTransfer" +
                                        "Stream(StreamType=contentsSync,AbstractHierarchySync=AbstractHierarchySync(Folde" +
                                        "rchangeInfo=AbstractFolderChange(IsPidTagFolderIdExist=False,IsPidTagParentFolde" +
                                        "rIdExist=False,IsPidTagSourceKeyValueZero=False,IsPidTagParentSourceKeyValueZero" +
                                        "=False),FolderCount=0,FinalICSState=AbstractState(AbstractICSStateIndex=0,IdSetG" +
                                        "iven=null,IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChan" +
                                        "geNumber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsParentFolderBeforeChi" +
                                        "ld=False,AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted=" +
                                        "null,IsPidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False)),A" +
                                        "bstractContentsSync=AbstractContentsSync(IsprogessTotalPresent=False,MessageInfo" +
                                        "={},AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted={},Is" +
                                        "PidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False),IsReadSta" +
                                        "teChangesExist=False,FinalICSState=AbstractState(AbstractICSStateIndex=1,IdSetGi" +
                                        "ven={},IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChangeN" +
                                        "umber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsSortByMessageDeliveryTim" +
                                        "e=False,IsSortByLastModificationTime=False),AbstractFolderContent=AbstractFolder" +
                                        "Content(IsPidTagEcWarningOut=False,IsNoPermissionObjNotOut=False,IsPidTagNewFXFo" +
                                        "lderOut=False,IsFolderContentNotOut=False,IsFolderPropertiesNotOut=False,IsSubFo" +
                                        "lderPrecededByPidTagFXDelProp=False,AbsFolderMessage=AbstractFolderMessage(IsFol" +
                                        "derMessagesPrecededByPidTagFXDelProp=False,MessageList=AbstractMessageList(IsPid" +
                                        "TagEcWarningOut=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageCon" +
                                        "tent(IsNoPermissionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildre" +
                                        "n(AttachmentPrecededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=F" +
                                        "alse),StringPropertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,St" +
                                        "ringPropertiesInOtherCodePage=False,IsRTFFormat=False))))),AbstractTopFolder=Abs" +
                                        "tractTopFolder(AbsFolderContent=AbstractFolderContent(IsPidTagEcWarningOut=False" +
                                        ",IsNoPermissionObjNotOut=False,IsPidTagNewFXFolderOut=False,IsFolderContentNotOu" +
                                        "t=False,IsFolderPropertiesNotOut=False,IsSubFolderPrecededByPidTagFXDelProp=Fals" +
                                        "e,AbsFolderMessage=AbstractFolderMessage(IsFolderMessagesPrecededByPidTagFXDelPr" +
                                        "op=False,MessageList=AbstractMessageList(IsPidTagEcWarningOut=False,AbsMessage=A" +
                                        "bsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=F" +
                                        "alse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelP" +
                                        "rop=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fa" +
                                        "lse,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=Fals" +
                                        "e,IsRTFFormat=False))))),SubFolderInScope=False),AbstractState=AbstractState(Abs" +
                                        "tractICSStateIndex=0,IdSetGiven=null,IsNewCnsetReadPropertyChangeNumber=False,Is" +
                                        "NewCnsetSeenFAIPropertyChangeNumber=False,IsNewCnsetSeenPropertyChangeNumber=Fal" +
                                        "se),AbstractMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=Fa" +
                                        "lse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelPr" +
                                        "op=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fal" +
                                        "se,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=False" +
                                        ",IsRTFFormat=False),AbstractMessageList=AbstractMessageList(IsPidTagEcWarningOut" +
                                        "=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermis" +
                                        "sionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildren(AttachmentPre" +
                                        "cededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),StringPro" +
                                        "pertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,StringPropertiesI" +
                                        "nOtherCodePage=False,IsRTFFormat=False))),IsSameReadstateChangeNumber=False),out" +
                                        " False]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp205, "transferBufferIndex of FastTransferSourceGetBuffer, state S338");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(new string[] {
                                                "StreamType",
                                                "AbstractHierarchySync",
                                                "AbstractContentsSync",
                                                "AbstractFolderContent",
                                                "AbstractTopFolder",
                                                "AbstractState",
                                                "AbstractMessageContent",
                                                "AbstractMessageList",
                                                "IsSameReadstateChangeNumber"}, new object[] {
                                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.FastTransferStreamType.contentsSync,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractHierarchySync>(new string[] {
                                                            "FolderchangeInfo",
                                                            "FolderCount",
                                                            "FinalICSState",
                                                            "IsParentFolderBeforeChild",
                                                            "AbstractDeletion"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderChange>(new string[] {
                                                                        "IsPidTagFolderIdExist",
                                                                        "IsPidTagParentFolderIdExist",
                                                                        "IsPidTagSourceKeyValueZero",
                                                                        "IsPidTagParentSourceKeyValueZero"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            0,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        0,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractContentsSync>(new string[] {
                                                            "IsprogessTotalPresent",
                                                            "MessageInfo",
                                                            "AbstractDeletion",
                                                            "IsReadStateChangesExist",
                                                            "FinalICSState",
                                                            "IsSortByMessageDeliveryTime",
                                                            "IsSortByLastModificationTime"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Modeling.Set<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo>>(new string[] {
                                                                        "Rep"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo, Microsoft.Xrt.Runtime.Singleton>()}),
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        1,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "IsNoPermissionObjNotOut",
                                                            "IsPidTagNewFXFolderOut",
                                                            "IsFolderContentNotOut",
                                                            "IsFolderPropertiesNotOut",
                                                            "IsSubFolderPrecededByPidTagFXDelProp",
                                                            "AbsFolderMessage"}, new object[] {
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                        "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                        "MessageList"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                    "IsPidTagEcWarningOut",
                                                                                    "AbsMessage"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                "AbsMessageContent"}, new object[] {
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                            "IsNoPermissionMessageNotOut",
                                                                                                            "AbsMessageChildren",
                                                                                                            "StringPropertiesInUnicode",
                                                                                                            "StringPropertiesInUnicodeCodePage",
                                                                                                            "StringPropertiesInOtherCodePage",
                                                                                                            "IsRTFFormat"}, new object[] {
                                                                                                            false,
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                        false,
                                                                                                                        false}),
                                                                                                            false,
                                                                                                            false,
                                                                                                            false,
                                                                                                            false})})})})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractTopFolder>(new string[] {
                                                            "AbsFolderContent",
                                                            "SubFolderInScope"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                                        "IsPidTagEcWarningOut",
                                                                        "IsNoPermissionObjNotOut",
                                                                        "IsPidTagNewFXFolderOut",
                                                                        "IsFolderContentNotOut",
                                                                        "IsFolderPropertiesNotOut",
                                                                        "IsSubFolderPrecededByPidTagFXDelProp",
                                                                        "AbsFolderMessage"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                                    "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                                    "MessageList"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                                "IsPidTagEcWarningOut",
                                                                                                "AbsMessage"}, new object[] {
                                                                                                false,
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                            "AbsMessageContent"}, new object[] {
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                                        "IsNoPermissionMessageNotOut",
                                                                                                                        "AbsMessageChildren",
                                                                                                                        "StringPropertiesInUnicode",
                                                                                                                        "StringPropertiesInUnicodeCodePage",
                                                                                                                        "StringPropertiesInOtherCodePage",
                                                                                                                        "IsRTFFormat"}, new object[] {
                                                                                                                        false,
                                                                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                                    "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                                    "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                                    false,
                                                                                                                                    false}),
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false})})})})}),
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                            "AbstractICSStateIndex",
                                                            "IdSetGiven",
                                                            "IsNewCnsetReadPropertyChangeNumber",
                                                            "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                            "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                            0,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                            "IsNoPermissionMessageNotOut",
                                                            "AbsMessageChildren",
                                                            "StringPropertiesInUnicode",
                                                            "StringPropertiesInUnicodeCodePage",
                                                            "StringPropertiesInOtherCodePage",
                                                            "IsRTFFormat"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "AbsMessage"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                        "AbsMessageContent"}, new object[] {
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                    "IsNoPermissionMessageNotOut",
                                                                                    "AbsMessageChildren",
                                                                                    "StringPropertiesInUnicode",
                                                                                    "StringPropertiesInUnicodeCodePage",
                                                                                    "StringPropertiesInOtherCodePage",
                                                                                    "IsRTFFormat"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                "AttachmentPrecededByPidTagFXDelProp",
                                                                                                "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                false,
                                                                                                false}),
                                                                                    false,
                                                                                    false,
                                                                                    false,
                                                                                    false})})}),
                                                false}), temp206, "abstractFastTransferStream of FastTransferSourceGetBuffer, state S338");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp207, "transferDataSmallOrEqualToBufferSize of FastTransferSourceGetBuffer, state S338");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp208, "return of FastTransferSourceGetBuffer, state S338");
                                this.Manager.Comment("reaching state \'S354\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp209;
                                this.Manager.Comment("executing step \'call ModifyPermissions(1,3,None)\'");
                                temp209 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels)(0)));
                                this.Manager.Comment("reaching state \'S370\'");
                                this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp209, "return of ModifyPermissions, state S370");
                                this.Manager.Comment("reaching state \'S386\'");
                                int temp210;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp211;
                                this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                                temp211 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp210);
                                this.Manager.Checkpoint("MS-OXCFXICS_R778");
                                this.Manager.Checkpoint("MS-OXCFXICS_R769");
                                this.Manager.Comment("reaching state \'S402\'");
                                this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 8]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 8, temp210, "synchronizationHandleIndex of SynchronizationOpenCollector, state S402");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp211, "return of SynchronizationOpenCollector, state S402");
                                this.Manager.Comment("reaching state \'S418\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp212;
                                this.Manager.Comment("executing step \'call SynchronizationImportReadStateChanges(1,8,6,False)\'");
                                temp212 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportReadStateChanges(1, 8, 6, false);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2260");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                                this.Manager.Checkpoint("MS-OXCFXICS_R905");
                                this.Manager.Comment("reaching state \'S434\'");
                                this.Manager.Comment("checking step \'return SynchronizationImportReadStateChanges/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp212, "return of SynchronizationImportReadStateChanges, state S434");
                                this.Manager.Comment("reaching state \'S450\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp213;
                                this.Manager.Comment("executing step \'call GetPropertiesSpecific(1,6,[\"PidTagMessageFlags\"])\'");
                                temp213 = this.IMS_OXCFXICSAdapterInstance.GetPropertiesSpecific(1, 6, this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "PidTagMessageFlags",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                                this.Manager.Comment("reaching state \'S466\'");
                                this.Manager.Comment("checking step \'return GetPropertiesSpecific/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp213, "return of GetPropertiesSpecific, state S466");
                                this.Manager.Comment("reaching state \'S482\'");
                                bool temp214;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2813,out _)\'");
                                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2813, out temp214);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp214);
                                this.Manager.Comment("reaching state \'S498\'");
                                int temp226 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker22)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker23)));
                                if ((temp226 == 0)) {
                                    this.Manager.Comment("reaching state \'S515\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp215;
                                    this.Manager.Comment("executing step \'call ModifyPermissions(1,3,Owner)\'");
                                    temp215 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels.Owner);
                                    this.Manager.Comment("reaching state \'S547\'");
                                    this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp215, "return of ModifyPermissions, state S547");
                                    this.Manager.Comment("reaching state \'S579\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp216;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp216 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S611\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp216, "return of DeleteFolder, state S611");
                                    this.Manager.Comment("reaching state \'S643\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp217;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp217 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S675\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp217, "return of DeleteFolder, state S675");
                                    this.Manager.Comment("reaching state \'S707\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp218;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp218 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S739\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp218, "return of Release, state S739");
                                    this.Manager.Comment("reaching state \'S771\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp219;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp219 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S803\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp219, "return of Release, state S803");
                                    this.Manager.Comment("reaching state \'S835\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp220;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp220 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S866\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp220, "return of Release, state S866");
                                    this.Manager.Comment("reaching state \'S882\'");
                                    goto label8;
                                }
                                if ((temp226 == 1)) {
                                    this.Manager.Comment("reaching state \'S516\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp221;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp221 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S548\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp221, "return of DeleteFolder, state S548");
                                    this.Manager.Comment("reaching state \'S580\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp222;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp222 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S612\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp222, "return of DeleteFolder, state S612");
                                    this.Manager.Comment("reaching state \'S644\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp223;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp223 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S676\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp223, "return of Release, state S676");
                                    this.Manager.Comment("reaching state \'S708\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp224;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp224 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S740\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp224, "return of Release, state S740");
                                    this.Manager.Comment("reaching state \'S772\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp225;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp225 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S804\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp225, "return of Release, state S804");
                                    this.Manager.Comment("reaching state \'S836\'");
                                    goto label8;
                                }
                                throw new InvalidOperationException("never reached");
                            label8:
;
                                goto label9;
                            }
                            throw new InvalidOperationException("never reached");
                        label9:
;
                            goto label13;
                        }
                        if ((temp302 == 1)) {
                            this.Manager.Comment("reaching state \'S18\'");
                            this.Manager.Comment("executing step \'call Connect(1,PublicFolderServer)\'");
                            this.IMS_OXCFXICSAdapterInstance.Connect(1, ((Microsoft.Protocols.TestSuites.Common.ConnectionType)(0)));
                            this.Manager.Comment("reaching state \'S26\'");
                            this.Manager.Comment("checking step \'return Connect\'");
                            this.Manager.Comment("reaching state \'S34\'");
                            int temp228;
                            int temp229;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp230;
                            this.Manager.Comment("executing step \'call Logon(1,Private,out _,out _)\'");
                            temp230 = this.IMS_OXCFXICSAdapterInstance.Logon(1, ((Microsoft.Protocols.TestSuites.Common.LogonFlags)(1)), out temp228, out temp229);
                            this.Manager.Comment("reaching state \'S42\'");
                            this.Manager.Comment("checking step \'return Logon/[out 1,out 1]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp228, "logonHandleIndex of Logon, state S42");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp229, "inboxFolderIdIndex of Logon, state S42");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp230, "return of Logon, state S42");
                            this.Manager.Comment("reaching state \'S50\'");
                            int temp231;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp232;
                            this.Manager.Comment("executing step \'call OpenFolder(1,1,1,out _)\'");
                            temp232 = this.IMS_OXCFXICSAdapterInstance.OpenFolder(1, 1, 1, out temp231);
                            this.Manager.Comment("reaching state \'S58\'");
                            this.Manager.Comment("checking step \'return OpenFolder/[out 2]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp231, "folderHandleIndex of OpenFolder, state S58");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp232, "return of OpenFolder, state S58");
                            this.Manager.Comment("reaching state \'S66\'");
                            int temp233;
                            int temp234;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp235;
                            this.Manager.Comment("executing step \'call CreateFolder(1,2,\"test\",out _,out _)\'");
                            temp235 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 2, "test", out temp233, out temp234);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                            this.Manager.Comment("reaching state \'S74\'");
                            this.Manager.Comment("checking step \'return CreateFolder/[out 2,out 3]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp233, "folderIdIndex of CreateFolder, state S74");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp234, "folderHandleIndex of CreateFolder, state S74");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp235, "return of CreateFolder, state S74");
                            this.Manager.Comment("reaching state \'S82\'");
                            int temp236;
                            int temp237;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp238;
                            this.Manager.Comment("executing step \'call CreateFolder(1,3,\"SubFolder\",out _,out _)\'");
                            temp238 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 3, "SubFolder", out temp236, out temp237);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                            this.Manager.Comment("reaching state \'S90\'");
                            this.Manager.Comment("checking step \'return CreateFolder/[out 3,out 4]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp236, "folderIdIndex of CreateFolder, state S90");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, temp237, "folderHandleIndex of CreateFolder, state S90");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp238, "return of CreateFolder, state S90");
                            this.Manager.Comment("reaching state \'S98\'");
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp239;
                            this.Manager.Comment("executing step \'call GetLocalReplicaIds(1,1,3)\'");
                            temp239 = this.IMS_OXCFXICSAdapterInstance.GetLocalReplicaIds(1, 1, 3u);
                            this.Manager.Checkpoint("MS-OXCFXICS_R925");
                            this.Manager.Comment("reaching state \'S106\'");
                            this.Manager.Comment("checking step \'return GetLocalReplicaIds/Success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp239, "return of GetLocalReplicaIds, state S106");
                            this.Manager.Comment("reaching state \'S114\'");
                            int temp240;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp241;
                            this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                            temp241 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp240);
                            this.Manager.Checkpoint("MS-OXCFXICS_R778");
                            this.Manager.Checkpoint("MS-OXCFXICS_R769");
                            this.Manager.Comment("reaching state \'S122\'");
                            this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 5]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, temp240, "synchronizationHandleIndex of SynchronizationOpenCollector, state S122");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp241, "return of SynchronizationOpenCollector, state S122");
                            this.Manager.Comment("reaching state \'S130\'");
                            int temp242;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp243;
                            this.Manager.Comment("executing step \'call SynchronizationImportMessageChange(1,5,0,Normal,out _)\'");
                            temp243 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportMessageChange(1, 5, 0, ((Microsoft.Protocols.TestSuites.Common.ImportFlag)(0)), out temp242);
                            this.Manager.Checkpoint("MS-OXCFXICS_R814");
                            this.Manager.Checkpoint("MS-OXCFXICS_R805");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1897");
                            this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                            this.Manager.Checkpoint("MS-OXCFXICS_R782");
                            this.Manager.Comment("reaching state \'S138\'");
                            this.Manager.Comment("checking step \'return SynchronizationImportMessageChange/[out 6]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, temp242, "importMessageHandleIndex of SynchronizationImportMessageChange, state S138");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp243, "return of SynchronizationImportMessageChange, state S138");
                            this.Manager.Comment("reaching state \'S146\'");
                            int temp244;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp245;
                            this.Manager.Comment("executing step \'call SaveChangesMessage(1,6,out _)\'");
                            temp245 = this.IMS_OXCFXICSAdapterInstance.SaveChangesMessage(1, 6, out temp244);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1910");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1906");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1898");
                            this.Manager.Comment("reaching state \'S154\'");
                            this.Manager.Comment("checking step \'return SaveChangesMessage/[out 4]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, temp244, "messageIdIndex of SaveChangesMessage, state S154");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp245, "return of SaveChangesMessage, state S154");
                            this.Manager.Comment("reaching state \'S162\'");
                            int temp246;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp247;
                            this.Manager.Comment("executing step \'call SynchronizationConfigure(1,4,Contents,Unicode|ForceUnicode,N" +
                                    "one,Eid,[\"PidTagCreationTime\"],out _)\'");
                            temp247 = this.IMS_OXCFXICSAdapterInstance.SynchronizationConfigure(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SendOptionAlls)(9)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationFlag)(0)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationExtraFlag)(1)), this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "PidTagCreationTime",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}), out temp246);
                            this.Manager.Checkpoint("MS-OXCFXICS_R669");
                            this.Manager.Checkpoint("MS-OXCFXICS_R641");
                            this.Manager.Comment("reaching state \'S170\'");
                            this.Manager.Comment("checking step \'return SynchronizationConfigure/[out 7]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 7, temp246, "downloadcontextHandleIndex of SynchronizationConfigure, state S170");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp247, "return of SynchronizationConfigure, state S170");
                            this.Manager.Comment("reaching state \'S178\'");
                            bool temp248;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(2657,out _)\'");
                            this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2657, out temp248);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp248);
                            this.Manager.Comment("reaching state \'S186\'");
                            int temp301 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker25)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker28)));
                            if ((temp301 == 0)) {
                                this.Manager.Comment("reaching state \'S195\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp249;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagIdsetGiven,True,0)\'");
                                temp249 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(0)), true, 0);
                                this.Manager.Comment("reaching state \'S211\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/InvalidParameter\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult.InvalidParameter, temp249, "return of SynchronizationUploadState, state S211");
                                this.Manager.Comment("reaching state \'S227\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp250;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeen,False,0)\'");
                                temp250 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(1)), false, 0);
                                this.Manager.Comment("reaching state \'S243\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp250, "return of SynchronizationUploadState, state S243");
                                this.Manager.Comment("reaching state \'S259\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp251;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetRead,False,0)\'");
                                temp251 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetRead, false, 0);
                                this.Manager.Comment("reaching state \'S275\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp251, "return of SynchronizationUploadState, state S275");
                                this.Manager.Comment("reaching state \'S291\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp252;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeenFAI,False,0)\'");
                                temp252 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetSeenFAI, false, 0);
                                this.Manager.Comment("reaching state \'S307\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp252, "return of SynchronizationUploadState, state S307");
                                this.Manager.Comment("reaching state \'S323\'");
                                int temp253;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream temp254;
                                bool temp255;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp256;
                                this.Manager.Comment("executing step \'call FastTransferSourceGetBuffer(1,7,Normal,out _,out _,out _)\'");
                                temp256 = this.IMS_OXCFXICSAdapterInstance.FastTransferSourceGetBuffer(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.BufferSize.Normal, out temp253, out temp254, out temp255);
                                this.Manager.Checkpoint("MS-OXCFXICS_R384");
                                this.Manager.Checkpoint("MS-OXCFXICS_R3321");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2188");
                                this.Manager.Checkpoint("MS-OXCFXICS_R1180");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2175");
                                this.Manager.Checkpoint("MS-OXCFXICS_R532");
                                this.Manager.Comment("reaching state \'S339\'");
                                this.Manager.Comment("checking step \'return FastTransferSourceGetBuffer/[out 1,out AbstractFastTransfer" +
                                        "Stream(StreamType=contentsSync,AbstractHierarchySync=AbstractHierarchySync(Folde" +
                                        "rchangeInfo=AbstractFolderChange(IsPidTagFolderIdExist=False,IsPidTagParentFolde" +
                                        "rIdExist=False,IsPidTagSourceKeyValueZero=False,IsPidTagParentSourceKeyValueZero" +
                                        "=False),FolderCount=0,FinalICSState=AbstractState(AbstractICSStateIndex=0,IdSetG" +
                                        "iven=null,IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChan" +
                                        "geNumber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsParentFolderBeforeChi" +
                                        "ld=False,AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted=" +
                                        "null,IsPidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False)),A" +
                                        "bstractContentsSync=AbstractContentsSync(IsprogessTotalPresent=False,MessageInfo" +
                                        "={},AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted={},Is" +
                                        "PidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False),IsReadSta" +
                                        "teChangesExist=False,FinalICSState=AbstractState(AbstractICSStateIndex=1,IdSetGi" +
                                        "ven={},IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChangeN" +
                                        "umber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsSortByMessageDeliveryTim" +
                                        "e=False,IsSortByLastModificationTime=False),AbstractFolderContent=AbstractFolder" +
                                        "Content(IsPidTagEcWarningOut=False,IsNoPermissionObjNotOut=False,IsPidTagNewFXFo" +
                                        "lderOut=False,IsFolderContentNotOut=False,IsFolderPropertiesNotOut=False,IsSubFo" +
                                        "lderPrecededByPidTagFXDelProp=False,AbsFolderMessage=AbstractFolderMessage(IsFol" +
                                        "derMessagesPrecededByPidTagFXDelProp=False,MessageList=AbstractMessageList(IsPid" +
                                        "TagEcWarningOut=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageCon" +
                                        "tent(IsNoPermissionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildre" +
                                        "n(AttachmentPrecededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=F" +
                                        "alse),StringPropertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,St" +
                                        "ringPropertiesInOtherCodePage=False,IsRTFFormat=False))))),AbstractTopFolder=Abs" +
                                        "tractTopFolder(AbsFolderContent=AbstractFolderContent(IsPidTagEcWarningOut=False" +
                                        ",IsNoPermissionObjNotOut=False,IsPidTagNewFXFolderOut=False,IsFolderContentNotOu" +
                                        "t=False,IsFolderPropertiesNotOut=False,IsSubFolderPrecededByPidTagFXDelProp=Fals" +
                                        "e,AbsFolderMessage=AbstractFolderMessage(IsFolderMessagesPrecededByPidTagFXDelPr" +
                                        "op=False,MessageList=AbstractMessageList(IsPidTagEcWarningOut=False,AbsMessage=A" +
                                        "bsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=F" +
                                        "alse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelP" +
                                        "rop=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fa" +
                                        "lse,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=Fals" +
                                        "e,IsRTFFormat=False))))),SubFolderInScope=False),AbstractState=AbstractState(Abs" +
                                        "tractICSStateIndex=0,IdSetGiven=null,IsNewCnsetReadPropertyChangeNumber=False,Is" +
                                        "NewCnsetSeenFAIPropertyChangeNumber=False,IsNewCnsetSeenPropertyChangeNumber=Fal" +
                                        "se),AbstractMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=Fa" +
                                        "lse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelPr" +
                                        "op=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fal" +
                                        "se,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=False" +
                                        ",IsRTFFormat=False),AbstractMessageList=AbstractMessageList(IsPidTagEcWarningOut" +
                                        "=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermis" +
                                        "sionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildren(AttachmentPre" +
                                        "cededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),StringPro" +
                                        "pertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,StringPropertiesI" +
                                        "nOtherCodePage=False,IsRTFFormat=False))),IsSameReadstateChangeNumber=False),out" +
                                        " False]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp253, "transferBufferIndex of FastTransferSourceGetBuffer, state S339");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(new string[] {
                                                "StreamType",
                                                "AbstractHierarchySync",
                                                "AbstractContentsSync",
                                                "AbstractFolderContent",
                                                "AbstractTopFolder",
                                                "AbstractState",
                                                "AbstractMessageContent",
                                                "AbstractMessageList",
                                                "IsSameReadstateChangeNumber"}, new object[] {
                                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.FastTransferStreamType.contentsSync,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractHierarchySync>(new string[] {
                                                            "FolderchangeInfo",
                                                            "FolderCount",
                                                            "FinalICSState",
                                                            "IsParentFolderBeforeChild",
                                                            "AbstractDeletion"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderChange>(new string[] {
                                                                        "IsPidTagFolderIdExist",
                                                                        "IsPidTagParentFolderIdExist",
                                                                        "IsPidTagSourceKeyValueZero",
                                                                        "IsPidTagParentSourceKeyValueZero"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            0,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        0,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractContentsSync>(new string[] {
                                                            "IsprogessTotalPresent",
                                                            "MessageInfo",
                                                            "AbstractDeletion",
                                                            "IsReadStateChangesExist",
                                                            "FinalICSState",
                                                            "IsSortByMessageDeliveryTime",
                                                            "IsSortByLastModificationTime"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Modeling.Set<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo>>(new string[] {
                                                                        "Rep"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo, Microsoft.Xrt.Runtime.Singleton>()}),
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        1,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "IsNoPermissionObjNotOut",
                                                            "IsPidTagNewFXFolderOut",
                                                            "IsFolderContentNotOut",
                                                            "IsFolderPropertiesNotOut",
                                                            "IsSubFolderPrecededByPidTagFXDelProp",
                                                            "AbsFolderMessage"}, new object[] {
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                        "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                        "MessageList"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                    "IsPidTagEcWarningOut",
                                                                                    "AbsMessage"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                "AbsMessageContent"}, new object[] {
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                            "IsNoPermissionMessageNotOut",
                                                                                                            "AbsMessageChildren",
                                                                                                            "StringPropertiesInUnicode",
                                                                                                            "StringPropertiesInUnicodeCodePage",
                                                                                                            "StringPropertiesInOtherCodePage",
                                                                                                            "IsRTFFormat"}, new object[] {
                                                                                                            false,
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                        false,
                                                                                                                        false}),
                                                                                                            false,
                                                                                                            false,
                                                                                                            false,
                                                                                                            false})})})})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractTopFolder>(new string[] {
                                                            "AbsFolderContent",
                                                            "SubFolderInScope"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                                        "IsPidTagEcWarningOut",
                                                                        "IsNoPermissionObjNotOut",
                                                                        "IsPidTagNewFXFolderOut",
                                                                        "IsFolderContentNotOut",
                                                                        "IsFolderPropertiesNotOut",
                                                                        "IsSubFolderPrecededByPidTagFXDelProp",
                                                                        "AbsFolderMessage"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                                    "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                                    "MessageList"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                                "IsPidTagEcWarningOut",
                                                                                                "AbsMessage"}, new object[] {
                                                                                                false,
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                            "AbsMessageContent"}, new object[] {
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                                        "IsNoPermissionMessageNotOut",
                                                                                                                        "AbsMessageChildren",
                                                                                                                        "StringPropertiesInUnicode",
                                                                                                                        "StringPropertiesInUnicodeCodePage",
                                                                                                                        "StringPropertiesInOtherCodePage",
                                                                                                                        "IsRTFFormat"}, new object[] {
                                                                                                                        false,
                                                                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                                    "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                                    "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                                    false,
                                                                                                                                    false}),
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false})})})})}),
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                            "AbstractICSStateIndex",
                                                            "IdSetGiven",
                                                            "IsNewCnsetReadPropertyChangeNumber",
                                                            "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                            "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                            0,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                            "IsNoPermissionMessageNotOut",
                                                            "AbsMessageChildren",
                                                            "StringPropertiesInUnicode",
                                                            "StringPropertiesInUnicodeCodePage",
                                                            "StringPropertiesInOtherCodePage",
                                                            "IsRTFFormat"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "AbsMessage"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                        "AbsMessageContent"}, new object[] {
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                    "IsNoPermissionMessageNotOut",
                                                                                    "AbsMessageChildren",
                                                                                    "StringPropertiesInUnicode",
                                                                                    "StringPropertiesInUnicodeCodePage",
                                                                                    "StringPropertiesInOtherCodePage",
                                                                                    "IsRTFFormat"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                "AttachmentPrecededByPidTagFXDelProp",
                                                                                                "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                false,
                                                                                                false}),
                                                                                    false,
                                                                                    false,
                                                                                    false,
                                                                                    false})})}),
                                                false}), temp254, "abstractFastTransferStream of FastTransferSourceGetBuffer, state S339");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp255, "transferDataSmallOrEqualToBufferSize of FastTransferSourceGetBuffer, state S339");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp256, "return of FastTransferSourceGetBuffer, state S339");
                                this.Manager.Comment("reaching state \'S355\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp257;
                                this.Manager.Comment("executing step \'call ModifyPermissions(1,3,None)\'");
                                temp257 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels)(0)));
                                this.Manager.Comment("reaching state \'S371\'");
                                this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp257, "return of ModifyPermissions, state S371");
                                this.Manager.Comment("reaching state \'S387\'");
                                int temp258;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp259;
                                this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                                temp259 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp258);
                                this.Manager.Checkpoint("MS-OXCFXICS_R778");
                                this.Manager.Checkpoint("MS-OXCFXICS_R769");
                                this.Manager.Comment("reaching state \'S403\'");
                                this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 8]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 8, temp258, "synchronizationHandleIndex of SynchronizationOpenCollector, state S403");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp259, "return of SynchronizationOpenCollector, state S403");
                                this.Manager.Comment("reaching state \'S419\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp260;
                                this.Manager.Comment("executing step \'call SynchronizationImportReadStateChanges(1,8,6,False)\'");
                                temp260 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportReadStateChanges(1, 8, 6, false);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2260");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                                this.Manager.Checkpoint("MS-OXCFXICS_R905");
                                this.Manager.Comment("reaching state \'S435\'");
                                this.Manager.Comment("checking step \'return SynchronizationImportReadStateChanges/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp260, "return of SynchronizationImportReadStateChanges, state S435");
                                this.Manager.Comment("reaching state \'S451\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp261;
                                this.Manager.Comment("executing step \'call GetPropertiesSpecific(1,6,[\"PidTagMessageFlags\"])\'");
                                temp261 = this.IMS_OXCFXICSAdapterInstance.GetPropertiesSpecific(1, 6, this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "PidTagMessageFlags",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                                this.Manager.Comment("reaching state \'S467\'");
                                this.Manager.Comment("checking step \'return GetPropertiesSpecific/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp261, "return of GetPropertiesSpecific, state S467");
                                this.Manager.Comment("reaching state \'S483\'");
                                bool temp262;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2813,out _)\'");
                                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2813, out temp262);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp262);
                                this.Manager.Comment("reaching state \'S499\'");
                                int temp274 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker26)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker27)));
                                if ((temp274 == 0)) {
                                    this.Manager.Comment("reaching state \'S517\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp263;
                                    this.Manager.Comment("executing step \'call ModifyPermissions(1,3,Owner)\'");
                                    temp263 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels.Owner);
                                    this.Manager.Comment("reaching state \'S549\'");
                                    this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp263, "return of ModifyPermissions, state S549");
                                    this.Manager.Comment("reaching state \'S581\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp264;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp264 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S613\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp264, "return of DeleteFolder, state S613");
                                    this.Manager.Comment("reaching state \'S645\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp265;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp265 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S677\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp265, "return of DeleteFolder, state S677");
                                    this.Manager.Comment("reaching state \'S709\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp266;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp266 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S741\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp266, "return of Release, state S741");
                                    this.Manager.Comment("reaching state \'S773\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp267;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp267 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S805\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp267, "return of Release, state S805");
                                    this.Manager.Comment("reaching state \'S837\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp268;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp268 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S867\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp268, "return of Release, state S867");
                                    this.Manager.Comment("reaching state \'S883\'");
                                    goto label10;
                                }
                                if ((temp274 == 1)) {
                                    this.Manager.Comment("reaching state \'S518\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp269;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp269 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S550\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp269, "return of DeleteFolder, state S550");
                                    this.Manager.Comment("reaching state \'S582\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp270;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp270 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S614\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp270, "return of DeleteFolder, state S614");
                                    this.Manager.Comment("reaching state \'S646\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp271;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp271 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S678\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp271, "return of Release, state S678");
                                    this.Manager.Comment("reaching state \'S710\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp272;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp272 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S742\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp272, "return of Release, state S742");
                                    this.Manager.Comment("reaching state \'S774\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp273;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp273 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S806\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp273, "return of Release, state S806");
                                    this.Manager.Comment("reaching state \'S838\'");
                                    goto label10;
                                }
                                throw new InvalidOperationException("never reached");
                            label10:
;
                                goto label12;
                            }
                            if ((temp301 == 1)) {
                                this.Manager.Comment("reaching state \'S196\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp275;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagIdsetGiven,True,0)\'");
                                temp275 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(0)), true, 0);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2657");
                                this.Manager.Comment("reaching state \'S212\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp275, "return of SynchronizationUploadState, state S212");
                                this.Manager.Comment("reaching state \'S228\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp276;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeen,False,0)\'");
                                temp276 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(1)), false, 0);
                                this.Manager.Comment("reaching state \'S244\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp276, "return of SynchronizationUploadState, state S244");
                                this.Manager.Comment("reaching state \'S260\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp277;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetRead,False,0)\'");
                                temp277 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetRead, false, 0);
                                this.Manager.Comment("reaching state \'S276\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp277, "return of SynchronizationUploadState, state S276");
                                this.Manager.Comment("reaching state \'S292\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp278;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeenFAI,False,0)\'");
                                temp278 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetSeenFAI, false, 0);
                                this.Manager.Comment("reaching state \'S308\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp278, "return of SynchronizationUploadState, state S308");
                                this.Manager.Comment("reaching state \'S324\'");
                                int temp279;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream temp280;
                                bool temp281;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp282;
                                this.Manager.Comment("executing step \'call FastTransferSourceGetBuffer(1,7,Normal,out _,out _,out _)\'");
                                temp282 = this.IMS_OXCFXICSAdapterInstance.FastTransferSourceGetBuffer(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.BufferSize.Normal, out temp279, out temp280, out temp281);
                                this.Manager.Checkpoint("MS-OXCFXICS_R384");
                                this.Manager.Checkpoint("MS-OXCFXICS_R3321");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2188");
                                this.Manager.Checkpoint("MS-OXCFXICS_R1180");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2175");
                                this.Manager.Checkpoint("MS-OXCFXICS_R532");
                                this.Manager.Comment("reaching state \'S340\'");
                                this.Manager.Comment("checking step \'return FastTransferSourceGetBuffer/[out 1,out AbstractFastTransfer" +
                                        "Stream(StreamType=contentsSync,AbstractHierarchySync=AbstractHierarchySync(Folde" +
                                        "rchangeInfo=AbstractFolderChange(IsPidTagFolderIdExist=False,IsPidTagParentFolde" +
                                        "rIdExist=False,IsPidTagSourceKeyValueZero=False,IsPidTagParentSourceKeyValueZero" +
                                        "=False),FolderCount=0,FinalICSState=AbstractState(AbstractICSStateIndex=0,IdSetG" +
                                        "iven=null,IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChan" +
                                        "geNumber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsParentFolderBeforeChi" +
                                        "ld=False,AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted=" +
                                        "null,IsPidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False)),A" +
                                        "bstractContentsSync=AbstractContentsSync(IsprogessTotalPresent=False,MessageInfo" +
                                        "={},AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted={},Is" +
                                        "PidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False),IsReadSta" +
                                        "teChangesExist=False,FinalICSState=AbstractState(AbstractICSStateIndex=1,IdSetGi" +
                                        "ven={},IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChangeN" +
                                        "umber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsSortByMessageDeliveryTim" +
                                        "e=False,IsSortByLastModificationTime=False),AbstractFolderContent=AbstractFolder" +
                                        "Content(IsPidTagEcWarningOut=False,IsNoPermissionObjNotOut=False,IsPidTagNewFXFo" +
                                        "lderOut=False,IsFolderContentNotOut=False,IsFolderPropertiesNotOut=False,IsSubFo" +
                                        "lderPrecededByPidTagFXDelProp=False,AbsFolderMessage=AbstractFolderMessage(IsFol" +
                                        "derMessagesPrecededByPidTagFXDelProp=False,MessageList=AbstractMessageList(IsPid" +
                                        "TagEcWarningOut=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageCon" +
                                        "tent(IsNoPermissionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildre" +
                                        "n(AttachmentPrecededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=F" +
                                        "alse),StringPropertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,St" +
                                        "ringPropertiesInOtherCodePage=False,IsRTFFormat=False))))),AbstractTopFolder=Abs" +
                                        "tractTopFolder(AbsFolderContent=AbstractFolderContent(IsPidTagEcWarningOut=False" +
                                        ",IsNoPermissionObjNotOut=False,IsPidTagNewFXFolderOut=False,IsFolderContentNotOu" +
                                        "t=False,IsFolderPropertiesNotOut=False,IsSubFolderPrecededByPidTagFXDelProp=Fals" +
                                        "e,AbsFolderMessage=AbstractFolderMessage(IsFolderMessagesPrecededByPidTagFXDelPr" +
                                        "op=False,MessageList=AbstractMessageList(IsPidTagEcWarningOut=False,AbsMessage=A" +
                                        "bsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=F" +
                                        "alse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelP" +
                                        "rop=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fa" +
                                        "lse,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=Fals" +
                                        "e,IsRTFFormat=False))))),SubFolderInScope=False),AbstractState=AbstractState(Abs" +
                                        "tractICSStateIndex=0,IdSetGiven=null,IsNewCnsetReadPropertyChangeNumber=False,Is" +
                                        "NewCnsetSeenFAIPropertyChangeNumber=False,IsNewCnsetSeenPropertyChangeNumber=Fal" +
                                        "se),AbstractMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=Fa" +
                                        "lse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelPr" +
                                        "op=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fal" +
                                        "se,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=False" +
                                        ",IsRTFFormat=False),AbstractMessageList=AbstractMessageList(IsPidTagEcWarningOut" +
                                        "=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermis" +
                                        "sionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildren(AttachmentPre" +
                                        "cededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),StringPro" +
                                        "pertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,StringPropertiesI" +
                                        "nOtherCodePage=False,IsRTFFormat=False))),IsSameReadstateChangeNumber=False),out" +
                                        " False]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp279, "transferBufferIndex of FastTransferSourceGetBuffer, state S340");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(new string[] {
                                                "StreamType",
                                                "AbstractHierarchySync",
                                                "AbstractContentsSync",
                                                "AbstractFolderContent",
                                                "AbstractTopFolder",
                                                "AbstractState",
                                                "AbstractMessageContent",
                                                "AbstractMessageList",
                                                "IsSameReadstateChangeNumber"}, new object[] {
                                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.FastTransferStreamType.contentsSync,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractHierarchySync>(new string[] {
                                                            "FolderchangeInfo",
                                                            "FolderCount",
                                                            "FinalICSState",
                                                            "IsParentFolderBeforeChild",
                                                            "AbstractDeletion"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderChange>(new string[] {
                                                                        "IsPidTagFolderIdExist",
                                                                        "IsPidTagParentFolderIdExist",
                                                                        "IsPidTagSourceKeyValueZero",
                                                                        "IsPidTagParentSourceKeyValueZero"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            0,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        0,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractContentsSync>(new string[] {
                                                            "IsprogessTotalPresent",
                                                            "MessageInfo",
                                                            "AbstractDeletion",
                                                            "IsReadStateChangesExist",
                                                            "FinalICSState",
                                                            "IsSortByMessageDeliveryTime",
                                                            "IsSortByLastModificationTime"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Modeling.Set<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo>>(new string[] {
                                                                        "Rep"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo, Microsoft.Xrt.Runtime.Singleton>()}),
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        1,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "IsNoPermissionObjNotOut",
                                                            "IsPidTagNewFXFolderOut",
                                                            "IsFolderContentNotOut",
                                                            "IsFolderPropertiesNotOut",
                                                            "IsSubFolderPrecededByPidTagFXDelProp",
                                                            "AbsFolderMessage"}, new object[] {
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                        "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                        "MessageList"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                    "IsPidTagEcWarningOut",
                                                                                    "AbsMessage"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                "AbsMessageContent"}, new object[] {
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                            "IsNoPermissionMessageNotOut",
                                                                                                            "AbsMessageChildren",
                                                                                                            "StringPropertiesInUnicode",
                                                                                                            "StringPropertiesInUnicodeCodePage",
                                                                                                            "StringPropertiesInOtherCodePage",
                                                                                                            "IsRTFFormat"}, new object[] {
                                                                                                            false,
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                        false,
                                                                                                                        false}),
                                                                                                            false,
                                                                                                            false,
                                                                                                            false,
                                                                                                            false})})})})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractTopFolder>(new string[] {
                                                            "AbsFolderContent",
                                                            "SubFolderInScope"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                                        "IsPidTagEcWarningOut",
                                                                        "IsNoPermissionObjNotOut",
                                                                        "IsPidTagNewFXFolderOut",
                                                                        "IsFolderContentNotOut",
                                                                        "IsFolderPropertiesNotOut",
                                                                        "IsSubFolderPrecededByPidTagFXDelProp",
                                                                        "AbsFolderMessage"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                                    "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                                    "MessageList"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                                "IsPidTagEcWarningOut",
                                                                                                "AbsMessage"}, new object[] {
                                                                                                false,
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                            "AbsMessageContent"}, new object[] {
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                                        "IsNoPermissionMessageNotOut",
                                                                                                                        "AbsMessageChildren",
                                                                                                                        "StringPropertiesInUnicode",
                                                                                                                        "StringPropertiesInUnicodeCodePage",
                                                                                                                        "StringPropertiesInOtherCodePage",
                                                                                                                        "IsRTFFormat"}, new object[] {
                                                                                                                        false,
                                                                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                                    "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                                    "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                                    false,
                                                                                                                                    false}),
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false})})})})}),
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                            "AbstractICSStateIndex",
                                                            "IdSetGiven",
                                                            "IsNewCnsetReadPropertyChangeNumber",
                                                            "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                            "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                            0,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                            "IsNoPermissionMessageNotOut",
                                                            "AbsMessageChildren",
                                                            "StringPropertiesInUnicode",
                                                            "StringPropertiesInUnicodeCodePage",
                                                            "StringPropertiesInOtherCodePage",
                                                            "IsRTFFormat"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "AbsMessage"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                        "AbsMessageContent"}, new object[] {
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                    "IsNoPermissionMessageNotOut",
                                                                                    "AbsMessageChildren",
                                                                                    "StringPropertiesInUnicode",
                                                                                    "StringPropertiesInUnicodeCodePage",
                                                                                    "StringPropertiesInOtherCodePage",
                                                                                    "IsRTFFormat"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                "AttachmentPrecededByPidTagFXDelProp",
                                                                                                "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                false,
                                                                                                false}),
                                                                                    false,
                                                                                    false,
                                                                                    false,
                                                                                    false})})}),
                                                false}), temp280, "abstractFastTransferStream of FastTransferSourceGetBuffer, state S340");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp281, "transferDataSmallOrEqualToBufferSize of FastTransferSourceGetBuffer, state S340");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp282, "return of FastTransferSourceGetBuffer, state S340");
                                this.Manager.Comment("reaching state \'S356\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp283;
                                this.Manager.Comment("executing step \'call ModifyPermissions(1,3,None)\'");
                                temp283 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels)(0)));
                                this.Manager.Comment("reaching state \'S372\'");
                                this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp283, "return of ModifyPermissions, state S372");
                                this.Manager.Comment("reaching state \'S388\'");
                                int temp284;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp285;
                                this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                                temp285 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp284);
                                this.Manager.Checkpoint("MS-OXCFXICS_R778");
                                this.Manager.Checkpoint("MS-OXCFXICS_R769");
                                this.Manager.Comment("reaching state \'S404\'");
                                this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 8]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 8, temp284, "synchronizationHandleIndex of SynchronizationOpenCollector, state S404");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp285, "return of SynchronizationOpenCollector, state S404");
                                this.Manager.Comment("reaching state \'S420\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp286;
                                this.Manager.Comment("executing step \'call SynchronizationImportReadStateChanges(1,8,6,False)\'");
                                temp286 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportReadStateChanges(1, 8, 6, false);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2260");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                                this.Manager.Checkpoint("MS-OXCFXICS_R905");
                                this.Manager.Comment("reaching state \'S436\'");
                                this.Manager.Comment("checking step \'return SynchronizationImportReadStateChanges/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp286, "return of SynchronizationImportReadStateChanges, state S436");
                                this.Manager.Comment("reaching state \'S452\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp287;
                                this.Manager.Comment("executing step \'call GetPropertiesSpecific(1,6,[\"PidTagMessageFlags\"])\'");
                                temp287 = this.IMS_OXCFXICSAdapterInstance.GetPropertiesSpecific(1, 6, this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "PidTagMessageFlags",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                                this.Manager.Comment("reaching state \'S468\'");
                                this.Manager.Comment("checking step \'return GetPropertiesSpecific/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp287, "return of GetPropertiesSpecific, state S468");
                                this.Manager.Comment("reaching state \'S484\'");
                                bool temp288;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2813,out _)\'");
                                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2813, out temp288);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp288);
                                this.Manager.Comment("reaching state \'S500\'");
                                int temp300 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker29)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker30)));
                                if ((temp300 == 0)) {
                                    this.Manager.Comment("reaching state \'S519\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp289;
                                    this.Manager.Comment("executing step \'call ModifyPermissions(1,3,Owner)\'");
                                    temp289 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels.Owner);
                                    this.Manager.Comment("reaching state \'S551\'");
                                    this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp289, "return of ModifyPermissions, state S551");
                                    this.Manager.Comment("reaching state \'S583\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp290;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp290 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S615\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp290, "return of DeleteFolder, state S615");
                                    this.Manager.Comment("reaching state \'S647\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp291;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp291 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S679\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp291, "return of DeleteFolder, state S679");
                                    this.Manager.Comment("reaching state \'S711\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp292;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp292 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S743\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp292, "return of Release, state S743");
                                    this.Manager.Comment("reaching state \'S775\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp293;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp293 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S807\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp293, "return of Release, state S807");
                                    this.Manager.Comment("reaching state \'S839\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp294;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp294 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S868\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp294, "return of Release, state S868");
                                    this.Manager.Comment("reaching state \'S884\'");
                                    goto label11;
                                }
                                if ((temp300 == 1)) {
                                    this.Manager.Comment("reaching state \'S520\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp295;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp295 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S552\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp295, "return of DeleteFolder, state S552");
                                    this.Manager.Comment("reaching state \'S584\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp296;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp296 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S616\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp296, "return of DeleteFolder, state S616");
                                    this.Manager.Comment("reaching state \'S648\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp297;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp297 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S680\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp297, "return of Release, state S680");
                                    this.Manager.Comment("reaching state \'S712\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp298;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp298 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S744\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp298, "return of Release, state S744");
                                    this.Manager.Comment("reaching state \'S776\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp299;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp299 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S808\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp299, "return of Release, state S808");
                                    this.Manager.Comment("reaching state \'S840\'");
                                    goto label11;
                                }
                                throw new InvalidOperationException("never reached");
                            label11:
;
                                goto label12;
                            }
                            throw new InvalidOperationException("never reached");
                        label12:
;
                            goto label13;
                        }
                        throw new InvalidOperationException("never reached");
                    label13:
;
                        goto label14;
                    }
                    throw new InvalidOperationException("never reached");
                label14:
;
                    goto label30;
                }
                if ((temp606 == 1)) {
                    this.Manager.Comment("reaching state \'S6\'");
                    bool temp304;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2665,out _)\'");
                    this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2665, out temp304);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp304);
                    this.Manager.Comment("reaching state \'S8\'");
                    int temp605 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker32)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker47)));
                    if ((temp605 == 0)) {
                        this.Manager.Comment("reaching state \'S11\'");
                        bool temp305;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2666,out _)\'");
                        this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2666, out temp305);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp305);
                        this.Manager.Comment("reaching state \'S15\'");
                        int temp454 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker33)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker40)));
                        if ((temp454 == 0)) {
                            this.Manager.Comment("reaching state \'S21\'");
                            this.Manager.Comment("executing step \'call Connect(1,PublicFolderServer)\'");
                            this.IMS_OXCFXICSAdapterInstance.Connect(1, ((Microsoft.Protocols.TestSuites.Common.ConnectionType)(0)));
                            this.Manager.Comment("reaching state \'S29\'");
                            this.Manager.Comment("checking step \'return Connect\'");
                            this.Manager.Comment("reaching state \'S37\'");
                            int temp306;
                            int temp307;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp308;
                            this.Manager.Comment("executing step \'call Logon(1,Private,out _,out _)\'");
                            temp308 = this.IMS_OXCFXICSAdapterInstance.Logon(1, ((Microsoft.Protocols.TestSuites.Common.LogonFlags)(1)), out temp306, out temp307);
                            this.Manager.Comment("reaching state \'S45\'");
                            this.Manager.Comment("checking step \'return Logon/[out 1,out 1]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp306, "logonHandleIndex of Logon, state S45");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp307, "inboxFolderIdIndex of Logon, state S45");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp308, "return of Logon, state S45");
                            this.Manager.Comment("reaching state \'S53\'");
                            int temp309;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp310;
                            this.Manager.Comment("executing step \'call OpenFolder(1,1,1,out _)\'");
                            temp310 = this.IMS_OXCFXICSAdapterInstance.OpenFolder(1, 1, 1, out temp309);
                            this.Manager.Comment("reaching state \'S61\'");
                            this.Manager.Comment("checking step \'return OpenFolder/[out 2]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp309, "folderHandleIndex of OpenFolder, state S61");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp310, "return of OpenFolder, state S61");
                            this.Manager.Comment("reaching state \'S69\'");
                            int temp311;
                            int temp312;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp313;
                            this.Manager.Comment("executing step \'call CreateFolder(1,2,\"test\",out _,out _)\'");
                            temp313 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 2, "test", out temp311, out temp312);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                            this.Manager.Comment("reaching state \'S77\'");
                            this.Manager.Comment("checking step \'return CreateFolder/[out 2,out 3]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp311, "folderIdIndex of CreateFolder, state S77");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp312, "folderHandleIndex of CreateFolder, state S77");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp313, "return of CreateFolder, state S77");
                            this.Manager.Comment("reaching state \'S85\'");
                            int temp314;
                            int temp315;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp316;
                            this.Manager.Comment("executing step \'call CreateFolder(1,3,\"SubFolder\",out _,out _)\'");
                            temp316 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 3, "SubFolder", out temp314, out temp315);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                            this.Manager.Comment("reaching state \'S93\'");
                            this.Manager.Comment("checking step \'return CreateFolder/[out 3,out 4]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp314, "folderIdIndex of CreateFolder, state S93");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, temp315, "folderHandleIndex of CreateFolder, state S93");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp316, "return of CreateFolder, state S93");
                            this.Manager.Comment("reaching state \'S101\'");
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp317;
                            this.Manager.Comment("executing step \'call GetLocalReplicaIds(1,1,3)\'");
                            temp317 = this.IMS_OXCFXICSAdapterInstance.GetLocalReplicaIds(1, 1, 3u);
                            this.Manager.Checkpoint("MS-OXCFXICS_R925");
                            this.Manager.Comment("reaching state \'S109\'");
                            this.Manager.Comment("checking step \'return GetLocalReplicaIds/Success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp317, "return of GetLocalReplicaIds, state S109");
                            this.Manager.Comment("reaching state \'S117\'");
                            int temp318;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp319;
                            this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                            temp319 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp318);
                            this.Manager.Checkpoint("MS-OXCFXICS_R778");
                            this.Manager.Checkpoint("MS-OXCFXICS_R769");
                            this.Manager.Comment("reaching state \'S125\'");
                            this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 5]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, temp318, "synchronizationHandleIndex of SynchronizationOpenCollector, state S125");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp319, "return of SynchronizationOpenCollector, state S125");
                            this.Manager.Comment("reaching state \'S133\'");
                            int temp320;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp321;
                            this.Manager.Comment("executing step \'call SynchronizationImportMessageChange(1,5,0,Normal,out _)\'");
                            temp321 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportMessageChange(1, 5, 0, ((Microsoft.Protocols.TestSuites.Common.ImportFlag)(0)), out temp320);
                            this.Manager.Checkpoint("MS-OXCFXICS_R814");
                            this.Manager.Checkpoint("MS-OXCFXICS_R805");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1897");
                            this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                            this.Manager.Checkpoint("MS-OXCFXICS_R782");
                            this.Manager.Comment("reaching state \'S141\'");
                            this.Manager.Comment("checking step \'return SynchronizationImportMessageChange/[out 6]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, temp320, "importMessageHandleIndex of SynchronizationImportMessageChange, state S141");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp321, "return of SynchronizationImportMessageChange, state S141");
                            this.Manager.Comment("reaching state \'S149\'");
                            int temp322;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp323;
                            this.Manager.Comment("executing step \'call SaveChangesMessage(1,6,out _)\'");
                            temp323 = this.IMS_OXCFXICSAdapterInstance.SaveChangesMessage(1, 6, out temp322);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1910");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1906");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1898");
                            this.Manager.Comment("reaching state \'S157\'");
                            this.Manager.Comment("checking step \'return SaveChangesMessage/[out 4]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, temp322, "messageIdIndex of SaveChangesMessage, state S157");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp323, "return of SaveChangesMessage, state S157");
                            this.Manager.Comment("reaching state \'S165\'");
                            int temp324;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp325;
                            this.Manager.Comment("executing step \'call SynchronizationConfigure(1,4,Contents,Unicode|ForceUnicode,N" +
                                    "one,Eid,[\"PidTagCreationTime\"],out _)\'");
                            temp325 = this.IMS_OXCFXICSAdapterInstance.SynchronizationConfigure(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SendOptionAlls)(9)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationFlag)(0)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationExtraFlag)(1)), this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "PidTagCreationTime",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}), out temp324);
                            this.Manager.Checkpoint("MS-OXCFXICS_R669");
                            this.Manager.Checkpoint("MS-OXCFXICS_R641");
                            this.Manager.Comment("reaching state \'S173\'");
                            this.Manager.Comment("checking step \'return SynchronizationConfigure/[out 7]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 7, temp324, "downloadcontextHandleIndex of SynchronizationConfigure, state S173");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp325, "return of SynchronizationConfigure, state S173");
                            this.Manager.Comment("reaching state \'S181\'");
                            bool temp326;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(2657,out _)\'");
                            this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2657, out temp326);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp326);
                            this.Manager.Comment("reaching state \'S189\'");
                            int temp379 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker34)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker37)));
                            if ((temp379 == 0)) {
                                this.Manager.Comment("reaching state \'S201\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp327;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagIdsetGiven,True,0)\'");
                                temp327 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(0)), true, 0);
                                this.Manager.Comment("reaching state \'S217\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/InvalidParameter\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult.InvalidParameter, temp327, "return of SynchronizationUploadState, state S217");
                                this.Manager.Comment("reaching state \'S233\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp328;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeen,False,0)\'");
                                temp328 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(1)), false, 0);
                                this.Manager.Comment("reaching state \'S249\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp328, "return of SynchronizationUploadState, state S249");
                                this.Manager.Comment("reaching state \'S265\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp329;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetRead,False,0)\'");
                                temp329 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetRead, false, 0);
                                this.Manager.Comment("reaching state \'S281\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp329, "return of SynchronizationUploadState, state S281");
                                this.Manager.Comment("reaching state \'S297\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp330;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeenFAI,False,0)\'");
                                temp330 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetSeenFAI, false, 0);
                                this.Manager.Comment("reaching state \'S313\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp330, "return of SynchronizationUploadState, state S313");
                                this.Manager.Comment("reaching state \'S329\'");
                                int temp331;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream temp332;
                                bool temp333;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp334;
                                this.Manager.Comment("executing step \'call FastTransferSourceGetBuffer(1,7,Normal,out _,out _,out _)\'");
                                temp334 = this.IMS_OXCFXICSAdapterInstance.FastTransferSourceGetBuffer(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.BufferSize.Normal, out temp331, out temp332, out temp333);
                                this.Manager.Checkpoint("MS-OXCFXICS_R384");
                                this.Manager.Checkpoint("MS-OXCFXICS_R3321");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2188");
                                this.Manager.Checkpoint("MS-OXCFXICS_R1180");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2175");
                                this.Manager.Checkpoint("MS-OXCFXICS_R532");
                                this.Manager.Comment("reaching state \'S345\'");
                                this.Manager.Comment("checking step \'return FastTransferSourceGetBuffer/[out 1,out AbstractFastTransfer" +
                                        "Stream(StreamType=contentsSync,AbstractHierarchySync=AbstractHierarchySync(Folde" +
                                        "rchangeInfo=AbstractFolderChange(IsPidTagFolderIdExist=False,IsPidTagParentFolde" +
                                        "rIdExist=False,IsPidTagSourceKeyValueZero=False,IsPidTagParentSourceKeyValueZero" +
                                        "=False),FolderCount=0,FinalICSState=AbstractState(AbstractICSStateIndex=0,IdSetG" +
                                        "iven=null,IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChan" +
                                        "geNumber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsParentFolderBeforeChi" +
                                        "ld=False,AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted=" +
                                        "null,IsPidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False)),A" +
                                        "bstractContentsSync=AbstractContentsSync(IsprogessTotalPresent=False,MessageInfo" +
                                        "={},AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted={},Is" +
                                        "PidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False),IsReadSta" +
                                        "teChangesExist=False,FinalICSState=AbstractState(AbstractICSStateIndex=1,IdSetGi" +
                                        "ven={},IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChangeN" +
                                        "umber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsSortByMessageDeliveryTim" +
                                        "e=False,IsSortByLastModificationTime=False),AbstractFolderContent=AbstractFolder" +
                                        "Content(IsPidTagEcWarningOut=False,IsNoPermissionObjNotOut=False,IsPidTagNewFXFo" +
                                        "lderOut=False,IsFolderContentNotOut=False,IsFolderPropertiesNotOut=False,IsSubFo" +
                                        "lderPrecededByPidTagFXDelProp=False,AbsFolderMessage=AbstractFolderMessage(IsFol" +
                                        "derMessagesPrecededByPidTagFXDelProp=False,MessageList=AbstractMessageList(IsPid" +
                                        "TagEcWarningOut=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageCon" +
                                        "tent(IsNoPermissionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildre" +
                                        "n(AttachmentPrecededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=F" +
                                        "alse),StringPropertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,St" +
                                        "ringPropertiesInOtherCodePage=False,IsRTFFormat=False))))),AbstractTopFolder=Abs" +
                                        "tractTopFolder(AbsFolderContent=AbstractFolderContent(IsPidTagEcWarningOut=False" +
                                        ",IsNoPermissionObjNotOut=False,IsPidTagNewFXFolderOut=False,IsFolderContentNotOu" +
                                        "t=False,IsFolderPropertiesNotOut=False,IsSubFolderPrecededByPidTagFXDelProp=Fals" +
                                        "e,AbsFolderMessage=AbstractFolderMessage(IsFolderMessagesPrecededByPidTagFXDelPr" +
                                        "op=False,MessageList=AbstractMessageList(IsPidTagEcWarningOut=False,AbsMessage=A" +
                                        "bsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=F" +
                                        "alse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelP" +
                                        "rop=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fa" +
                                        "lse,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=Fals" +
                                        "e,IsRTFFormat=False))))),SubFolderInScope=False),AbstractState=AbstractState(Abs" +
                                        "tractICSStateIndex=0,IdSetGiven=null,IsNewCnsetReadPropertyChangeNumber=False,Is" +
                                        "NewCnsetSeenFAIPropertyChangeNumber=False,IsNewCnsetSeenPropertyChangeNumber=Fal" +
                                        "se),AbstractMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=Fa" +
                                        "lse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelPr" +
                                        "op=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fal" +
                                        "se,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=False" +
                                        ",IsRTFFormat=False),AbstractMessageList=AbstractMessageList(IsPidTagEcWarningOut" +
                                        "=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermis" +
                                        "sionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildren(AttachmentPre" +
                                        "cededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),StringPro" +
                                        "pertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,StringPropertiesI" +
                                        "nOtherCodePage=False,IsRTFFormat=False))),IsSameReadstateChangeNumber=False),out" +
                                        " False]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp331, "transferBufferIndex of FastTransferSourceGetBuffer, state S345");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(new string[] {
                                                "StreamType",
                                                "AbstractHierarchySync",
                                                "AbstractContentsSync",
                                                "AbstractFolderContent",
                                                "AbstractTopFolder",
                                                "AbstractState",
                                                "AbstractMessageContent",
                                                "AbstractMessageList",
                                                "IsSameReadstateChangeNumber"}, new object[] {
                                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.FastTransferStreamType.contentsSync,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractHierarchySync>(new string[] {
                                                            "FolderchangeInfo",
                                                            "FolderCount",
                                                            "FinalICSState",
                                                            "IsParentFolderBeforeChild",
                                                            "AbstractDeletion"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderChange>(new string[] {
                                                                        "IsPidTagFolderIdExist",
                                                                        "IsPidTagParentFolderIdExist",
                                                                        "IsPidTagSourceKeyValueZero",
                                                                        "IsPidTagParentSourceKeyValueZero"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            0,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        0,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractContentsSync>(new string[] {
                                                            "IsprogessTotalPresent",
                                                            "MessageInfo",
                                                            "AbstractDeletion",
                                                            "IsReadStateChangesExist",
                                                            "FinalICSState",
                                                            "IsSortByMessageDeliveryTime",
                                                            "IsSortByLastModificationTime"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Modeling.Set<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo>>(new string[] {
                                                                        "Rep"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo, Microsoft.Xrt.Runtime.Singleton>()}),
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        1,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "IsNoPermissionObjNotOut",
                                                            "IsPidTagNewFXFolderOut",
                                                            "IsFolderContentNotOut",
                                                            "IsFolderPropertiesNotOut",
                                                            "IsSubFolderPrecededByPidTagFXDelProp",
                                                            "AbsFolderMessage"}, new object[] {
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                        "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                        "MessageList"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                    "IsPidTagEcWarningOut",
                                                                                    "AbsMessage"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                "AbsMessageContent"}, new object[] {
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                            "IsNoPermissionMessageNotOut",
                                                                                                            "AbsMessageChildren",
                                                                                                            "StringPropertiesInUnicode",
                                                                                                            "StringPropertiesInUnicodeCodePage",
                                                                                                            "StringPropertiesInOtherCodePage",
                                                                                                            "IsRTFFormat"}, new object[] {
                                                                                                            false,
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                        false,
                                                                                                                        false}),
                                                                                                            false,
                                                                                                            false,
                                                                                                            false,
                                                                                                            false})})})})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractTopFolder>(new string[] {
                                                            "AbsFolderContent",
                                                            "SubFolderInScope"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                                        "IsPidTagEcWarningOut",
                                                                        "IsNoPermissionObjNotOut",
                                                                        "IsPidTagNewFXFolderOut",
                                                                        "IsFolderContentNotOut",
                                                                        "IsFolderPropertiesNotOut",
                                                                        "IsSubFolderPrecededByPidTagFXDelProp",
                                                                        "AbsFolderMessage"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                                    "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                                    "MessageList"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                                "IsPidTagEcWarningOut",
                                                                                                "AbsMessage"}, new object[] {
                                                                                                false,
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                            "AbsMessageContent"}, new object[] {
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                                        "IsNoPermissionMessageNotOut",
                                                                                                                        "AbsMessageChildren",
                                                                                                                        "StringPropertiesInUnicode",
                                                                                                                        "StringPropertiesInUnicodeCodePage",
                                                                                                                        "StringPropertiesInOtherCodePage",
                                                                                                                        "IsRTFFormat"}, new object[] {
                                                                                                                        false,
                                                                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                                    "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                                    "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                                    false,
                                                                                                                                    false}),
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false})})})})}),
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                            "AbstractICSStateIndex",
                                                            "IdSetGiven",
                                                            "IsNewCnsetReadPropertyChangeNumber",
                                                            "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                            "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                            0,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                            "IsNoPermissionMessageNotOut",
                                                            "AbsMessageChildren",
                                                            "StringPropertiesInUnicode",
                                                            "StringPropertiesInUnicodeCodePage",
                                                            "StringPropertiesInOtherCodePage",
                                                            "IsRTFFormat"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "AbsMessage"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                        "AbsMessageContent"}, new object[] {
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                    "IsNoPermissionMessageNotOut",
                                                                                    "AbsMessageChildren",
                                                                                    "StringPropertiesInUnicode",
                                                                                    "StringPropertiesInUnicodeCodePage",
                                                                                    "StringPropertiesInOtherCodePage",
                                                                                    "IsRTFFormat"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                "AttachmentPrecededByPidTagFXDelProp",
                                                                                                "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                false,
                                                                                                false}),
                                                                                    false,
                                                                                    false,
                                                                                    false,
                                                                                    false})})}),
                                                false}), temp332, "abstractFastTransferStream of FastTransferSourceGetBuffer, state S345");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp333, "transferDataSmallOrEqualToBufferSize of FastTransferSourceGetBuffer, state S345");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp334, "return of FastTransferSourceGetBuffer, state S345");
                                this.Manager.Comment("reaching state \'S361\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp335;
                                this.Manager.Comment("executing step \'call ModifyPermissions(1,3,None)\'");
                                temp335 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels)(0)));
                                this.Manager.Comment("reaching state \'S377\'");
                                this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp335, "return of ModifyPermissions, state S377");
                                this.Manager.Comment("reaching state \'S393\'");
                                int temp336;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp337;
                                this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                                temp337 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp336);
                                this.Manager.Checkpoint("MS-OXCFXICS_R778");
                                this.Manager.Checkpoint("MS-OXCFXICS_R769");
                                this.Manager.Comment("reaching state \'S409\'");
                                this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 8]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 8, temp336, "synchronizationHandleIndex of SynchronizationOpenCollector, state S409");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp337, "return of SynchronizationOpenCollector, state S409");
                                this.Manager.Comment("reaching state \'S425\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp338;
                                this.Manager.Comment("executing step \'call SynchronizationImportReadStateChanges(1,8,6,False)\'");
                                temp338 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportReadStateChanges(1, 8, 6, false);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2260");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                                this.Manager.Checkpoint("MS-OXCFXICS_R905");
                                this.Manager.Comment("reaching state \'S441\'");
                                this.Manager.Comment("checking step \'return SynchronizationImportReadStateChanges/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp338, "return of SynchronizationImportReadStateChanges, state S441");
                                this.Manager.Comment("reaching state \'S457\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp339;
                                this.Manager.Comment("executing step \'call GetPropertiesSpecific(1,6,[\"PidTagMessageFlags\"])\'");
                                temp339 = this.IMS_OXCFXICSAdapterInstance.GetPropertiesSpecific(1, 6, this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "PidTagMessageFlags",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                                this.Manager.Comment("reaching state \'S473\'");
                                this.Manager.Comment("checking step \'return GetPropertiesSpecific/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp339, "return of GetPropertiesSpecific, state S473");
                                this.Manager.Comment("reaching state \'S489\'");
                                bool temp340;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2813,out _)\'");
                                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2813, out temp340);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp340);
                                this.Manager.Comment("reaching state \'S505\'");
                                int temp352 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker35)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker36)));
                                if ((temp352 == 0)) {
                                    this.Manager.Comment("reaching state \'S529\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp341;
                                    this.Manager.Comment("executing step \'call ModifyPermissions(1,3,Owner)\'");
                                    temp341 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels.Owner);
                                    this.Manager.Comment("reaching state \'S561\'");
                                    this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp341, "return of ModifyPermissions, state S561");
                                    this.Manager.Comment("reaching state \'S593\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp342;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp342 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S625\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp342, "return of DeleteFolder, state S625");
                                    this.Manager.Comment("reaching state \'S657\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp343;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp343 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S689\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp343, "return of DeleteFolder, state S689");
                                    this.Manager.Comment("reaching state \'S721\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp344;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp344 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S753\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp344, "return of Release, state S753");
                                    this.Manager.Comment("reaching state \'S785\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp345;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp345 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S817\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp345, "return of Release, state S817");
                                    this.Manager.Comment("reaching state \'S849\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp346;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp346 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S873\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp346, "return of Release, state S873");
                                    this.Manager.Comment("reaching state \'S889\'");
                                    goto label15;
                                }
                                if ((temp352 == 1)) {
                                    this.Manager.Comment("reaching state \'S530\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp347;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp347 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S562\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp347, "return of DeleteFolder, state S562");
                                    this.Manager.Comment("reaching state \'S594\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp348;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp348 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S626\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp348, "return of DeleteFolder, state S626");
                                    this.Manager.Comment("reaching state \'S658\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp349;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp349 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S690\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp349, "return of Release, state S690");
                                    this.Manager.Comment("reaching state \'S722\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp350;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp350 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S754\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp350, "return of Release, state S754");
                                    this.Manager.Comment("reaching state \'S786\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp351;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp351 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S818\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp351, "return of Release, state S818");
                                    this.Manager.Comment("reaching state \'S850\'");
                                    goto label15;
                                }
                                throw new InvalidOperationException("never reached");
                            label15:
;
                                goto label17;
                            }
                            if ((temp379 == 1)) {
                                this.Manager.Comment("reaching state \'S202\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp353;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagIdsetGiven,True,0)\'");
                                temp353 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(0)), true, 0);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2657");
                                this.Manager.Comment("reaching state \'S218\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp353, "return of SynchronizationUploadState, state S218");
                                this.Manager.Comment("reaching state \'S234\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp354;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeen,False,0)\'");
                                temp354 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(1)), false, 0);
                                this.Manager.Comment("reaching state \'S250\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp354, "return of SynchronizationUploadState, state S250");
                                this.Manager.Comment("reaching state \'S266\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp355;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetRead,False,0)\'");
                                temp355 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetRead, false, 0);
                                this.Manager.Comment("reaching state \'S282\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp355, "return of SynchronizationUploadState, state S282");
                                this.Manager.Comment("reaching state \'S298\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp356;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeenFAI,False,0)\'");
                                temp356 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetSeenFAI, false, 0);
                                this.Manager.Comment("reaching state \'S314\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp356, "return of SynchronizationUploadState, state S314");
                                this.Manager.Comment("reaching state \'S330\'");
                                int temp357;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream temp358;
                                bool temp359;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp360;
                                this.Manager.Comment("executing step \'call FastTransferSourceGetBuffer(1,7,Normal,out _,out _,out _)\'");
                                temp360 = this.IMS_OXCFXICSAdapterInstance.FastTransferSourceGetBuffer(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.BufferSize.Normal, out temp357, out temp358, out temp359);
                                this.Manager.Checkpoint("MS-OXCFXICS_R384");
                                this.Manager.Checkpoint("MS-OXCFXICS_R3321");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2188");
                                this.Manager.Checkpoint("MS-OXCFXICS_R1180");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2175");
                                this.Manager.Checkpoint("MS-OXCFXICS_R532");
                                this.Manager.Comment("reaching state \'S346\'");
                                this.Manager.Comment("checking step \'return FastTransferSourceGetBuffer/[out 1,out AbstractFastTransfer" +
                                        "Stream(StreamType=contentsSync,AbstractHierarchySync=AbstractHierarchySync(Folde" +
                                        "rchangeInfo=AbstractFolderChange(IsPidTagFolderIdExist=False,IsPidTagParentFolde" +
                                        "rIdExist=False,IsPidTagSourceKeyValueZero=False,IsPidTagParentSourceKeyValueZero" +
                                        "=False),FolderCount=0,FinalICSState=AbstractState(AbstractICSStateIndex=0,IdSetG" +
                                        "iven=null,IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChan" +
                                        "geNumber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsParentFolderBeforeChi" +
                                        "ld=False,AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted=" +
                                        "null,IsPidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False)),A" +
                                        "bstractContentsSync=AbstractContentsSync(IsprogessTotalPresent=False,MessageInfo" +
                                        "={},AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted={},Is" +
                                        "PidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False),IsReadSta" +
                                        "teChangesExist=False,FinalICSState=AbstractState(AbstractICSStateIndex=1,IdSetGi" +
                                        "ven={},IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChangeN" +
                                        "umber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsSortByMessageDeliveryTim" +
                                        "e=False,IsSortByLastModificationTime=False),AbstractFolderContent=AbstractFolder" +
                                        "Content(IsPidTagEcWarningOut=False,IsNoPermissionObjNotOut=False,IsPidTagNewFXFo" +
                                        "lderOut=False,IsFolderContentNotOut=False,IsFolderPropertiesNotOut=False,IsSubFo" +
                                        "lderPrecededByPidTagFXDelProp=False,AbsFolderMessage=AbstractFolderMessage(IsFol" +
                                        "derMessagesPrecededByPidTagFXDelProp=False,MessageList=AbstractMessageList(IsPid" +
                                        "TagEcWarningOut=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageCon" +
                                        "tent(IsNoPermissionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildre" +
                                        "n(AttachmentPrecededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=F" +
                                        "alse),StringPropertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,St" +
                                        "ringPropertiesInOtherCodePage=False,IsRTFFormat=False))))),AbstractTopFolder=Abs" +
                                        "tractTopFolder(AbsFolderContent=AbstractFolderContent(IsPidTagEcWarningOut=False" +
                                        ",IsNoPermissionObjNotOut=False,IsPidTagNewFXFolderOut=False,IsFolderContentNotOu" +
                                        "t=False,IsFolderPropertiesNotOut=False,IsSubFolderPrecededByPidTagFXDelProp=Fals" +
                                        "e,AbsFolderMessage=AbstractFolderMessage(IsFolderMessagesPrecededByPidTagFXDelPr" +
                                        "op=False,MessageList=AbstractMessageList(IsPidTagEcWarningOut=False,AbsMessage=A" +
                                        "bsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=F" +
                                        "alse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelP" +
                                        "rop=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fa" +
                                        "lse,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=Fals" +
                                        "e,IsRTFFormat=False))))),SubFolderInScope=False),AbstractState=AbstractState(Abs" +
                                        "tractICSStateIndex=0,IdSetGiven=null,IsNewCnsetReadPropertyChangeNumber=False,Is" +
                                        "NewCnsetSeenFAIPropertyChangeNumber=False,IsNewCnsetSeenPropertyChangeNumber=Fal" +
                                        "se),AbstractMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=Fa" +
                                        "lse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelPr" +
                                        "op=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fal" +
                                        "se,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=False" +
                                        ",IsRTFFormat=False),AbstractMessageList=AbstractMessageList(IsPidTagEcWarningOut" +
                                        "=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermis" +
                                        "sionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildren(AttachmentPre" +
                                        "cededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),StringPro" +
                                        "pertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,StringPropertiesI" +
                                        "nOtherCodePage=False,IsRTFFormat=False))),IsSameReadstateChangeNumber=False),out" +
                                        " False]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp357, "transferBufferIndex of FastTransferSourceGetBuffer, state S346");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(new string[] {
                                                "StreamType",
                                                "AbstractHierarchySync",
                                                "AbstractContentsSync",
                                                "AbstractFolderContent",
                                                "AbstractTopFolder",
                                                "AbstractState",
                                                "AbstractMessageContent",
                                                "AbstractMessageList",
                                                "IsSameReadstateChangeNumber"}, new object[] {
                                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.FastTransferStreamType.contentsSync,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractHierarchySync>(new string[] {
                                                            "FolderchangeInfo",
                                                            "FolderCount",
                                                            "FinalICSState",
                                                            "IsParentFolderBeforeChild",
                                                            "AbstractDeletion"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderChange>(new string[] {
                                                                        "IsPidTagFolderIdExist",
                                                                        "IsPidTagParentFolderIdExist",
                                                                        "IsPidTagSourceKeyValueZero",
                                                                        "IsPidTagParentSourceKeyValueZero"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            0,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        0,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractContentsSync>(new string[] {
                                                            "IsprogessTotalPresent",
                                                            "MessageInfo",
                                                            "AbstractDeletion",
                                                            "IsReadStateChangesExist",
                                                            "FinalICSState",
                                                            "IsSortByMessageDeliveryTime",
                                                            "IsSortByLastModificationTime"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Modeling.Set<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo>>(new string[] {
                                                                        "Rep"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo, Microsoft.Xrt.Runtime.Singleton>()}),
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        1,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "IsNoPermissionObjNotOut",
                                                            "IsPidTagNewFXFolderOut",
                                                            "IsFolderContentNotOut",
                                                            "IsFolderPropertiesNotOut",
                                                            "IsSubFolderPrecededByPidTagFXDelProp",
                                                            "AbsFolderMessage"}, new object[] {
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                        "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                        "MessageList"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                    "IsPidTagEcWarningOut",
                                                                                    "AbsMessage"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                "AbsMessageContent"}, new object[] {
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                            "IsNoPermissionMessageNotOut",
                                                                                                            "AbsMessageChildren",
                                                                                                            "StringPropertiesInUnicode",
                                                                                                            "StringPropertiesInUnicodeCodePage",
                                                                                                            "StringPropertiesInOtherCodePage",
                                                                                                            "IsRTFFormat"}, new object[] {
                                                                                                            false,
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                        false,
                                                                                                                        false}),
                                                                                                            false,
                                                                                                            false,
                                                                                                            false,
                                                                                                            false})})})})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractTopFolder>(new string[] {
                                                            "AbsFolderContent",
                                                            "SubFolderInScope"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                                        "IsPidTagEcWarningOut",
                                                                        "IsNoPermissionObjNotOut",
                                                                        "IsPidTagNewFXFolderOut",
                                                                        "IsFolderContentNotOut",
                                                                        "IsFolderPropertiesNotOut",
                                                                        "IsSubFolderPrecededByPidTagFXDelProp",
                                                                        "AbsFolderMessage"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                                    "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                                    "MessageList"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                                "IsPidTagEcWarningOut",
                                                                                                "AbsMessage"}, new object[] {
                                                                                                false,
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                            "AbsMessageContent"}, new object[] {
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                                        "IsNoPermissionMessageNotOut",
                                                                                                                        "AbsMessageChildren",
                                                                                                                        "StringPropertiesInUnicode",
                                                                                                                        "StringPropertiesInUnicodeCodePage",
                                                                                                                        "StringPropertiesInOtherCodePage",
                                                                                                                        "IsRTFFormat"}, new object[] {
                                                                                                                        false,
                                                                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                                    "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                                    "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                                    false,
                                                                                                                                    false}),
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false})})})})}),
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                            "AbstractICSStateIndex",
                                                            "IdSetGiven",
                                                            "IsNewCnsetReadPropertyChangeNumber",
                                                            "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                            "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                            0,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                            "IsNoPermissionMessageNotOut",
                                                            "AbsMessageChildren",
                                                            "StringPropertiesInUnicode",
                                                            "StringPropertiesInUnicodeCodePage",
                                                            "StringPropertiesInOtherCodePage",
                                                            "IsRTFFormat"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "AbsMessage"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                        "AbsMessageContent"}, new object[] {
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                    "IsNoPermissionMessageNotOut",
                                                                                    "AbsMessageChildren",
                                                                                    "StringPropertiesInUnicode",
                                                                                    "StringPropertiesInUnicodeCodePage",
                                                                                    "StringPropertiesInOtherCodePage",
                                                                                    "IsRTFFormat"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                "AttachmentPrecededByPidTagFXDelProp",
                                                                                                "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                false,
                                                                                                false}),
                                                                                    false,
                                                                                    false,
                                                                                    false,
                                                                                    false})})}),
                                                false}), temp358, "abstractFastTransferStream of FastTransferSourceGetBuffer, state S346");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp359, "transferDataSmallOrEqualToBufferSize of FastTransferSourceGetBuffer, state S346");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp360, "return of FastTransferSourceGetBuffer, state S346");
                                this.Manager.Comment("reaching state \'S362\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp361;
                                this.Manager.Comment("executing step \'call ModifyPermissions(1,3,None)\'");
                                temp361 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels)(0)));
                                this.Manager.Comment("reaching state \'S378\'");
                                this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp361, "return of ModifyPermissions, state S378");
                                this.Manager.Comment("reaching state \'S394\'");
                                int temp362;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp363;
                                this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                                temp363 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp362);
                                this.Manager.Checkpoint("MS-OXCFXICS_R778");
                                this.Manager.Checkpoint("MS-OXCFXICS_R769");
                                this.Manager.Comment("reaching state \'S410\'");
                                this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 8]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 8, temp362, "synchronizationHandleIndex of SynchronizationOpenCollector, state S410");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp363, "return of SynchronizationOpenCollector, state S410");
                                this.Manager.Comment("reaching state \'S426\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp364;
                                this.Manager.Comment("executing step \'call SynchronizationImportReadStateChanges(1,8,6,False)\'");
                                temp364 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportReadStateChanges(1, 8, 6, false);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2260");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                                this.Manager.Checkpoint("MS-OXCFXICS_R905");
                                this.Manager.Comment("reaching state \'S442\'");
                                this.Manager.Comment("checking step \'return SynchronizationImportReadStateChanges/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp364, "return of SynchronizationImportReadStateChanges, state S442");
                                this.Manager.Comment("reaching state \'S458\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp365;
                                this.Manager.Comment("executing step \'call GetPropertiesSpecific(1,6,[\"PidTagMessageFlags\"])\'");
                                temp365 = this.IMS_OXCFXICSAdapterInstance.GetPropertiesSpecific(1, 6, this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "PidTagMessageFlags",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                                this.Manager.Comment("reaching state \'S474\'");
                                this.Manager.Comment("checking step \'return GetPropertiesSpecific/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp365, "return of GetPropertiesSpecific, state S474");
                                this.Manager.Comment("reaching state \'S490\'");
                                bool temp366;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2813,out _)\'");
                                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2813, out temp366);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp366);
                                this.Manager.Comment("reaching state \'S506\'");
                                int temp378 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker38)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker39)));
                                if ((temp378 == 0)) {
                                    this.Manager.Comment("reaching state \'S531\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp367;
                                    this.Manager.Comment("executing step \'call ModifyPermissions(1,3,Owner)\'");
                                    temp367 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels.Owner);
                                    this.Manager.Comment("reaching state \'S563\'");
                                    this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp367, "return of ModifyPermissions, state S563");
                                    this.Manager.Comment("reaching state \'S595\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp368;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp368 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S627\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp368, "return of DeleteFolder, state S627");
                                    this.Manager.Comment("reaching state \'S659\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp369;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp369 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S691\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp369, "return of DeleteFolder, state S691");
                                    this.Manager.Comment("reaching state \'S723\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp370;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp370 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S755\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp370, "return of Release, state S755");
                                    this.Manager.Comment("reaching state \'S787\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp371;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp371 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S819\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp371, "return of Release, state S819");
                                    this.Manager.Comment("reaching state \'S851\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp372;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp372 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S874\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp372, "return of Release, state S874");
                                    this.Manager.Comment("reaching state \'S890\'");
                                    goto label16;
                                }
                                if ((temp378 == 1)) {
                                    this.Manager.Comment("reaching state \'S532\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp373;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp373 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S564\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp373, "return of DeleteFolder, state S564");
                                    this.Manager.Comment("reaching state \'S596\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp374;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp374 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S628\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp374, "return of DeleteFolder, state S628");
                                    this.Manager.Comment("reaching state \'S660\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp375;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp375 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S692\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp375, "return of Release, state S692");
                                    this.Manager.Comment("reaching state \'S724\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp376;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp376 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S756\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp376, "return of Release, state S756");
                                    this.Manager.Comment("reaching state \'S788\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp377;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp377 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S820\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp377, "return of Release, state S820");
                                    this.Manager.Comment("reaching state \'S852\'");
                                    goto label16;
                                }
                                throw new InvalidOperationException("never reached");
                            label16:
;
                                goto label17;
                            }
                            throw new InvalidOperationException("never reached");
                        label17:
;
                            goto label21;
                        }
                        if ((temp454 == 1)) {
                            this.Manager.Comment("reaching state \'S22\'");
                            this.Manager.Comment("executing step \'call Connect(1,PublicFolderServer)\'");
                            this.IMS_OXCFXICSAdapterInstance.Connect(1, ((Microsoft.Protocols.TestSuites.Common.ConnectionType)(0)));
                            this.Manager.Comment("reaching state \'S30\'");
                            this.Manager.Comment("checking step \'return Connect\'");
                            this.Manager.Comment("reaching state \'S38\'");
                            int temp380;
                            int temp381;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp382;
                            this.Manager.Comment("executing step \'call Logon(1,Private,out _,out _)\'");
                            temp382 = this.IMS_OXCFXICSAdapterInstance.Logon(1, ((Microsoft.Protocols.TestSuites.Common.LogonFlags)(1)), out temp380, out temp381);
                            this.Manager.Comment("reaching state \'S46\'");
                            this.Manager.Comment("checking step \'return Logon/[out 1,out 1]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp380, "logonHandleIndex of Logon, state S46");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp381, "inboxFolderIdIndex of Logon, state S46");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp382, "return of Logon, state S46");
                            this.Manager.Comment("reaching state \'S54\'");
                            int temp383;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp384;
                            this.Manager.Comment("executing step \'call OpenFolder(1,1,1,out _)\'");
                            temp384 = this.IMS_OXCFXICSAdapterInstance.OpenFolder(1, 1, 1, out temp383);
                            this.Manager.Comment("reaching state \'S62\'");
                            this.Manager.Comment("checking step \'return OpenFolder/[out 2]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp383, "folderHandleIndex of OpenFolder, state S62");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp384, "return of OpenFolder, state S62");
                            this.Manager.Comment("reaching state \'S70\'");
                            int temp385;
                            int temp386;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp387;
                            this.Manager.Comment("executing step \'call CreateFolder(1,2,\"test\",out _,out _)\'");
                            temp387 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 2, "test", out temp385, out temp386);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                            this.Manager.Comment("reaching state \'S78\'");
                            this.Manager.Comment("checking step \'return CreateFolder/[out 2,out 3]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp385, "folderIdIndex of CreateFolder, state S78");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp386, "folderHandleIndex of CreateFolder, state S78");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp387, "return of CreateFolder, state S78");
                            this.Manager.Comment("reaching state \'S86\'");
                            int temp388;
                            int temp389;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp390;
                            this.Manager.Comment("executing step \'call CreateFolder(1,3,\"SubFolder\",out _,out _)\'");
                            temp390 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 3, "SubFolder", out temp388, out temp389);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                            this.Manager.Comment("reaching state \'S94\'");
                            this.Manager.Comment("checking step \'return CreateFolder/[out 3,out 4]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp388, "folderIdIndex of CreateFolder, state S94");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, temp389, "folderHandleIndex of CreateFolder, state S94");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp390, "return of CreateFolder, state S94");
                            this.Manager.Comment("reaching state \'S102\'");
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp391;
                            this.Manager.Comment("executing step \'call GetLocalReplicaIds(1,1,3)\'");
                            temp391 = this.IMS_OXCFXICSAdapterInstance.GetLocalReplicaIds(1, 1, 3u);
                            this.Manager.Checkpoint("MS-OXCFXICS_R925");
                            this.Manager.Comment("reaching state \'S110\'");
                            this.Manager.Comment("checking step \'return GetLocalReplicaIds/Success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp391, "return of GetLocalReplicaIds, state S110");
                            this.Manager.Comment("reaching state \'S118\'");
                            int temp392;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp393;
                            this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                            temp393 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp392);
                            this.Manager.Checkpoint("MS-OXCFXICS_R778");
                            this.Manager.Checkpoint("MS-OXCFXICS_R769");
                            this.Manager.Comment("reaching state \'S126\'");
                            this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 5]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, temp392, "synchronizationHandleIndex of SynchronizationOpenCollector, state S126");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp393, "return of SynchronizationOpenCollector, state S126");
                            this.Manager.Comment("reaching state \'S134\'");
                            int temp394;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp395;
                            this.Manager.Comment("executing step \'call SynchronizationImportMessageChange(1,5,0,Normal,out _)\'");
                            temp395 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportMessageChange(1, 5, 0, ((Microsoft.Protocols.TestSuites.Common.ImportFlag)(0)), out temp394);
                            this.Manager.Checkpoint("MS-OXCFXICS_R814");
                            this.Manager.Checkpoint("MS-OXCFXICS_R805");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1897");
                            this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                            this.Manager.Checkpoint("MS-OXCFXICS_R782");
                            this.Manager.Comment("reaching state \'S142\'");
                            this.Manager.Comment("checking step \'return SynchronizationImportMessageChange/[out 6]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, temp394, "importMessageHandleIndex of SynchronizationImportMessageChange, state S142");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp395, "return of SynchronizationImportMessageChange, state S142");
                            this.Manager.Comment("reaching state \'S150\'");
                            int temp396;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp397;
                            this.Manager.Comment("executing step \'call SaveChangesMessage(1,6,out _)\'");
                            temp397 = this.IMS_OXCFXICSAdapterInstance.SaveChangesMessage(1, 6, out temp396);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1910");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1906");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1898");
                            this.Manager.Comment("reaching state \'S158\'");
                            this.Manager.Comment("checking step \'return SaveChangesMessage/[out 4]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, temp396, "messageIdIndex of SaveChangesMessage, state S158");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp397, "return of SaveChangesMessage, state S158");
                            this.Manager.Comment("reaching state \'S166\'");
                            int temp398;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp399;
                            this.Manager.Comment("executing step \'call SynchronizationConfigure(1,4,Contents,Unicode|ForceUnicode,N" +
                                    "one,Eid,[\"PidTagCreationTime\"],out _)\'");
                            temp399 = this.IMS_OXCFXICSAdapterInstance.SynchronizationConfigure(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SendOptionAlls)(9)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationFlag)(0)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationExtraFlag)(1)), this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "PidTagCreationTime",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}), out temp398);
                            this.Manager.Checkpoint("MS-OXCFXICS_R669");
                            this.Manager.Checkpoint("MS-OXCFXICS_R641");
                            this.Manager.Comment("reaching state \'S174\'");
                            this.Manager.Comment("checking step \'return SynchronizationConfigure/[out 7]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 7, temp398, "downloadcontextHandleIndex of SynchronizationConfigure, state S174");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp399, "return of SynchronizationConfigure, state S174");
                            this.Manager.Comment("reaching state \'S182\'");
                            bool temp400;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(2657,out _)\'");
                            this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2657, out temp400);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp400);
                            this.Manager.Comment("reaching state \'S190\'");
                            int temp453 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker41)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker44)));
                            if ((temp453 == 0)) {
                                this.Manager.Comment("reaching state \'S203\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp401;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagIdsetGiven,True,0)\'");
                                temp401 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(0)), true, 0);
                                this.Manager.Comment("reaching state \'S219\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/InvalidParameter\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult.InvalidParameter, temp401, "return of SynchronizationUploadState, state S219");
                                this.Manager.Comment("reaching state \'S235\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp402;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeen,False,0)\'");
                                temp402 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(1)), false, 0);
                                this.Manager.Comment("reaching state \'S251\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp402, "return of SynchronizationUploadState, state S251");
                                this.Manager.Comment("reaching state \'S267\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp403;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetRead,False,0)\'");
                                temp403 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetRead, false, 0);
                                this.Manager.Comment("reaching state \'S283\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp403, "return of SynchronizationUploadState, state S283");
                                this.Manager.Comment("reaching state \'S299\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp404;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeenFAI,False,0)\'");
                                temp404 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetSeenFAI, false, 0);
                                this.Manager.Comment("reaching state \'S315\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp404, "return of SynchronizationUploadState, state S315");
                                this.Manager.Comment("reaching state \'S331\'");
                                int temp405;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream temp406;
                                bool temp407;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp408;
                                this.Manager.Comment("executing step \'call FastTransferSourceGetBuffer(1,7,Normal,out _,out _,out _)\'");
                                temp408 = this.IMS_OXCFXICSAdapterInstance.FastTransferSourceGetBuffer(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.BufferSize.Normal, out temp405, out temp406, out temp407);
                                this.Manager.Checkpoint("MS-OXCFXICS_R384");
                                this.Manager.Checkpoint("MS-OXCFXICS_R3321");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2188");
                                this.Manager.Checkpoint("MS-OXCFXICS_R1180");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2175");
                                this.Manager.Checkpoint("MS-OXCFXICS_R532");
                                this.Manager.Comment("reaching state \'S347\'");
                                this.Manager.Comment("checking step \'return FastTransferSourceGetBuffer/[out 1,out AbstractFastTransfer" +
                                        "Stream(StreamType=contentsSync,AbstractHierarchySync=AbstractHierarchySync(Folde" +
                                        "rchangeInfo=AbstractFolderChange(IsPidTagFolderIdExist=False,IsPidTagParentFolde" +
                                        "rIdExist=False,IsPidTagSourceKeyValueZero=False,IsPidTagParentSourceKeyValueZero" +
                                        "=False),FolderCount=0,FinalICSState=AbstractState(AbstractICSStateIndex=0,IdSetG" +
                                        "iven=null,IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChan" +
                                        "geNumber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsParentFolderBeforeChi" +
                                        "ld=False,AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted=" +
                                        "null,IsPidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False)),A" +
                                        "bstractContentsSync=AbstractContentsSync(IsprogessTotalPresent=False,MessageInfo" +
                                        "={},AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted={},Is" +
                                        "PidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False),IsReadSta" +
                                        "teChangesExist=False,FinalICSState=AbstractState(AbstractICSStateIndex=1,IdSetGi" +
                                        "ven={},IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChangeN" +
                                        "umber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsSortByMessageDeliveryTim" +
                                        "e=False,IsSortByLastModificationTime=False),AbstractFolderContent=AbstractFolder" +
                                        "Content(IsPidTagEcWarningOut=False,IsNoPermissionObjNotOut=False,IsPidTagNewFXFo" +
                                        "lderOut=False,IsFolderContentNotOut=False,IsFolderPropertiesNotOut=False,IsSubFo" +
                                        "lderPrecededByPidTagFXDelProp=False,AbsFolderMessage=AbstractFolderMessage(IsFol" +
                                        "derMessagesPrecededByPidTagFXDelProp=False,MessageList=AbstractMessageList(IsPid" +
                                        "TagEcWarningOut=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageCon" +
                                        "tent(IsNoPermissionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildre" +
                                        "n(AttachmentPrecededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=F" +
                                        "alse),StringPropertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,St" +
                                        "ringPropertiesInOtherCodePage=False,IsRTFFormat=False))))),AbstractTopFolder=Abs" +
                                        "tractTopFolder(AbsFolderContent=AbstractFolderContent(IsPidTagEcWarningOut=False" +
                                        ",IsNoPermissionObjNotOut=False,IsPidTagNewFXFolderOut=False,IsFolderContentNotOu" +
                                        "t=False,IsFolderPropertiesNotOut=False,IsSubFolderPrecededByPidTagFXDelProp=Fals" +
                                        "e,AbsFolderMessage=AbstractFolderMessage(IsFolderMessagesPrecededByPidTagFXDelPr" +
                                        "op=False,MessageList=AbstractMessageList(IsPidTagEcWarningOut=False,AbsMessage=A" +
                                        "bsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=F" +
                                        "alse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelP" +
                                        "rop=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fa" +
                                        "lse,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=Fals" +
                                        "e,IsRTFFormat=False))))),SubFolderInScope=False),AbstractState=AbstractState(Abs" +
                                        "tractICSStateIndex=0,IdSetGiven=null,IsNewCnsetReadPropertyChangeNumber=False,Is" +
                                        "NewCnsetSeenFAIPropertyChangeNumber=False,IsNewCnsetSeenPropertyChangeNumber=Fal" +
                                        "se),AbstractMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=Fa" +
                                        "lse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelPr" +
                                        "op=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fal" +
                                        "se,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=False" +
                                        ",IsRTFFormat=False),AbstractMessageList=AbstractMessageList(IsPidTagEcWarningOut" +
                                        "=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermis" +
                                        "sionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildren(AttachmentPre" +
                                        "cededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),StringPro" +
                                        "pertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,StringPropertiesI" +
                                        "nOtherCodePage=False,IsRTFFormat=False))),IsSameReadstateChangeNumber=False),out" +
                                        " False]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp405, "transferBufferIndex of FastTransferSourceGetBuffer, state S347");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(new string[] {
                                                "StreamType",
                                                "AbstractHierarchySync",
                                                "AbstractContentsSync",
                                                "AbstractFolderContent",
                                                "AbstractTopFolder",
                                                "AbstractState",
                                                "AbstractMessageContent",
                                                "AbstractMessageList",
                                                "IsSameReadstateChangeNumber"}, new object[] {
                                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.FastTransferStreamType.contentsSync,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractHierarchySync>(new string[] {
                                                            "FolderchangeInfo",
                                                            "FolderCount",
                                                            "FinalICSState",
                                                            "IsParentFolderBeforeChild",
                                                            "AbstractDeletion"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderChange>(new string[] {
                                                                        "IsPidTagFolderIdExist",
                                                                        "IsPidTagParentFolderIdExist",
                                                                        "IsPidTagSourceKeyValueZero",
                                                                        "IsPidTagParentSourceKeyValueZero"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            0,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        0,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractContentsSync>(new string[] {
                                                            "IsprogessTotalPresent",
                                                            "MessageInfo",
                                                            "AbstractDeletion",
                                                            "IsReadStateChangesExist",
                                                            "FinalICSState",
                                                            "IsSortByMessageDeliveryTime",
                                                            "IsSortByLastModificationTime"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Modeling.Set<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo>>(new string[] {
                                                                        "Rep"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo, Microsoft.Xrt.Runtime.Singleton>()}),
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        1,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "IsNoPermissionObjNotOut",
                                                            "IsPidTagNewFXFolderOut",
                                                            "IsFolderContentNotOut",
                                                            "IsFolderPropertiesNotOut",
                                                            "IsSubFolderPrecededByPidTagFXDelProp",
                                                            "AbsFolderMessage"}, new object[] {
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                        "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                        "MessageList"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                    "IsPidTagEcWarningOut",
                                                                                    "AbsMessage"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                "AbsMessageContent"}, new object[] {
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                            "IsNoPermissionMessageNotOut",
                                                                                                            "AbsMessageChildren",
                                                                                                            "StringPropertiesInUnicode",
                                                                                                            "StringPropertiesInUnicodeCodePage",
                                                                                                            "StringPropertiesInOtherCodePage",
                                                                                                            "IsRTFFormat"}, new object[] {
                                                                                                            false,
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                        false,
                                                                                                                        false}),
                                                                                                            false,
                                                                                                            false,
                                                                                                            false,
                                                                                                            false})})})})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractTopFolder>(new string[] {
                                                            "AbsFolderContent",
                                                            "SubFolderInScope"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                                        "IsPidTagEcWarningOut",
                                                                        "IsNoPermissionObjNotOut",
                                                                        "IsPidTagNewFXFolderOut",
                                                                        "IsFolderContentNotOut",
                                                                        "IsFolderPropertiesNotOut",
                                                                        "IsSubFolderPrecededByPidTagFXDelProp",
                                                                        "AbsFolderMessage"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                                    "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                                    "MessageList"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                                "IsPidTagEcWarningOut",
                                                                                                "AbsMessage"}, new object[] {
                                                                                                false,
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                            "AbsMessageContent"}, new object[] {
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                                        "IsNoPermissionMessageNotOut",
                                                                                                                        "AbsMessageChildren",
                                                                                                                        "StringPropertiesInUnicode",
                                                                                                                        "StringPropertiesInUnicodeCodePage",
                                                                                                                        "StringPropertiesInOtherCodePage",
                                                                                                                        "IsRTFFormat"}, new object[] {
                                                                                                                        false,
                                                                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                                    "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                                    "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                                    false,
                                                                                                                                    false}),
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false})})})})}),
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                            "AbstractICSStateIndex",
                                                            "IdSetGiven",
                                                            "IsNewCnsetReadPropertyChangeNumber",
                                                            "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                            "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                            0,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                            "IsNoPermissionMessageNotOut",
                                                            "AbsMessageChildren",
                                                            "StringPropertiesInUnicode",
                                                            "StringPropertiesInUnicodeCodePage",
                                                            "StringPropertiesInOtherCodePage",
                                                            "IsRTFFormat"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "AbsMessage"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                        "AbsMessageContent"}, new object[] {
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                    "IsNoPermissionMessageNotOut",
                                                                                    "AbsMessageChildren",
                                                                                    "StringPropertiesInUnicode",
                                                                                    "StringPropertiesInUnicodeCodePage",
                                                                                    "StringPropertiesInOtherCodePage",
                                                                                    "IsRTFFormat"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                "AttachmentPrecededByPidTagFXDelProp",
                                                                                                "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                false,
                                                                                                false}),
                                                                                    false,
                                                                                    false,
                                                                                    false,
                                                                                    false})})}),
                                                false}), temp406, "abstractFastTransferStream of FastTransferSourceGetBuffer, state S347");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp407, "transferDataSmallOrEqualToBufferSize of FastTransferSourceGetBuffer, state S347");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp408, "return of FastTransferSourceGetBuffer, state S347");
                                this.Manager.Comment("reaching state \'S363\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp409;
                                this.Manager.Comment("executing step \'call ModifyPermissions(1,3,None)\'");
                                temp409 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels)(0)));
                                this.Manager.Comment("reaching state \'S379\'");
                                this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp409, "return of ModifyPermissions, state S379");
                                this.Manager.Comment("reaching state \'S395\'");
                                int temp410;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp411;
                                this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                                temp411 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp410);
                                this.Manager.Checkpoint("MS-OXCFXICS_R778");
                                this.Manager.Checkpoint("MS-OXCFXICS_R769");
                                this.Manager.Comment("reaching state \'S411\'");
                                this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 8]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 8, temp410, "synchronizationHandleIndex of SynchronizationOpenCollector, state S411");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp411, "return of SynchronizationOpenCollector, state S411");
                                this.Manager.Comment("reaching state \'S427\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp412;
                                this.Manager.Comment("executing step \'call SynchronizationImportReadStateChanges(1,8,6,False)\'");
                                temp412 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportReadStateChanges(1, 8, 6, false);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2260");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                                this.Manager.Checkpoint("MS-OXCFXICS_R905");
                                this.Manager.Comment("reaching state \'S443\'");
                                this.Manager.Comment("checking step \'return SynchronizationImportReadStateChanges/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp412, "return of SynchronizationImportReadStateChanges, state S443");
                                this.Manager.Comment("reaching state \'S459\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp413;
                                this.Manager.Comment("executing step \'call GetPropertiesSpecific(1,6,[\"PidTagMessageFlags\"])\'");
                                temp413 = this.IMS_OXCFXICSAdapterInstance.GetPropertiesSpecific(1, 6, this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "PidTagMessageFlags",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                                this.Manager.Comment("reaching state \'S475\'");
                                this.Manager.Comment("checking step \'return GetPropertiesSpecific/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp413, "return of GetPropertiesSpecific, state S475");
                                this.Manager.Comment("reaching state \'S491\'");
                                bool temp414;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2813,out _)\'");
                                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2813, out temp414);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp414);
                                this.Manager.Comment("reaching state \'S507\'");
                                int temp426 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker42)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker43)));
                                if ((temp426 == 0)) {
                                    this.Manager.Comment("reaching state \'S533\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp415;
                                    this.Manager.Comment("executing step \'call ModifyPermissions(1,3,Owner)\'");
                                    temp415 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels.Owner);
                                    this.Manager.Comment("reaching state \'S565\'");
                                    this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp415, "return of ModifyPermissions, state S565");
                                    this.Manager.Comment("reaching state \'S597\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp416;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp416 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S629\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp416, "return of DeleteFolder, state S629");
                                    this.Manager.Comment("reaching state \'S661\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp417;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp417 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S693\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp417, "return of DeleteFolder, state S693");
                                    this.Manager.Comment("reaching state \'S725\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp418;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp418 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S757\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp418, "return of Release, state S757");
                                    this.Manager.Comment("reaching state \'S789\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp419;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp419 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S821\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp419, "return of Release, state S821");
                                    this.Manager.Comment("reaching state \'S853\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp420;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp420 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S875\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp420, "return of Release, state S875");
                                    this.Manager.Comment("reaching state \'S891\'");
                                    goto label18;
                                }
                                if ((temp426 == 1)) {
                                    this.Manager.Comment("reaching state \'S534\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp421;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp421 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S566\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp421, "return of DeleteFolder, state S566");
                                    this.Manager.Comment("reaching state \'S598\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp422;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp422 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S630\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp422, "return of DeleteFolder, state S630");
                                    this.Manager.Comment("reaching state \'S662\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp423;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp423 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S694\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp423, "return of Release, state S694");
                                    this.Manager.Comment("reaching state \'S726\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp424;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp424 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S758\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp424, "return of Release, state S758");
                                    this.Manager.Comment("reaching state \'S790\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp425;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp425 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S822\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp425, "return of Release, state S822");
                                    this.Manager.Comment("reaching state \'S854\'");
                                    goto label18;
                                }
                                throw new InvalidOperationException("never reached");
                            label18:
;
                                goto label20;
                            }
                            if ((temp453 == 1)) {
                                this.Manager.Comment("reaching state \'S204\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp427;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagIdsetGiven,True,0)\'");
                                temp427 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(0)), true, 0);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2657");
                                this.Manager.Comment("reaching state \'S220\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp427, "return of SynchronizationUploadState, state S220");
                                this.Manager.Comment("reaching state \'S236\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp428;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeen,False,0)\'");
                                temp428 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(1)), false, 0);
                                this.Manager.Comment("reaching state \'S252\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp428, "return of SynchronizationUploadState, state S252");
                                this.Manager.Comment("reaching state \'S268\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp429;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetRead,False,0)\'");
                                temp429 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetRead, false, 0);
                                this.Manager.Comment("reaching state \'S284\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp429, "return of SynchronizationUploadState, state S284");
                                this.Manager.Comment("reaching state \'S300\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp430;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeenFAI,False,0)\'");
                                temp430 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetSeenFAI, false, 0);
                                this.Manager.Comment("reaching state \'S316\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp430, "return of SynchronizationUploadState, state S316");
                                this.Manager.Comment("reaching state \'S332\'");
                                int temp431;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream temp432;
                                bool temp433;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp434;
                                this.Manager.Comment("executing step \'call FastTransferSourceGetBuffer(1,7,Normal,out _,out _,out _)\'");
                                temp434 = this.IMS_OXCFXICSAdapterInstance.FastTransferSourceGetBuffer(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.BufferSize.Normal, out temp431, out temp432, out temp433);
                                this.Manager.Checkpoint("MS-OXCFXICS_R384");
                                this.Manager.Checkpoint("MS-OXCFXICS_R3321");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2188");
                                this.Manager.Checkpoint("MS-OXCFXICS_R1180");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2175");
                                this.Manager.Checkpoint("MS-OXCFXICS_R532");
                                this.Manager.Comment("reaching state \'S348\'");
                                this.Manager.Comment("checking step \'return FastTransferSourceGetBuffer/[out 1,out AbstractFastTransfer" +
                                        "Stream(StreamType=contentsSync,AbstractHierarchySync=AbstractHierarchySync(Folde" +
                                        "rchangeInfo=AbstractFolderChange(IsPidTagFolderIdExist=False,IsPidTagParentFolde" +
                                        "rIdExist=False,IsPidTagSourceKeyValueZero=False,IsPidTagParentSourceKeyValueZero" +
                                        "=False),FolderCount=0,FinalICSState=AbstractState(AbstractICSStateIndex=0,IdSetG" +
                                        "iven=null,IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChan" +
                                        "geNumber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsParentFolderBeforeChi" +
                                        "ld=False,AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted=" +
                                        "null,IsPidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False)),A" +
                                        "bstractContentsSync=AbstractContentsSync(IsprogessTotalPresent=False,MessageInfo" +
                                        "={},AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted={},Is" +
                                        "PidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False),IsReadSta" +
                                        "teChangesExist=False,FinalICSState=AbstractState(AbstractICSStateIndex=1,IdSetGi" +
                                        "ven={},IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChangeN" +
                                        "umber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsSortByMessageDeliveryTim" +
                                        "e=False,IsSortByLastModificationTime=False),AbstractFolderContent=AbstractFolder" +
                                        "Content(IsPidTagEcWarningOut=False,IsNoPermissionObjNotOut=False,IsPidTagNewFXFo" +
                                        "lderOut=False,IsFolderContentNotOut=False,IsFolderPropertiesNotOut=False,IsSubFo" +
                                        "lderPrecededByPidTagFXDelProp=False,AbsFolderMessage=AbstractFolderMessage(IsFol" +
                                        "derMessagesPrecededByPidTagFXDelProp=False,MessageList=AbstractMessageList(IsPid" +
                                        "TagEcWarningOut=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageCon" +
                                        "tent(IsNoPermissionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildre" +
                                        "n(AttachmentPrecededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=F" +
                                        "alse),StringPropertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,St" +
                                        "ringPropertiesInOtherCodePage=False,IsRTFFormat=False))))),AbstractTopFolder=Abs" +
                                        "tractTopFolder(AbsFolderContent=AbstractFolderContent(IsPidTagEcWarningOut=False" +
                                        ",IsNoPermissionObjNotOut=False,IsPidTagNewFXFolderOut=False,IsFolderContentNotOu" +
                                        "t=False,IsFolderPropertiesNotOut=False,IsSubFolderPrecededByPidTagFXDelProp=Fals" +
                                        "e,AbsFolderMessage=AbstractFolderMessage(IsFolderMessagesPrecededByPidTagFXDelPr" +
                                        "op=False,MessageList=AbstractMessageList(IsPidTagEcWarningOut=False,AbsMessage=A" +
                                        "bsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=F" +
                                        "alse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelP" +
                                        "rop=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fa" +
                                        "lse,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=Fals" +
                                        "e,IsRTFFormat=False))))),SubFolderInScope=False),AbstractState=AbstractState(Abs" +
                                        "tractICSStateIndex=0,IdSetGiven=null,IsNewCnsetReadPropertyChangeNumber=False,Is" +
                                        "NewCnsetSeenFAIPropertyChangeNumber=False,IsNewCnsetSeenPropertyChangeNumber=Fal" +
                                        "se),AbstractMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=Fa" +
                                        "lse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelPr" +
                                        "op=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fal" +
                                        "se,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=False" +
                                        ",IsRTFFormat=False),AbstractMessageList=AbstractMessageList(IsPidTagEcWarningOut" +
                                        "=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermis" +
                                        "sionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildren(AttachmentPre" +
                                        "cededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),StringPro" +
                                        "pertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,StringPropertiesI" +
                                        "nOtherCodePage=False,IsRTFFormat=False))),IsSameReadstateChangeNumber=False),out" +
                                        " False]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp431, "transferBufferIndex of FastTransferSourceGetBuffer, state S348");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(new string[] {
                                                "StreamType",
                                                "AbstractHierarchySync",
                                                "AbstractContentsSync",
                                                "AbstractFolderContent",
                                                "AbstractTopFolder",
                                                "AbstractState",
                                                "AbstractMessageContent",
                                                "AbstractMessageList",
                                                "IsSameReadstateChangeNumber"}, new object[] {
                                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.FastTransferStreamType.contentsSync,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractHierarchySync>(new string[] {
                                                            "FolderchangeInfo",
                                                            "FolderCount",
                                                            "FinalICSState",
                                                            "IsParentFolderBeforeChild",
                                                            "AbstractDeletion"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderChange>(new string[] {
                                                                        "IsPidTagFolderIdExist",
                                                                        "IsPidTagParentFolderIdExist",
                                                                        "IsPidTagSourceKeyValueZero",
                                                                        "IsPidTagParentSourceKeyValueZero"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            0,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        0,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractContentsSync>(new string[] {
                                                            "IsprogessTotalPresent",
                                                            "MessageInfo",
                                                            "AbstractDeletion",
                                                            "IsReadStateChangesExist",
                                                            "FinalICSState",
                                                            "IsSortByMessageDeliveryTime",
                                                            "IsSortByLastModificationTime"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Modeling.Set<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo>>(new string[] {
                                                                        "Rep"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo, Microsoft.Xrt.Runtime.Singleton>()}),
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        1,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "IsNoPermissionObjNotOut",
                                                            "IsPidTagNewFXFolderOut",
                                                            "IsFolderContentNotOut",
                                                            "IsFolderPropertiesNotOut",
                                                            "IsSubFolderPrecededByPidTagFXDelProp",
                                                            "AbsFolderMessage"}, new object[] {
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                        "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                        "MessageList"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                    "IsPidTagEcWarningOut",
                                                                                    "AbsMessage"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                "AbsMessageContent"}, new object[] {
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                            "IsNoPermissionMessageNotOut",
                                                                                                            "AbsMessageChildren",
                                                                                                            "StringPropertiesInUnicode",
                                                                                                            "StringPropertiesInUnicodeCodePage",
                                                                                                            "StringPropertiesInOtherCodePage",
                                                                                                            "IsRTFFormat"}, new object[] {
                                                                                                            false,
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                        false,
                                                                                                                        false}),
                                                                                                            false,
                                                                                                            false,
                                                                                                            false,
                                                                                                            false})})})})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractTopFolder>(new string[] {
                                                            "AbsFolderContent",
                                                            "SubFolderInScope"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                                        "IsPidTagEcWarningOut",
                                                                        "IsNoPermissionObjNotOut",
                                                                        "IsPidTagNewFXFolderOut",
                                                                        "IsFolderContentNotOut",
                                                                        "IsFolderPropertiesNotOut",
                                                                        "IsSubFolderPrecededByPidTagFXDelProp",
                                                                        "AbsFolderMessage"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                                    "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                                    "MessageList"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                                "IsPidTagEcWarningOut",
                                                                                                "AbsMessage"}, new object[] {
                                                                                                false,
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                            "AbsMessageContent"}, new object[] {
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                                        "IsNoPermissionMessageNotOut",
                                                                                                                        "AbsMessageChildren",
                                                                                                                        "StringPropertiesInUnicode",
                                                                                                                        "StringPropertiesInUnicodeCodePage",
                                                                                                                        "StringPropertiesInOtherCodePage",
                                                                                                                        "IsRTFFormat"}, new object[] {
                                                                                                                        false,
                                                                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                                    "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                                    "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                                    false,
                                                                                                                                    false}),
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false})})})})}),
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                            "AbstractICSStateIndex",
                                                            "IdSetGiven",
                                                            "IsNewCnsetReadPropertyChangeNumber",
                                                            "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                            "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                            0,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                            "IsNoPermissionMessageNotOut",
                                                            "AbsMessageChildren",
                                                            "StringPropertiesInUnicode",
                                                            "StringPropertiesInUnicodeCodePage",
                                                            "StringPropertiesInOtherCodePage",
                                                            "IsRTFFormat"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "AbsMessage"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                        "AbsMessageContent"}, new object[] {
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                    "IsNoPermissionMessageNotOut",
                                                                                    "AbsMessageChildren",
                                                                                    "StringPropertiesInUnicode",
                                                                                    "StringPropertiesInUnicodeCodePage",
                                                                                    "StringPropertiesInOtherCodePage",
                                                                                    "IsRTFFormat"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                "AttachmentPrecededByPidTagFXDelProp",
                                                                                                "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                false,
                                                                                                false}),
                                                                                    false,
                                                                                    false,
                                                                                    false,
                                                                                    false})})}),
                                                false}), temp432, "abstractFastTransferStream of FastTransferSourceGetBuffer, state S348");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp433, "transferDataSmallOrEqualToBufferSize of FastTransferSourceGetBuffer, state S348");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp434, "return of FastTransferSourceGetBuffer, state S348");
                                this.Manager.Comment("reaching state \'S364\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp435;
                                this.Manager.Comment("executing step \'call ModifyPermissions(1,3,None)\'");
                                temp435 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels)(0)));
                                this.Manager.Comment("reaching state \'S380\'");
                                this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp435, "return of ModifyPermissions, state S380");
                                this.Manager.Comment("reaching state \'S396\'");
                                int temp436;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp437;
                                this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                                temp437 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp436);
                                this.Manager.Checkpoint("MS-OXCFXICS_R778");
                                this.Manager.Checkpoint("MS-OXCFXICS_R769");
                                this.Manager.Comment("reaching state \'S412\'");
                                this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 8]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 8, temp436, "synchronizationHandleIndex of SynchronizationOpenCollector, state S412");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp437, "return of SynchronizationOpenCollector, state S412");
                                this.Manager.Comment("reaching state \'S428\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp438;
                                this.Manager.Comment("executing step \'call SynchronizationImportReadStateChanges(1,8,6,False)\'");
                                temp438 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportReadStateChanges(1, 8, 6, false);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2260");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                                this.Manager.Checkpoint("MS-OXCFXICS_R905");
                                this.Manager.Comment("reaching state \'S444\'");
                                this.Manager.Comment("checking step \'return SynchronizationImportReadStateChanges/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp438, "return of SynchronizationImportReadStateChanges, state S444");
                                this.Manager.Comment("reaching state \'S460\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp439;
                                this.Manager.Comment("executing step \'call GetPropertiesSpecific(1,6,[\"PidTagMessageFlags\"])\'");
                                temp439 = this.IMS_OXCFXICSAdapterInstance.GetPropertiesSpecific(1, 6, this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "PidTagMessageFlags",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                                this.Manager.Comment("reaching state \'S476\'");
                                this.Manager.Comment("checking step \'return GetPropertiesSpecific/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp439, "return of GetPropertiesSpecific, state S476");
                                this.Manager.Comment("reaching state \'S492\'");
                                bool temp440;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2813,out _)\'");
                                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2813, out temp440);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp440);
                                this.Manager.Comment("reaching state \'S508\'");
                                int temp452 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker45)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker46)));
                                if ((temp452 == 0)) {
                                    this.Manager.Comment("reaching state \'S535\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp441;
                                    this.Manager.Comment("executing step \'call ModifyPermissions(1,3,Owner)\'");
                                    temp441 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels.Owner);
                                    this.Manager.Comment("reaching state \'S567\'");
                                    this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp441, "return of ModifyPermissions, state S567");
                                    this.Manager.Comment("reaching state \'S599\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp442;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp442 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S631\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp442, "return of DeleteFolder, state S631");
                                    this.Manager.Comment("reaching state \'S663\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp443;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp443 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S695\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp443, "return of DeleteFolder, state S695");
                                    this.Manager.Comment("reaching state \'S727\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp444;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp444 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S759\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp444, "return of Release, state S759");
                                    this.Manager.Comment("reaching state \'S791\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp445;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp445 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S823\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp445, "return of Release, state S823");
                                    this.Manager.Comment("reaching state \'S855\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp446;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp446 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S876\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp446, "return of Release, state S876");
                                    this.Manager.Comment("reaching state \'S892\'");
                                    goto label19;
                                }
                                if ((temp452 == 1)) {
                                    this.Manager.Comment("reaching state \'S536\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp447;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp447 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S568\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp447, "return of DeleteFolder, state S568");
                                    this.Manager.Comment("reaching state \'S600\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp448;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp448 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S632\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp448, "return of DeleteFolder, state S632");
                                    this.Manager.Comment("reaching state \'S664\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp449;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp449 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S696\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp449, "return of Release, state S696");
                                    this.Manager.Comment("reaching state \'S728\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp450;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp450 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S760\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp450, "return of Release, state S760");
                                    this.Manager.Comment("reaching state \'S792\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp451;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp451 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S824\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp451, "return of Release, state S824");
                                    this.Manager.Comment("reaching state \'S856\'");
                                    goto label19;
                                }
                                throw new InvalidOperationException("never reached");
                            label19:
;
                                goto label20;
                            }
                            throw new InvalidOperationException("never reached");
                        label20:
;
                            goto label21;
                        }
                        throw new InvalidOperationException("never reached");
                    label21:
;
                        goto label29;
                    }
                    if ((temp605 == 1)) {
                        this.Manager.Comment("reaching state \'S12\'");
                        bool temp455;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2666,out _)\'");
                        this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2666, out temp455);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp455);
                        this.Manager.Comment("reaching state \'S16\'");
                        int temp604 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker48)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker55)));
                        if ((temp604 == 0)) {
                            this.Manager.Comment("reaching state \'S23\'");
                            this.Manager.Comment("executing step \'call Connect(1,PublicFolderServer)\'");
                            this.IMS_OXCFXICSAdapterInstance.Connect(1, ((Microsoft.Protocols.TestSuites.Common.ConnectionType)(0)));
                            this.Manager.Comment("reaching state \'S31\'");
                            this.Manager.Comment("checking step \'return Connect\'");
                            this.Manager.Comment("reaching state \'S39\'");
                            int temp456;
                            int temp457;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp458;
                            this.Manager.Comment("executing step \'call Logon(1,Private,out _,out _)\'");
                            temp458 = this.IMS_OXCFXICSAdapterInstance.Logon(1, ((Microsoft.Protocols.TestSuites.Common.LogonFlags)(1)), out temp456, out temp457);
                            this.Manager.Comment("reaching state \'S47\'");
                            this.Manager.Comment("checking step \'return Logon/[out 1,out 1]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp456, "logonHandleIndex of Logon, state S47");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp457, "inboxFolderIdIndex of Logon, state S47");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp458, "return of Logon, state S47");
                            this.Manager.Comment("reaching state \'S55\'");
                            int temp459;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp460;
                            this.Manager.Comment("executing step \'call OpenFolder(1,1,1,out _)\'");
                            temp460 = this.IMS_OXCFXICSAdapterInstance.OpenFolder(1, 1, 1, out temp459);
                            this.Manager.Comment("reaching state \'S63\'");
                            this.Manager.Comment("checking step \'return OpenFolder/[out 2]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp459, "folderHandleIndex of OpenFolder, state S63");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp460, "return of OpenFolder, state S63");
                            this.Manager.Comment("reaching state \'S71\'");
                            int temp461;
                            int temp462;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp463;
                            this.Manager.Comment("executing step \'call CreateFolder(1,2,\"test\",out _,out _)\'");
                            temp463 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 2, "test", out temp461, out temp462);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                            this.Manager.Comment("reaching state \'S79\'");
                            this.Manager.Comment("checking step \'return CreateFolder/[out 2,out 3]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp461, "folderIdIndex of CreateFolder, state S79");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp462, "folderHandleIndex of CreateFolder, state S79");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp463, "return of CreateFolder, state S79");
                            this.Manager.Comment("reaching state \'S87\'");
                            int temp464;
                            int temp465;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp466;
                            this.Manager.Comment("executing step \'call CreateFolder(1,3,\"SubFolder\",out _,out _)\'");
                            temp466 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 3, "SubFolder", out temp464, out temp465);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                            this.Manager.Comment("reaching state \'S95\'");
                            this.Manager.Comment("checking step \'return CreateFolder/[out 3,out 4]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp464, "folderIdIndex of CreateFolder, state S95");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, temp465, "folderHandleIndex of CreateFolder, state S95");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp466, "return of CreateFolder, state S95");
                            this.Manager.Comment("reaching state \'S103\'");
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp467;
                            this.Manager.Comment("executing step \'call GetLocalReplicaIds(1,1,3)\'");
                            temp467 = this.IMS_OXCFXICSAdapterInstance.GetLocalReplicaIds(1, 1, 3u);
                            this.Manager.Checkpoint("MS-OXCFXICS_R925");
                            this.Manager.Comment("reaching state \'S111\'");
                            this.Manager.Comment("checking step \'return GetLocalReplicaIds/Success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp467, "return of GetLocalReplicaIds, state S111");
                            this.Manager.Comment("reaching state \'S119\'");
                            int temp468;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp469;
                            this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                            temp469 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp468);
                            this.Manager.Checkpoint("MS-OXCFXICS_R778");
                            this.Manager.Checkpoint("MS-OXCFXICS_R769");
                            this.Manager.Comment("reaching state \'S127\'");
                            this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 5]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, temp468, "synchronizationHandleIndex of SynchronizationOpenCollector, state S127");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp469, "return of SynchronizationOpenCollector, state S127");
                            this.Manager.Comment("reaching state \'S135\'");
                            int temp470;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp471;
                            this.Manager.Comment("executing step \'call SynchronizationImportMessageChange(1,5,0,Normal,out _)\'");
                            temp471 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportMessageChange(1, 5, 0, ((Microsoft.Protocols.TestSuites.Common.ImportFlag)(0)), out temp470);
                            this.Manager.Checkpoint("MS-OXCFXICS_R814");
                            this.Manager.Checkpoint("MS-OXCFXICS_R805");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1897");
                            this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                            this.Manager.Checkpoint("MS-OXCFXICS_R782");
                            this.Manager.Comment("reaching state \'S143\'");
                            this.Manager.Comment("checking step \'return SynchronizationImportMessageChange/[out 6]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, temp470, "importMessageHandleIndex of SynchronizationImportMessageChange, state S143");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp471, "return of SynchronizationImportMessageChange, state S143");
                            this.Manager.Comment("reaching state \'S151\'");
                            int temp472;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp473;
                            this.Manager.Comment("executing step \'call SaveChangesMessage(1,6,out _)\'");
                            temp473 = this.IMS_OXCFXICSAdapterInstance.SaveChangesMessage(1, 6, out temp472);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1910");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1906");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1898");
                            this.Manager.Comment("reaching state \'S159\'");
                            this.Manager.Comment("checking step \'return SaveChangesMessage/[out 4]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, temp472, "messageIdIndex of SaveChangesMessage, state S159");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp473, "return of SaveChangesMessage, state S159");
                            this.Manager.Comment("reaching state \'S167\'");
                            int temp474;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp475;
                            this.Manager.Comment("executing step \'call SynchronizationConfigure(1,4,Contents,Unicode|ForceUnicode,N" +
                                    "one,Eid,[\"PidTagCreationTime\"],out _)\'");
                            temp475 = this.IMS_OXCFXICSAdapterInstance.SynchronizationConfigure(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SendOptionAlls)(9)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationFlag)(0)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationExtraFlag)(1)), this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "PidTagCreationTime",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}), out temp474);
                            this.Manager.Checkpoint("MS-OXCFXICS_R669");
                            this.Manager.Checkpoint("MS-OXCFXICS_R641");
                            this.Manager.Comment("reaching state \'S175\'");
                            this.Manager.Comment("checking step \'return SynchronizationConfigure/[out 7]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 7, temp474, "downloadcontextHandleIndex of SynchronizationConfigure, state S175");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp475, "return of SynchronizationConfigure, state S175");
                            this.Manager.Comment("reaching state \'S183\'");
                            bool temp476;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(2657,out _)\'");
                            this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2657, out temp476);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp476);
                            this.Manager.Comment("reaching state \'S191\'");
                            int temp529 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker49)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker52)));
                            if ((temp529 == 0)) {
                                this.Manager.Comment("reaching state \'S205\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp477;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagIdsetGiven,True,0)\'");
                                temp477 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(0)), true, 0);
                                this.Manager.Comment("reaching state \'S221\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/InvalidParameter\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult.InvalidParameter, temp477, "return of SynchronizationUploadState, state S221");
                                this.Manager.Comment("reaching state \'S237\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp478;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeen,False,0)\'");
                                temp478 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(1)), false, 0);
                                this.Manager.Comment("reaching state \'S253\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp478, "return of SynchronizationUploadState, state S253");
                                this.Manager.Comment("reaching state \'S269\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp479;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetRead,False,0)\'");
                                temp479 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetRead, false, 0);
                                this.Manager.Comment("reaching state \'S285\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp479, "return of SynchronizationUploadState, state S285");
                                this.Manager.Comment("reaching state \'S301\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp480;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeenFAI,False,0)\'");
                                temp480 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetSeenFAI, false, 0);
                                this.Manager.Comment("reaching state \'S317\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp480, "return of SynchronizationUploadState, state S317");
                                this.Manager.Comment("reaching state \'S333\'");
                                int temp481;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream temp482;
                                bool temp483;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp484;
                                this.Manager.Comment("executing step \'call FastTransferSourceGetBuffer(1,7,Normal,out _,out _,out _)\'");
                                temp484 = this.IMS_OXCFXICSAdapterInstance.FastTransferSourceGetBuffer(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.BufferSize.Normal, out temp481, out temp482, out temp483);
                                this.Manager.Checkpoint("MS-OXCFXICS_R384");
                                this.Manager.Checkpoint("MS-OXCFXICS_R3321");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2188");
                                this.Manager.Checkpoint("MS-OXCFXICS_R1180");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2175");
                                this.Manager.Checkpoint("MS-OXCFXICS_R532");
                                this.Manager.Comment("reaching state \'S349\'");
                                this.Manager.Comment("checking step \'return FastTransferSourceGetBuffer/[out 1,out AbstractFastTransfer" +
                                        "Stream(StreamType=contentsSync,AbstractHierarchySync=AbstractHierarchySync(Folde" +
                                        "rchangeInfo=AbstractFolderChange(IsPidTagFolderIdExist=False,IsPidTagParentFolde" +
                                        "rIdExist=False,IsPidTagSourceKeyValueZero=False,IsPidTagParentSourceKeyValueZero" +
                                        "=False),FolderCount=0,FinalICSState=AbstractState(AbstractICSStateIndex=0,IdSetG" +
                                        "iven=null,IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChan" +
                                        "geNumber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsParentFolderBeforeChi" +
                                        "ld=False,AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted=" +
                                        "null,IsPidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False)),A" +
                                        "bstractContentsSync=AbstractContentsSync(IsprogessTotalPresent=False,MessageInfo" +
                                        "={},AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted={},Is" +
                                        "PidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False),IsReadSta" +
                                        "teChangesExist=False,FinalICSState=AbstractState(AbstractICSStateIndex=1,IdSetGi" +
                                        "ven={},IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChangeN" +
                                        "umber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsSortByMessageDeliveryTim" +
                                        "e=False,IsSortByLastModificationTime=False),AbstractFolderContent=AbstractFolder" +
                                        "Content(IsPidTagEcWarningOut=False,IsNoPermissionObjNotOut=False,IsPidTagNewFXFo" +
                                        "lderOut=False,IsFolderContentNotOut=False,IsFolderPropertiesNotOut=False,IsSubFo" +
                                        "lderPrecededByPidTagFXDelProp=False,AbsFolderMessage=AbstractFolderMessage(IsFol" +
                                        "derMessagesPrecededByPidTagFXDelProp=False,MessageList=AbstractMessageList(IsPid" +
                                        "TagEcWarningOut=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageCon" +
                                        "tent(IsNoPermissionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildre" +
                                        "n(AttachmentPrecededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=F" +
                                        "alse),StringPropertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,St" +
                                        "ringPropertiesInOtherCodePage=False,IsRTFFormat=False))))),AbstractTopFolder=Abs" +
                                        "tractTopFolder(AbsFolderContent=AbstractFolderContent(IsPidTagEcWarningOut=False" +
                                        ",IsNoPermissionObjNotOut=False,IsPidTagNewFXFolderOut=False,IsFolderContentNotOu" +
                                        "t=False,IsFolderPropertiesNotOut=False,IsSubFolderPrecededByPidTagFXDelProp=Fals" +
                                        "e,AbsFolderMessage=AbstractFolderMessage(IsFolderMessagesPrecededByPidTagFXDelPr" +
                                        "op=False,MessageList=AbstractMessageList(IsPidTagEcWarningOut=False,AbsMessage=A" +
                                        "bsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=F" +
                                        "alse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelP" +
                                        "rop=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fa" +
                                        "lse,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=Fals" +
                                        "e,IsRTFFormat=False))))),SubFolderInScope=False),AbstractState=AbstractState(Abs" +
                                        "tractICSStateIndex=0,IdSetGiven=null,IsNewCnsetReadPropertyChangeNumber=False,Is" +
                                        "NewCnsetSeenFAIPropertyChangeNumber=False,IsNewCnsetSeenPropertyChangeNumber=Fal" +
                                        "se),AbstractMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=Fa" +
                                        "lse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelPr" +
                                        "op=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fal" +
                                        "se,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=False" +
                                        ",IsRTFFormat=False),AbstractMessageList=AbstractMessageList(IsPidTagEcWarningOut" +
                                        "=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermis" +
                                        "sionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildren(AttachmentPre" +
                                        "cededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),StringPro" +
                                        "pertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,StringPropertiesI" +
                                        "nOtherCodePage=False,IsRTFFormat=False))),IsSameReadstateChangeNumber=False),out" +
                                        " False]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp481, "transferBufferIndex of FastTransferSourceGetBuffer, state S349");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(new string[] {
                                                "StreamType",
                                                "AbstractHierarchySync",
                                                "AbstractContentsSync",
                                                "AbstractFolderContent",
                                                "AbstractTopFolder",
                                                "AbstractState",
                                                "AbstractMessageContent",
                                                "AbstractMessageList",
                                                "IsSameReadstateChangeNumber"}, new object[] {
                                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.FastTransferStreamType.contentsSync,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractHierarchySync>(new string[] {
                                                            "FolderchangeInfo",
                                                            "FolderCount",
                                                            "FinalICSState",
                                                            "IsParentFolderBeforeChild",
                                                            "AbstractDeletion"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderChange>(new string[] {
                                                                        "IsPidTagFolderIdExist",
                                                                        "IsPidTagParentFolderIdExist",
                                                                        "IsPidTagSourceKeyValueZero",
                                                                        "IsPidTagParentSourceKeyValueZero"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            0,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        0,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractContentsSync>(new string[] {
                                                            "IsprogessTotalPresent",
                                                            "MessageInfo",
                                                            "AbstractDeletion",
                                                            "IsReadStateChangesExist",
                                                            "FinalICSState",
                                                            "IsSortByMessageDeliveryTime",
                                                            "IsSortByLastModificationTime"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Modeling.Set<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo>>(new string[] {
                                                                        "Rep"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo, Microsoft.Xrt.Runtime.Singleton>()}),
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        1,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "IsNoPermissionObjNotOut",
                                                            "IsPidTagNewFXFolderOut",
                                                            "IsFolderContentNotOut",
                                                            "IsFolderPropertiesNotOut",
                                                            "IsSubFolderPrecededByPidTagFXDelProp",
                                                            "AbsFolderMessage"}, new object[] {
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                        "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                        "MessageList"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                    "IsPidTagEcWarningOut",
                                                                                    "AbsMessage"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                "AbsMessageContent"}, new object[] {
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                            "IsNoPermissionMessageNotOut",
                                                                                                            "AbsMessageChildren",
                                                                                                            "StringPropertiesInUnicode",
                                                                                                            "StringPropertiesInUnicodeCodePage",
                                                                                                            "StringPropertiesInOtherCodePage",
                                                                                                            "IsRTFFormat"}, new object[] {
                                                                                                            false,
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                        false,
                                                                                                                        false}),
                                                                                                            false,
                                                                                                            false,
                                                                                                            false,
                                                                                                            false})})})})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractTopFolder>(new string[] {
                                                            "AbsFolderContent",
                                                            "SubFolderInScope"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                                        "IsPidTagEcWarningOut",
                                                                        "IsNoPermissionObjNotOut",
                                                                        "IsPidTagNewFXFolderOut",
                                                                        "IsFolderContentNotOut",
                                                                        "IsFolderPropertiesNotOut",
                                                                        "IsSubFolderPrecededByPidTagFXDelProp",
                                                                        "AbsFolderMessage"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                                    "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                                    "MessageList"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                                "IsPidTagEcWarningOut",
                                                                                                "AbsMessage"}, new object[] {
                                                                                                false,
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                            "AbsMessageContent"}, new object[] {
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                                        "IsNoPermissionMessageNotOut",
                                                                                                                        "AbsMessageChildren",
                                                                                                                        "StringPropertiesInUnicode",
                                                                                                                        "StringPropertiesInUnicodeCodePage",
                                                                                                                        "StringPropertiesInOtherCodePage",
                                                                                                                        "IsRTFFormat"}, new object[] {
                                                                                                                        false,
                                                                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                                    "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                                    "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                                    false,
                                                                                                                                    false}),
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false})})})})}),
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                            "AbstractICSStateIndex",
                                                            "IdSetGiven",
                                                            "IsNewCnsetReadPropertyChangeNumber",
                                                            "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                            "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                            0,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                            "IsNoPermissionMessageNotOut",
                                                            "AbsMessageChildren",
                                                            "StringPropertiesInUnicode",
                                                            "StringPropertiesInUnicodeCodePage",
                                                            "StringPropertiesInOtherCodePage",
                                                            "IsRTFFormat"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "AbsMessage"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                        "AbsMessageContent"}, new object[] {
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                    "IsNoPermissionMessageNotOut",
                                                                                    "AbsMessageChildren",
                                                                                    "StringPropertiesInUnicode",
                                                                                    "StringPropertiesInUnicodeCodePage",
                                                                                    "StringPropertiesInOtherCodePage",
                                                                                    "IsRTFFormat"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                "AttachmentPrecededByPidTagFXDelProp",
                                                                                                "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                false,
                                                                                                false}),
                                                                                    false,
                                                                                    false,
                                                                                    false,
                                                                                    false})})}),
                                                false}), temp482, "abstractFastTransferStream of FastTransferSourceGetBuffer, state S349");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp483, "transferDataSmallOrEqualToBufferSize of FastTransferSourceGetBuffer, state S349");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp484, "return of FastTransferSourceGetBuffer, state S349");
                                this.Manager.Comment("reaching state \'S365\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp485;
                                this.Manager.Comment("executing step \'call ModifyPermissions(1,3,None)\'");
                                temp485 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels)(0)));
                                this.Manager.Comment("reaching state \'S381\'");
                                this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp485, "return of ModifyPermissions, state S381");
                                this.Manager.Comment("reaching state \'S397\'");
                                int temp486;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp487;
                                this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                                temp487 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp486);
                                this.Manager.Checkpoint("MS-OXCFXICS_R778");
                                this.Manager.Checkpoint("MS-OXCFXICS_R769");
                                this.Manager.Comment("reaching state \'S413\'");
                                this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 8]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 8, temp486, "synchronizationHandleIndex of SynchronizationOpenCollector, state S413");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp487, "return of SynchronizationOpenCollector, state S413");
                                this.Manager.Comment("reaching state \'S429\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp488;
                                this.Manager.Comment("executing step \'call SynchronizationImportReadStateChanges(1,8,6,False)\'");
                                temp488 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportReadStateChanges(1, 8, 6, false);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2260");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                                this.Manager.Checkpoint("MS-OXCFXICS_R905");
                                this.Manager.Comment("reaching state \'S445\'");
                                this.Manager.Comment("checking step \'return SynchronizationImportReadStateChanges/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp488, "return of SynchronizationImportReadStateChanges, state S445");
                                this.Manager.Comment("reaching state \'S461\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp489;
                                this.Manager.Comment("executing step \'call GetPropertiesSpecific(1,6,[\"PidTagMessageFlags\"])\'");
                                temp489 = this.IMS_OXCFXICSAdapterInstance.GetPropertiesSpecific(1, 6, this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "PidTagMessageFlags",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                                this.Manager.Comment("reaching state \'S477\'");
                                this.Manager.Comment("checking step \'return GetPropertiesSpecific/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp489, "return of GetPropertiesSpecific, state S477");
                                this.Manager.Comment("reaching state \'S493\'");
                                bool temp490;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2813,out _)\'");
                                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2813, out temp490);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp490);
                                this.Manager.Comment("reaching state \'S509\'");
                                int temp502 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker50)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker51)));
                                if ((temp502 == 0)) {
                                    this.Manager.Comment("reaching state \'S537\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp491;
                                    this.Manager.Comment("executing step \'call ModifyPermissions(1,3,Owner)\'");
                                    temp491 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels.Owner);
                                    this.Manager.Comment("reaching state \'S569\'");
                                    this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp491, "return of ModifyPermissions, state S569");
                                    this.Manager.Comment("reaching state \'S601\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp492;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp492 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S633\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp492, "return of DeleteFolder, state S633");
                                    this.Manager.Comment("reaching state \'S665\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp493;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp493 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S697\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp493, "return of DeleteFolder, state S697");
                                    this.Manager.Comment("reaching state \'S729\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp494;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp494 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S761\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp494, "return of Release, state S761");
                                    this.Manager.Comment("reaching state \'S793\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp495;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp495 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S825\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp495, "return of Release, state S825");
                                    this.Manager.Comment("reaching state \'S857\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp496;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp496 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S877\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp496, "return of Release, state S877");
                                    this.Manager.Comment("reaching state \'S893\'");
                                    goto label22;
                                }
                                if ((temp502 == 1)) {
                                    this.Manager.Comment("reaching state \'S538\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp497;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp497 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S570\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp497, "return of DeleteFolder, state S570");
                                    this.Manager.Comment("reaching state \'S602\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp498;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp498 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S634\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp498, "return of DeleteFolder, state S634");
                                    this.Manager.Comment("reaching state \'S666\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp499;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp499 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S698\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp499, "return of Release, state S698");
                                    this.Manager.Comment("reaching state \'S730\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp500;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp500 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S762\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp500, "return of Release, state S762");
                                    this.Manager.Comment("reaching state \'S794\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp501;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp501 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S826\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp501, "return of Release, state S826");
                                    this.Manager.Comment("reaching state \'S858\'");
                                    goto label22;
                                }
                                throw new InvalidOperationException("never reached");
                            label22:
;
                                goto label24;
                            }
                            if ((temp529 == 1)) {
                                this.Manager.Comment("reaching state \'S206\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp503;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagIdsetGiven,True,0)\'");
                                temp503 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(0)), true, 0);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2657");
                                this.Manager.Comment("reaching state \'S222\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp503, "return of SynchronizationUploadState, state S222");
                                this.Manager.Comment("reaching state \'S238\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp504;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeen,False,0)\'");
                                temp504 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(1)), false, 0);
                                this.Manager.Comment("reaching state \'S254\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp504, "return of SynchronizationUploadState, state S254");
                                this.Manager.Comment("reaching state \'S270\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp505;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetRead,False,0)\'");
                                temp505 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetRead, false, 0);
                                this.Manager.Comment("reaching state \'S286\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp505, "return of SynchronizationUploadState, state S286");
                                this.Manager.Comment("reaching state \'S302\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp506;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeenFAI,False,0)\'");
                                temp506 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetSeenFAI, false, 0);
                                this.Manager.Comment("reaching state \'S318\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp506, "return of SynchronizationUploadState, state S318");
                                this.Manager.Comment("reaching state \'S334\'");
                                int temp507;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream temp508;
                                bool temp509;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp510;
                                this.Manager.Comment("executing step \'call FastTransferSourceGetBuffer(1,7,Normal,out _,out _,out _)\'");
                                temp510 = this.IMS_OXCFXICSAdapterInstance.FastTransferSourceGetBuffer(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.BufferSize.Normal, out temp507, out temp508, out temp509);
                                this.Manager.Checkpoint("MS-OXCFXICS_R384");
                                this.Manager.Checkpoint("MS-OXCFXICS_R3321");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2188");
                                this.Manager.Checkpoint("MS-OXCFXICS_R1180");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2175");
                                this.Manager.Checkpoint("MS-OXCFXICS_R532");
                                this.Manager.Comment("reaching state \'S350\'");
                                this.Manager.Comment("checking step \'return FastTransferSourceGetBuffer/[out 1,out AbstractFastTransfer" +
                                        "Stream(StreamType=contentsSync,AbstractHierarchySync=AbstractHierarchySync(Folde" +
                                        "rchangeInfo=AbstractFolderChange(IsPidTagFolderIdExist=False,IsPidTagParentFolde" +
                                        "rIdExist=False,IsPidTagSourceKeyValueZero=False,IsPidTagParentSourceKeyValueZero" +
                                        "=False),FolderCount=0,FinalICSState=AbstractState(AbstractICSStateIndex=0,IdSetG" +
                                        "iven=null,IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChan" +
                                        "geNumber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsParentFolderBeforeChi" +
                                        "ld=False,AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted=" +
                                        "null,IsPidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False)),A" +
                                        "bstractContentsSync=AbstractContentsSync(IsprogessTotalPresent=False,MessageInfo" +
                                        "={},AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted={},Is" +
                                        "PidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False),IsReadSta" +
                                        "teChangesExist=False,FinalICSState=AbstractState(AbstractICSStateIndex=1,IdSetGi" +
                                        "ven={},IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChangeN" +
                                        "umber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsSortByMessageDeliveryTim" +
                                        "e=False,IsSortByLastModificationTime=False),AbstractFolderContent=AbstractFolder" +
                                        "Content(IsPidTagEcWarningOut=False,IsNoPermissionObjNotOut=False,IsPidTagNewFXFo" +
                                        "lderOut=False,IsFolderContentNotOut=False,IsFolderPropertiesNotOut=False,IsSubFo" +
                                        "lderPrecededByPidTagFXDelProp=False,AbsFolderMessage=AbstractFolderMessage(IsFol" +
                                        "derMessagesPrecededByPidTagFXDelProp=False,MessageList=AbstractMessageList(IsPid" +
                                        "TagEcWarningOut=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageCon" +
                                        "tent(IsNoPermissionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildre" +
                                        "n(AttachmentPrecededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=F" +
                                        "alse),StringPropertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,St" +
                                        "ringPropertiesInOtherCodePage=False,IsRTFFormat=False))))),AbstractTopFolder=Abs" +
                                        "tractTopFolder(AbsFolderContent=AbstractFolderContent(IsPidTagEcWarningOut=False" +
                                        ",IsNoPermissionObjNotOut=False,IsPidTagNewFXFolderOut=False,IsFolderContentNotOu" +
                                        "t=False,IsFolderPropertiesNotOut=False,IsSubFolderPrecededByPidTagFXDelProp=Fals" +
                                        "e,AbsFolderMessage=AbstractFolderMessage(IsFolderMessagesPrecededByPidTagFXDelPr" +
                                        "op=False,MessageList=AbstractMessageList(IsPidTagEcWarningOut=False,AbsMessage=A" +
                                        "bsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=F" +
                                        "alse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelP" +
                                        "rop=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fa" +
                                        "lse,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=Fals" +
                                        "e,IsRTFFormat=False))))),SubFolderInScope=False),AbstractState=AbstractState(Abs" +
                                        "tractICSStateIndex=0,IdSetGiven=null,IsNewCnsetReadPropertyChangeNumber=False,Is" +
                                        "NewCnsetSeenFAIPropertyChangeNumber=False,IsNewCnsetSeenPropertyChangeNumber=Fal" +
                                        "se),AbstractMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=Fa" +
                                        "lse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelPr" +
                                        "op=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fal" +
                                        "se,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=False" +
                                        ",IsRTFFormat=False),AbstractMessageList=AbstractMessageList(IsPidTagEcWarningOut" +
                                        "=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermis" +
                                        "sionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildren(AttachmentPre" +
                                        "cededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),StringPro" +
                                        "pertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,StringPropertiesI" +
                                        "nOtherCodePage=False,IsRTFFormat=False))),IsSameReadstateChangeNumber=False),out" +
                                        " False]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp507, "transferBufferIndex of FastTransferSourceGetBuffer, state S350");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(new string[] {
                                                "StreamType",
                                                "AbstractHierarchySync",
                                                "AbstractContentsSync",
                                                "AbstractFolderContent",
                                                "AbstractTopFolder",
                                                "AbstractState",
                                                "AbstractMessageContent",
                                                "AbstractMessageList",
                                                "IsSameReadstateChangeNumber"}, new object[] {
                                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.FastTransferStreamType.contentsSync,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractHierarchySync>(new string[] {
                                                            "FolderchangeInfo",
                                                            "FolderCount",
                                                            "FinalICSState",
                                                            "IsParentFolderBeforeChild",
                                                            "AbstractDeletion"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderChange>(new string[] {
                                                                        "IsPidTagFolderIdExist",
                                                                        "IsPidTagParentFolderIdExist",
                                                                        "IsPidTagSourceKeyValueZero",
                                                                        "IsPidTagParentSourceKeyValueZero"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            0,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        0,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractContentsSync>(new string[] {
                                                            "IsprogessTotalPresent",
                                                            "MessageInfo",
                                                            "AbstractDeletion",
                                                            "IsReadStateChangesExist",
                                                            "FinalICSState",
                                                            "IsSortByMessageDeliveryTime",
                                                            "IsSortByLastModificationTime"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Modeling.Set<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo>>(new string[] {
                                                                        "Rep"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo, Microsoft.Xrt.Runtime.Singleton>()}),
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        1,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "IsNoPermissionObjNotOut",
                                                            "IsPidTagNewFXFolderOut",
                                                            "IsFolderContentNotOut",
                                                            "IsFolderPropertiesNotOut",
                                                            "IsSubFolderPrecededByPidTagFXDelProp",
                                                            "AbsFolderMessage"}, new object[] {
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                        "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                        "MessageList"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                    "IsPidTagEcWarningOut",
                                                                                    "AbsMessage"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                "AbsMessageContent"}, new object[] {
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                            "IsNoPermissionMessageNotOut",
                                                                                                            "AbsMessageChildren",
                                                                                                            "StringPropertiesInUnicode",
                                                                                                            "StringPropertiesInUnicodeCodePage",
                                                                                                            "StringPropertiesInOtherCodePage",
                                                                                                            "IsRTFFormat"}, new object[] {
                                                                                                            false,
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                        false,
                                                                                                                        false}),
                                                                                                            false,
                                                                                                            false,
                                                                                                            false,
                                                                                                            false})})})})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractTopFolder>(new string[] {
                                                            "AbsFolderContent",
                                                            "SubFolderInScope"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                                        "IsPidTagEcWarningOut",
                                                                        "IsNoPermissionObjNotOut",
                                                                        "IsPidTagNewFXFolderOut",
                                                                        "IsFolderContentNotOut",
                                                                        "IsFolderPropertiesNotOut",
                                                                        "IsSubFolderPrecededByPidTagFXDelProp",
                                                                        "AbsFolderMessage"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                                    "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                                    "MessageList"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                                "IsPidTagEcWarningOut",
                                                                                                "AbsMessage"}, new object[] {
                                                                                                false,
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                            "AbsMessageContent"}, new object[] {
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                                        "IsNoPermissionMessageNotOut",
                                                                                                                        "AbsMessageChildren",
                                                                                                                        "StringPropertiesInUnicode",
                                                                                                                        "StringPropertiesInUnicodeCodePage",
                                                                                                                        "StringPropertiesInOtherCodePage",
                                                                                                                        "IsRTFFormat"}, new object[] {
                                                                                                                        false,
                                                                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                                    "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                                    "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                                    false,
                                                                                                                                    false}),
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false})})})})}),
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                            "AbstractICSStateIndex",
                                                            "IdSetGiven",
                                                            "IsNewCnsetReadPropertyChangeNumber",
                                                            "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                            "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                            0,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                            "IsNoPermissionMessageNotOut",
                                                            "AbsMessageChildren",
                                                            "StringPropertiesInUnicode",
                                                            "StringPropertiesInUnicodeCodePage",
                                                            "StringPropertiesInOtherCodePage",
                                                            "IsRTFFormat"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "AbsMessage"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                        "AbsMessageContent"}, new object[] {
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                    "IsNoPermissionMessageNotOut",
                                                                                    "AbsMessageChildren",
                                                                                    "StringPropertiesInUnicode",
                                                                                    "StringPropertiesInUnicodeCodePage",
                                                                                    "StringPropertiesInOtherCodePage",
                                                                                    "IsRTFFormat"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                "AttachmentPrecededByPidTagFXDelProp",
                                                                                                "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                false,
                                                                                                false}),
                                                                                    false,
                                                                                    false,
                                                                                    false,
                                                                                    false})})}),
                                                false}), temp508, "abstractFastTransferStream of FastTransferSourceGetBuffer, state S350");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp509, "transferDataSmallOrEqualToBufferSize of FastTransferSourceGetBuffer, state S350");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp510, "return of FastTransferSourceGetBuffer, state S350");
                                this.Manager.Comment("reaching state \'S366\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp511;
                                this.Manager.Comment("executing step \'call ModifyPermissions(1,3,None)\'");
                                temp511 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels)(0)));
                                this.Manager.Comment("reaching state \'S382\'");
                                this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp511, "return of ModifyPermissions, state S382");
                                this.Manager.Comment("reaching state \'S398\'");
                                int temp512;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp513;
                                this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                                temp513 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp512);
                                this.Manager.Checkpoint("MS-OXCFXICS_R778");
                                this.Manager.Checkpoint("MS-OXCFXICS_R769");
                                this.Manager.Comment("reaching state \'S414\'");
                                this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 8]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 8, temp512, "synchronizationHandleIndex of SynchronizationOpenCollector, state S414");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp513, "return of SynchronizationOpenCollector, state S414");
                                this.Manager.Comment("reaching state \'S430\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp514;
                                this.Manager.Comment("executing step \'call SynchronizationImportReadStateChanges(1,8,6,False)\'");
                                temp514 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportReadStateChanges(1, 8, 6, false);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2260");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                                this.Manager.Checkpoint("MS-OXCFXICS_R905");
                                this.Manager.Comment("reaching state \'S446\'");
                                this.Manager.Comment("checking step \'return SynchronizationImportReadStateChanges/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp514, "return of SynchronizationImportReadStateChanges, state S446");
                                this.Manager.Comment("reaching state \'S462\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp515;
                                this.Manager.Comment("executing step \'call GetPropertiesSpecific(1,6,[\"PidTagMessageFlags\"])\'");
                                temp515 = this.IMS_OXCFXICSAdapterInstance.GetPropertiesSpecific(1, 6, this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "PidTagMessageFlags",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                                this.Manager.Comment("reaching state \'S478\'");
                                this.Manager.Comment("checking step \'return GetPropertiesSpecific/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp515, "return of GetPropertiesSpecific, state S478");
                                this.Manager.Comment("reaching state \'S494\'");
                                bool temp516;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2813,out _)\'");
                                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2813, out temp516);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp516);
                                this.Manager.Comment("reaching state \'S510\'");
                                int temp528 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker53)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker54)));
                                if ((temp528 == 0)) {
                                    this.Manager.Comment("reaching state \'S539\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp517;
                                    this.Manager.Comment("executing step \'call ModifyPermissions(1,3,Owner)\'");
                                    temp517 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels.Owner);
                                    this.Manager.Comment("reaching state \'S571\'");
                                    this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp517, "return of ModifyPermissions, state S571");
                                    this.Manager.Comment("reaching state \'S603\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp518;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp518 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S635\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp518, "return of DeleteFolder, state S635");
                                    this.Manager.Comment("reaching state \'S667\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp519;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp519 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S699\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp519, "return of DeleteFolder, state S699");
                                    this.Manager.Comment("reaching state \'S731\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp520;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp520 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S763\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp520, "return of Release, state S763");
                                    this.Manager.Comment("reaching state \'S795\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp521;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp521 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S827\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp521, "return of Release, state S827");
                                    this.Manager.Comment("reaching state \'S859\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp522;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp522 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S878\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp522, "return of Release, state S878");
                                    this.Manager.Comment("reaching state \'S894\'");
                                    goto label23;
                                }
                                if ((temp528 == 1)) {
                                    this.Manager.Comment("reaching state \'S540\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp523;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp523 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S572\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp523, "return of DeleteFolder, state S572");
                                    this.Manager.Comment("reaching state \'S604\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp524;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp524 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S636\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp524, "return of DeleteFolder, state S636");
                                    this.Manager.Comment("reaching state \'S668\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp525;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp525 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S700\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp525, "return of Release, state S700");
                                    this.Manager.Comment("reaching state \'S732\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp526;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp526 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S764\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp526, "return of Release, state S764");
                                    this.Manager.Comment("reaching state \'S796\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp527;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp527 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S828\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp527, "return of Release, state S828");
                                    this.Manager.Comment("reaching state \'S860\'");
                                    goto label23;
                                }
                                throw new InvalidOperationException("never reached");
                            label23:
;
                                goto label24;
                            }
                            throw new InvalidOperationException("never reached");
                        label24:
;
                            goto label28;
                        }
                        if ((temp604 == 1)) {
                            this.Manager.Comment("reaching state \'S24\'");
                            this.Manager.Comment("executing step \'call Connect(1,PublicFolderServer)\'");
                            this.IMS_OXCFXICSAdapterInstance.Connect(1, ((Microsoft.Protocols.TestSuites.Common.ConnectionType)(0)));
                            this.Manager.Comment("reaching state \'S32\'");
                            this.Manager.Comment("checking step \'return Connect\'");
                            this.Manager.Comment("reaching state \'S40\'");
                            int temp530;
                            int temp531;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp532;
                            this.Manager.Comment("executing step \'call Logon(1,Private,out _,out _)\'");
                            temp532 = this.IMS_OXCFXICSAdapterInstance.Logon(1, ((Microsoft.Protocols.TestSuites.Common.LogonFlags)(1)), out temp530, out temp531);
                            this.Manager.Comment("reaching state \'S48\'");
                            this.Manager.Comment("checking step \'return Logon/[out 1,out 1]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp530, "logonHandleIndex of Logon, state S48");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp531, "inboxFolderIdIndex of Logon, state S48");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp532, "return of Logon, state S48");
                            this.Manager.Comment("reaching state \'S56\'");
                            int temp533;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp534;
                            this.Manager.Comment("executing step \'call OpenFolder(1,1,1,out _)\'");
                            temp534 = this.IMS_OXCFXICSAdapterInstance.OpenFolder(1, 1, 1, out temp533);
                            this.Manager.Comment("reaching state \'S64\'");
                            this.Manager.Comment("checking step \'return OpenFolder/[out 2]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp533, "folderHandleIndex of OpenFolder, state S64");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp534, "return of OpenFolder, state S64");
                            this.Manager.Comment("reaching state \'S72\'");
                            int temp535;
                            int temp536;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp537;
                            this.Manager.Comment("executing step \'call CreateFolder(1,2,\"test\",out _,out _)\'");
                            temp537 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 2, "test", out temp535, out temp536);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                            this.Manager.Comment("reaching state \'S80\'");
                            this.Manager.Comment("checking step \'return CreateFolder/[out 2,out 3]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp535, "folderIdIndex of CreateFolder, state S80");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp536, "folderHandleIndex of CreateFolder, state S80");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp537, "return of CreateFolder, state S80");
                            this.Manager.Comment("reaching state \'S88\'");
                            int temp538;
                            int temp539;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp540;
                            this.Manager.Comment("executing step \'call CreateFolder(1,3,\"SubFolder\",out _,out _)\'");
                            temp540 = this.IMS_OXCFXICSAdapterInstance.CreateFolder(1, 3, "SubFolder", out temp538, out temp539);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1890");
                            this.Manager.Comment("reaching state \'S96\'");
                            this.Manager.Comment("checking step \'return CreateFolder/[out 3,out 4]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp538, "folderIdIndex of CreateFolder, state S96");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, temp539, "folderHandleIndex of CreateFolder, state S96");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp540, "return of CreateFolder, state S96");
                            this.Manager.Comment("reaching state \'S104\'");
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp541;
                            this.Manager.Comment("executing step \'call GetLocalReplicaIds(1,1,3)\'");
                            temp541 = this.IMS_OXCFXICSAdapterInstance.GetLocalReplicaIds(1, 1, 3u);
                            this.Manager.Checkpoint("MS-OXCFXICS_R925");
                            this.Manager.Comment("reaching state \'S112\'");
                            this.Manager.Comment("checking step \'return GetLocalReplicaIds/Success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp541, "return of GetLocalReplicaIds, state S112");
                            this.Manager.Comment("reaching state \'S120\'");
                            int temp542;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp543;
                            this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                            temp543 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp542);
                            this.Manager.Checkpoint("MS-OXCFXICS_R778");
                            this.Manager.Checkpoint("MS-OXCFXICS_R769");
                            this.Manager.Comment("reaching state \'S128\'");
                            this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 5]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 5, temp542, "synchronizationHandleIndex of SynchronizationOpenCollector, state S128");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp543, "return of SynchronizationOpenCollector, state S128");
                            this.Manager.Comment("reaching state \'S136\'");
                            int temp544;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp545;
                            this.Manager.Comment("executing step \'call SynchronizationImportMessageChange(1,5,0,Normal,out _)\'");
                            temp545 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportMessageChange(1, 5, 0, ((Microsoft.Protocols.TestSuites.Common.ImportFlag)(0)), out temp544);
                            this.Manager.Checkpoint("MS-OXCFXICS_R814");
                            this.Manager.Checkpoint("MS-OXCFXICS_R805");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1897");
                            this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                            this.Manager.Checkpoint("MS-OXCFXICS_R782");
                            this.Manager.Comment("reaching state \'S144\'");
                            this.Manager.Comment("checking step \'return SynchronizationImportMessageChange/[out 6]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 6, temp544, "importMessageHandleIndex of SynchronizationImportMessageChange, state S144");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp545, "return of SynchronizationImportMessageChange, state S144");
                            this.Manager.Comment("reaching state \'S152\'");
                            int temp546;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp547;
                            this.Manager.Comment("executing step \'call SaveChangesMessage(1,6,out _)\'");
                            temp547 = this.IMS_OXCFXICSAdapterInstance.SaveChangesMessage(1, 6, out temp546);
                            this.Manager.Checkpoint("MS-OXCFXICS_R1910");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1906");
                            this.Manager.Checkpoint("MS-OXCFXICS_R1898");
                            this.Manager.Comment("reaching state \'S160\'");
                            this.Manager.Comment("checking step \'return SaveChangesMessage/[out 4]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 4, temp546, "messageIdIndex of SaveChangesMessage, state S160");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp547, "return of SaveChangesMessage, state S160");
                            this.Manager.Comment("reaching state \'S168\'");
                            int temp548;
                            Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp549;
                            this.Manager.Comment("executing step \'call SynchronizationConfigure(1,4,Contents,Unicode|ForceUnicode,N" +
                                    "one,Eid,[\"PidTagCreationTime\"],out _)\'");
                            temp549 = this.IMS_OXCFXICSAdapterInstance.SynchronizationConfigure(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SendOptionAlls)(9)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationFlag)(0)), ((Microsoft.Protocols.TestSuites.Common.SynchronizationExtraFlag)(1)), this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "PidTagCreationTime",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}), out temp548);
                            this.Manager.Checkpoint("MS-OXCFXICS_R669");
                            this.Manager.Checkpoint("MS-OXCFXICS_R641");
                            this.Manager.Comment("reaching state \'S176\'");
                            this.Manager.Comment("checking step \'return SynchronizationConfigure/[out 7]:Success\'");
                            TestManagerHelpers.AssertAreEqual<int>(this.Manager, 7, temp548, "downloadcontextHandleIndex of SynchronizationConfigure, state S176");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp549, "return of SynchronizationConfigure, state S176");
                            this.Manager.Comment("reaching state \'S184\'");
                            bool temp550;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(2657,out _)\'");
                            this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2657, out temp550);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp550);
                            this.Manager.Comment("reaching state \'S192\'");
                            int temp603 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker56)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker59)));
                            if ((temp603 == 0)) {
                                this.Manager.Comment("reaching state \'S207\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp551;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagIdsetGiven,True,0)\'");
                                temp551 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(0)), true, 0);
                                this.Manager.Comment("reaching state \'S223\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/InvalidParameter\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult.InvalidParameter, temp551, "return of SynchronizationUploadState, state S223");
                                this.Manager.Comment("reaching state \'S239\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp552;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeen,False,0)\'");
                                temp552 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(1)), false, 0);
                                this.Manager.Comment("reaching state \'S255\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp552, "return of SynchronizationUploadState, state S255");
                                this.Manager.Comment("reaching state \'S271\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp553;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetRead,False,0)\'");
                                temp553 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetRead, false, 0);
                                this.Manager.Comment("reaching state \'S287\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp553, "return of SynchronizationUploadState, state S287");
                                this.Manager.Comment("reaching state \'S303\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp554;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeenFAI,False,0)\'");
                                temp554 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetSeenFAI, false, 0);
                                this.Manager.Comment("reaching state \'S319\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp554, "return of SynchronizationUploadState, state S319");
                                this.Manager.Comment("reaching state \'S335\'");
                                int temp555;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream temp556;
                                bool temp557;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp558;
                                this.Manager.Comment("executing step \'call FastTransferSourceGetBuffer(1,7,Normal,out _,out _,out _)\'");
                                temp558 = this.IMS_OXCFXICSAdapterInstance.FastTransferSourceGetBuffer(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.BufferSize.Normal, out temp555, out temp556, out temp557);
                                this.Manager.Checkpoint("MS-OXCFXICS_R384");
                                this.Manager.Checkpoint("MS-OXCFXICS_R3321");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2188");
                                this.Manager.Checkpoint("MS-OXCFXICS_R1180");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2175");
                                this.Manager.Checkpoint("MS-OXCFXICS_R532");
                                this.Manager.Comment("reaching state \'S351\'");
                                this.Manager.Comment("checking step \'return FastTransferSourceGetBuffer/[out 1,out AbstractFastTransfer" +
                                        "Stream(StreamType=contentsSync,AbstractHierarchySync=AbstractHierarchySync(Folde" +
                                        "rchangeInfo=AbstractFolderChange(IsPidTagFolderIdExist=False,IsPidTagParentFolde" +
                                        "rIdExist=False,IsPidTagSourceKeyValueZero=False,IsPidTagParentSourceKeyValueZero" +
                                        "=False),FolderCount=0,FinalICSState=AbstractState(AbstractICSStateIndex=0,IdSetG" +
                                        "iven=null,IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChan" +
                                        "geNumber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsParentFolderBeforeChi" +
                                        "ld=False,AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted=" +
                                        "null,IsPidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False)),A" +
                                        "bstractContentsSync=AbstractContentsSync(IsprogessTotalPresent=False,MessageInfo" +
                                        "={},AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted={},Is" +
                                        "PidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False),IsReadSta" +
                                        "teChangesExist=False,FinalICSState=AbstractState(AbstractICSStateIndex=1,IdSetGi" +
                                        "ven={},IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChangeN" +
                                        "umber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsSortByMessageDeliveryTim" +
                                        "e=False,IsSortByLastModificationTime=False),AbstractFolderContent=AbstractFolder" +
                                        "Content(IsPidTagEcWarningOut=False,IsNoPermissionObjNotOut=False,IsPidTagNewFXFo" +
                                        "lderOut=False,IsFolderContentNotOut=False,IsFolderPropertiesNotOut=False,IsSubFo" +
                                        "lderPrecededByPidTagFXDelProp=False,AbsFolderMessage=AbstractFolderMessage(IsFol" +
                                        "derMessagesPrecededByPidTagFXDelProp=False,MessageList=AbstractMessageList(IsPid" +
                                        "TagEcWarningOut=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageCon" +
                                        "tent(IsNoPermissionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildre" +
                                        "n(AttachmentPrecededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=F" +
                                        "alse),StringPropertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,St" +
                                        "ringPropertiesInOtherCodePage=False,IsRTFFormat=False))))),AbstractTopFolder=Abs" +
                                        "tractTopFolder(AbsFolderContent=AbstractFolderContent(IsPidTagEcWarningOut=False" +
                                        ",IsNoPermissionObjNotOut=False,IsPidTagNewFXFolderOut=False,IsFolderContentNotOu" +
                                        "t=False,IsFolderPropertiesNotOut=False,IsSubFolderPrecededByPidTagFXDelProp=Fals" +
                                        "e,AbsFolderMessage=AbstractFolderMessage(IsFolderMessagesPrecededByPidTagFXDelPr" +
                                        "op=False,MessageList=AbstractMessageList(IsPidTagEcWarningOut=False,AbsMessage=A" +
                                        "bsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=F" +
                                        "alse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelP" +
                                        "rop=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fa" +
                                        "lse,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=Fals" +
                                        "e,IsRTFFormat=False))))),SubFolderInScope=False),AbstractState=AbstractState(Abs" +
                                        "tractICSStateIndex=0,IdSetGiven=null,IsNewCnsetReadPropertyChangeNumber=False,Is" +
                                        "NewCnsetSeenFAIPropertyChangeNumber=False,IsNewCnsetSeenPropertyChangeNumber=Fal" +
                                        "se),AbstractMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=Fa" +
                                        "lse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelPr" +
                                        "op=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fal" +
                                        "se,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=False" +
                                        ",IsRTFFormat=False),AbstractMessageList=AbstractMessageList(IsPidTagEcWarningOut" +
                                        "=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermis" +
                                        "sionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildren(AttachmentPre" +
                                        "cededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),StringPro" +
                                        "pertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,StringPropertiesI" +
                                        "nOtherCodePage=False,IsRTFFormat=False))),IsSameReadstateChangeNumber=False),out" +
                                        " False]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp555, "transferBufferIndex of FastTransferSourceGetBuffer, state S351");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(new string[] {
                                                "StreamType",
                                                "AbstractHierarchySync",
                                                "AbstractContentsSync",
                                                "AbstractFolderContent",
                                                "AbstractTopFolder",
                                                "AbstractState",
                                                "AbstractMessageContent",
                                                "AbstractMessageList",
                                                "IsSameReadstateChangeNumber"}, new object[] {
                                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.FastTransferStreamType.contentsSync,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractHierarchySync>(new string[] {
                                                            "FolderchangeInfo",
                                                            "FolderCount",
                                                            "FinalICSState",
                                                            "IsParentFolderBeforeChild",
                                                            "AbstractDeletion"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderChange>(new string[] {
                                                                        "IsPidTagFolderIdExist",
                                                                        "IsPidTagParentFolderIdExist",
                                                                        "IsPidTagSourceKeyValueZero",
                                                                        "IsPidTagParentSourceKeyValueZero"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            0,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        0,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractContentsSync>(new string[] {
                                                            "IsprogessTotalPresent",
                                                            "MessageInfo",
                                                            "AbstractDeletion",
                                                            "IsReadStateChangesExist",
                                                            "FinalICSState",
                                                            "IsSortByMessageDeliveryTime",
                                                            "IsSortByLastModificationTime"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Modeling.Set<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo>>(new string[] {
                                                                        "Rep"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo, Microsoft.Xrt.Runtime.Singleton>()}),
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        1,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "IsNoPermissionObjNotOut",
                                                            "IsPidTagNewFXFolderOut",
                                                            "IsFolderContentNotOut",
                                                            "IsFolderPropertiesNotOut",
                                                            "IsSubFolderPrecededByPidTagFXDelProp",
                                                            "AbsFolderMessage"}, new object[] {
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                        "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                        "MessageList"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                    "IsPidTagEcWarningOut",
                                                                                    "AbsMessage"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                "AbsMessageContent"}, new object[] {
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                            "IsNoPermissionMessageNotOut",
                                                                                                            "AbsMessageChildren",
                                                                                                            "StringPropertiesInUnicode",
                                                                                                            "StringPropertiesInUnicodeCodePage",
                                                                                                            "StringPropertiesInOtherCodePage",
                                                                                                            "IsRTFFormat"}, new object[] {
                                                                                                            false,
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                        false,
                                                                                                                        false}),
                                                                                                            false,
                                                                                                            false,
                                                                                                            false,
                                                                                                            false})})})})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractTopFolder>(new string[] {
                                                            "AbsFolderContent",
                                                            "SubFolderInScope"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                                        "IsPidTagEcWarningOut",
                                                                        "IsNoPermissionObjNotOut",
                                                                        "IsPidTagNewFXFolderOut",
                                                                        "IsFolderContentNotOut",
                                                                        "IsFolderPropertiesNotOut",
                                                                        "IsSubFolderPrecededByPidTagFXDelProp",
                                                                        "AbsFolderMessage"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                                    "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                                    "MessageList"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                                "IsPidTagEcWarningOut",
                                                                                                "AbsMessage"}, new object[] {
                                                                                                false,
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                            "AbsMessageContent"}, new object[] {
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                                        "IsNoPermissionMessageNotOut",
                                                                                                                        "AbsMessageChildren",
                                                                                                                        "StringPropertiesInUnicode",
                                                                                                                        "StringPropertiesInUnicodeCodePage",
                                                                                                                        "StringPropertiesInOtherCodePage",
                                                                                                                        "IsRTFFormat"}, new object[] {
                                                                                                                        false,
                                                                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                                    "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                                    "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                                    false,
                                                                                                                                    false}),
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false})})})})}),
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                            "AbstractICSStateIndex",
                                                            "IdSetGiven",
                                                            "IsNewCnsetReadPropertyChangeNumber",
                                                            "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                            "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                            0,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                            "IsNoPermissionMessageNotOut",
                                                            "AbsMessageChildren",
                                                            "StringPropertiesInUnicode",
                                                            "StringPropertiesInUnicodeCodePage",
                                                            "StringPropertiesInOtherCodePage",
                                                            "IsRTFFormat"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "AbsMessage"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                        "AbsMessageContent"}, new object[] {
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                    "IsNoPermissionMessageNotOut",
                                                                                    "AbsMessageChildren",
                                                                                    "StringPropertiesInUnicode",
                                                                                    "StringPropertiesInUnicodeCodePage",
                                                                                    "StringPropertiesInOtherCodePage",
                                                                                    "IsRTFFormat"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                "AttachmentPrecededByPidTagFXDelProp",
                                                                                                "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                false,
                                                                                                false}),
                                                                                    false,
                                                                                    false,
                                                                                    false,
                                                                                    false})})}),
                                                false}), temp556, "abstractFastTransferStream of FastTransferSourceGetBuffer, state S351");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp557, "transferDataSmallOrEqualToBufferSize of FastTransferSourceGetBuffer, state S351");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp558, "return of FastTransferSourceGetBuffer, state S351");
                                this.Manager.Comment("reaching state \'S367\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp559;
                                this.Manager.Comment("executing step \'call ModifyPermissions(1,3,None)\'");
                                temp559 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels)(0)));
                                this.Manager.Comment("reaching state \'S383\'");
                                this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp559, "return of ModifyPermissions, state S383");
                                this.Manager.Comment("reaching state \'S399\'");
                                int temp560;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp561;
                                this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                                temp561 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp560);
                                this.Manager.Checkpoint("MS-OXCFXICS_R778");
                                this.Manager.Checkpoint("MS-OXCFXICS_R769");
                                this.Manager.Comment("reaching state \'S415\'");
                                this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 8]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 8, temp560, "synchronizationHandleIndex of SynchronizationOpenCollector, state S415");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp561, "return of SynchronizationOpenCollector, state S415");
                                this.Manager.Comment("reaching state \'S431\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp562;
                                this.Manager.Comment("executing step \'call SynchronizationImportReadStateChanges(1,8,6,False)\'");
                                temp562 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportReadStateChanges(1, 8, 6, false);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2260");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                                this.Manager.Checkpoint("MS-OXCFXICS_R905");
                                this.Manager.Comment("reaching state \'S447\'");
                                this.Manager.Comment("checking step \'return SynchronizationImportReadStateChanges/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp562, "return of SynchronizationImportReadStateChanges, state S447");
                                this.Manager.Comment("reaching state \'S463\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp563;
                                this.Manager.Comment("executing step \'call GetPropertiesSpecific(1,6,[\"PidTagMessageFlags\"])\'");
                                temp563 = this.IMS_OXCFXICSAdapterInstance.GetPropertiesSpecific(1, 6, this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "PidTagMessageFlags",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                                this.Manager.Comment("reaching state \'S479\'");
                                this.Manager.Comment("checking step \'return GetPropertiesSpecific/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp563, "return of GetPropertiesSpecific, state S479");
                                this.Manager.Comment("reaching state \'S495\'");
                                bool temp564;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2813,out _)\'");
                                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2813, out temp564);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp564);
                                this.Manager.Comment("reaching state \'S511\'");
                                int temp576 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker57)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker58)));
                                if ((temp576 == 0)) {
                                    this.Manager.Comment("reaching state \'S541\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp565;
                                    this.Manager.Comment("executing step \'call ModifyPermissions(1,3,Owner)\'");
                                    temp565 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels.Owner);
                                    this.Manager.Comment("reaching state \'S573\'");
                                    this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp565, "return of ModifyPermissions, state S573");
                                    this.Manager.Comment("reaching state \'S605\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp566;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp566 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S637\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp566, "return of DeleteFolder, state S637");
                                    this.Manager.Comment("reaching state \'S669\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp567;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp567 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S701\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp567, "return of DeleteFolder, state S701");
                                    this.Manager.Comment("reaching state \'S733\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp568;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp568 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S765\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp568, "return of Release, state S765");
                                    this.Manager.Comment("reaching state \'S797\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp569;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp569 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S829\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp569, "return of Release, state S829");
                                    this.Manager.Comment("reaching state \'S861\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp570;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp570 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S879\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp570, "return of Release, state S879");
                                    this.Manager.Comment("reaching state \'S895\'");
                                    goto label25;
                                }
                                if ((temp576 == 1)) {
                                    this.Manager.Comment("reaching state \'S542\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp571;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp571 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S574\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp571, "return of DeleteFolder, state S574");
                                    this.Manager.Comment("reaching state \'S606\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp572;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp572 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S638\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp572, "return of DeleteFolder, state S638");
                                    this.Manager.Comment("reaching state \'S670\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp573;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp573 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S702\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp573, "return of Release, state S702");
                                    this.Manager.Comment("reaching state \'S734\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp574;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp574 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S766\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp574, "return of Release, state S766");
                                    this.Manager.Comment("reaching state \'S798\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp575;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp575 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S830\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp575, "return of Release, state S830");
                                    this.Manager.Comment("reaching state \'S862\'");
                                    goto label25;
                                }
                                throw new InvalidOperationException("never reached");
                            label25:
;
                                goto label27;
                            }
                            if ((temp603 == 1)) {
                                this.Manager.Comment("reaching state \'S208\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp577;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagIdsetGiven,True,0)\'");
                                temp577 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(0)), true, 0);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2657");
                                this.Manager.Comment("reaching state \'S224\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp577, "return of SynchronizationUploadState, state S224");
                                this.Manager.Comment("reaching state \'S240\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp578;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeen,False,0)\'");
                                temp578 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties)(1)), false, 0);
                                this.Manager.Comment("reaching state \'S256\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp578, "return of SynchronizationUploadState, state S256");
                                this.Manager.Comment("reaching state \'S272\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp579;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetRead,False,0)\'");
                                temp579 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetRead, false, 0);
                                this.Manager.Comment("reaching state \'S288\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp579, "return of SynchronizationUploadState, state S288");
                                this.Manager.Comment("reaching state \'S304\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp580;
                                this.Manager.Comment("executing step \'call SynchronizationUploadState(1,7,PidTagCnsetSeenFAI,False,0)\'");
                                temp580 = this.IMS_OXCFXICSAdapterInstance.SynchronizationUploadState(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.ICSStateProperties.PidTagCnsetSeenFAI, false, 0);
                                this.Manager.Comment("reaching state \'S320\'");
                                this.Manager.Comment("checking step \'return SynchronizationUploadState/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp580, "return of SynchronizationUploadState, state S320");
                                this.Manager.Comment("reaching state \'S336\'");
                                int temp581;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream temp582;
                                bool temp583;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp584;
                                this.Manager.Comment("executing step \'call FastTransferSourceGetBuffer(1,7,Normal,out _,out _,out _)\'");
                                temp584 = this.IMS_OXCFXICSAdapterInstance.FastTransferSourceGetBuffer(1, 7, Microsoft.Protocols.TestSuites.MS_OXCFXICS.BufferSize.Normal, out temp581, out temp582, out temp583);
                                this.Manager.Checkpoint("MS-OXCFXICS_R384");
                                this.Manager.Checkpoint("MS-OXCFXICS_R3321");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2188");
                                this.Manager.Checkpoint("MS-OXCFXICS_R1180");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2175");
                                this.Manager.Checkpoint("MS-OXCFXICS_R532");
                                this.Manager.Comment("reaching state \'S352\'");
                                this.Manager.Comment("checking step \'return FastTransferSourceGetBuffer/[out 1,out AbstractFastTransfer" +
                                        "Stream(StreamType=contentsSync,AbstractHierarchySync=AbstractHierarchySync(Folde" +
                                        "rchangeInfo=AbstractFolderChange(IsPidTagFolderIdExist=False,IsPidTagParentFolde" +
                                        "rIdExist=False,IsPidTagSourceKeyValueZero=False,IsPidTagParentSourceKeyValueZero" +
                                        "=False),FolderCount=0,FinalICSState=AbstractState(AbstractICSStateIndex=0,IdSetG" +
                                        "iven=null,IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChan" +
                                        "geNumber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsParentFolderBeforeChi" +
                                        "ld=False,AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted=" +
                                        "null,IsPidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False)),A" +
                                        "bstractContentsSync=AbstractContentsSync(IsprogessTotalPresent=False,MessageInfo" +
                                        "={},AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted={},Is" +
                                        "PidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False),IsReadSta" +
                                        "teChangesExist=False,FinalICSState=AbstractState(AbstractICSStateIndex=1,IdSetGi" +
                                        "ven={},IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyChangeN" +
                                        "umber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsSortByMessageDeliveryTim" +
                                        "e=False,IsSortByLastModificationTime=False),AbstractFolderContent=AbstractFolder" +
                                        "Content(IsPidTagEcWarningOut=False,IsNoPermissionObjNotOut=False,IsPidTagNewFXFo" +
                                        "lderOut=False,IsFolderContentNotOut=False,IsFolderPropertiesNotOut=False,IsSubFo" +
                                        "lderPrecededByPidTagFXDelProp=False,AbsFolderMessage=AbstractFolderMessage(IsFol" +
                                        "derMessagesPrecededByPidTagFXDelProp=False,MessageList=AbstractMessageList(IsPid" +
                                        "TagEcWarningOut=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageCon" +
                                        "tent(IsNoPermissionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildre" +
                                        "n(AttachmentPrecededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=F" +
                                        "alse),StringPropertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,St" +
                                        "ringPropertiesInOtherCodePage=False,IsRTFFormat=False))))),AbstractTopFolder=Abs" +
                                        "tractTopFolder(AbsFolderContent=AbstractFolderContent(IsPidTagEcWarningOut=False" +
                                        ",IsNoPermissionObjNotOut=False,IsPidTagNewFXFolderOut=False,IsFolderContentNotOu" +
                                        "t=False,IsFolderPropertiesNotOut=False,IsSubFolderPrecededByPidTagFXDelProp=Fals" +
                                        "e,AbsFolderMessage=AbstractFolderMessage(IsFolderMessagesPrecededByPidTagFXDelPr" +
                                        "op=False,MessageList=AbstractMessageList(IsPidTagEcWarningOut=False,AbsMessage=A" +
                                        "bsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=F" +
                                        "alse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelP" +
                                        "rop=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fa" +
                                        "lse,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=Fals" +
                                        "e,IsRTFFormat=False))))),SubFolderInScope=False),AbstractState=AbstractState(Abs" +
                                        "tractICSStateIndex=0,IdSetGiven=null,IsNewCnsetReadPropertyChangeNumber=False,Is" +
                                        "NewCnsetSeenFAIPropertyChangeNumber=False,IsNewCnsetSeenPropertyChangeNumber=Fal" +
                                        "se),AbstractMessageContent=AbstractMessageContent(IsNoPermissionMessageNotOut=Fa" +
                                        "lse,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTagFXDelPr" +
                                        "op=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnicode=Fal" +
                                        "se,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePage=False" +
                                        ",IsRTFFormat=False),AbstractMessageList=AbstractMessageList(IsPidTagEcWarningOut" +
                                        "=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermis" +
                                        "sionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildren(AttachmentPre" +
                                        "cededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),StringPro" +
                                        "pertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,StringPropertiesI" +
                                        "nOtherCodePage=False,IsRTFFormat=False))),IsSameReadstateChangeNumber=False),out" +
                                        " False]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp581, "transferBufferIndex of FastTransferSourceGetBuffer, state S352");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(new string[] {
                                                "StreamType",
                                                "AbstractHierarchySync",
                                                "AbstractContentsSync",
                                                "AbstractFolderContent",
                                                "AbstractTopFolder",
                                                "AbstractState",
                                                "AbstractMessageContent",
                                                "AbstractMessageList",
                                                "IsSameReadstateChangeNumber"}, new object[] {
                                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.FastTransferStreamType.contentsSync,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractHierarchySync>(new string[] {
                                                            "FolderchangeInfo",
                                                            "FolderCount",
                                                            "FinalICSState",
                                                            "IsParentFolderBeforeChild",
                                                            "AbstractDeletion"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderChange>(new string[] {
                                                                        "IsPidTagFolderIdExist",
                                                                        "IsPidTagParentFolderIdExist",
                                                                        "IsPidTagSourceKeyValueZero",
                                                                        "IsPidTagParentSourceKeyValueZero"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            0,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        0,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        ((Microsoft.Modeling.Set<int>)(null)),
                                                                        false,
                                                                        false})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractContentsSync>(new string[] {
                                                            "IsprogessTotalPresent",
                                                            "MessageInfo",
                                                            "AbstractDeletion",
                                                            "IsReadStateChangesExist",
                                                            "FinalICSState",
                                                            "IsSortByMessageDeliveryTime",
                                                            "IsSortByLastModificationTime"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Modeling.Set<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo>>(new string[] {
                                                                        "Rep"}, new object[] {
                                                                        Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo, Microsoft.Xrt.Runtime.Singleton>()}),
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                                        "IsDeletionPresent",
                                                                        "IdSetDeleted",
                                                                        "IsPidTagIdsetNoLongerInScopeExist",
                                                                        "IsPidTagIdsetExpiredExist"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false}),
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                                        "AbstractICSStateIndex",
                                                                        "IdSetGiven",
                                                                        "IsNewCnsetReadPropertyChangeNumber",
                                                                        "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                                        "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                                        1,
                                                                        this.Make<Microsoft.Modeling.Set<int>>(new string[] {
                                                                                    "Rep"}, new object[] {
                                                                                    Microsoft.Xrt.Runtime.RuntimeSupport.MakeMap<int, Microsoft.Xrt.Runtime.Singleton>()}),
                                                                        false,
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "IsNoPermissionObjNotOut",
                                                            "IsPidTagNewFXFolderOut",
                                                            "IsFolderContentNotOut",
                                                            "IsFolderPropertiesNotOut",
                                                            "IsSubFolderPrecededByPidTagFXDelProp",
                                                            "AbsFolderMessage"}, new object[] {
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                        "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                        "MessageList"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                    "IsPidTagEcWarningOut",
                                                                                    "AbsMessage"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                "AbsMessageContent"}, new object[] {
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                            "IsNoPermissionMessageNotOut",
                                                                                                            "AbsMessageChildren",
                                                                                                            "StringPropertiesInUnicode",
                                                                                                            "StringPropertiesInUnicodeCodePage",
                                                                                                            "StringPropertiesInOtherCodePage",
                                                                                                            "IsRTFFormat"}, new object[] {
                                                                                                            false,
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                        false,
                                                                                                                        false}),
                                                                                                            false,
                                                                                                            false,
                                                                                                            false,
                                                                                                            false})})})})}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractTopFolder>(new string[] {
                                                            "AbsFolderContent",
                                                            "SubFolderInScope"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                                        "IsPidTagEcWarningOut",
                                                                        "IsNoPermissionObjNotOut",
                                                                        "IsPidTagNewFXFolderOut",
                                                                        "IsFolderContentNotOut",
                                                                        "IsFolderPropertiesNotOut",
                                                                        "IsSubFolderPrecededByPidTagFXDelProp",
                                                                        "AbsFolderMessage"}, new object[] {
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                                    "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                                    "MessageList"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                                "IsPidTagEcWarningOut",
                                                                                                "AbsMessage"}, new object[] {
                                                                                                false,
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                            "AbsMessageContent"}, new object[] {
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                                        "IsNoPermissionMessageNotOut",
                                                                                                                        "AbsMessageChildren",
                                                                                                                        "StringPropertiesInUnicode",
                                                                                                                        "StringPropertiesInUnicodeCodePage",
                                                                                                                        "StringPropertiesInOtherCodePage",
                                                                                                                        "IsRTFFormat"}, new object[] {
                                                                                                                        false,
                                                                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                                    "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                                    "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                                    false,
                                                                                                                                    false}),
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false,
                                                                                                                        false})})})})}),
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                            "AbstractICSStateIndex",
                                                            "IdSetGiven",
                                                            "IsNewCnsetReadPropertyChangeNumber",
                                                            "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                            "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                            0,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                            "IsNoPermissionMessageNotOut",
                                                            "AbsMessageChildren",
                                                            "StringPropertiesInUnicode",
                                                            "StringPropertiesInUnicodeCodePage",
                                                            "StringPropertiesInOtherCodePage",
                                                            "IsRTFFormat"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                        false,
                                                                        false}),
                                                            false,
                                                            false,
                                                            false,
                                                            false}),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "AbsMessage"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                        "AbsMessageContent"}, new object[] {
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                    "IsNoPermissionMessageNotOut",
                                                                                    "AbsMessageChildren",
                                                                                    "StringPropertiesInUnicode",
                                                                                    "StringPropertiesInUnicodeCodePage",
                                                                                    "StringPropertiesInOtherCodePage",
                                                                                    "IsRTFFormat"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                "AttachmentPrecededByPidTagFXDelProp",
                                                                                                "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                false,
                                                                                                false}),
                                                                                    false,
                                                                                    false,
                                                                                    false,
                                                                                    false})})}),
                                                false}), temp582, "abstractFastTransferStream of FastTransferSourceGetBuffer, state S352");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp583, "transferDataSmallOrEqualToBufferSize of FastTransferSourceGetBuffer, state S352");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp584, "return of FastTransferSourceGetBuffer, state S352");
                                this.Manager.Comment("reaching state \'S368\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp585;
                                this.Manager.Comment("executing step \'call ModifyPermissions(1,3,None)\'");
                                temp585 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels)(0)));
                                this.Manager.Comment("reaching state \'S384\'");
                                this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp585, "return of ModifyPermissions, state S384");
                                this.Manager.Comment("reaching state \'S400\'");
                                int temp586;
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp587;
                                this.Manager.Comment("executing step \'call SynchronizationOpenCollector(1,4,Contents,out _)\'");
                                temp587 = this.IMS_OXCFXICSAdapterInstance.SynchronizationOpenCollector(1, 4, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.SynchronizationTypes)(1)), out temp586);
                                this.Manager.Checkpoint("MS-OXCFXICS_R778");
                                this.Manager.Checkpoint("MS-OXCFXICS_R769");
                                this.Manager.Comment("reaching state \'S416\'");
                                this.Manager.Comment("checking step \'return SynchronizationOpenCollector/[out 8]:Success\'");
                                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 8, temp586, "synchronizationHandleIndex of SynchronizationOpenCollector, state S416");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp587, "return of SynchronizationOpenCollector, state S416");
                                this.Manager.Comment("reaching state \'S432\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp588;
                                this.Manager.Comment("executing step \'call SynchronizationImportReadStateChanges(1,8,6,False)\'");
                                temp588 = this.IMS_OXCFXICSAdapterInstance.SynchronizationImportReadStateChanges(1, 8, 6, false);
                                this.Manager.Checkpoint("MS-OXCFXICS_R2260");
                                this.Manager.Checkpoint("MS-OXCFXICS_R2449");
                                this.Manager.Checkpoint("MS-OXCFXICS_R905");
                                this.Manager.Comment("reaching state \'S448\'");
                                this.Manager.Comment("checking step \'return SynchronizationImportReadStateChanges/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp588, "return of SynchronizationImportReadStateChanges, state S448");
                                this.Manager.Comment("reaching state \'S464\'");
                                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp589;
                                this.Manager.Comment("executing step \'call GetPropertiesSpecific(1,6,[\"PidTagMessageFlags\"])\'");
                                temp589 = this.IMS_OXCFXICSAdapterInstance.GetPropertiesSpecific(1, 6, this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "PidTagMessageFlags",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                                this.Manager.Comment("reaching state \'S480\'");
                                this.Manager.Comment("checking step \'return GetPropertiesSpecific/Success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp589, "return of GetPropertiesSpecific, state S480");
                                this.Manager.Comment("reaching state \'S496\'");
                                bool temp590;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2813,out _)\'");
                                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(2813, out temp590);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp590);
                                this.Manager.Comment("reaching state \'S512\'");
                                int temp602 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker60)), new ExpectedReturn(S06_SyncICSContentsUpdateReadStateFail_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker61)));
                                if ((temp602 == 0)) {
                                    this.Manager.Comment("reaching state \'S543\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp591;
                                    this.Manager.Comment("executing step \'call ModifyPermissions(1,3,Owner)\'");
                                    temp591 = this.IMS_OXCFXICSAdapterInstance.ModifyPermissions(1, 3, Microsoft.Protocols.TestSuites.MS_OXCFXICS.PermissionLevels.Owner);
                                    this.Manager.Comment("reaching state \'S575\'");
                                    this.Manager.Comment("checking step \'return ModifyPermissions/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp591, "return of ModifyPermissions, state S575");
                                    this.Manager.Comment("reaching state \'S607\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp592;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp592 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S639\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp592, "return of DeleteFolder, state S639");
                                    this.Manager.Comment("reaching state \'S671\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp593;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp593 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S703\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp593, "return of DeleteFolder, state S703");
                                    this.Manager.Comment("reaching state \'S735\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp594;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp594 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S767\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp594, "return of Release, state S767");
                                    this.Manager.Comment("reaching state \'S799\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp595;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp595 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S831\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp595, "return of Release, state S831");
                                    this.Manager.Comment("reaching state \'S863\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp596;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp596 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S880\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp596, "return of Release, state S880");
                                    this.Manager.Comment("reaching state \'S896\'");
                                    goto label26;
                                }
                                if ((temp602 == 1)) {
                                    this.Manager.Comment("reaching state \'S544\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp597;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,3,3)\'");
                                    temp597 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 3, 3);
                                    this.Manager.Comment("reaching state \'S576\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp597, "return of DeleteFolder, state S576");
                                    this.Manager.Comment("reaching state \'S608\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp598;
                                    this.Manager.Comment("executing step \'call DeleteFolder(1,2,2)\'");
                                    temp598 = this.IMS_OXCFXICSAdapterInstance.DeleteFolder(1, 2, 2);
                                    this.Manager.Comment("reaching state \'S640\'");
                                    this.Manager.Comment("checking step \'return DeleteFolder/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp598, "return of DeleteFolder, state S640");
                                    this.Manager.Comment("reaching state \'S672\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp599;
                                    this.Manager.Comment("executing step \'call Release(1,8)\'");
                                    temp599 = this.IMS_OXCFXICSAdapterInstance.Release(1, 8);
                                    this.Manager.Comment("reaching state \'S704\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp599, "return of Release, state S704");
                                    this.Manager.Comment("reaching state \'S736\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp600;
                                    this.Manager.Comment("executing step \'call Release(1,5)\'");
                                    temp600 = this.IMS_OXCFXICSAdapterInstance.Release(1, 5);
                                    this.Manager.Comment("reaching state \'S768\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp600, "return of Release, state S768");
                                    this.Manager.Comment("reaching state \'S800\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp601;
                                    this.Manager.Comment("executing step \'call Release(1,7)\'");
                                    temp601 = this.IMS_OXCFXICSAdapterInstance.Release(1, 7);
                                    this.Manager.Comment("reaching state \'S832\'");
                                    this.Manager.Comment("checking step \'return Release/Success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp601, "return of Release, state S832");
                                    this.Manager.Comment("reaching state \'S864\'");
                                    goto label26;
                                }
                                throw new InvalidOperationException("never reached");
                            label26:
;
                                goto label27;
                            }
                            throw new InvalidOperationException("never reached");
                        label27:
;
                            goto label28;
                        }
                        throw new InvalidOperationException("never reached");
                    label28:
;
                        goto label29;
                    }
                    throw new InvalidOperationException("never reached");
                label29:
;
                    goto label30;
                }
                throw new InvalidOperationException("never reached");
            label30:
;
                goto label31;
            }
            if ((temp607 == 1)) {
                this.Manager.Comment("reaching state \'S3\'");
                goto label31;
            }
            throw new InvalidOperationException("never reached");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S4");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S7");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S14");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S187");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S501");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S501");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S187");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S502");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S502");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S14");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S188");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S503");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S503");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S188");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S504");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S504");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S7");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S13");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S185");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S497");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S497");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S185");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S498");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S498");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S13");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S186");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S499");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S499");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S186");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S500");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker30(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S500");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker31(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S4");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker32(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S8");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker33(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S15");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker34(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S189");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker35(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S505");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker36(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S505");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker37(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S189");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker38(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S506");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker39(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S506");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker40(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S15");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker41(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S190");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker42(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S507");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker43(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S507");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker44(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S190");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker45(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S508");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker46(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S508");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker47(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S8");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker48(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S16");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker49(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S191");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker50(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S509");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker51(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S509");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker52(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S191");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker53(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S510");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker54(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S510");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker55(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S16");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker56(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S192");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker57(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S511");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker58(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S511");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker59(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S192");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker60(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S512");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckRequirementEnabledChecker61(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S512");
        }
        
        private void MSOXCFXICS_S06_SyncICSContentsUpdateReadStateFail_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        #endregion
    }
}