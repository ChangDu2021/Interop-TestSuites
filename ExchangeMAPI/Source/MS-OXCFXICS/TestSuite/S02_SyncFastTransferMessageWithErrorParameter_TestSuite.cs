//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCFXICS {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.6.100.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S02_SyncFastTransferMessageWithErrorParameter_TestSuite : PtfTestClassBase {
        
        public S02_SyncFastTransferMessageWithErrorParameter_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCFXICS.IMS_OXCFXICSAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCFXICS.IMS_OXCFXICSAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCFXICS.IMS_OXCFXICSAdapter IMS_OXCFXICSAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCFXICSAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.IMS_OXCFXICSAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCFXICS.IMS_OXCFXICSAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCFXICS_S02_SyncFastTransferMessageWithErrorParameter_TestSuite() {
            this.Manager.BeginTest("MSOXCFXICS_S02_SyncFastTransferMessageWithErrorParameter_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCFXICSAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp20 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_SyncFastTransferMessageWithErrorParameter_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCFXICS_S02_SyncFastTransferMessageWithErrorParameter_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_SyncFastTransferMessageWithErrorParameter_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCFXICS_S02_SyncFastTransferMessageWithErrorParameter_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp20 == 0)) {
                this.Manager.Comment("reaching state \'S2\'");
                this.Manager.Comment("executing step \'call Connect(1,PrivateMailboxServer)\'");
                this.IMS_OXCFXICSAdapterInstance.Connect(1, ((Microsoft.Protocols.TestSuites.Common.ConnectionType)(1)));
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("checking step \'return Connect\'");
                this.Manager.Comment("reaching state \'S5\'");
                int temp1;
                int temp2;
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp3;
                this.Manager.Comment("executing step \'call Logon(1,Private,out _,out _)\'");
                temp3 = this.IMS_OXCFXICSAdapterInstance.Logon(1, ((Microsoft.Protocols.TestSuites.Common.LogonFlags)(1)), out temp1, out temp2);
                this.Manager.Comment("reaching state \'S6\'");
                this.Manager.Comment("checking step \'return Logon/[out 1,out 1]:Success\'");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp1, "logonHandleIndex of Logon, state S6");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 1, temp2, "inboxFolderIdIndex of Logon, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp3, "return of Logon, state S6");
                this.Manager.Comment("reaching state \'S7\'");
                int temp4;
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp5;
                this.Manager.Comment("executing step \'call OpenFolder(1,1,1,out _)\'");
                temp5 = this.IMS_OXCFXICSAdapterInstance.OpenFolder(1, 1, 1, out temp4);
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("checking step \'return OpenFolder/[out 2]:Success\'");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp4, "folderHandleIndex of OpenFolder, state S8");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp5, "return of OpenFolder, state S8");
                this.Manager.Comment("reaching state \'S9\'");
                int temp6;
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp7;
                this.Manager.Comment("executing step \'call CreateMessage(1,2,1,False,out _)\'");
                temp7 = this.IMS_OXCFXICSAdapterInstance.CreateMessage(1, 2, 1, false, out temp6);
                this.Manager.Checkpoint("MS-OXCFXICS_R1890001");
                this.Manager.Comment("reaching state \'S10\'");
                this.Manager.Comment("checking step \'return CreateMessage/[out 3]:Success\'");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 3, temp6, "messageHandleIndex of CreateMessage, state S10");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp7, "return of CreateMessage, state S10");
                this.Manager.Comment("reaching state \'S11\'");
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp8;
                this.Manager.Comment("executing step \'call SetProperties(1,3,[\"PidTagBody\",\"PidTagPolicyTag\"])\'");
                temp8 = this.IMS_OXCFXICSAdapterInstance.SetProperties(1, 3, this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "PidTagBody",
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "PidTagPolicyTag",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("checking step \'return SetProperties/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp8, "return of SetProperties, state S12");
                this.Manager.Comment("reaching state \'S13\'");
                int temp9;
                Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp10;
                this.Manager.Comment("executing step \'call SaveChangesMessage(1,3,out _)\'");
                temp10 = this.IMS_OXCFXICSAdapterInstance.SaveChangesMessage(1, 3, out temp9);
                this.Manager.Checkpoint("MS-OXCFXICS_R1910");
                this.Manager.Checkpoint("MS-OXCFXICS_R1906");
                this.Manager.Checkpoint("MS-OXCFXICS_R1898");
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("checking step \'return SaveChangesMessage/[out 2]:Success\'");
                TestManagerHelpers.AssertAreEqual<int>(this.Manager, 2, temp9, "messageIdIndex of SaveChangesMessage, state S14");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp10, "return of SaveChangesMessage, state S14");
                this.Manager.Comment("reaching state \'S15\'");
                bool temp11;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(3470,out _)\'");
                this.IMS_OXCFXICSAdapterInstance.CheckRequirementEnabled(3470, out temp11);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp11);
                this.Manager.Comment("reaching state \'S16\'");
                int temp19 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_SyncFastTransferMessageWithErrorParameter_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S02_SyncFastTransferMessageWithErrorParameter_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S02_SyncFastTransferMessageWithErrorParameter_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCFXICS_S02_SyncFastTransferMessageWithErrorParameter_TestSuiteCheckRequirementEnabledChecker1)));
                if ((temp19 == 0)) {
                    this.Manager.Comment("reaching state \'S17\'");
                    goto label0;
                }
                if ((temp19 == 1)) {
                    this.Manager.Comment("reaching state \'S18\'");
                    int temp12;
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp13;
                    this.Manager.Comment("executing step \'call FastTransferSourceCopyProperties(1,3,MessageHandle,False,Non" +
                            "e,Invalid,[\"PidTagBody\",\"PidTagPolicyTag\"],out _)\'");
                    temp13 = this.IMS_OXCFXICSAdapterInstance.FastTransferSourceCopyProperties(1, 3, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.InputHandleType)(0)), false, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.CopyPropertiesCopyFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCFXICS.SendOptionAlls.Invalid, this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "PidTagBody",
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "PidTagPolicyTag",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}), out temp12);
                    this.Manager.Comment("reaching state \'S19\'");
                    this.Manager.Comment("checking step \'return FastTransferSourceCopyProperties/[out -1]:InvalidParameter\'" +
                            "");
                    TestManagerHelpers.AssertAreEqual<int>(this.Manager, -1, temp12, "copyPropertiesHandleIndex of FastTransferSourceCopyProperties, state S19");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult.InvalidParameter, temp13, "return of FastTransferSourceCopyProperties, state S19");
                    this.Manager.Comment("reaching state \'S20\'");
                    int temp14;
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream temp15;
                    bool temp16;
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp17;
                    this.Manager.Comment("executing step \'call FastTransferSourceGetBuffer(1,-1,Normal,out _,out _,out _)\'");
                    temp17 = this.IMS_OXCFXICSAdapterInstance.FastTransferSourceGetBuffer(1, -1, Microsoft.Protocols.TestSuites.MS_OXCFXICS.BufferSize.Normal, out temp14, out temp15, out temp16);
                    this.Manager.Comment("reaching state \'S21\'");
                    this.Manager.Comment("checking step \'return FastTransferSourceGetBuffer/[out -1,out AbstractFastTransfe" +
                            "rStream(StreamType=contentsSync,AbstractHierarchySync=AbstractHierarchySync(Fold" +
                            "erchangeInfo=AbstractFolderChange(IsPidTagFolderIdExist=False,IsPidTagParentFold" +
                            "erIdExist=False,IsPidTagSourceKeyValueZero=False,IsPidTagParentSourceKeyValueZer" +
                            "o=False),FolderCount=0,FinalICSState=AbstractState(AbstractICSStateIndex=0,IdSet" +
                            "Given=null,IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIPropertyCha" +
                            "ngeNumber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsParentFolderBeforeCh" +
                            "ild=False,AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted" +
                            "=null,IsPidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False))," +
                            "AbstractContentsSync=AbstractContentsSync(IsprogessTotalPresent=False,MessageInf" +
                            "o=null,AbstractDeletion=AbstractDeletion(IsDeletionPresent=False,IdSetDeleted=nu" +
                            "ll,IsPidTagIdsetNoLongerInScopeExist=False,IsPidTagIdsetExpiredExist=False),IsRe" +
                            "adStateChangesExist=False,FinalICSState=AbstractState(AbstractICSStateIndex=0,Id" +
                            "SetGiven=null,IsNewCnsetReadPropertyChangeNumber=False,IsNewCnsetSeenFAIProperty" +
                            "ChangeNumber=False,IsNewCnsetSeenPropertyChangeNumber=False),IsSortByMessageDeli" +
                            "veryTime=False,IsSortByLastModificationTime=False),AbstractFolderContent=Abstrac" +
                            "tFolderContent(IsPidTagEcWarningOut=False,IsNoPermissionObjNotOut=False,IsPidTag" +
                            "NewFXFolderOut=False,IsFolderContentNotOut=False,IsFolderPropertiesNotOut=False," +
                            "IsSubFolderPrecededByPidTagFXDelProp=False,AbsFolderMessage=AbstractFolderMessag" +
                            "e(IsFolderMessagesPrecededByPidTagFXDelProp=False,MessageList=AbstractMessageLis" +
                            "t(IsPidTagEcWarningOut=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMes" +
                            "sageContent(IsNoPermissionMessageNotOut=False,AbsMessageChildren=AbstractMessage" +
                            "Children(AttachmentPrecededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDe" +
                            "lProp=False),StringPropertiesInUnicode=False,StringPropertiesInUnicodeCodePage=F" +
                            "alse,StringPropertiesInOtherCodePage=False,IsRTFFormat=False))))),AbstractTopFol" +
                            "der=AbstractTopFolder(AbsFolderContent=AbstractFolderContent(IsPidTagEcWarningOu" +
                            "t=False,IsNoPermissionObjNotOut=False,IsPidTagNewFXFolderOut=False,IsFolderConte" +
                            "ntNotOut=False,IsFolderPropertiesNotOut=False,IsSubFolderPrecededByPidTagFXDelPr" +
                            "op=False,AbsFolderMessage=AbstractFolderMessage(IsFolderMessagesPrecededByPidTag" +
                            "FXDelProp=False,MessageList=AbstractMessageList(IsPidTagEcWarningOut=False,AbsMe" +
                            "ssage=AbsMessage(AbsMessageContent=AbstractMessageContent(IsNoPermissionMessageN" +
                            "otOut=False,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTa" +
                            "gFXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUni" +
                            "code=False,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePa" +
                            "ge=False,IsRTFFormat=False))))),SubFolderInScope=False),AbstractState=AbstractSt" +
                            "ate(AbstractICSStateIndex=0,IdSetGiven=null,IsNewCnsetReadPropertyChangeNumber=F" +
                            "alse,IsNewCnsetSeenFAIPropertyChangeNumber=False,IsNewCnsetSeenPropertyChangeNum" +
                            "ber=False),AbstractMessageContent=AbstractMessageContent(IsNoPermissionMessageNo" +
                            "tOut=False,AbsMessageChildren=AbstractMessageChildren(AttachmentPrecededByPidTag" +
                            "FXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),StringPropertiesInUnic" +
                            "ode=False,StringPropertiesInUnicodeCodePage=False,StringPropertiesInOtherCodePag" +
                            "e=False,IsRTFFormat=False),AbstractMessageList=AbstractMessageList(IsPidTagEcWar" +
                            "ningOut=False,AbsMessage=AbsMessage(AbsMessageContent=AbstractMessageContent(IsN" +
                            "oPermissionMessageNotOut=False,AbsMessageChildren=AbstractMessageChildren(Attach" +
                            "mentPrecededByPidTagFXDelProp=False,RecipientPrecededByPidTagFXDelProp=False),St" +
                            "ringPropertiesInUnicode=False,StringPropertiesInUnicodeCodePage=False,StringProp" +
                            "ertiesInOtherCodePage=False,IsRTFFormat=False))),IsSameReadstateChangeNumber=Fal" +
                            "se),out False]:InvalidParameter\'");
                    TestManagerHelpers.AssertAreEqual<int>(this.Manager, -1, temp14, "transferBufferIndex of FastTransferSourceGetBuffer, state S21");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFastTransferStream>(new string[] {
                                    "StreamType",
                                    "AbstractHierarchySync",
                                    "AbstractContentsSync",
                                    "AbstractFolderContent",
                                    "AbstractTopFolder",
                                    "AbstractState",
                                    "AbstractMessageContent",
                                    "AbstractMessageList",
                                    "IsSameReadstateChangeNumber"}, new object[] {
                                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.FastTransferStreamType.contentsSync,
                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractHierarchySync>(new string[] {
                                                "FolderchangeInfo",
                                                "FolderCount",
                                                "FinalICSState",
                                                "IsParentFolderBeforeChild",
                                                "AbstractDeletion"}, new object[] {
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderChange>(new string[] {
                                                            "IsPidTagFolderIdExist",
                                                            "IsPidTagParentFolderIdExist",
                                                            "IsPidTagSourceKeyValueZero",
                                                            "IsPidTagParentSourceKeyValueZero"}, new object[] {
                                                            false,
                                                            false,
                                                            false,
                                                            false}),
                                                0,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                            "AbstractICSStateIndex",
                                                            "IdSetGiven",
                                                            "IsNewCnsetReadPropertyChangeNumber",
                                                            "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                            "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                            0,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false,
                                                            false}),
                                                false,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                            "IsDeletionPresent",
                                                            "IdSetDeleted",
                                                            "IsPidTagIdsetNoLongerInScopeExist",
                                                            "IsPidTagIdsetExpiredExist"}, new object[] {
                                                            false,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false})}),
                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractContentsSync>(new string[] {
                                                "IsprogessTotalPresent",
                                                "MessageInfo",
                                                "AbstractDeletion",
                                                "IsReadStateChangesExist",
                                                "FinalICSState",
                                                "IsSortByMessageDeliveryTime",
                                                "IsSortByLastModificationTime"}, new object[] {
                                                false,
                                                ((Microsoft.Modeling.Set<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChangeInfo>)(null)),
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractDeletion>(new string[] {
                                                            "IsDeletionPresent",
                                                            "IdSetDeleted",
                                                            "IsPidTagIdsetNoLongerInScopeExist",
                                                            "IsPidTagIdsetExpiredExist"}, new object[] {
                                                            false,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false}),
                                                false,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                            "AbstractICSStateIndex",
                                                            "IdSetGiven",
                                                            "IsNewCnsetReadPropertyChangeNumber",
                                                            "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                            "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                            0,
                                                            ((Microsoft.Modeling.Set<int>)(null)),
                                                            false,
                                                            false,
                                                            false}),
                                                false,
                                                false}),
                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                "IsPidTagEcWarningOut",
                                                "IsNoPermissionObjNotOut",
                                                "IsPidTagNewFXFolderOut",
                                                "IsFolderContentNotOut",
                                                "IsFolderPropertiesNotOut",
                                                "IsSubFolderPrecededByPidTagFXDelProp",
                                                "AbsFolderMessage"}, new object[] {
                                                false,
                                                false,
                                                false,
                                                false,
                                                false,
                                                false,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                            "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                            "MessageList"}, new object[] {
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                        "IsPidTagEcWarningOut",
                                                                        "AbsMessage"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                    "AbsMessageContent"}, new object[] {
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                "IsNoPermissionMessageNotOut",
                                                                                                "AbsMessageChildren",
                                                                                                "StringPropertiesInUnicode",
                                                                                                "StringPropertiesInUnicodeCodePage",
                                                                                                "StringPropertiesInOtherCodePage",
                                                                                                "IsRTFFormat"}, new object[] {
                                                                                                false,
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                            "AttachmentPrecededByPidTagFXDelProp",
                                                                                                            "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                            false,
                                                                                                            false}),
                                                                                                false,
                                                                                                false,
                                                                                                false,
                                                                                                false})})})})}),
                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractTopFolder>(new string[] {
                                                "AbsFolderContent",
                                                "SubFolderInScope"}, new object[] {
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderContent>(new string[] {
                                                            "IsPidTagEcWarningOut",
                                                            "IsNoPermissionObjNotOut",
                                                            "IsPidTagNewFXFolderOut",
                                                            "IsFolderContentNotOut",
                                                            "IsFolderPropertiesNotOut",
                                                            "IsSubFolderPrecededByPidTagFXDelProp",
                                                            "AbsFolderMessage"}, new object[] {
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            false,
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractFolderMessage>(new string[] {
                                                                        "IsFolderMessagesPrecededByPidTagFXDelProp",
                                                                        "MessageList"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                                                    "IsPidTagEcWarningOut",
                                                                                    "AbsMessage"}, new object[] {
                                                                                    false,
                                                                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                                                                "AbsMessageContent"}, new object[] {
                                                                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                                                            "IsNoPermissionMessageNotOut",
                                                                                                            "AbsMessageChildren",
                                                                                                            "StringPropertiesInUnicode",
                                                                                                            "StringPropertiesInUnicodeCodePage",
                                                                                                            "StringPropertiesInOtherCodePage",
                                                                                                            "IsRTFFormat"}, new object[] {
                                                                                                            false,
                                                                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                                                        "AttachmentPrecededByPidTagFXDelProp",
                                                                                                                        "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                                                        false,
                                                                                                                        false}),
                                                                                                            false,
                                                                                                            false,
                                                                                                            false,
                                                                                                            false})})})})}),
                                                false}),
                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractState>(new string[] {
                                                "AbstractICSStateIndex",
                                                "IdSetGiven",
                                                "IsNewCnsetReadPropertyChangeNumber",
                                                "IsNewCnsetSeenFAIPropertyChangeNumber",
                                                "IsNewCnsetSeenPropertyChangeNumber"}, new object[] {
                                                0,
                                                ((Microsoft.Modeling.Set<int>)(null)),
                                                false,
                                                false,
                                                false}),
                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                "IsNoPermissionMessageNotOut",
                                                "AbsMessageChildren",
                                                "StringPropertiesInUnicode",
                                                "StringPropertiesInUnicodeCodePage",
                                                "StringPropertiesInOtherCodePage",
                                                "IsRTFFormat"}, new object[] {
                                                false,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                            "AttachmentPrecededByPidTagFXDelProp",
                                                            "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                            false,
                                                            false}),
                                                false,
                                                false,
                                                false,
                                                false}),
                                    this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageList>(new string[] {
                                                "IsPidTagEcWarningOut",
                                                "AbsMessage"}, new object[] {
                                                false,
                                                this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbsMessage>(new string[] {
                                                            "AbsMessageContent"}, new object[] {
                                                            this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageContent>(new string[] {
                                                                        "IsNoPermissionMessageNotOut",
                                                                        "AbsMessageChildren",
                                                                        "StringPropertiesInUnicode",
                                                                        "StringPropertiesInUnicodeCodePage",
                                                                        "StringPropertiesInOtherCodePage",
                                                                        "IsRTFFormat"}, new object[] {
                                                                        false,
                                                                        this.Make<Microsoft.Protocols.TestSuites.MS_OXCFXICS.AbstractMessageChildren>(new string[] {
                                                                                    "AttachmentPrecededByPidTagFXDelProp",
                                                                                    "RecipientPrecededByPidTagFXDelProp"}, new object[] {
                                                                                    false,
                                                                                    false}),
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        false})})}),
                                    false}), temp15, "abstractFastTransferStream of FastTransferSourceGetBuffer, state S21");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp16, "transferDataSmallOrEqualToBufferSize of FastTransferSourceGetBuffer, state S21");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult.InvalidParameter, temp17, "return of FastTransferSourceGetBuffer, state S21");
                    this.Manager.Comment("reaching state \'S22\'");
                    Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult temp18;
                    this.Manager.Comment("executing step \'call Release(1,-1)\'");
                    temp18 = this.IMS_OXCFXICSAdapterInstance.Release(1, -1);
                    this.Manager.Comment("reaching state \'S23\'");
                    this.Manager.Comment("checking step \'return Release/Success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCFXICS.RopResult)(0)), temp18, "return of Release, state S23");
                    this.Manager.Comment("reaching state \'S24\'");
                    goto label0;
                }
                throw new InvalidOperationException("never reached");
            label0:
;
                goto label1;
            }
            if ((temp20 == 1)) {
                this.Manager.Comment("reaching state \'S3\'");
                goto label1;
            }
            throw new InvalidOperationException("never reached");
        label1:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCFXICS_S02_SyncFastTransferMessageWithErrorParameter_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCFXICS_S02_SyncFastTransferMessageWithErrorParameter_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S16");
        }
        
        private void MSOXCFXICS_S02_SyncFastTransferMessageWithErrorParameter_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S16");
        }
        
        private void MSOXCFXICS_S02_SyncFastTransferMessageWithErrorParameter_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        #endregion
    }
}