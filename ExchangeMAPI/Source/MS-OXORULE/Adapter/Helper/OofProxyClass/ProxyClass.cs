//-----------------------------------------------------------------------
// Copyright (c) 2014 Microsoft Corporation. All rights reserved.
// Use of this sample source code is subject to the terms of the Microsoft license 
// agreement under which you licensed this sample source code and is provided AS-IS.
// If you did not accept the terms of the license agreement, you are not authorized 
// to use this sample source code. For the terms of the license, please see the 
// license agreement between you and Microsoft.
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3038
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXORULE
{

    // 
    // This source code was auto-generated by wsdl, Version=2.0.50727.3038.
    // 

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "ExchangeServiceBinding", Namespace = "http://schemas.microsoft.com/exchange/services/2006/messages")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BaseRequestType))]
    public partial class ExchangeServiceBinding : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private ServerVersionInfo serverVersionInfoValueField;

        private System.Threading.SendOrPostCallback GetUserOofSettingsOperationCompleted;

        private System.Threading.SendOrPostCallback SetUserOofSettingsOperationCompleted;

        /// <remarks/>
        public ExchangeServiceBinding()
        {
        }

        /// <remarks/>
        public ServerVersionInfo ServerVersionInfoValue
        {
            get
            {
                return this.serverVersionInfoValueField;
            }
            set
            {
                this.serverVersionInfoValueField = value;
            }
        }

        /// <remarks/>
        public event GetUserOofSettingsCompletedEventHandler GetUserOofSettingsCompleted;

        /// <remarks/>
        public event SetUserOofSettingsCompletedEventHandler SetUserOofSettingsCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerVersionInfoValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/exchange/services/2006/messages/GetUserOofSettings", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetUserOofSettingsResponse", Namespace = "http://schemas.microsoft.com/exchange/services/2006/messages")]
        public GetUserOofSettingsResponse GetUserOofSettings([System.Xml.Serialization.XmlElementAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/messages")] GetUserOofSettingsRequest GetUserOofSettingsRequest)
        {
            object[] results = this.Invoke("GetUserOofSettings", new object[] {
                    GetUserOofSettingsRequest});
            return ((GetUserOofSettingsResponse)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetUserOofSettings(GetUserOofSettingsRequest GetUserOofSettingsRequest, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetUserOofSettings", new object[] {
                    GetUserOofSettingsRequest}, callback, asyncState);
        }

        /// <remarks/>
        public GetUserOofSettingsResponse EndGetUserOofSettings(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetUserOofSettingsResponse)(results[0]));
        }

        /// <remarks/>
        public void GetUserOofSettingsAsync(GetUserOofSettingsRequest GetUserOofSettingsRequest)
        {
            this.GetUserOofSettingsAsync(GetUserOofSettingsRequest, null);
        }

        /// <remarks/>
        public void GetUserOofSettingsAsync(GetUserOofSettingsRequest GetUserOofSettingsRequest, object userState)
        {
            if ((this.GetUserOofSettingsOperationCompleted == null))
            {
                this.GetUserOofSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserOofSettingsOperationCompleted);
            }
            this.InvokeAsync("GetUserOofSettings", new object[] {
                    GetUserOofSettingsRequest}, this.GetUserOofSettingsOperationCompleted, userState);
        }

        private void OnGetUserOofSettingsOperationCompleted(object arg)
        {
            if ((this.GetUserOofSettingsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserOofSettingsCompleted(this, new GetUserOofSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerVersionInfoValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/exchange/services/2006/messages/SetUserOofSettings", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("SetUserOofSettingsResponse", Namespace = "http://schemas.microsoft.com/exchange/services/2006/messages")]
        public SetUserOofSettingsResponse SetUserOofSettings([System.Xml.Serialization.XmlElementAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/messages")] SetUserOofSettingsRequest SetUserOofSettingsRequest)
        {
            object[] results = this.Invoke("SetUserOofSettings", new object[] {
                    SetUserOofSettingsRequest});
            return ((SetUserOofSettingsResponse)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetUserOofSettings(SetUserOofSettingsRequest SetUserOofSettingsRequest, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetUserOofSettings", new object[] {
                    SetUserOofSettingsRequest}, callback, asyncState);
        }

        /// <remarks/>
        public SetUserOofSettingsResponse EndSetUserOofSettings(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SetUserOofSettingsResponse)(results[0]));
        }

        /// <remarks/>
        public void SetUserOofSettingsAsync(SetUserOofSettingsRequest SetUserOofSettingsRequest)
        {
            this.SetUserOofSettingsAsync(SetUserOofSettingsRequest, null);
        }

        /// <remarks/>
        public void SetUserOofSettingsAsync(SetUserOofSettingsRequest SetUserOofSettingsRequest, object userState)
        {
            if ((this.SetUserOofSettingsOperationCompleted == null))
            {
                this.SetUserOofSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserOofSettingsOperationCompleted);
            }
            this.InvokeAsync("SetUserOofSettings", new object[] {
                    SetUserOofSettingsRequest}, this.SetUserOofSettingsOperationCompleted, userState);
        }

        private void OnSetUserOofSettingsOperationCompleted(object arg)
        {
            if ((this.SetUserOofSettingsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserOofSettingsCompleted(this, new SetUserOofSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/exchange/services/2006/types")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/types", IsNullable = false)]
    public partial class ServerVersionInfo : System.Web.Services.Protocols.SoapHeader
    {

        private int majorVersionField;

        private bool majorVersionFieldSpecified;

        private int minorVersionField;

        private bool minorVersionFieldSpecified;

        private int majorBuildNumberField;

        private bool majorBuildNumberFieldSpecified;

        private int minorBuildNumberField;

        private bool minorBuildNumberFieldSpecified;

        private string versionField;

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MajorVersion
        {
            get
            {
                return this.majorVersionField;
            }
            set
            {
                this.majorVersionField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MajorVersionSpecified
        {
            get
            {
                return this.majorVersionFieldSpecified;
            }
            set
            {
                this.majorVersionFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MinorVersion
        {
            get
            {
                return this.minorVersionField;
            }
            set
            {
                this.minorVersionField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MinorVersionSpecified
        {
            get
            {
                return this.minorVersionFieldSpecified;
            }
            set
            {
                this.minorVersionFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MajorBuildNumber
        {
            get
            {
                return this.majorBuildNumberField;
            }
            set
            {
                this.majorBuildNumberField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MajorBuildNumberSpecified
        {
            get
            {
                return this.majorBuildNumberFieldSpecified;
            }
            set
            {
                this.majorBuildNumberFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MinorBuildNumber
        {
            get
            {
                return this.minorBuildNumberField;
            }
            set
            {
                this.minorBuildNumberField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MinorBuildNumberSpecified
        {
            get
            {
                return this.minorBuildNumberFieldSpecified;
            }
            set
            {
                this.minorBuildNumberFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Version
        {
            get
            {
                return this.versionField;
            }
            set
            {
                this.versionField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/messages")]
    public partial class SetUserOofSettingsResponse
    {

        private ResponseMessageType responseMessageField;

        /// <remarks/>
        public ResponseMessageType ResponseMessage
        {
            get
            {
                return this.responseMessageField;
            }
            set
            {
                this.responseMessageField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/messages")]
    public partial class ResponseMessageType
    {

        private string messageTextField;

        private ResponseCodeType responseCodeField;

        private bool responseCodeFieldSpecified;

        private int descriptiveLinkKeyField;

        private bool descriptiveLinkKeyFieldSpecified;

        private ResponseMessageTypeMessageXml messageXmlField;

        private ResponseClassType responseClassField;

        /// <remarks/>
        public string MessageText
        {
            get
            {
                return this.messageTextField;
            }
            set
            {
                this.messageTextField = value;
            }
        }

        /// <remarks/>
        public ResponseCodeType ResponseCode
        {
            get
            {
                return this.responseCodeField;
            }
            set
            {
                this.responseCodeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ResponseCodeSpecified
        {
            get
            {
                return this.responseCodeFieldSpecified;
            }
            set
            {
                this.responseCodeFieldSpecified = value;
            }
        }

        /// <remarks/>
        public int DescriptiveLinkKey
        {
            get
            {
                return this.descriptiveLinkKeyField;
            }
            set
            {
                this.descriptiveLinkKeyField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DescriptiveLinkKeySpecified
        {
            get
            {
                return this.descriptiveLinkKeyFieldSpecified;
            }
            set
            {
                this.descriptiveLinkKeyFieldSpecified = value;
            }
        }

        /// <remarks/>
        public ResponseMessageTypeMessageXml MessageXml
        {
            get
            {
                return this.messageXmlField;
            }
            set
            {
                this.messageXmlField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ResponseClassType ResponseClass
        {
            get
            {
                return this.responseClassField;
            }
            set
            {
                this.responseClassField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/messages")]
    public enum ResponseCodeType
    {

        /// <remarks/>
        NoError,

        /// <remarks/>
        ErrorAccessDenied,

        /// <remarks/>
        ErrorAccessModeSpecified,

        /// <remarks/>
        ErrorAccountDisabled,

        /// <remarks/>
        ErrorAddDelegatesFailed,

        /// <remarks/>
        ErrorAddressSpaceNotFound,

        /// <remarks/>
        ErrorADOperation,

        /// <remarks/>
        ErrorADSessionFilter,

        /// <remarks/>
        ErrorADUnavailable,

        /// <remarks/>
        ErrorAutoDiscoverFailed,

        /// <remarks/>
        ErrorAffectedTaskOccurrencesRequired,

        /// <remarks/>
        ErrorAttachmentSizeLimitExceeded,

        /// <remarks/>
        ErrorAvailabilityConfigNotFound,

        /// <remarks/>
        ErrorBatchProcessingStopped,

        /// <remarks/>
        ErrorCalendarCannotMoveOrCopyOccurrence,

        /// <remarks/>
        ErrorCalendarCannotUpdateDeletedItem,

        /// <remarks/>
        ErrorCalendarCannotUseIdForOccurrenceId,

        /// <remarks/>
        ErrorCalendarCannotUseIdForRecurringMasterId,

        /// <remarks/>
        ErrorCalendarDurationIsTooLong,

        /// <remarks/>
        ErrorCalendarEndDateIsEarlierThanStartDate,

        /// <remarks/>
        ErrorCalendarFolderIsInvalidForCalendarView,

        /// <remarks/>
        ErrorCalendarInvalidAttributeValue,

        /// <remarks/>
        ErrorCalendarInvalidDayForTimeChangePattern,

        /// <remarks/>
        ErrorCalendarInvalidDayForWeeklyRecurrence,

        /// <remarks/>
        ErrorCalendarInvalidPropertyState,

        /// <remarks/>
        ErrorCalendarInvalidPropertyValue,

        /// <remarks/>
        ErrorCalendarInvalidRecurrence,

        /// <remarks/>
        ErrorCalendarInvalidTimeZone,

        /// <remarks/>
        ErrorCalendarIsCancelledForAccept,

        /// <remarks/>
        ErrorCalendarIsCancelledForDecline,

        /// <remarks/>
        ErrorCalendarIsCancelledForRemove,

        /// <remarks/>
        ErrorCalendarIsCancelledForTentative,

        /// <remarks/>
        ErrorCalendarIsDelegatedForAccept,

        /// <remarks/>
        ErrorCalendarIsDelegatedForDecline,

        /// <remarks/>
        ErrorCalendarIsDelegatedForRemove,

        /// <remarks/>
        ErrorCalendarIsDelegatedForTentative,

        /// <remarks/>
        ErrorCalendarIsNotOrganizer,

        /// <remarks/>
        ErrorCalendarIsOrganizerForAccept,

        /// <remarks/>
        ErrorCalendarIsOrganizerForDecline,

        /// <remarks/>
        ErrorCalendarIsOrganizerForRemove,

        /// <remarks/>
        ErrorCalendarIsOrganizerForTentative,

        /// <remarks/>
        ErrorCalendarOccurrenceIndexIsOutOfRecurrenceRange,

        /// <remarks/>
        ErrorCalendarOccurrenceIsDeletedFromRecurrence,

        /// <remarks/>
        ErrorCalendarOutOfRange,

        /// <remarks/>
        ErrorCalendarMeetingRequestIsOutOfDate,

        /// <remarks/>
        ErrorCalendarViewRangeTooBig,

        /// <remarks/>
        ErrorCallerIsInvalidADAccount,

        /// <remarks/>
        ErrorCannotCreateCalendarItemInNonCalendarFolder,

        /// <remarks/>
        ErrorCannotCreateContactInNonContactFolder,

        /// <remarks/>
        ErrorCannotCreatePostItemInNonMailFolder,

        /// <remarks/>
        ErrorCannotCreateTaskInNonTaskFolder,

        /// <remarks/>
        ErrorCannotDeleteObject,

        /// <remarks/>
        ErrorCannotOpenFileAttachment,

        /// <remarks/>
        ErrorCannotDeleteTaskOccurrence,

        /// <remarks/>
        ErrorCannotEmptyFolder,

        /// <remarks/>
        ErrorCannotSetCalendarPermissionOnNonCalendarFolder,

        /// <remarks/>
        ErrorCannotSetNonCalendarPermissionOnCalendarFolder,

        /// <remarks/>
        ErrorCannotSetPermissionUnknownEntries,

        /// <remarks/>
        ErrorCannotUseFolderIdForItemId,

        /// <remarks/>
        ErrorCannotUseItemIdForFolderId,

        /// <remarks/>
        ErrorChangeKeyRequired,

        /// <remarks/>
        ErrorChangeKeyRequiredForWriteOperations,

        /// <remarks/>
        ErrorClientDisconnected,

        /// <remarks/>
        ErrorConnectionFailed,

        /// <remarks/>
        ErrorContainsFilterWrongType,

        /// <remarks/>
        ErrorContentConversionFailed,

        /// <remarks/>
        ErrorCorruptData,

        /// <remarks/>
        ErrorCreateItemAccessDenied,

        /// <remarks/>
        ErrorCreateManagedFolderPartialCompletion,

        /// <remarks/>
        ErrorCreateSubfolderAccessDenied,

        /// <remarks/>
        ErrorCrossMailboxMoveCopy,

        /// <remarks/>
        ErrorCrossSiteRequest,

        /// <remarks/>
        ErrorDataSizeLimitExceeded,

        /// <remarks/>
        ErrorDataSourceOperation,

        /// <remarks/>
        ErrorDelegateAlreadyExists,

        /// <remarks/>
        ErrorDelegateCannotAddOwner,

        /// <remarks/>
        ErrorDelegateMissingConfiguration,

        /// <remarks/>
        ErrorDelegateNoUser,

        /// <remarks/>
        ErrorDelegateValidationFailed,

        /// <remarks/>
        ErrorDeleteDistinguishedFolder,

        /// <remarks/>
        ErrorDeleteItemsFailed,

        /// <remarks/>
        ErrorDistinguishedUserNotSupported,

        /// <remarks/>
        ErrorDistributionListMemberNotExist,

        /// <remarks/>
        ErrorDuplicateInputFolderNames,

        /// <remarks/>
        ErrorDuplicateUserIdsSpecified,

        /// <remarks/>
        ErrorEmailAddressMismatch,

        /// <remarks/>
        ErrorEventNotFound,

        /// <remarks/>
        ErrorExceededConnectionCount,

        /// <remarks/>
        ErrorExceededSubscriptionCount,

        /// <remarks/>
        ErrorExceededFindCountLimit,

        /// <remarks/>
        ErrorExpiredSubscription,

        /// <remarks/>
        ErrorFolderCorrupt,

        /// <remarks/>
        ErrorFolderNotFound,

        /// <remarks/>
        ErrorFolderPropertyRequestFailed,

        /// <remarks/>
        ErrorFolderSave,

        /// <remarks/>
        ErrorFolderSaveFailed,

        /// <remarks/>
        ErrorFolderSavePropertyError,

        /// <remarks/>
        ErrorFolderExists,

        /// <remarks/>
        ErrorFreeBusyGenerationFailed,

        /// <remarks/>
        ErrorGetServerSecurityDescriptorFailed,

        /// <remarks/>
        ErrorImpersonateUserDenied,

        /// <remarks/>
        ErrorImpersonationDenied,

        /// <remarks/>
        ErrorImpersonationFailed,

        /// <remarks/>
        ErrorIncorrectSchemaVersion,

        /// <remarks/>
        ErrorIncorrectUpdatePropertyCount,

        /// <remarks/>
        ErrorIndividualMailboxLimitReached,

        /// <remarks/>
        ErrorInsufficientResources,

        /// <remarks/>
        ErrorInternalServerError,

        /// <remarks/>
        ErrorInternalServerTransientError,

        /// <remarks/>
        ErrorInvalidAccessLevel,

        /// <remarks/>
        ErrorInvalidArgument,

        /// <remarks/>
        ErrorInvalidAttachmentId,

        /// <remarks/>
        ErrorInvalidAttachmentSubfilter,

        /// <remarks/>
        ErrorInvalidAttachmentSubfilterTextFilter,

        /// <remarks/>
        ErrorInvalidAuthorizationContext,

        /// <remarks/>
        ErrorInvalidChangeKey,

        /// <remarks/>
        ErrorInvalidClientSecurityContext,

        /// <remarks/>
        ErrorInvalidCompleteDate,

        /// <remarks/>
        ErrorInvalidContactEmailAddress,

        /// <remarks/>
        ErrorInvalidContactEmailIndex,

        /// <remarks/>
        ErrorInvalidCrossForestCredentials,

        /// <remarks/>
        ErrorInvalidDelegatePermission,

        /// <remarks/>
        ErrorInvalidDelegateUserId,

        /// <remarks/>
        ErrorInvalidExcludesRestriction,

        /// <remarks/>
        ErrorInvalidExpressionTypeForSubFilter,

        /// <remarks/>
        ErrorInvalidExtendedProperty,

        /// <remarks/>
        ErrorInvalidExtendedPropertyValue,

        /// <remarks/>
        ErrorInvalidFolderId,

        /// <remarks/>
        ErrorInvalidFolderTypeForOperation,

        /// <remarks/>
        ErrorInvalidFractionalPagingParameters,

        /// <remarks/>
        ErrorInvalidFreeBusyViewType,

        /// <remarks/>
        ErrorInvalidId,

        /// <remarks/>
        ErrorInvalidIdEmpty,

        /// <remarks/>
        ErrorInvalidIdMalformed,

        /// <remarks/>
        ErrorInvalidIdMalformedEwsLegacyIdFormat,

        /// <remarks/>
        ErrorInvalidIdMonikerTooLong,

        /// <remarks/>
        ErrorInvalidIdNotAnItemAttachmentId,

        /// <remarks/>
        ErrorInvalidIdReturnedByResolveNames,

        /// <remarks/>
        ErrorInvalidIdStoreObjectIdTooLong,

        /// <remarks/>
        ErrorInvalidIdTooManyAttachmentLevels,

        /// <remarks/>
        ErrorInvalidIdXml,

        /// <remarks/>
        ErrorInvalidIndexedPagingParameters,

        /// <remarks/>
        ErrorInvalidInternetHeaderChildNodes,

        /// <remarks/>
        ErrorInvalidItemForOperationCreateItemAttachment,

        /// <remarks/>
        ErrorInvalidItemForOperationCreateItem,

        /// <remarks/>
        ErrorInvalidItemForOperationAcceptItem,

        /// <remarks/>
        ErrorInvalidItemForOperationDeclineItem,

        /// <remarks/>
        ErrorInvalidItemForOperationCancelItem,

        /// <remarks/>
        ErrorInvalidItemForOperationExpandDL,

        /// <remarks/>
        ErrorInvalidItemForOperationRemoveItem,

        /// <remarks/>
        ErrorInvalidItemForOperationSendItem,

        /// <remarks/>
        ErrorInvalidItemForOperationTentative,

        /// <remarks/>
        ErrorInvalidLogonType,

        /// <remarks/>
        ErrorInvalidMailbox,

        /// <remarks/>
        ErrorInvalidManagedFolderProperty,

        /// <remarks/>
        ErrorInvalidManagedFolderQuota,

        /// <remarks/>
        ErrorInvalidManagedFolderSize,

        /// <remarks/>
        ErrorInvalidMergedFreeBusyInterval,

        /// <remarks/>
        ErrorInvalidNameForNameResolution,

        /// <remarks/>
        ErrorInvalidOperation,

        /// <remarks/>
        ErrorInvalidNetworkServiceContext,

        /// <remarks/>
        ErrorInvalidOofParameter,

        /// <remarks/>
        ErrorInvalidPagingMaxRows,

        /// <remarks/>
        ErrorInvalidParentFolder,

        /// <remarks/>
        ErrorInvalidPercentCompleteValue,

        /// <remarks/>
        ErrorInvalidPermissionSettings,

        /// <remarks/>
        ErrorInvalidPhoneCallId,

        /// <remarks/>
        ErrorInvalidPhoneNumber,

        /// <remarks/>
        ErrorInvalidUserInfo,

        /// <remarks/>
        ErrorInvalidPropertyAppend,

        /// <remarks/>
        ErrorInvalidPropertyDelete,

        /// <remarks/>
        ErrorInvalidPropertyForExists,

        /// <remarks/>
        ErrorInvalidPropertyForOperation,

        /// <remarks/>
        ErrorInvalidPropertyRequest,

        /// <remarks/>
        ErrorInvalidPropertySet,

        /// <remarks/>
        ErrorInvalidPropertyUpdateSentMessage,

        /// <remarks/>
        ErrorInvalidProxySecurityContext,

        /// <remarks/>
        ErrorInvalidPullSubscriptionId,

        /// <remarks/>
        ErrorInvalidPushSubscriptionUrl,

        /// <remarks/>
        ErrorInvalidRecipients,

        /// <remarks/>
        ErrorInvalidRecipientSubfilter,

        /// <remarks/>
        ErrorInvalidRecipientSubfilterComparison,

        /// <remarks/>
        ErrorInvalidRecipientSubfilterOrder,

        /// <remarks/>
        ErrorInvalidRecipientSubfilterTextFilter,

        /// <remarks/>
        ErrorInvalidReferenceItem,

        /// <remarks/>
        ErrorInvalidRequest,

        /// <remarks/>
        ErrorInvalidRestriction,

        /// <remarks/>
        ErrorInvalidRoutingType,

        /// <remarks/>
        ErrorInvalidScheduledOofDuration,

        /// <remarks/>
        ErrorInvalidSchemaVersionForMailboxVersion,

        /// <remarks/>
        ErrorInvalidSecurityDescriptor,

        /// <remarks/>
        ErrorInvalidSendItemSaveSettings,

        /// <remarks/>
        ErrorInvalidSerializedAccessToken,

        /// <remarks/>
        ErrorInvalidServerVersion,

        /// <remarks/>
        ErrorInvalidSid,

        /// <remarks/>
        ErrorInvalidSIPUri,

        /// <remarks/>
        ErrorInvalidSmtpAddress,

        /// <remarks/>
        ErrorInvalidSubfilterType,

        /// <remarks/>
        ErrorInvalidSubfilterTypeNotAttendeeType,

        /// <remarks/>
        ErrorInvalidSubfilterTypeNotRecipientType,

        /// <remarks/>
        ErrorInvalidSubscription,

        /// <remarks/>
        ErrorInvalidSubscriptionRequest,

        /// <remarks/>
        ErrorInvalidSyncStateData,

        /// <remarks/>
        ErrorInvalidTimeInterval,

        /// <remarks/>
        ErrorInvalidUserOofSettings,

        /// <remarks/>
        ErrorInvalidUserPrincipalName,

        /// <remarks/>
        ErrorInvalidUserSid,

        /// <remarks/>
        ErrorInvalidUserSidMissingUPN,

        /// <remarks/>
        ErrorInvalidValueForProperty,

        /// <remarks/>
        ErrorInvalidWatermark,

        /// <remarks/>
        ErrorIPGatewayNotFound,

        /// <remarks/>
        ErrorIrresolvableConflict,

        /// <remarks/>
        ErrorItemCorrupt,

        /// <remarks/>
        ErrorItemNotFound,

        /// <remarks/>
        ErrorItemPropertyRequestFailed,

        /// <remarks/>
        ErrorItemSave,

        /// <remarks/>
        ErrorItemSavePropertyError,

        /// <remarks/>
        ErrorLegacyMailboxFreeBusyViewTypeNotMerged,

        /// <remarks/>
        ErrorLocalServerObjectNotFound,

        /// <remarks/>
        ErrorLogonAsNetworkServiceFailed,

        /// <remarks/>
        ErrorMailboxConfiguration,

        /// <remarks/>
        ErrorMailboxDataArrayEmpty,

        /// <remarks/>
        ErrorMailboxDataArrayTooBig,

        /// <remarks/>
        ErrorMailboxLogonFailed,

        /// <remarks/>
        ErrorMailboxMoveInProgress,

        /// <remarks/>
        ErrorMailboxStoreUnavailable,

        /// <remarks/>
        ErrorMailRecipientNotFound,

        /// <remarks/>
        ErrorMailTipsDisabled,

        /// <remarks/>
        ErrorManagedFolderAlreadyExists,

        /// <remarks/>
        ErrorManagedFolderNotFound,

        /// <remarks/>
        ErrorManagedFoldersRootFailure,

        /// <remarks/>
        ErrorMeetingSuggestionGenerationFailed,

        /// <remarks/>
        ErrorMessageDispositionRequired,

        /// <remarks/>
        ErrorMessageSizeExceeded,

        /// <remarks/>
        ErrorMimeContentConversionFailed,

        /// <remarks/>
        ErrorMimeContentInvalid,

        /// <remarks/>
        ErrorMimeContentInvalidBase64String,

        /// <remarks/>
        ErrorMissingArgument,

        /// <remarks/>
        ErrorMissingEmailAddress,

        /// <remarks/>
        ErrorMissingEmailAddressForManagedFolder,

        /// <remarks/>
        ErrorMissingInformationEmailAddress,

        /// <remarks/>
        ErrorMissingInformationReferenceItemId,

        /// <remarks/>
        ErrorMissingItemForCreateItemAttachment,

        /// <remarks/>
        ErrorMissingManagedFolderId,

        /// <remarks/>
        ErrorMissingRecipients,

        /// <remarks/>
        ErrorMissingUserIdInformation,

        /// <remarks/>
        ErrorMoreThanOneAccessModeSpecified,

        /// <remarks/>
        ErrorMoveCopyFailed,

        /// <remarks/>
        ErrorMoveDistinguishedFolder,

        /// <remarks/>
        ErrorNameResolutionMultipleResults,

        /// <remarks/>
        ErrorNameResolutionNoMailbox,

        /// <remarks/>
        ErrorNameResolutionNoResults,

        /// <remarks/>
        ErrorNoApplicableProxyCASServersAvailable,

        /// <remarks/>
        ErrorNoCalendar,

        /// <remarks/>
        ErrorNoDestinationCASDueToKerberosRequirements,

        /// <remarks/>
        ErrorNoDestinationCASDueToSSLRequirements,

        /// <remarks/>
        ErrorNoDestinationCASDueToVersionMismatch,

        /// <remarks/>
        ErrorNoFolderClassOverride,

        /// <remarks/>
        ErrorNoFreeBusyAccess,

        /// <remarks/>
        ErrorNonExistentMailbox,

        /// <remarks/>
        ErrorNonPrimarySmtpAddress,

        /// <remarks/>
        ErrorNoPropertyTagForCustomProperties,

        /// <remarks/>
        ErrorNoPublicFolderReplicaAvailable,

        /// <remarks/>
        ErrorNoPublicFolderServerAvailable,

        /// <remarks/>
        ErrorNoRespondingCASInDestinationSite,

        /// <remarks/>
        ErrorNotDelegate,

        /// <remarks/>
        ErrorNotEnoughMemory,

        /// <remarks/>
        ErrorObjectTypeChanged,

        /// <remarks/>
        ErrorOccurrenceCrossingBoundary,

        /// <remarks/>
        ErrorOccurrenceTimeSpanTooBig,

        /// <remarks/>
        ErrorOperationNotAllowedWithPublicFolderRoot,

        /// <remarks/>
        ErrorParentFolderIdRequired,

        /// <remarks/>
        ErrorParentFolderNotFound,

        /// <remarks/>
        ErrorPasswordChangeRequired,

        /// <remarks/>
        ErrorPasswordExpired,

        /// <remarks/>
        ErrorPhoneNumberNotDialable,

        /// <remarks/>
        ErrorPropertyUpdate,

        /// <remarks/>
        ErrorPropertyValidationFailure,

        /// <remarks/>
        ErrorProxiedSubscriptionCallFailure,

        /// <remarks/>
        ErrorProxyCallFailed,

        /// <remarks/>
        ErrorProxyGroupSidLimitExceeded,

        /// <remarks/>
        ErrorProxyRequestNotAllowed,

        /// <remarks/>
        ErrorProxyRequestProcessingFailed,

        /// <remarks/>
        ErrorProxyServiceDiscoveryFailed,

        /// <remarks/>
        ErrorProxyTokenExpired,

        /// <remarks/>
        ErrorPublicFolderRequestProcessingFailed,

        /// <remarks/>
        ErrorPublicFolderServerNotFound,

        /// <remarks/>
        ErrorQueryFilterTooLong,

        /// <remarks/>
        ErrorQuotaExceeded,

        /// <remarks/>
        ErrorReadEventsFailed,

        /// <remarks/>
        ErrorReadReceiptNotPending,

        /// <remarks/>
        ErrorRecurrenceEndDateTooBig,

        /// <remarks/>
        ErrorRecurrenceHasNoOccurrence,

        /// <remarks/>
        ErrorRemoveDelegatesFailed,

        /// <remarks/>
        ErrorRequestAborted,

        /// <remarks/>
        ErrorRequestStreamTooBig,

        /// <remarks/>
        ErrorRequiredPropertyMissing,

        /// <remarks/>
        ErrorResolveNamesInvalidFolderType,

        /// <remarks/>
        ErrorResolveNamesOnlyOneContactsFolderAllowed,

        /// <remarks/>
        ErrorResponseSchemaValidation,

        /// <remarks/>
        ErrorRestrictionTooLong,

        /// <remarks/>
        ErrorRestrictionTooComplex,

        /// <remarks/>
        ErrorResultSetTooBig,

        /// <remarks/>
        ErrorInvalidExchangeImpersonationHeaderData,

        /// <remarks/>
        ErrorSavedItemFolderNotFound,

        /// <remarks/>
        ErrorSchemaValidation,

        /// <remarks/>
        ErrorSearchFolderNotInitialized,

        /// <remarks/>
        ErrorSendAsDenied,

        /// <remarks/>
        ErrorSendMeetingCancellationsRequired,

        /// <remarks/>
        ErrorSendMeetingInvitationsOrCancellationsRequired,

        /// <remarks/>
        ErrorSendMeetingInvitationsRequired,

        /// <remarks/>
        ErrorSentMeetingRequestUpdate,

        /// <remarks/>
        ErrorSentTaskRequestUpdate,

        /// <remarks/>
        ErrorServerBusy,

        /// <remarks/>
        ErrorServiceDiscoveryFailed,

        /// <remarks/>
        ErrorStaleObject,

        /// <remarks/>
        ErrorSubmissionQuotaExceeded,

        /// <remarks/>
        ErrorSubscriptionAccessDenied,

        /// <remarks/>
        ErrorSubscriptionDelegateAccessNotSupported,

        /// <remarks/>
        ErrorSubscriptionNotFound,

        /// <remarks/>
        ErrorSubscriptionUnsubscribed,

        /// <remarks/>
        ErrorSyncFolderNotFound,

        /// <remarks/>
        ErrorTimeIntervalTooBig,

        /// <remarks/>
        ErrorTimeoutExpired,

        /// <remarks/>
        ErrorTimeZone,

        /// <remarks/>
        ErrorToFolderNotFound,

        /// <remarks/>
        ErrorTokenSerializationDenied,

        /// <remarks/>
        ErrorUpdatePropertyMismatch,

        /// <remarks/>
        ErrorUnifiedMessagingDialPlanNotFound,

        /// <remarks/>
        ErrorUnifiedMessagingRequestFailed,

        /// <remarks/>
        ErrorUnifiedMessagingServerNotFound,

        /// <remarks/>
        ErrorUnableToGetUserOofSettings,

        /// <remarks/>
        ErrorUnsupportedSubFilter,

        /// <remarks/>
        ErrorUnsupportedCulture,

        /// <remarks/>
        ErrorUnsupportedMapiPropertyType,

        /// <remarks/>
        ErrorUnsupportedMimeConversion,

        /// <remarks/>
        ErrorUnsupportedPathForQuery,

        /// <remarks/>
        ErrorUnsupportedPathForSortGroup,

        /// <remarks/>
        ErrorUnsupportedPropertyDefinition,

        /// <remarks/>
        ErrorUnsupportedQueryFilter,

        /// <remarks/>
        ErrorUnsupportedRecurrence,

        /// <remarks/>
        ErrorUnsupportedTypeForConversion,

        /// <remarks/>
        ErrorUpdateDelegatesFailed,

        /// <remarks/>
        ErrorUserNotUnifiedMessagingEnabled,

        /// <remarks/>
        ErrorVoiceMailNotImplemented,

        /// <remarks/>
        ErrorValueOutOfRange,

        /// <remarks/>
        ErrorVirusDetected,

        /// <remarks/>
        ErrorVirusMessageDeleted,

        /// <remarks/>
        ErrorWebRequestInInvalidState,

        /// <remarks/>
        ErrorWin32InteropError,

        /// <remarks/>
        ErrorWorkingHoursSaveFailed,

        /// <remarks/>
        ErrorWorkingHoursXmlMalformed,

        /// <remarks/>
        ErrorWrongServerVersion,

        /// <remarks/>
        ErrorWrongServerVersionDelegate,

        /// <remarks/>
        ErrorMissingInformationSharingFolderId,

        /// <remarks/>
        ErrorDuplicateSOAPHeader,

        /// <remarks/>
        ErrorSharingSynchronizationFailed,

        /// <remarks/>
        ErrorSharingNoExternalEwsAvailable,

        /// <remarks/>
        ErrorFreeBusyDLLimitReached,

        /// <remarks/>
        ErrorInvalidGetSharingFolderRequest,

        /// <remarks/>
        ErrorNotAllowedExternalSharingByPolicy,

        /// <remarks/>
        ErrorUserNotAllowedByPolicy,

        /// <remarks/>
        ErrorPermissionNotAllowedByPolicy,

        /// <remarks/>
        ErrorOrganizationNotFederated,

        /// <remarks/>
        ErrorMailboxFailover,

        /// <remarks/>
        ErrorInvalidExternalSharingInitiator,

        /// <remarks/>
        ErrorMessageTrackingPermanentError,

        /// <remarks/>
        ErrorMessageTrackingTransientError,

        /// <remarks/>
        ErrorMessageTrackingNoSuchDomain,

        /// <remarks/>
        ErrorUserWithoutFederatedProxyAddress,

        /// <remarks/>
        ErrorInvalidOrganizationRelationshipForFreeBusy,

        /// <remarks/>
        ErrorInvalidFederatedOrganizationId,

        /// <remarks/>
        ErrorInvalidExternalSharingSubscriber,

        /// <remarks/>
        ErrorInvalidSharingData,

        /// <remarks/>
        ErrorInvalidSharingMessage,

        /// <remarks/>
        ErrorNotSupportedSharingMessage,

        /// <remarks/>
        ErrorApplyConversationActionFailed,

        /// <remarks/>
        ErrorInboxRulesValidationError,

        /// <remarks/>
        ErrorOutlookRuleBlobExists,

        /// <remarks/>
        ErrorRulesOverQuota,

        /// <remarks/>
        ErrorNewEventStreamConnectionOpened,

        /// <remarks/>
        ErrorMissedNotificationEvents,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/exchange/services/2006/messages")]
    public partial class ResponseMessageTypeMessageXml
    {

        private System.Xml.XmlElement[] anyField;

        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/types")]
    public enum ResponseClassType
    {

        /// <remarks/>
        Success,

        /// <remarks/>
        Warning,

        /// <remarks/>
        Error,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/messages")]
    public partial class GetUserOofSettingsResponse
    {

        private ResponseMessageType responseMessageField;

        private UserOofSettings oofSettingsField;

        private ExternalAudience allowExternalOofField;

        private bool allowExternalOofFieldSpecified;

        /// <remarks/>
        public ResponseMessageType ResponseMessage
        {
            get
            {
                return this.responseMessageField;
            }
            set
            {
                this.responseMessageField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/types")]
        public UserOofSettings OofSettings
        {
            get
            {
                return this.oofSettingsField;
            }
            set
            {
                this.oofSettingsField = value;
            }
        }

        /// <remarks/>
        public ExternalAudience AllowExternalOof
        {
            get
            {
                return this.allowExternalOofField;
            }
            set
            {
                this.allowExternalOofField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowExternalOofSpecified
        {
            get
            {
                return this.allowExternalOofFieldSpecified;
            }
            set
            {
                this.allowExternalOofFieldSpecified = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/types")]
    public partial class UserOofSettings
    {

        private OofState oofStateField;

        private ExternalAudience externalAudienceField;

        private Duration durationField;

        private ReplyBody internalReplyField;

        private ReplyBody externalReplyField;

        /// <remarks/>
        public OofState OofState
        {
            get
            {
                return this.oofStateField;
            }
            set
            {
                this.oofStateField = value;
            }
        }

        /// <remarks/>
        public ExternalAudience ExternalAudience
        {
            get
            {
                return this.externalAudienceField;
            }
            set
            {
                this.externalAudienceField = value;
            }
        }

        /// <remarks/>
        public Duration Duration
        {
            get
            {
                return this.durationField;
            }
            set
            {
                this.durationField = value;
            }
        }

        /// <remarks/>
        public ReplyBody InternalReply
        {
            get
            {
                return this.internalReplyField;
            }
            set
            {
                this.internalReplyField = value;
            }
        }

        /// <remarks/>
        public ReplyBody ExternalReply
        {
            get
            {
                return this.externalReplyField;
            }
            set
            {
                this.externalReplyField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/types")]
    public enum OofState
    {

        /// <remarks/>
        Disabled,

        /// <remarks/>
        Enabled,

        /// <remarks/>
        Scheduled,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/types")]
    public enum ExternalAudience
    {

        /// <remarks/>
        None,

        /// <remarks/>
        Known,

        /// <remarks/>
        All,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/types")]
    public partial class Duration
    {

        private System.DateTime startTimeField;

        private System.DateTime endTimeField;

        /// <remarks/>
        public System.DateTime StartTime
        {
            get
            {
                return this.startTimeField;
            }
            set
            {
                this.startTimeField = value;
            }
        }

        /// <remarks/>
        public System.DateTime EndTime
        {
            get
            {
                return this.endTimeField;
            }
            set
            {
                this.endTimeField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/types")]
    public partial class ReplyBody
    {

        private string messageField;

        private string langField;

        /// <remarks/>
        public string Message
        {
            get
            {
                return this.messageField;
            }
            set
            {
                this.messageField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string lang
        {
            get
            {
                return this.langField;
            }
            set
            {
                this.langField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/types")]
    public partial class EmailAddress
    {

        private string nameField;

        private string addressField;

        private string routingTypeField;

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string Address
        {
            get
            {
                return this.addressField;
            }
            set
            {
                this.addressField = value;
            }
        }

        /// <remarks/>
        public string RoutingType
        {
            get
            {
                return this.routingTypeField;
            }
            set
            {
                this.routingTypeField = value;
            }
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SetUserOofSettingsRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetUserOofSettingsRequest))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/messages")]
    public abstract partial class BaseRequestType
    {
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/messages")]
    public partial class SetUserOofSettingsRequest : BaseRequestType
    {

        private EmailAddress mailboxField;

        private UserOofSettings userOofSettingsField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/types")]
        public EmailAddress Mailbox
        {
            get
            {
                return this.mailboxField;
            }
            set
            {
                this.mailboxField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/types")]
        public UserOofSettings UserOofSettings
        {
            get
            {
                return this.userOofSettingsField;
            }
            set
            {
                this.userOofSettingsField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/messages")]
    public partial class GetUserOofSettingsRequest : BaseRequestType
    {

        private EmailAddress mailboxField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://schemas.microsoft.com/exchange/services/2006/types")]
        public EmailAddress Mailbox
        {
            get
            {
                return this.mailboxField;
            }
            set
            {
                this.mailboxField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetUserOofSettingsCompletedEventHandler(object sender, GetUserOofSettingsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserOofSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetUserOofSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public GetUserOofSettingsResponse Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((GetUserOofSettingsResponse)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetUserOofSettingsCompletedEventHandler(object sender, SetUserOofSettingsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUserOofSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetUserOofSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SetUserOofSettingsResponse Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SetUserOofSettingsResponse)(this.results[0]));
            }
        }
    }
}