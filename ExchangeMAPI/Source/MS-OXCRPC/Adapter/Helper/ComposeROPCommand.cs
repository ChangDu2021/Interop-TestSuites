namespace Microsoft.Protocols.TestSuites.MS_OXCRPC
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using System.Text;
    using Microsoft.Protocols.TestSuites.Common;
    using Microsoft.Protocols.TestTools;

    /// <summary>
    /// A class for compose ROP command.
    /// </summary>
    public class ComposeROPCommand
    {
        /// <summary>
        /// An integer indicates the length of RPC_HEADER_EXT.
        /// </summary>
        private static readonly int RPCHeaderExtlength = Marshal.SizeOf(typeof(RPC_HEADER_EXT));

        /// <summary>
        /// Initializes a new instance of the ComposeROPCommand class.
        /// </summary>
        public ComposeROPCommand()
        {
        }

        /// <summary>
        /// Composes the RopLogon Request Buffer.
        /// This ROP logs on to a mailbox or public folder. More detailed information about this operation can be found in [MS-OXCSTOR].
        /// </summary>
        /// <param name="uDN">User's distinguished name (DN).</param>
        /// <param name="openFlags">Contains additional flags that control the behavior of the logon.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeLogonRequest(string uDN, uint openFlags)
        {
            RopLogonRequest logonRequest = new RopLogonRequest
            {
                RopId = (byte)RopId.RopLogon,
                LogonId = Convert.ToByte(0),
                OutputHandleIndex = Convert.ToByte(0),
                LogonFlags = (byte)LogonFlags.Private,
                OpenFlags = openFlags,
                StoreState = 0,
                EssdnSize = (ushort)Encoding.ASCII.GetByteCount(uDN),
                Essdn = Encoding.ASCII.GetBytes(uDN)
            };
            List<ISerializable> requestRops = new List<ISerializable>
            {
                logonRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                // The default value for server output object handle.
                ConstValues.DefaultOutputHandle
            };

            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        /// <summary>
        /// Composes multiple ROPs: RopSetColumns and RopQueryRows.
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeMultipleRops(uint inputServerObjectHandle)
        {
            // This ROP sets the properties visible on a table.
            RopSetColumnsRequest setColumnsRequest;

            PropertyTag[] propertyTags = this.CreateSampleContentsTablePropertyTags();
            setColumnsRequest.RopId = (byte)RopId.RopSetColumns;
            setColumnsRequest.LogonId = Convert.ToByte(0);
            setColumnsRequest.InputHandleIndex = Convert.ToByte(0);
            setColumnsRequest.SetColumnsFlags = Convert.ToByte(0);
            setColumnsRequest.PropertyTagCount = (ushort)propertyTags.Length;
            setColumnsRequest.PropertyTags = propertyTags;

            // This ROP retrieves rows from a table.
            RopQueryRowsRequest queryRowsRequest;
            queryRowsRequest.RopId = (byte)RopId.RopQueryRows;
            queryRowsRequest.LogonId = Convert.ToByte(0);
            queryRowsRequest.InputHandleIndex = Convert.ToByte(0);
            queryRowsRequest.QueryRowsFlags = (byte)QueryRowsFlags.NoAdvance;

            // The direction in which to retrieve rows. It is set to "TRUE" to read the table forwards.
            queryRowsRequest.ForwardRead = Convert.ToByte(ConstValues.NonZero);

            // Maximum number of rows to be returned
            queryRowsRequest.RowCount = ConstValues.QueryRowsRequestRowCountMax;

            List<ISerializable> requestRops = new List<ISerializable>
            {
                setColumnsRequest, queryRowsRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                inputServerObjectHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        #region Stream

        /// <summary>
        /// Composes the RopCreateMessage Request Buffer.
        /// This ROP creates a Message object in a mailbox. More detailed information about this operation can be found in [MS-OXCMSG].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <param name="folderId">This value identifies the parent folder.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeCreateMessageRequest(uint inputServerObjectHandle, ulong folderId)
        {
            RopCreateMessageRequest createMessageRequest = new RopCreateMessageRequest
            {
                RopId = (byte)RopId.RopCreateMessage,
                LogonId = Convert.ToByte(0),
                InputHandleIndex = Convert.ToByte(0),
                OutputHandleIndex = Convert.ToByte(ConstValues.OutputHandleIndexForOneRop),
                CodePageId = ConstValues.LogonCodePageId, // Code page of Logon object is used 
                FolderId = folderId, // Create a message in INBOX
                AssociatedFlag = Convert.ToByte(0) // NOT an FAI message
            };

            List<ISerializable> requestRops = new List<ISerializable>
            {
                createMessageRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                // 0xFFFFFFFF is the default value for server output object handle.
                inputServerObjectHandle, ConstValues.DefaultOutputHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        /// <summary>
        /// Composes the RopCreateFolder Request Buffer.
        /// This ROP creates a new subfolder. More detailed information about this operation can be found in [MS-OXCFOLD].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <param name="site">An instance of interface ITestSite which provides logging, assertions,
        /// and adapters for test code onto its execution context.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeCreateFolderRequest(uint inputServerObjectHandle, ITestSite site)
        {
            // Construct the name of folder to be created.
            string tempString = Common.GenerateResourceName(site, "TestFolder") + ConstValues.StringEndMark;
            RopCreateFolderRequest createFolderRequest = new RopCreateFolderRequest
            {
                RopId = (byte)RopId.RopCreateFolder,
                LogonId = Convert.ToByte(0),
                InputHandleIndex = Convert.ToByte(0),
                OutputHandleIndex = Convert.ToByte(ConstValues.OutputHandleIndexForOneRop),
                FolderType = (byte)FolderType.Genericfolder,
                UseUnicodeStrings = Convert.ToByte(0),
                OpenExisting = Convert.ToByte(ConstValues.NonZero),
                Reserved = Convert.ToByte(0),
                DisplayName = Encoding.ASCII.GetBytes(tempString),
                Comment = Encoding.ASCII.GetBytes(tempString)
            };

            List<ISerializable> requestRops = new List<ISerializable>
            {
                createFolderRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                // 0xFFFFFFFF is the default value for server output object handle.
                inputServerObjectHandle, ConstValues.DefaultOutputHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        /// <summary>
        /// Composes the RopRelease Request Buffer.
        /// This ROP releases all resources associated with a Server object.
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeRopReleaseRequest(uint inputServerObjectHandle)
        {
            RopReleaseRequest ropReleaseRequest = new RopReleaseRequest
            {
                RopId = (byte)RopId.RopRelease,
                LogonId = Convert.ToByte(0),
                InputHandleIndex = Convert.ToByte(0)
            };

            List<ISerializable> requestRops = new List<ISerializable>
            {
                ropReleaseRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                inputServerObjectHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        /// <summary>
        /// Composes the RopDeleteFolder Request Buffer.
        /// This ROP deletes a subfolder. More detailed information about this operation can be found in [MS-OXCFOLD].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <param name="folderId">This value identifies the parent folder.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeDeleteFolderRequest(uint inputServerObjectHandle, ulong folderId)
        {
            RopDeleteFolderRequest deleteFolderRequest = new RopDeleteFolderRequest
            {
                RopId = (byte)RopId.RopDeleteFolder,
                LogonId = Convert.ToByte(0),
                InputHandleIndex = Convert.ToByte(0),
                DeleteFolderFlags = (byte)DeleteFolderFlags.DeleteHardDelete,
                FolderId = folderId
            };

            List<ISerializable> requestRops = new List<ISerializable>
            {
                deleteFolderRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                inputServerObjectHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        /// <summary>
        /// Composes the RopOpenStream Request Buffer.
        /// This ROP opens a property for streaming access. More detailed information about this operation can be found in [MS-OXCPRPT].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <param name="openModeFlags">OpenModeFlags control how the stream is opened. The possible values are specified in [MS-OXCPRPT].</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeOpenStreamRequest(uint inputServerObjectHandle, ulong openModeFlags)
        {
            RopOpenStreamRequest openStreamRequest;

            PropertyTag tag;
            tag.PropertyId = (ushort)PropertyID.UserDefinedId;
            tag.PropertyType = (ushort)PropertyType.PtypString;

            openStreamRequest.RopId = (byte)RopId.RopOpenStream;
            openStreamRequest.LogonId = Convert.ToByte(0);
            openStreamRequest.InputHandleIndex = Convert.ToByte(0);
            openStreamRequest.OutputHandleIndex = Convert.ToByte(ConstValues.OutputHandleIndexForOneRop);
            openStreamRequest.PropertyTag = tag;
            openStreamRequest.OpenModeFlags = (byte)openModeFlags;

            List<ISerializable> requestRops = new List<ISerializable>
            {
                openStreamRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                // 0xFFFFFFFF is the default value for server output object handle.
                inputServerObjectHandle, ConstValues.DefaultOutputHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        /// <summary>
        /// Composes the RopWriteStream Request Buffer.
        /// This ROP writes bytes to a stream. More detailed information about this operation can be found in [MS-OXCPRPT].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeWriteStreamRequest(uint inputServerObjectHandle)
        {
            RopWriteStreamRequest writeStreamRequest;

            // In order to test packing, use this long string to generate the buffer whose size is more than 32k.
            StringBuilder longString = new StringBuilder();
            for (int i = 0; i < 200; i++)
            {
                longString.Append("a");
            }

            longString.Append("\0");

            byte[] dataToWrite = Encoding.ASCII.GetBytes(longString.ToString());
            writeStreamRequest.RopId = (byte)RopId.RopWriteStream;
            writeStreamRequest.LogonId = Convert.ToByte(0);
            writeStreamRequest.InputHandleIndex = Convert.ToByte(0);
            writeStreamRequest.DataSize = (ushort)dataToWrite.Length;
            writeStreamRequest.Data = dataToWrite;

            List<ISerializable> requestRops = new List<ISerializable>
            {
                writeStreamRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                inputServerObjectHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        /// <summary>
        /// Composes the RopCommitStream Request Buffer.
        /// This ROP commits stream operations. More detailed information about this operation can be found in [MS-OXCPRPT].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeCommitStreamRequest(uint inputServerObjectHandle)
        {
            RopCommitStreamRequest commitStreamRequest;
            commitStreamRequest.RopId = (byte)RopId.RopCommitStream;
            commitStreamRequest.LogonId = Convert.ToByte(0);
            commitStreamRequest.InputHandleIndex = Convert.ToByte(0);

            List<ISerializable> requestRops = new List<ISerializable>
            {
                commitStreamRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                inputServerObjectHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        /// <summary>
        /// Composes the RopReadStream Request Buffer.
        /// This ROP reads bytes from a stream. More detailed information about this operation can be found in [MS-OXCPRPT].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <param name="maximumByteCount">This value specifies the maximum number of bytes to read.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeReadStreamRequest(uint inputServerObjectHandle, uint maximumByteCount)
        {
            RopReadStreamRequest readStreamRequest;

            readStreamRequest.RopId = (byte)RopId.RopReadStream;
            readStreamRequest.LogonId = Convert.ToByte(0);
            readStreamRequest.InputHandleIndex = Convert.ToByte(0);

            // The MaximumByteCount field is present when ByteCount is equal to 0xBABE and is not present otherwise.
            if (maximumByteCount < ConstValues.MaximumByteCountIndicator)
            {
                readStreamRequest.ByteCount = (ushort)maximumByteCount;
                readStreamRequest.MaximumByteCount = 0;
            }
            else
            {
                readStreamRequest.ByteCount = ConstValues.MaximumByteCountIndicator;
                readStreamRequest.MaximumByteCount = maximumByteCount;
            }

            List<ISerializable> requestRops = new List<ISerializable>
            {
                readStreamRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                inputServerObjectHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }
        #endregion

        #region Folder
        /// <summary>
        /// Composes the RopOpenFolder Request Buffer.
        /// This ROP opens an existing folder in a mailbox. More detailed information about this operation can be found in [MS-OXCFOLD].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <param name="folderId">This identifier specifies the folder to be opened.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeOpenFolderRequest(uint inputServerObjectHandle, ulong folderId)
        {
            RopOpenFolderRequest openFolderRequest;
            openFolderRequest.RopId = (byte)RopId.RopOpenFolder;
            openFolderRequest.LogonId = Convert.ToByte(0);
            openFolderRequest.InputHandleIndex = Convert.ToByte(0);
            openFolderRequest.OutputHandleIndex = Convert.ToByte(ConstValues.OutputHandleIndexForOneRop);
            openFolderRequest.FolderId = folderId;

            // Opening an existing folder
            openFolderRequest.OpenModeFlags = Convert.ToByte(0);

            List<ISerializable> requestRops = new List<ISerializable>
            {
                openFolderRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                // 0xFFFFFFFF is the default value for server output object handle.
                inputServerObjectHandle, ConstValues.DefaultOutputHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        /// <summary>
        /// Composes the RopSetColumns Request Buffer.
        /// This ROP sets the properties visible on a table. More detailed information about this operation can be found in [MS-OXCTABL].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeSetColumnsRequest(uint inputServerObjectHandle)
        {
            RopSetColumnsRequest setColumnsRequest;
            PropertyTag[] propertyTags = this.CreateSampleContentsTablePropertyTags();
            setColumnsRequest.RopId = (byte)RopId.RopSetColumns;
            setColumnsRequest.LogonId = Convert.ToByte(0);
            setColumnsRequest.InputHandleIndex = Convert.ToByte(0);
            setColumnsRequest.SetColumnsFlags = Convert.ToByte(0);
            setColumnsRequest.PropertyTagCount = (ushort)propertyTags.Length;
            setColumnsRequest.PropertyTags = propertyTags;

            List<ISerializable> requestRops = new List<ISerializable>
            {
                setColumnsRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                inputServerObjectHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        /// <summary>
        /// Composes the RopGetHierarchyTable Request Buffer. 
        /// This ROP gets the subfolder hierarchy table for a folder. More detailed information about this operation can be found in [MS-OXCFOLD].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeGetHierarchyTableRequest(uint inputServerObjectHandle)
        {
            RopGetHierarchyTableRequest getHierarchyTableRequest;

            getHierarchyTableRequest.RopId = (byte)RopId.RopGetHierarchyTable;
            getHierarchyTableRequest.LogonId = Convert.ToByte(0);
            getHierarchyTableRequest.InputHandleIndex = Convert.ToByte(0);
            getHierarchyTableRequest.OutputHandleIndex = Convert.ToByte(ConstValues.OutputHandleIndexForOneRop);
            getHierarchyTableRequest.TableFlags = (byte)FolderTableFlags.Depth;

            List<ISerializable> requestRops = new List<ISerializable>
            {
                getHierarchyTableRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                // 0xFFFFFFFF is the default value for server output object handle.
                inputServerObjectHandle, ConstValues.DefaultOutputHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        /// <summary>
        /// Composes the RopGetContentsTable Request Buffer.
        /// This ROP gets the content table of a container. More detailed information about this operation can be found in [MS-OXCFOLD].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <param name="tableFlags">Value for TableFlags field.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeGetContentsTableRequest(uint inputServerObjectHandle, byte tableFlags)
        {
            RopGetContentsTableRequest getContentsTableRequest;

            getContentsTableRequest.RopId = (byte)RopId.RopGetContentsTable;
            getContentsTableRequest.LogonId = Convert.ToByte(0);
            getContentsTableRequest.InputHandleIndex = Convert.ToByte(0);
            getContentsTableRequest.OutputHandleIndex = Convert.ToByte(ConstValues.OutputHandleIndexForOneRop);
            getContentsTableRequest.TableFlags = tableFlags;

            List<ISerializable> requestRops = new List<ISerializable>
            {
                getContentsTableRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                // 0xFFFFFFFF is a default value for server output object handle.
                inputServerObjectHandle, ConstValues.DefaultOutputHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        /// <summary>
        /// Composes the RopQueryRows Request Buffer.
        /// This ROP retrieves rows from a table. More detailed information about this operation can be found in [MS-OXCTABL].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <param name="rowCount">This value specifies the number of requested rows.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeQueryRowsRequest(uint inputServerObjectHandle, ushort rowCount)
        {
            RopQueryRowsRequest queryRowsRequest;
            queryRowsRequest.RopId = (byte)RopId.RopQueryRows;
            queryRowsRequest.LogonId = Convert.ToByte(0);
            queryRowsRequest.InputHandleIndex = Convert.ToByte(0);
            queryRowsRequest.QueryRowsFlags = (byte)QueryRowsFlags.EnablePackedBuffers;

            // TRUE: read the table forwards
            queryRowsRequest.ForwardRead = Convert.ToByte(ConstValues.NonZero);

            // Maximum number of rows to be returned
            queryRowsRequest.RowCount = rowCount;

            List<ISerializable> requestRops = new List<ISerializable>
            {
                queryRowsRequest
            };
            List<uint> requestSOH = new List<uint>
            { 
                inputServerObjectHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        /// <summary>
        /// Composes the RopSaveChangesMessage Request Buffer.
        /// This ROP commits the changes made to a message. More detailed information about this operation can be found in [MS-OXCMSG].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeSaveChangesMessageRequest(uint inputServerObjectHandle)
        {
            RopSaveChangesMessageRequest saveChangesMessageRequest;
            saveChangesMessageRequest.RopId = (byte)RopId.RopSaveChangesMessage;
            saveChangesMessageRequest.LogonId = Convert.ToByte(0);
            saveChangesMessageRequest.InputHandleIndex = Convert.ToByte(0);
            saveChangesMessageRequest.ResponseHandleIndex = Convert.ToByte(ConstValues.OutputHandleIndexForOneRop);
            saveChangesMessageRequest.SaveFlags = (byte)SaveFlags.ForceSave;

            List<ISerializable> requestRops = new List<ISerializable>
            {
                saveChangesMessageRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                // 0xFFFFFFFF is the default value for server output object handle.
                inputServerObjectHandle, ConstValues.DefaultOutputHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        /// <summary>
        /// Composes the RopRegisterNotification Request Buffer.
        /// This ROP registers for notification events. More detailed information about this operation can be found in [MS-OXCNOTIF].
        /// </summary>
        /// <param name="inputServObjectHandle">The handle for the input Server Object.</param>
        /// <param name="folderId">This value specifies the folder to register notifications for.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeRegisterNotifyEvents(uint inputServObjectHandle, ulong folderId)
        {
            RopRegisterNotificationRequest registerNotificationRequest;
            registerNotificationRequest.RopId = (byte)RopId.RopRegisterNotification;
            registerNotificationRequest.LogonId = Convert.ToByte(0);
            registerNotificationRequest.InputHandleIndex = Convert.ToByte(0);
            registerNotificationRequest.OutputHandleIndex = Convert.ToByte(ConstValues.OutputHandleIndexForOneRop);

            // The server MUST send notifications to the client when NewMail events occur within the scope of interest
            registerNotificationRequest.NotificationTypes = (byte)NotificationTypes.NewMail;
            registerNotificationRequest.Reserved = Convert.ToByte(0);

            // TRUE: the scope for notifications is the entire database
            registerNotificationRequest.WantWholeStore = Convert.ToByte(ConstValues.NonZero);
            registerNotificationRequest.FolderId = folderId;
            registerNotificationRequest.MessageId = ConstValues.MessageIdZeroValue;

            List<ISerializable> requestRops = new List<ISerializable>
            {
                registerNotificationRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                // 0xFFFFFFFF is the default value for server output object handle.
                inputServObjectHandle, ConstValues.DefaultOutputHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }
        #endregion

        #region Transfer
        /// <summary>
        /// Composes the RopFastTransferSourceCopyMessages Request Buffer. 
        /// This ROP downloads from a folder the content and descendant sub-objects for messages identified by a given set of IDs. More detailed information about this operation can be found in [MS-OXCFXICS].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <param name="messageId">This value specifies the message to copy.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeFastTransferSourceCopyMessagesRequest(uint inputServerObjectHandle, ulong messageId)
        {
            ulong[] messageIds = new ulong[1];
            messageIds[0] = messageId;
            RopFastTransferSourceCopyMessagesRequest fastTransferSourceCopyMessagesRequest;

            fastTransferSourceCopyMessagesRequest.RopId = (byte)RopId.RopFastTransferSourceCopyMessages;
            fastTransferSourceCopyMessagesRequest.LogonId = Convert.ToByte(0);
            fastTransferSourceCopyMessagesRequest.InputHandleIndex = Convert.ToByte(0);
            fastTransferSourceCopyMessagesRequest.OutputHandleIndex = Convert.ToByte(ConstValues.OutputHandleIndexForOneRop);
            fastTransferSourceCopyMessagesRequest.MessageIdCount = (ushort)messageIds.Length;
            fastTransferSourceCopyMessagesRequest.MessageIds = messageIds;
            fastTransferSourceCopyMessagesRequest.CopyFlags = (byte)RopFastTransferSourceCopyMessagesCopyFlags.BestBody;
            fastTransferSourceCopyMessagesRequest.SendOptions = (byte)SendOptions.ForceUnicode;

            List<ISerializable> requestRops = new List<ISerializable>
            {
                fastTransferSourceCopyMessagesRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                // 0xFFFFFFFF is the default value for server output object handle.
                inputServerObjectHandle, ConstValues.DefaultOutputHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        /// <summary>
        /// Composes the RopFastTransferSourceGetBuffer Request Buffer. 
        /// This ROP retrieves a stream of data from a fast transfer source object. More detailed information about this operation can be found in [MS-OXCFXICS].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <param name="maximumBufferSize"> This value specifies the maximum size limit when the server determines the buffer size.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeRopFastTransferSourceGetBufferRequest(uint inputServerObjectHandle, ushort maximumBufferSize)
        {
            RopFastTransferSourceGetBufferRequest fastTransferSourceGetBufferRequest;
            fastTransferSourceGetBufferRequest.RopId = (byte)RopId.RopFastTransferSourceGetBuffer;
            fastTransferSourceGetBufferRequest.LogonId = Convert.ToByte(0);
            fastTransferSourceGetBufferRequest.InputHandleIndex = Convert.ToByte(0);

            // The MaximumBufferSize field is present when BufferSize is equal to 0xBABE and is not present otherwise.
            if (maximumBufferSize < ConstValues.MaximumByteCountIndicator)
            {
                fastTransferSourceGetBufferRequest.BufferSize = (ushort)maximumBufferSize;
                fastTransferSourceGetBufferRequest.MaximumBufferSize = 0;
            }
            else
            {
                fastTransferSourceGetBufferRequest.BufferSize = ConstValues.MaximumByteCountIndicator;
                fastTransferSourceGetBufferRequest.MaximumBufferSize = maximumBufferSize;
            }

            List<ISerializable> requestRops = new List<ISerializable>
            {
                fastTransferSourceGetBufferRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                inputServerObjectHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }
        #endregion

        #region IncrementalChangeSynchronization
        /// <summary>
        /// Composes the RopSynchronizationImportDeletes Request Buffer.
        /// This ROP synchronizes deleted messages or folders. More detailed information about this operation can be found in [MS-OXCFXICS].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <param name="propertyValue">Array of TaggedPropertyValue structures which are used to specify the folders or messages to delete.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeRopSynchronizationImportDeletes(uint inputServerObjectHandle, TaggedPropertyValue propertyValue)
        {
            RopSynchronizationImportDeletesRequest ropSynchronizationImportDeletesRequest = new RopSynchronizationImportDeletesRequest();
            TaggedPropertyValue[] propertyValues = new TaggedPropertyValue[1];
            propertyValues[0] = propertyValue;

            ropSynchronizationImportDeletesRequest.RopId = (byte)RopId.RopSynchronizationImportDeletes;
            ropSynchronizationImportDeletesRequest.LogonId = Convert.ToByte(0);
            ropSynchronizationImportDeletesRequest.InputHandleIndex = Convert.ToByte(0);

            // The 0x02 indicates HardDelete.
            ropSynchronizationImportDeletesRequest.IsHierarchy = (byte)0x02;
            ropSynchronizationImportDeletesRequest.PropertyValueCount = (ushort)propertyValues.Length;
            ropSynchronizationImportDeletesRequest.PropertyValues = propertyValues;

            List<ISerializable> requestRops = new List<ISerializable>
            {
                ropSynchronizationImportDeletesRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                inputServerObjectHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }
 
        /// <summary>
        /// Composes the RopSynchronizationOpenCollector Request Buffer.
        /// This ROP creates a new incremental change synchronization collector. More detailed information about this operation can be found in [MS-OXCFXICS].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeRopSynchronizationOpenCollector(uint inputServerObjectHandle)
        {
            RopSynchronizationOpenCollectorRequest ropSynchronizationOpenCollectorRequest = new RopSynchronizationOpenCollectorRequest
            {
                RopId = (byte)RopId.RopSynchronizationOpenCollector,
                LogonId = Convert.ToByte(0),
                InputHandleIndex = Convert.ToByte(0),
                OutputHandleIndex = Convert.ToByte(ConstValues.OutputHandleIndexForOneRop),
                IsContentsCollector = Convert.ToByte(ConstValues.NonZero)
            };

            List<ISerializable> requestRops = new List<ISerializable>
            {
                ropSynchronizationOpenCollectorRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                // 0xFFFFFFFF is the default value for server output object handle.
                inputServerObjectHandle, ConstValues.DefaultOutputHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        /// <summary>
        /// Composes the RopSynchronizationImportMessageChange Request Buffer.
        /// This ROP imports new messages or full changes to existing messages into the server replica. More detailed information about this operation can be found in [MS-OXCFXICS].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <param name="importFlag">Value for ImportFlags field.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeRopSynchronizationImportMessageChange(uint inputServerObjectHandle, byte importFlag)
        {
            RopSynchronizationImportMessageChangeRequest ropSynchronizationImportMessageChangeRequest = new RopSynchronizationImportMessageChangeRequest();
            TaggedPropertyValue[] propertyValues = new TaggedPropertyValue[1];
            TaggedPropertyValue proValue = new TaggedPropertyValue();
            PropertyTag propertyTag = new PropertyTag
            {
                PropertyId = (ushort)PropertyID.PidTagLastModificationTime,
                PropertyType = (ushort)PropertyType.PtypTime
            };
            proValue.PropertyTag = propertyTag;
            proValue.Value = new byte[ConstValues.PtypTimeByteSize];
            propertyValues[0] = proValue;

            ropSynchronizationImportMessageChangeRequest.RopId = (byte)RopId.RopSynchronizationImportMessageChange;
            ropSynchronizationImportMessageChangeRequest.LogonId = Convert.ToByte(0);
            ropSynchronizationImportMessageChangeRequest.InputHandleIndex = Convert.ToByte(0);
            ropSynchronizationImportMessageChangeRequest.OutputHandleIndex = Convert.ToByte(ConstValues.OutputHandleIndexForOneRop);
            ropSynchronizationImportMessageChangeRequest.ImportFlag = importFlag;
            ropSynchronizationImportMessageChangeRequest.PropertyValueCount = (ushort)propertyValues.Length;
            ropSynchronizationImportMessageChangeRequest.PropertyValues = propertyValues;

            List<ISerializable> requestRops = new List<ISerializable>
            {
                ropSynchronizationImportMessageChangeRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                // 0xFFFFFFFF is the default value for server output object handle.
                inputServerObjectHandle, ConstValues.DefaultOutputHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        /// <summary>
        /// Composes the RopLongTermIdFromId Request Buffer.
        /// This ROP converts a short-term ID into a long-term ID. More detailed information about this operation can be found in [MS-OXCSTOR].
        /// </summary>
        /// <param name="inputServerObjectHandle">The handle for the input Server Object.</param>
        /// <param name="objectID">This value specifies the short-term ID to be converted to a long-term ID.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeRopLongTermIdFromId(uint inputServerObjectHandle, ulong objectID)
        {
            RopLongTermIdFromIdRequest ropLongTermIdFromIdRequest = new RopLongTermIdFromIdRequest
            {
                RopId = (byte)RopId.RopLongTermIdFromId,
                LogonId = Convert.ToByte(0),
                InputHandleIndex = Convert.ToByte(0),
                ObjectId = objectID
            };

            List<ISerializable> requestRops = new List<ISerializable>
            {
                ropLongTermIdFromIdRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                inputServerObjectHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }

        /// <summary>
        /// Composes the RopHardDeleteMessagesAndSubfolders Request Buffer.
        /// This ROP hard deletes messages and subfolders from a folder. More detailed information about this operation can be found in [MS-OXCFOLD].
        /// </summary>
        /// <param name="inputObjHandle">The handle for the input Server Object.</param>
        /// <returns>The rgbIn buffer generated by this method.</returns>
        public byte[] ComposeRopHardDeleteMessagesAndSubfolders(uint inputObjHandle)
        {
            RopHardDeleteMessagesAndSubfoldersRequest ropHardDeleteMsgAndSubFolderRequest = new RopHardDeleteMessagesAndSubfoldersRequest
            {
                RopId = (byte)RopId.RopHardDeleteMessagesAndSubfolders,
                LogonId = Convert.ToByte(0),
                InputHandleIndex = Convert.ToByte(0),
                WantAsynchronous = 0x00,
                WantDeleteAssociated = 0xFF
            };

            List<ISerializable> requestRops = new List<ISerializable>
            {
                ropHardDeleteMsgAndSubFolderRequest
            };
            List<uint> requestSOH = new List<uint>
            {
                inputObjHandle
            };
            return this.BuildRequestBuffer(requestRops, requestSOH);
        }
        #endregion

        /// <summary>
        /// The method creates a request without ROPs.
        /// </summary>
        /// <returns>The ROPs request.</returns>
        public byte[] BuildRequestBuffer()
        {
            // Only RopSize field (2 bytes) exists in the payload of request without ROPs.
            int payloadLen = ConstValues.RequestBufferPayloadLength;
            ushort ropSize = ConstValues.RequestBufferRopSize;

            byte[] requestBuffer = new byte[RPCHeaderExtlength + payloadLen];
            int index = 0;

            // Constructs RPC header ext buffer
            RPC_HEADER_EXT rpcHeaderExt = new RPC_HEADER_EXT
            {
                // According to Open Specification, Version filed MUST be set to 0x0000.
                Version = Convert.ToByte(0),
                Flags = (byte)RpcHeaderExtFlags.Last,
                Size = (ushort)payloadLen,
                SizeActual = (ushort)payloadLen
            };

            // No compression and No obfuscation
            IntPtr ptr = Marshal.AllocHGlobal(RPCHeaderExtlength);

            // Release ptr in final sub-statement to make sure the resources will be released even if an exception occurs
            try
            {
                Marshal.StructureToPtr(rpcHeaderExt, ptr, true);
                Marshal.Copy(ptr, requestBuffer, index, RPCHeaderExtlength);
                index += RPCHeaderExtlength;
            }
            catch (ArgumentException e)
            {
                // Marshal.StructureToPtr or Marshal.Copy throw exception.
                throw new NotImplementedException(e.Message);
            }
            finally
            {
                Marshal.FreeHGlobal(ptr);
            }

            Array.Copy(BitConverter.GetBytes(ropSize), 0, requestBuffer, index, sizeof(ushort));

            return requestBuffer;
        }

        #region Private methods
        /// <summary>
        /// Composes ROP command buffer.
        /// </summary>
        /// <param name="requestROPs">The array of ROP commands.</param>
        /// <param name="requestSOHTable">The array of request handle table.</param>
        /// <returns>Returns byte array of serialized ROP command buffer.</returns>
        private byte[] BuildRequestBuffer(List<ISerializable> requestROPs, List<uint> requestSOHTable)
        {
            int payloadLen = ConstValues.RopSizeInRopInputOutputBufferSize;
            foreach (ISerializable requestROP in requestROPs)
            {
                payloadLen += requestROP.Size();
            }

            ushort ropSize = (ushort)payloadLen;
            payloadLen += requestSOHTable.Count * sizeof(uint);

            byte[] requestBuffer = new byte[RPCHeaderExtlength + payloadLen];
            int index = 0;

            // Constructs RPC_HEADER_EXT buffer
            RPC_HEADER_EXT rpcHeaderExt = new RPC_HEADER_EXT
            {
                Version = ConstValues.RpcHeaderExtVersionValue,
                Flags = (ushort)RpcHeaderExtFlags.Last,
                Size = (ushort)payloadLen
            };
            rpcHeaderExt.SizeActual = rpcHeaderExt.Size;

            IntPtr ptr = Marshal.AllocHGlobal(RPCHeaderExtlength);

            // Release ptr in final sub-statement to make sure the resources will be released even if an exception occurs
            try
            {
                Marshal.StructureToPtr(rpcHeaderExt, ptr, true);
                Marshal.Copy(ptr, requestBuffer, index, RPCHeaderExtlength);
                index += RPCHeaderExtlength;
            }
            finally
            {
                Marshal.FreeHGlobal(ptr);
            }

            Array.Copy(BitConverter.GetBytes(ropSize), 0, requestBuffer, index, ConstValues.RopSizeInRopInputOutputBufferSize);
            index += ConstValues.RopSizeInRopInputOutputBufferSize;

            foreach (ISerializable requestROP in requestROPs)
            {
                Array.Copy(requestROP.Serialize(), 0, requestBuffer, index, requestROP.Size());
                index += requestROP.Size();
            }

            foreach (uint serverHandle in requestSOHTable)
            {
                Array.Copy(BitConverter.GetBytes(serverHandle), 0, requestBuffer, index, sizeof(uint));
                index += sizeof(uint);
            }

            return requestBuffer;
        }

        /// <summary>
        /// Creates the sample PropertyTag.
        /// </summary>
        /// <returns>The array of sample PropertyTag.</returns>
        private PropertyTag[] CreateSampleContentsTablePropertyTags()
        {
            // The following sample tags is from MS-OXCTABL
            PropertyTag[] propertyTags = new PropertyTag[ConstValues.SampleTagsByteSize];
            PropertyTag samplePropertyTag;

            // PidTagFolderId
            samplePropertyTag.PropertyId = (ushort)PropertyID.PidTagFolderId;
            samplePropertyTag.PropertyType = (ushort)PropertyType.PtypInteger64;
            propertyTags[0] = samplePropertyTag;

            // PidTagMid
            samplePropertyTag.PropertyId = (ushort)PropertyID.PidTagMid;
            samplePropertyTag.PropertyType = (ushort)PropertyType.PtypInteger64;
            propertyTags[1] = samplePropertyTag;

            // PidTagInstID
            samplePropertyTag.PropertyId = (ushort)PropertyID.PidTagInstID;
            samplePropertyTag.PropertyType = (ushort)PropertyType.PtypInteger64;
            propertyTags[2] = samplePropertyTag;

            // PidTagInstanceNum
            samplePropertyTag.PropertyId = (ushort)PropertyID.PidTagInstanceNum;
            samplePropertyTag.PropertyType = (ushort)PropertyType.PtypInteger32;
            propertyTags[3] = samplePropertyTag;

            // PidTagSubject
            samplePropertyTag.PropertyId = (ushort)PropertyID.PidTagSubject;
            samplePropertyTag.PropertyType = (ushort)PropertyType.PtypString;
            propertyTags[4] = samplePropertyTag;

            // PidTagMessageDeliveryTime
            samplePropertyTag.PropertyId = (ushort)PropertyID.PidTagMessageDeliveryTime;
            samplePropertyTag.PropertyType = (ushort)PropertyType.PtypTime;
            propertyTags[5] = samplePropertyTag;

            return propertyTags;
        }
        #endregion
    }
}