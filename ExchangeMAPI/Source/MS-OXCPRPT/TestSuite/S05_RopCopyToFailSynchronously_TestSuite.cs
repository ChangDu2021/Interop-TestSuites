//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCPRPT {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.6.100.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S05_RopCopyToFailSynchronously_TestSuite : PtfTestClassBase {
        
        public S05_RopCopyToFailSynchronously_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        
        public delegate void RopCopyToMethodDelegate1(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase RopCopyToMethodInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "RopCopyToMethod", typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags), typeof(bool), typeof(bool), typeof(bool), typeof(bool).MakeByRefType(), typeof(bool).MakeByRefType(), typeof(bool).MakeByRefType(), typeof(bool).MakeByRefType(), typeof(bool).MakeByRefType(), typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter IMS_OXCPRPTAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCPRPTAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp77 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp77 == 0)) {
                this.Manager.Comment("reaching state \'S6\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S15\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S27\'");
                bool temp1;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86702,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86702, out temp1);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1);
                this.Manager.Comment("reaching state \'S30\'");
                int temp76 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker7)));
                if ((temp76 == 0)) {
                    this.Manager.Comment("reaching state \'S33\'");
                    bool temp2;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(18402,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(18402, out temp2);
                    this.Manager.Comment("reaching state \'S39\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp2, "enabled of CheckRequirementEnabled, state S39");
                    this.Manager.Comment("reaching state \'S45\'");
                    bool temp3;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86708,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86708, out temp3);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                    this.Manager.Comment("reaching state \'S51\'");
                    int temp38 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker4)));
                    if ((temp38 == 0)) {
                        this.Manager.Comment("reaching state \'S57\'");
                        bool temp4;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(5070506,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(5070506, out temp4);
                        this.Manager.Comment("reaching state \'S69\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp4, "enabled of CheckRequirementEnabled, state S69");
                        this.Manager.Comment("reaching state \'S81\'");
                        bool temp5;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86707,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86707, out temp5);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp5);
                        this.Manager.Comment("reaching state \'S93\'");
                        int temp20 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker3)));
                        if ((temp20 == 0)) {
                            this.Manager.Comment("reaching state \'S105\'");
                            bool temp6;
                            bool temp7;
                            bool temp8;
                            bool temp9;
                            bool temp10;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp11;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp6, out temp7, out temp8, out temp9, out temp10, out temp11);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp6, temp7, temp8, temp9, temp10, temp11);
                            this.Manager.Comment("reaching state \'S129\'");
                            int temp12 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker1)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker2)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker3)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker4)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker5)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker6)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker7)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker8)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker9)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker10)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker11)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker12)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker13)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker14)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker15)));
                            if ((temp12 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS153();
                                goto label0;
                            }
                            if ((temp12 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS153();
                                goto label0;
                            }
                            if ((temp12 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS153();
                                goto label0;
                            }
                            if ((temp12 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS153();
                                goto label0;
                            }
                            if ((temp12 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS153();
                                goto label0;
                            }
                            if ((temp12 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS153();
                                goto label0;
                            }
                            if ((temp12 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS153();
                                goto label0;
                            }
                            if ((temp12 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS153();
                                goto label0;
                            }
                            if ((temp12 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS153();
                                goto label0;
                            }
                            if ((temp12 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS153();
                                goto label0;
                            }
                            if ((temp12 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS153();
                                goto label0;
                            }
                            if ((temp12 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS153();
                                goto label0;
                            }
                            if ((temp12 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS153();
                                goto label0;
                            }
                            if ((temp12 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS153();
                                goto label0;
                            }
                            if ((temp12 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS153();
                                goto label0;
                            }
                            if ((temp12 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS153();
                                goto label0;
                            }
                            throw new InvalidOperationException("never reached");
                        label0:
;
                            goto label2;
                        }
                        if ((temp20 == 1)) {
                            this.Manager.Comment("reaching state \'S106\'");
                            bool temp13;
                            bool temp14;
                            bool temp15;
                            bool temp16;
                            bool temp17;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp18;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp13, out temp14, out temp15, out temp16, out temp17, out temp18);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp13, temp14, temp15, temp16, temp17, temp18);
                            this.Manager.Comment("reaching state \'S130\'");
                            int temp19 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker16)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker17)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker18)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker19)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker20)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker21)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker22)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker23)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker24)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker25)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker26)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker27)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker28)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker29)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker30)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker31)));
                            if ((temp19 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS154();
                                goto label1;
                            }
                            if ((temp19 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS154();
                                goto label1;
                            }
                            if ((temp19 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS154();
                                goto label1;
                            }
                            if ((temp19 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS154();
                                goto label1;
                            }
                            if ((temp19 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS154();
                                goto label1;
                            }
                            if ((temp19 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS154();
                                goto label1;
                            }
                            if ((temp19 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS154();
                                goto label1;
                            }
                            if ((temp19 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS154();
                                goto label1;
                            }
                            if ((temp19 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS154();
                                goto label1;
                            }
                            if ((temp19 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS154();
                                goto label1;
                            }
                            if ((temp19 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS154();
                                goto label1;
                            }
                            if ((temp19 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS154();
                                goto label1;
                            }
                            if ((temp19 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS154();
                                goto label1;
                            }
                            if ((temp19 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS154();
                                goto label1;
                            }
                            if ((temp19 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS154();
                                goto label1;
                            }
                            if ((temp19 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS154();
                                goto label1;
                            }
                            throw new InvalidOperationException("never reached");
                        label1:
;
                            goto label2;
                        }
                        throw new InvalidOperationException("never reached");
                    label2:
;
                        goto label6;
                    }
                    if ((temp38 == 1)) {
                        this.Manager.Comment("reaching state \'S58\'");
                        bool temp21;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(5070506,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(5070506, out temp21);
                        this.Manager.Comment("reaching state \'S70\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp21, "enabled of CheckRequirementEnabled, state S70");
                        this.Manager.Comment("reaching state \'S82\'");
                        bool temp22;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86707,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86707, out temp22);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp22);
                        this.Manager.Comment("reaching state \'S94\'");
                        int temp37 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker6)));
                        if ((temp37 == 0)) {
                            this.Manager.Comment("reaching state \'S107\'");
                            bool temp23;
                            bool temp24;
                            bool temp25;
                            bool temp26;
                            bool temp27;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp28;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp23, out temp24, out temp25, out temp26, out temp27, out temp28);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp23, temp24, temp25, temp26, temp27, temp28);
                            this.Manager.Comment("reaching state \'S131\'");
                            int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker32)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker33)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker34)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker35)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker36)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker37)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker38)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker39)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker40)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker41)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker42)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker43)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker44)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker45)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker46)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker47)));
                            if ((temp29 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS155();
                                goto label3;
                            }
                            if ((temp29 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS155();
                                goto label3;
                            }
                            if ((temp29 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS155();
                                goto label3;
                            }
                            if ((temp29 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS155();
                                goto label3;
                            }
                            if ((temp29 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS155();
                                goto label3;
                            }
                            if ((temp29 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS155();
                                goto label3;
                            }
                            if ((temp29 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS155();
                                goto label3;
                            }
                            if ((temp29 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS155();
                                goto label3;
                            }
                            if ((temp29 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS155();
                                goto label3;
                            }
                            if ((temp29 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS155();
                                goto label3;
                            }
                            if ((temp29 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS155();
                                goto label3;
                            }
                            if ((temp29 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS155();
                                goto label3;
                            }
                            if ((temp29 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS155();
                                goto label3;
                            }
                            if ((temp29 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS155();
                                goto label3;
                            }
                            if ((temp29 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS155();
                                goto label3;
                            }
                            if ((temp29 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS155();
                                goto label3;
                            }
                            throw new InvalidOperationException("never reached");
                        label3:
;
                            goto label5;
                        }
                        if ((temp37 == 1)) {
                            this.Manager.Comment("reaching state \'S108\'");
                            bool temp30;
                            bool temp31;
                            bool temp32;
                            bool temp33;
                            bool temp34;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp35;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp30, out temp31, out temp32, out temp33, out temp34, out temp35);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp30, temp31, temp32, temp33, temp34, temp35);
                            this.Manager.Comment("reaching state \'S132\'");
                            int temp36 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker48)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker49)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker50)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker51)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker52)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker53)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker54)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker55)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker56)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker57)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker58)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker59)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker60)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker61)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker62)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker63)));
                            if ((temp36 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS156();
                                goto label4;
                            }
                            if ((temp36 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS156();
                                goto label4;
                            }
                            if ((temp36 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS156();
                                goto label4;
                            }
                            if ((temp36 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS156();
                                goto label4;
                            }
                            if ((temp36 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS156();
                                goto label4;
                            }
                            if ((temp36 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS156();
                                goto label4;
                            }
                            if ((temp36 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS156();
                                goto label4;
                            }
                            if ((temp36 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS156();
                                goto label4;
                            }
                            if ((temp36 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS156();
                                goto label4;
                            }
                            if ((temp36 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS156();
                                goto label4;
                            }
                            if ((temp36 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS156();
                                goto label4;
                            }
                            if ((temp36 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS156();
                                goto label4;
                            }
                            if ((temp36 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS156();
                                goto label4;
                            }
                            if ((temp36 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS156();
                                goto label4;
                            }
                            if ((temp36 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS156();
                                goto label4;
                            }
                            if ((temp36 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS156();
                                goto label4;
                            }
                            throw new InvalidOperationException("never reached");
                        label4:
;
                            goto label5;
                        }
                        throw new InvalidOperationException("never reached");
                    label5:
;
                        goto label6;
                    }
                    throw new InvalidOperationException("never reached");
                label6:
;
                    goto label14;
                }
                if ((temp76 == 1)) {
                    this.Manager.Comment("reaching state \'S34\'");
                    bool temp39;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(18402,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(18402, out temp39);
                    this.Manager.Comment("reaching state \'S40\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp39, "enabled of CheckRequirementEnabled, state S40");
                    this.Manager.Comment("reaching state \'S46\'");
                    bool temp40;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86708,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86708, out temp40);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp40);
                    this.Manager.Comment("reaching state \'S52\'");
                    int temp75 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker11)));
                    if ((temp75 == 0)) {
                        this.Manager.Comment("reaching state \'S59\'");
                        bool temp41;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(5070506,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(5070506, out temp41);
                        this.Manager.Comment("reaching state \'S71\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp41, "enabled of CheckRequirementEnabled, state S71");
                        this.Manager.Comment("reaching state \'S83\'");
                        bool temp42;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86707,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86707, out temp42);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp42);
                        this.Manager.Comment("reaching state \'S95\'");
                        int temp57 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker10)));
                        if ((temp57 == 0)) {
                            this.Manager.Comment("reaching state \'S109\'");
                            bool temp43;
                            bool temp44;
                            bool temp45;
                            bool temp46;
                            bool temp47;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp48;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp43, out temp44, out temp45, out temp46, out temp47, out temp48);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp43, temp44, temp45, temp46, temp47, temp48);
                            this.Manager.Comment("reaching state \'S133\'");
                            int temp49 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker64)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker65)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker66)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker67)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker68)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker69)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker70)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker71)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker72)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker73)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker74)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker75)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker76)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker77)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker78)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker79)));
                            if ((temp49 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS157();
                                goto label7;
                            }
                            if ((temp49 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS157();
                                goto label7;
                            }
                            if ((temp49 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS157();
                                goto label7;
                            }
                            if ((temp49 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS157();
                                goto label7;
                            }
                            if ((temp49 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS157();
                                goto label7;
                            }
                            if ((temp49 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS157();
                                goto label7;
                            }
                            if ((temp49 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS157();
                                goto label7;
                            }
                            if ((temp49 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS157();
                                goto label7;
                            }
                            if ((temp49 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS157();
                                goto label7;
                            }
                            if ((temp49 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS157();
                                goto label7;
                            }
                            if ((temp49 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS157();
                                goto label7;
                            }
                            if ((temp49 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS157();
                                goto label7;
                            }
                            if ((temp49 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS157();
                                goto label7;
                            }
                            if ((temp49 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS157();
                                goto label7;
                            }
                            if ((temp49 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS157();
                                goto label7;
                            }
                            if ((temp49 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS157();
                                goto label7;
                            }
                            throw new InvalidOperationException("never reached");
                        label7:
;
                            goto label9;
                        }
                        if ((temp57 == 1)) {
                            this.Manager.Comment("reaching state \'S110\'");
                            bool temp50;
                            bool temp51;
                            bool temp52;
                            bool temp53;
                            bool temp54;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp55;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp50, out temp51, out temp52, out temp53, out temp54, out temp55);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp50, temp51, temp52, temp53, temp54, temp55);
                            this.Manager.Comment("reaching state \'S134\'");
                            int temp56 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker80)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker81)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker82)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker83)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker84)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker85)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker86)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker87)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker88)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker89)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker90)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker91)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker92)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker93)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker94)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker95)));
                            if ((temp56 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS158();
                                goto label8;
                            }
                            if ((temp56 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS158();
                                goto label8;
                            }
                            if ((temp56 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS158();
                                goto label8;
                            }
                            if ((temp56 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS158();
                                goto label8;
                            }
                            if ((temp56 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS158();
                                goto label8;
                            }
                            if ((temp56 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS158();
                                goto label8;
                            }
                            if ((temp56 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS158();
                                goto label8;
                            }
                            if ((temp56 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS158();
                                goto label8;
                            }
                            if ((temp56 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS158();
                                goto label8;
                            }
                            if ((temp56 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS158();
                                goto label8;
                            }
                            if ((temp56 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS158();
                                goto label8;
                            }
                            if ((temp56 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS158();
                                goto label8;
                            }
                            if ((temp56 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS158();
                                goto label8;
                            }
                            if ((temp56 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS158();
                                goto label8;
                            }
                            if ((temp56 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS158();
                                goto label8;
                            }
                            if ((temp56 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS158();
                                goto label8;
                            }
                            throw new InvalidOperationException("never reached");
                        label8:
;
                            goto label9;
                        }
                        throw new InvalidOperationException("never reached");
                    label9:
;
                        goto label13;
                    }
                    if ((temp75 == 1)) {
                        this.Manager.Comment("reaching state \'S60\'");
                        bool temp58;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(5070506,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(5070506, out temp58);
                        this.Manager.Comment("reaching state \'S72\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp58, "enabled of CheckRequirementEnabled, state S72");
                        this.Manager.Comment("reaching state \'S84\'");
                        bool temp59;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86707,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86707, out temp59);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp59);
                        this.Manager.Comment("reaching state \'S96\'");
                        int temp74 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker13)));
                        if ((temp74 == 0)) {
                            this.Manager.Comment("reaching state \'S111\'");
                            bool temp60;
                            bool temp61;
                            bool temp62;
                            bool temp63;
                            bool temp64;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp65;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp60, out temp61, out temp62, out temp63, out temp64, out temp65);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp60, temp61, temp62, temp63, temp64, temp65);
                            this.Manager.Comment("reaching state \'S135\'");
                            int temp66 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker96)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker97)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker98)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker99)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker100)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker101)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker102)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker103)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker104)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker105)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker106)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker107)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker108)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker109)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker110)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker111)));
                            if ((temp66 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS159();
                                goto label10;
                            }
                            if ((temp66 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS159();
                                goto label10;
                            }
                            if ((temp66 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS159();
                                goto label10;
                            }
                            if ((temp66 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS159();
                                goto label10;
                            }
                            if ((temp66 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS159();
                                goto label10;
                            }
                            if ((temp66 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS159();
                                goto label10;
                            }
                            if ((temp66 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS159();
                                goto label10;
                            }
                            if ((temp66 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS159();
                                goto label10;
                            }
                            if ((temp66 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS159();
                                goto label10;
                            }
                            if ((temp66 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS159();
                                goto label10;
                            }
                            if ((temp66 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS159();
                                goto label10;
                            }
                            if ((temp66 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS159();
                                goto label10;
                            }
                            if ((temp66 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS159();
                                goto label10;
                            }
                            if ((temp66 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS159();
                                goto label10;
                            }
                            if ((temp66 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS159();
                                goto label10;
                            }
                            if ((temp66 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS159();
                                goto label10;
                            }
                            throw new InvalidOperationException("never reached");
                        label10:
;
                            goto label12;
                        }
                        if ((temp74 == 1)) {
                            this.Manager.Comment("reaching state \'S112\'");
                            bool temp67;
                            bool temp68;
                            bool temp69;
                            bool temp70;
                            bool temp71;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp72;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp67, out temp68, out temp69, out temp70, out temp71, out temp72);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp67, temp68, temp69, temp70, temp71, temp72);
                            this.Manager.Comment("reaching state \'S136\'");
                            int temp73 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker112)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker113)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker114)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker115)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker116)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker117)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker118)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker119)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker120)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker121)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker122)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker123)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker124)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker125)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker126)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker127)));
                            if ((temp73 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS160();
                                goto label11;
                            }
                            if ((temp73 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS160();
                                goto label11;
                            }
                            if ((temp73 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS160();
                                goto label11;
                            }
                            if ((temp73 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS160();
                                goto label11;
                            }
                            if ((temp73 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS160();
                                goto label11;
                            }
                            if ((temp73 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS160();
                                goto label11;
                            }
                            if ((temp73 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS160();
                                goto label11;
                            }
                            if ((temp73 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS160();
                                goto label11;
                            }
                            if ((temp73 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS160();
                                goto label11;
                            }
                            if ((temp73 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS160();
                                goto label11;
                            }
                            if ((temp73 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS160();
                                goto label11;
                            }
                            if ((temp73 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS160();
                                goto label11;
                            }
                            if ((temp73 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS160();
                                goto label11;
                            }
                            if ((temp73 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS160();
                                goto label11;
                            }
                            if ((temp73 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS160();
                                goto label11;
                            }
                            if ((temp73 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS160();
                                goto label11;
                            }
                            throw new InvalidOperationException("never reached");
                        label11:
;
                            goto label12;
                        }
                        throw new InvalidOperationException("never reached");
                    label12:
;
                        goto label13;
                    }
                    throw new InvalidOperationException("never reached");
                label13:
;
                    goto label14;
                }
                throw new InvalidOperationException("never reached");
            label14:
;
                goto label15;
            }
            if ((temp77 == 1)) {
                this.Manager.Comment("reaching state \'S7\'");
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S30");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S51");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S93");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS153() {
            this.Manager.Comment("reaching state \'S153\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker1(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker2(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker3(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker4(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker5(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker6(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker7(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker8(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker9(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker10(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker11(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker12(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker13(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker14(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker15(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S93");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker16(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS154() {
            this.Manager.Comment("reaching state \'S154\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker17(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker18(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker19(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker20(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker21(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker22(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker23(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker24(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker25(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker26(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker27(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker28(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker29(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker30(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker31(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S51");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S94");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker32(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS155() {
            this.Manager.Comment("reaching state \'S155\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker33(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker34(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker35(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker36(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker37(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker38(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker39(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker40(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker41(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker42(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker43(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker44(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker45(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker46(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker47(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S131");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S94");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker48(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS156() {
            this.Manager.Comment("reaching state \'S156\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker49(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker50(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker51(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker52(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker53(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker54(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker55(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker56(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker57(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker58(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker59(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker60(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker61(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker62(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker63(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S30");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S52");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S95");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker64(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS157() {
            this.Manager.Comment("reaching state \'S157\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker65(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker66(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker67(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker68(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker69(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker70(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker71(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker72(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker73(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker74(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker75(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker76(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker77(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker78(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker79(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S133");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S95");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker80(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS158() {
            this.Manager.Comment("reaching state \'S158\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker81(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker82(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker83(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker84(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker85(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker86(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker87(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker88(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker89(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker90(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker91(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker92(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker93(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker94(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker95(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S134");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S52");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S96");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker96(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS159() {
            this.Manager.Comment("reaching state \'S159\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker97(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker98(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker99(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker100(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker101(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker102(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker103(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker104(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker105(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker106(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker107(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker108(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker109(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker110(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker111(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S135");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S96");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker112(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS160() {
            this.Manager.Comment("reaching state \'S160\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker113(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker114(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker115(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker116(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker117(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker118(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker119(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker120(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker121(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker122(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker123(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker124(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker125(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker126(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteRopCopyToMethodChecker127(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp78;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp78);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp78);
            this.Manager.Comment("reaching state \'S3\'");
            int temp155 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp155 == 0)) {
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S13\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S19\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S25\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S28\'");
                bool temp79;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86702,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86702, out temp79);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp79);
                this.Manager.Comment("reaching state \'S31\'");
                int temp154 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker7)));
                if ((temp154 == 0)) {
                    this.Manager.Comment("reaching state \'S35\'");
                    bool temp80;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(18402,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(18402, out temp80);
                    this.Manager.Comment("reaching state \'S41\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp80, "enabled of CheckRequirementEnabled, state S41");
                    this.Manager.Comment("reaching state \'S47\'");
                    bool temp81;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86708,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86708, out temp81);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp81);
                    this.Manager.Comment("reaching state \'S53\'");
                    int temp116 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker4)));
                    if ((temp116 == 0)) {
                        this.Manager.Comment("reaching state \'S61\'");
                        bool temp82;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(5070506,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(5070506, out temp82);
                        this.Manager.Comment("reaching state \'S73\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp82, "enabled of CheckRequirementEnabled, state S73");
                        this.Manager.Comment("reaching state \'S85\'");
                        bool temp83;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86707,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86707, out temp83);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp83);
                        this.Manager.Comment("reaching state \'S97\'");
                        int temp98 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker3)));
                        if ((temp98 == 0)) {
                            this.Manager.Comment("reaching state \'S113\'");
                            bool temp84;
                            bool temp85;
                            bool temp86;
                            bool temp87;
                            bool temp88;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp89;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp84, out temp85, out temp86, out temp87, out temp88, out temp89);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp84, temp85, temp86, temp87, temp88, temp89);
                            this.Manager.Comment("reaching state \'S137\'");
                            int temp90 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker1)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker2)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker3)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker4)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker5)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker6)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker7)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker8)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker9)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker10)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker11)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker12)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker13)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker14)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker15)));
                            if ((temp90 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS161();
                                goto label16;
                            }
                            if ((temp90 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS161();
                                goto label16;
                            }
                            if ((temp90 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS161();
                                goto label16;
                            }
                            if ((temp90 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS161();
                                goto label16;
                            }
                            if ((temp90 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS161();
                                goto label16;
                            }
                            if ((temp90 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS161();
                                goto label16;
                            }
                            if ((temp90 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS161();
                                goto label16;
                            }
                            if ((temp90 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS161();
                                goto label16;
                            }
                            if ((temp90 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS161();
                                goto label16;
                            }
                            if ((temp90 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS161();
                                goto label16;
                            }
                            if ((temp90 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS161();
                                goto label16;
                            }
                            if ((temp90 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS161();
                                goto label16;
                            }
                            if ((temp90 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS161();
                                goto label16;
                            }
                            if ((temp90 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS161();
                                goto label16;
                            }
                            if ((temp90 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS161();
                                goto label16;
                            }
                            if ((temp90 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS161();
                                goto label16;
                            }
                            throw new InvalidOperationException("never reached");
                        label16:
;
                            goto label18;
                        }
                        if ((temp98 == 1)) {
                            this.Manager.Comment("reaching state \'S114\'");
                            bool temp91;
                            bool temp92;
                            bool temp93;
                            bool temp94;
                            bool temp95;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp96;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp91, out temp92, out temp93, out temp94, out temp95, out temp96);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp91, temp92, temp93, temp94, temp95, temp96);
                            this.Manager.Comment("reaching state \'S138\'");
                            int temp97 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker16)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker17)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker18)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker19)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker20)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker21)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker22)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker23)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker24)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker25)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker26)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker27)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker28)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker29)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker30)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker31)));
                            if ((temp97 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS162();
                                goto label17;
                            }
                            if ((temp97 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS162();
                                goto label17;
                            }
                            if ((temp97 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS162();
                                goto label17;
                            }
                            if ((temp97 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS162();
                                goto label17;
                            }
                            if ((temp97 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS162();
                                goto label17;
                            }
                            if ((temp97 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS162();
                                goto label17;
                            }
                            if ((temp97 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS162();
                                goto label17;
                            }
                            if ((temp97 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS162();
                                goto label17;
                            }
                            if ((temp97 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS162();
                                goto label17;
                            }
                            if ((temp97 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS162();
                                goto label17;
                            }
                            if ((temp97 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS162();
                                goto label17;
                            }
                            if ((temp97 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS162();
                                goto label17;
                            }
                            if ((temp97 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS162();
                                goto label17;
                            }
                            if ((temp97 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS162();
                                goto label17;
                            }
                            if ((temp97 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS162();
                                goto label17;
                            }
                            if ((temp97 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS162();
                                goto label17;
                            }
                            throw new InvalidOperationException("never reached");
                        label17:
;
                            goto label18;
                        }
                        throw new InvalidOperationException("never reached");
                    label18:
;
                        goto label22;
                    }
                    if ((temp116 == 1)) {
                        this.Manager.Comment("reaching state \'S62\'");
                        bool temp99;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(5070506,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(5070506, out temp99);
                        this.Manager.Comment("reaching state \'S74\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp99, "enabled of CheckRequirementEnabled, state S74");
                        this.Manager.Comment("reaching state \'S86\'");
                        bool temp100;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86707,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86707, out temp100);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp100);
                        this.Manager.Comment("reaching state \'S98\'");
                        int temp115 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker6)));
                        if ((temp115 == 0)) {
                            this.Manager.Comment("reaching state \'S115\'");
                            bool temp101;
                            bool temp102;
                            bool temp103;
                            bool temp104;
                            bool temp105;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp106;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp101, out temp102, out temp103, out temp104, out temp105, out temp106);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp101, temp102, temp103, temp104, temp105, temp106);
                            this.Manager.Comment("reaching state \'S139\'");
                            int temp107 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker32)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker33)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker34)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker35)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker36)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker37)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker38)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker39)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker40)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker41)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker42)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker43)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker44)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker45)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker46)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker47)));
                            if ((temp107 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS163();
                                goto label19;
                            }
                            if ((temp107 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS163();
                                goto label19;
                            }
                            if ((temp107 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS163();
                                goto label19;
                            }
                            if ((temp107 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS163();
                                goto label19;
                            }
                            if ((temp107 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS163();
                                goto label19;
                            }
                            if ((temp107 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS163();
                                goto label19;
                            }
                            if ((temp107 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS163();
                                goto label19;
                            }
                            if ((temp107 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS163();
                                goto label19;
                            }
                            if ((temp107 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS163();
                                goto label19;
                            }
                            if ((temp107 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS163();
                                goto label19;
                            }
                            if ((temp107 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS163();
                                goto label19;
                            }
                            if ((temp107 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS163();
                                goto label19;
                            }
                            if ((temp107 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS163();
                                goto label19;
                            }
                            if ((temp107 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS163();
                                goto label19;
                            }
                            if ((temp107 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS163();
                                goto label19;
                            }
                            if ((temp107 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS163();
                                goto label19;
                            }
                            throw new InvalidOperationException("never reached");
                        label19:
;
                            goto label21;
                        }
                        if ((temp115 == 1)) {
                            this.Manager.Comment("reaching state \'S116\'");
                            bool temp108;
                            bool temp109;
                            bool temp110;
                            bool temp111;
                            bool temp112;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp113;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp108, out temp109, out temp110, out temp111, out temp112, out temp113);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp108, temp109, temp110, temp111, temp112, temp113);
                            this.Manager.Comment("reaching state \'S140\'");
                            int temp114 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker48)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker49)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker50)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker51)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker52)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker53)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker54)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker55)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker56)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker57)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker58)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker59)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker60)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker61)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker62)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker63)));
                            if ((temp114 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS164();
                                goto label20;
                            }
                            if ((temp114 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS164();
                                goto label20;
                            }
                            if ((temp114 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS164();
                                goto label20;
                            }
                            if ((temp114 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS164();
                                goto label20;
                            }
                            if ((temp114 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS164();
                                goto label20;
                            }
                            if ((temp114 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS164();
                                goto label20;
                            }
                            if ((temp114 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS164();
                                goto label20;
                            }
                            if ((temp114 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS164();
                                goto label20;
                            }
                            if ((temp114 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS164();
                                goto label20;
                            }
                            if ((temp114 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS164();
                                goto label20;
                            }
                            if ((temp114 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS164();
                                goto label20;
                            }
                            if ((temp114 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS164();
                                goto label20;
                            }
                            if ((temp114 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS164();
                                goto label20;
                            }
                            if ((temp114 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS164();
                                goto label20;
                            }
                            if ((temp114 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS164();
                                goto label20;
                            }
                            if ((temp114 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS164();
                                goto label20;
                            }
                            throw new InvalidOperationException("never reached");
                        label20:
;
                            goto label21;
                        }
                        throw new InvalidOperationException("never reached");
                    label21:
;
                        goto label22;
                    }
                    throw new InvalidOperationException("never reached");
                label22:
;
                    goto label30;
                }
                if ((temp154 == 1)) {
                    this.Manager.Comment("reaching state \'S36\'");
                    bool temp117;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(18402,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(18402, out temp117);
                    this.Manager.Comment("reaching state \'S42\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp117, "enabled of CheckRequirementEnabled, state S42");
                    this.Manager.Comment("reaching state \'S48\'");
                    bool temp118;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86708,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86708, out temp118);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp118);
                    this.Manager.Comment("reaching state \'S54\'");
                    int temp153 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker11)));
                    if ((temp153 == 0)) {
                        this.Manager.Comment("reaching state \'S63\'");
                        bool temp119;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(5070506,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(5070506, out temp119);
                        this.Manager.Comment("reaching state \'S75\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp119, "enabled of CheckRequirementEnabled, state S75");
                        this.Manager.Comment("reaching state \'S87\'");
                        bool temp120;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86707,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86707, out temp120);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp120);
                        this.Manager.Comment("reaching state \'S99\'");
                        int temp135 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker10)));
                        if ((temp135 == 0)) {
                            this.Manager.Comment("reaching state \'S117\'");
                            bool temp121;
                            bool temp122;
                            bool temp123;
                            bool temp124;
                            bool temp125;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp126;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp121, out temp122, out temp123, out temp124, out temp125, out temp126);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp121, temp122, temp123, temp124, temp125, temp126);
                            this.Manager.Comment("reaching state \'S141\'");
                            int temp127 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker64)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker65)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker66)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker67)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker68)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker69)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker70)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker71)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker72)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker73)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker74)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker75)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker76)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker77)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker78)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker79)));
                            if ((temp127 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS165();
                                goto label23;
                            }
                            if ((temp127 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS165();
                                goto label23;
                            }
                            if ((temp127 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS165();
                                goto label23;
                            }
                            if ((temp127 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS165();
                                goto label23;
                            }
                            if ((temp127 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS165();
                                goto label23;
                            }
                            if ((temp127 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS165();
                                goto label23;
                            }
                            if ((temp127 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS165();
                                goto label23;
                            }
                            if ((temp127 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS165();
                                goto label23;
                            }
                            if ((temp127 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS165();
                                goto label23;
                            }
                            if ((temp127 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS165();
                                goto label23;
                            }
                            if ((temp127 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS165();
                                goto label23;
                            }
                            if ((temp127 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS165();
                                goto label23;
                            }
                            if ((temp127 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS165();
                                goto label23;
                            }
                            if ((temp127 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS165();
                                goto label23;
                            }
                            if ((temp127 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS165();
                                goto label23;
                            }
                            if ((temp127 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS165();
                                goto label23;
                            }
                            throw new InvalidOperationException("never reached");
                        label23:
;
                            goto label25;
                        }
                        if ((temp135 == 1)) {
                            this.Manager.Comment("reaching state \'S118\'");
                            bool temp128;
                            bool temp129;
                            bool temp130;
                            bool temp131;
                            bool temp132;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp133;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp128, out temp129, out temp130, out temp131, out temp132, out temp133);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp128, temp129, temp130, temp131, temp132, temp133);
                            this.Manager.Comment("reaching state \'S142\'");
                            int temp134 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker80)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker81)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker82)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker83)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker84)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker85)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker86)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker87)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker88)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker89)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker90)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker91)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker92)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker93)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker94)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker95)));
                            if ((temp134 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS166();
                                goto label24;
                            }
                            if ((temp134 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS166();
                                goto label24;
                            }
                            if ((temp134 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS166();
                                goto label24;
                            }
                            if ((temp134 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS166();
                                goto label24;
                            }
                            if ((temp134 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS166();
                                goto label24;
                            }
                            if ((temp134 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS166();
                                goto label24;
                            }
                            if ((temp134 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS166();
                                goto label24;
                            }
                            if ((temp134 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS166();
                                goto label24;
                            }
                            if ((temp134 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS166();
                                goto label24;
                            }
                            if ((temp134 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS166();
                                goto label24;
                            }
                            if ((temp134 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS166();
                                goto label24;
                            }
                            if ((temp134 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS166();
                                goto label24;
                            }
                            if ((temp134 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS166();
                                goto label24;
                            }
                            if ((temp134 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS166();
                                goto label24;
                            }
                            if ((temp134 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS166();
                                goto label24;
                            }
                            if ((temp134 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS166();
                                goto label24;
                            }
                            throw new InvalidOperationException("never reached");
                        label24:
;
                            goto label25;
                        }
                        throw new InvalidOperationException("never reached");
                    label25:
;
                        goto label29;
                    }
                    if ((temp153 == 1)) {
                        this.Manager.Comment("reaching state \'S64\'");
                        bool temp136;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(5070506,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(5070506, out temp136);
                        this.Manager.Comment("reaching state \'S76\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp136, "enabled of CheckRequirementEnabled, state S76");
                        this.Manager.Comment("reaching state \'S88\'");
                        bool temp137;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86707,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86707, out temp137);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp137);
                        this.Manager.Comment("reaching state \'S100\'");
                        int temp152 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker13)));
                        if ((temp152 == 0)) {
                            this.Manager.Comment("reaching state \'S119\'");
                            bool temp138;
                            bool temp139;
                            bool temp140;
                            bool temp141;
                            bool temp142;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp143;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp138, out temp139, out temp140, out temp141, out temp142, out temp143);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp138, temp139, temp140, temp141, temp142, temp143);
                            this.Manager.Comment("reaching state \'S143\'");
                            int temp144 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker96)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker97)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker98)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker99)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker100)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker101)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker102)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker103)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker104)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker105)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker106)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker107)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker108)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker109)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker110)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker111)));
                            if ((temp144 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS167();
                                goto label26;
                            }
                            if ((temp144 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS167();
                                goto label26;
                            }
                            if ((temp144 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS167();
                                goto label26;
                            }
                            if ((temp144 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS167();
                                goto label26;
                            }
                            if ((temp144 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS167();
                                goto label26;
                            }
                            if ((temp144 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS167();
                                goto label26;
                            }
                            if ((temp144 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS167();
                                goto label26;
                            }
                            if ((temp144 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS167();
                                goto label26;
                            }
                            if ((temp144 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS167();
                                goto label26;
                            }
                            if ((temp144 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS167();
                                goto label26;
                            }
                            if ((temp144 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS167();
                                goto label26;
                            }
                            if ((temp144 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS167();
                                goto label26;
                            }
                            if ((temp144 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS167();
                                goto label26;
                            }
                            if ((temp144 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS167();
                                goto label26;
                            }
                            if ((temp144 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS167();
                                goto label26;
                            }
                            if ((temp144 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS167();
                                goto label26;
                            }
                            throw new InvalidOperationException("never reached");
                        label26:
;
                            goto label28;
                        }
                        if ((temp152 == 1)) {
                            this.Manager.Comment("reaching state \'S120\'");
                            bool temp145;
                            bool temp146;
                            bool temp147;
                            bool temp148;
                            bool temp149;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp150;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp145, out temp146, out temp147, out temp148, out temp149, out temp150);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp145, temp146, temp147, temp148, temp149, temp150);
                            this.Manager.Comment("reaching state \'S144\'");
                            int temp151 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker112)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker113)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker114)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker115)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker116)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker117)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker118)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker119)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker120)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker121)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker122)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker123)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker124)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker125)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker126)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker127)));
                            if ((temp151 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS168();
                                goto label27;
                            }
                            if ((temp151 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS168();
                                goto label27;
                            }
                            if ((temp151 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS168();
                                goto label27;
                            }
                            if ((temp151 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS168();
                                goto label27;
                            }
                            if ((temp151 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS168();
                                goto label27;
                            }
                            if ((temp151 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS168();
                                goto label27;
                            }
                            if ((temp151 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS168();
                                goto label27;
                            }
                            if ((temp151 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS168();
                                goto label27;
                            }
                            if ((temp151 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS168();
                                goto label27;
                            }
                            if ((temp151 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS168();
                                goto label27;
                            }
                            if ((temp151 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS168();
                                goto label27;
                            }
                            if ((temp151 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS168();
                                goto label27;
                            }
                            if ((temp151 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS168();
                                goto label27;
                            }
                            if ((temp151 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS168();
                                goto label27;
                            }
                            if ((temp151 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS168();
                                goto label27;
                            }
                            if ((temp151 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS168();
                                goto label27;
                            }
                            throw new InvalidOperationException("never reached");
                        label27:
;
                            goto label28;
                        }
                        throw new InvalidOperationException("never reached");
                    label28:
;
                        goto label29;
                    }
                    throw new InvalidOperationException("never reached");
                label29:
;
                    goto label30;
                }
                throw new InvalidOperationException("never reached");
            label30:
;
                goto label31;
            }
            if ((temp155 == 1)) {
                this.Manager.Comment("reaching state \'S9\'");
                goto label31;
            }
            throw new InvalidOperationException("never reached");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S31");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S53");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S97");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS161() {
            this.Manager.Comment("reaching state \'S161\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker1(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker2(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker3(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker4(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker5(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker6(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker7(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker8(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker9(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker10(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker11(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker12(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker13(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker14(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker15(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S97");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker16(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS162() {
            this.Manager.Comment("reaching state \'S162\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker17(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker18(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker19(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker20(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker21(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker22(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker23(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker24(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker25(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker26(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker27(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker28(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker29(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker30(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker31(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S53");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S98");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker32(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS163() {
            this.Manager.Comment("reaching state \'S163\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker33(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker34(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker35(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker36(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker37(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker38(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker39(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker40(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker41(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker42(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker43(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker44(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker45(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker46(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker47(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S98");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker48(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS164() {
            this.Manager.Comment("reaching state \'S164\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker49(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker50(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker51(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker52(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker53(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker54(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker55(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker56(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker57(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker58(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker59(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker60(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker61(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker62(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker63(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S31");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S54");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S99");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker64(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS165() {
            this.Manager.Comment("reaching state \'S165\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker65(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker66(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker67(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker68(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker69(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker70(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker71(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker72(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker73(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker74(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker75(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker76(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker77(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker78(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker79(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S99");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker80(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS166() {
            this.Manager.Comment("reaching state \'S166\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker81(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker82(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker83(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker84(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker85(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker86(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker87(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker88(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker89(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker90(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker91(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker92(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker93(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker94(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker95(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S54");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S100");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker96(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS167() {
            this.Manager.Comment("reaching state \'S167\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker97(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker98(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker99(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker100(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker101(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker102(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker103(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker104(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker105(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker106(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker107(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker108(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker109(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker110(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker111(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S100");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker112(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS168() {
            this.Manager.Comment("reaching state \'S168\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker113(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker114(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker115(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker116(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker117(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker118(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker119(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker120(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker121(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker122(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker123(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker124(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker125(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker126(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1RopCopyToMethodChecker127(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp156;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp156);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp156);
            this.Manager.Comment("reaching state \'S5\'");
            int temp233 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp233 == 0)) {
                this.Manager.Comment("reaching state \'S10\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S17\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("executing step \'call GetObject(Message,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S29\'");
                bool temp157;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86702,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86702, out temp157);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp157);
                this.Manager.Comment("reaching state \'S32\'");
                int temp232 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker7)));
                if ((temp232 == 0)) {
                    this.Manager.Comment("reaching state \'S37\'");
                    bool temp158;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(18402,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(18402, out temp158);
                    this.Manager.Comment("reaching state \'S43\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp158, "enabled of CheckRequirementEnabled, state S43");
                    this.Manager.Comment("reaching state \'S49\'");
                    bool temp159;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86708,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86708, out temp159);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp159);
                    this.Manager.Comment("reaching state \'S55\'");
                    int temp194 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker4)));
                    if ((temp194 == 0)) {
                        this.Manager.Comment("reaching state \'S65\'");
                        bool temp160;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(5070506,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(5070506, out temp160);
                        this.Manager.Comment("reaching state \'S77\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp160, "enabled of CheckRequirementEnabled, state S77");
                        this.Manager.Comment("reaching state \'S89\'");
                        bool temp161;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86707,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86707, out temp161);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp161);
                        this.Manager.Comment("reaching state \'S101\'");
                        int temp176 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker3)));
                        if ((temp176 == 0)) {
                            this.Manager.Comment("reaching state \'S121\'");
                            bool temp162;
                            bool temp163;
                            bool temp164;
                            bool temp165;
                            bool temp166;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp167;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp162, out temp163, out temp164, out temp165, out temp166, out temp167);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp162, temp163, temp164, temp165, temp166, temp167);
                            this.Manager.Comment("reaching state \'S145\'");
                            int temp168 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker1)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker2)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker3)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker4)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker5)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker6)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker7)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker8)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker9)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker10)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker11)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker12)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker13)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker14)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker15)));
                            if ((temp168 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS169();
                                goto label32;
                            }
                            if ((temp168 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS169();
                                goto label32;
                            }
                            if ((temp168 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS169();
                                goto label32;
                            }
                            if ((temp168 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS169();
                                goto label32;
                            }
                            if ((temp168 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS169();
                                goto label32;
                            }
                            if ((temp168 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS169();
                                goto label32;
                            }
                            if ((temp168 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS169();
                                goto label32;
                            }
                            if ((temp168 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS169();
                                goto label32;
                            }
                            if ((temp168 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS169();
                                goto label32;
                            }
                            if ((temp168 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS169();
                                goto label32;
                            }
                            if ((temp168 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS169();
                                goto label32;
                            }
                            if ((temp168 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS169();
                                goto label32;
                            }
                            if ((temp168 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS169();
                                goto label32;
                            }
                            if ((temp168 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS169();
                                goto label32;
                            }
                            if ((temp168 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS169();
                                goto label32;
                            }
                            if ((temp168 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS169();
                                goto label32;
                            }
                            throw new InvalidOperationException("never reached");
                        label32:
;
                            goto label34;
                        }
                        if ((temp176 == 1)) {
                            this.Manager.Comment("reaching state \'S122\'");
                            bool temp169;
                            bool temp170;
                            bool temp171;
                            bool temp172;
                            bool temp173;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp174;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp169, out temp170, out temp171, out temp172, out temp173, out temp174);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp169, temp170, temp171, temp172, temp173, temp174);
                            this.Manager.Comment("reaching state \'S146\'");
                            int temp175 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker16)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker17)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker18)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker19)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker20)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker21)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker22)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker23)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker24)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker25)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker26)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker27)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker28)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker29)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker30)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker31)));
                            if ((temp175 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS170();
                                goto label33;
                            }
                            if ((temp175 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS170();
                                goto label33;
                            }
                            if ((temp175 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS170();
                                goto label33;
                            }
                            if ((temp175 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS170();
                                goto label33;
                            }
                            if ((temp175 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS170();
                                goto label33;
                            }
                            if ((temp175 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS170();
                                goto label33;
                            }
                            if ((temp175 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS170();
                                goto label33;
                            }
                            if ((temp175 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS170();
                                goto label33;
                            }
                            if ((temp175 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS170();
                                goto label33;
                            }
                            if ((temp175 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS170();
                                goto label33;
                            }
                            if ((temp175 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS170();
                                goto label33;
                            }
                            if ((temp175 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS170();
                                goto label33;
                            }
                            if ((temp175 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS170();
                                goto label33;
                            }
                            if ((temp175 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS170();
                                goto label33;
                            }
                            if ((temp175 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS170();
                                goto label33;
                            }
                            if ((temp175 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS170();
                                goto label33;
                            }
                            throw new InvalidOperationException("never reached");
                        label33:
;
                            goto label34;
                        }
                        throw new InvalidOperationException("never reached");
                    label34:
;
                        goto label38;
                    }
                    if ((temp194 == 1)) {
                        this.Manager.Comment("reaching state \'S66\'");
                        bool temp177;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(5070506,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(5070506, out temp177);
                        this.Manager.Comment("reaching state \'S78\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp177, "enabled of CheckRequirementEnabled, state S78");
                        this.Manager.Comment("reaching state \'S90\'");
                        bool temp178;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86707,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86707, out temp178);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp178);
                        this.Manager.Comment("reaching state \'S102\'");
                        int temp193 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker6)));
                        if ((temp193 == 0)) {
                            this.Manager.Comment("reaching state \'S123\'");
                            bool temp179;
                            bool temp180;
                            bool temp181;
                            bool temp182;
                            bool temp183;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp184;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp179, out temp180, out temp181, out temp182, out temp183, out temp184);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp179, temp180, temp181, temp182, temp183, temp184);
                            this.Manager.Comment("reaching state \'S147\'");
                            int temp185 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker32)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker33)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker34)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker35)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker36)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker37)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker38)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker39)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker40)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker41)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker42)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker43)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker44)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker45)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker46)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker47)));
                            if ((temp185 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS171();
                                goto label35;
                            }
                            if ((temp185 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS171();
                                goto label35;
                            }
                            if ((temp185 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS171();
                                goto label35;
                            }
                            if ((temp185 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS171();
                                goto label35;
                            }
                            if ((temp185 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS171();
                                goto label35;
                            }
                            if ((temp185 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS171();
                                goto label35;
                            }
                            if ((temp185 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS171();
                                goto label35;
                            }
                            if ((temp185 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS171();
                                goto label35;
                            }
                            if ((temp185 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS171();
                                goto label35;
                            }
                            if ((temp185 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS171();
                                goto label35;
                            }
                            if ((temp185 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS171();
                                goto label35;
                            }
                            if ((temp185 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS171();
                                goto label35;
                            }
                            if ((temp185 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS171();
                                goto label35;
                            }
                            if ((temp185 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS171();
                                goto label35;
                            }
                            if ((temp185 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS171();
                                goto label35;
                            }
                            if ((temp185 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS171();
                                goto label35;
                            }
                            throw new InvalidOperationException("never reached");
                        label35:
;
                            goto label37;
                        }
                        if ((temp193 == 1)) {
                            this.Manager.Comment("reaching state \'S124\'");
                            bool temp186;
                            bool temp187;
                            bool temp188;
                            bool temp189;
                            bool temp190;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp191;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp186, out temp187, out temp188, out temp189, out temp190, out temp191);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp186, temp187, temp188, temp189, temp190, temp191);
                            this.Manager.Comment("reaching state \'S148\'");
                            int temp192 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker48)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker49)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker50)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker51)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker52)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker53)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker54)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker55)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker56)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker57)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker58)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker59)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker60)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker61)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker62)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker63)));
                            if ((temp192 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS172();
                                goto label36;
                            }
                            if ((temp192 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS172();
                                goto label36;
                            }
                            if ((temp192 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS172();
                                goto label36;
                            }
                            if ((temp192 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS172();
                                goto label36;
                            }
                            if ((temp192 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS172();
                                goto label36;
                            }
                            if ((temp192 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS172();
                                goto label36;
                            }
                            if ((temp192 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS172();
                                goto label36;
                            }
                            if ((temp192 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS172();
                                goto label36;
                            }
                            if ((temp192 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS172();
                                goto label36;
                            }
                            if ((temp192 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS172();
                                goto label36;
                            }
                            if ((temp192 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS172();
                                goto label36;
                            }
                            if ((temp192 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS172();
                                goto label36;
                            }
                            if ((temp192 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS172();
                                goto label36;
                            }
                            if ((temp192 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS172();
                                goto label36;
                            }
                            if ((temp192 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS172();
                                goto label36;
                            }
                            if ((temp192 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS172();
                                goto label36;
                            }
                            throw new InvalidOperationException("never reached");
                        label36:
;
                            goto label37;
                        }
                        throw new InvalidOperationException("never reached");
                    label37:
;
                        goto label38;
                    }
                    throw new InvalidOperationException("never reached");
                label38:
;
                    goto label46;
                }
                if ((temp232 == 1)) {
                    this.Manager.Comment("reaching state \'S38\'");
                    bool temp195;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(18402,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(18402, out temp195);
                    this.Manager.Comment("reaching state \'S44\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp195, "enabled of CheckRequirementEnabled, state S44");
                    this.Manager.Comment("reaching state \'S50\'");
                    bool temp196;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86708,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86708, out temp196);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp196);
                    this.Manager.Comment("reaching state \'S56\'");
                    int temp231 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker11)));
                    if ((temp231 == 0)) {
                        this.Manager.Comment("reaching state \'S67\'");
                        bool temp197;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(5070506,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(5070506, out temp197);
                        this.Manager.Comment("reaching state \'S79\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp197, "enabled of CheckRequirementEnabled, state S79");
                        this.Manager.Comment("reaching state \'S91\'");
                        bool temp198;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86707,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86707, out temp198);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp198);
                        this.Manager.Comment("reaching state \'S103\'");
                        int temp213 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker10)));
                        if ((temp213 == 0)) {
                            this.Manager.Comment("reaching state \'S125\'");
                            bool temp199;
                            bool temp200;
                            bool temp201;
                            bool temp202;
                            bool temp203;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp204;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp199, out temp200, out temp201, out temp202, out temp203, out temp204);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp199, temp200, temp201, temp202, temp203, temp204);
                            this.Manager.Comment("reaching state \'S149\'");
                            int temp205 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker64)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker65)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker66)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker67)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker68)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker69)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker70)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker71)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker72)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker73)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker74)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker75)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker76)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker77)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker78)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker79)));
                            if ((temp205 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS173();
                                goto label39;
                            }
                            if ((temp205 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS173();
                                goto label39;
                            }
                            if ((temp205 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS173();
                                goto label39;
                            }
                            if ((temp205 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS173();
                                goto label39;
                            }
                            if ((temp205 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS173();
                                goto label39;
                            }
                            if ((temp205 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS173();
                                goto label39;
                            }
                            if ((temp205 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS173();
                                goto label39;
                            }
                            if ((temp205 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS173();
                                goto label39;
                            }
                            if ((temp205 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS173();
                                goto label39;
                            }
                            if ((temp205 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS173();
                                goto label39;
                            }
                            if ((temp205 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS173();
                                goto label39;
                            }
                            if ((temp205 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS173();
                                goto label39;
                            }
                            if ((temp205 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS173();
                                goto label39;
                            }
                            if ((temp205 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS173();
                                goto label39;
                            }
                            if ((temp205 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS173();
                                goto label39;
                            }
                            if ((temp205 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS173();
                                goto label39;
                            }
                            throw new InvalidOperationException("never reached");
                        label39:
;
                            goto label41;
                        }
                        if ((temp213 == 1)) {
                            this.Manager.Comment("reaching state \'S126\'");
                            bool temp206;
                            bool temp207;
                            bool temp208;
                            bool temp209;
                            bool temp210;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp211;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp206, out temp207, out temp208, out temp209, out temp210, out temp211);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp206, temp207, temp208, temp209, temp210, temp211);
                            this.Manager.Comment("reaching state \'S150\'");
                            int temp212 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker80)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker81)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker82)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker83)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker84)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker85)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker86)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker87)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker88)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker89)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker90)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker91)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker92)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker93)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker94)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker95)));
                            if ((temp212 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS174();
                                goto label40;
                            }
                            if ((temp212 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS174();
                                goto label40;
                            }
                            if ((temp212 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS174();
                                goto label40;
                            }
                            if ((temp212 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS174();
                                goto label40;
                            }
                            if ((temp212 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS174();
                                goto label40;
                            }
                            if ((temp212 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS174();
                                goto label40;
                            }
                            if ((temp212 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS174();
                                goto label40;
                            }
                            if ((temp212 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS174();
                                goto label40;
                            }
                            if ((temp212 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS174();
                                goto label40;
                            }
                            if ((temp212 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS174();
                                goto label40;
                            }
                            if ((temp212 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS174();
                                goto label40;
                            }
                            if ((temp212 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS174();
                                goto label40;
                            }
                            if ((temp212 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS174();
                                goto label40;
                            }
                            if ((temp212 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS174();
                                goto label40;
                            }
                            if ((temp212 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS174();
                                goto label40;
                            }
                            if ((temp212 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS174();
                                goto label40;
                            }
                            throw new InvalidOperationException("never reached");
                        label40:
;
                            goto label41;
                        }
                        throw new InvalidOperationException("never reached");
                    label41:
;
                        goto label45;
                    }
                    if ((temp231 == 1)) {
                        this.Manager.Comment("reaching state \'S68\'");
                        bool temp214;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(5070506,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(5070506, out temp214);
                        this.Manager.Comment("reaching state \'S80\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp214, "enabled of CheckRequirementEnabled, state S80");
                        this.Manager.Comment("reaching state \'S92\'");
                        bool temp215;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86707,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86707, out temp215);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp215);
                        this.Manager.Comment("reaching state \'S104\'");
                        int temp230 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker13)));
                        if ((temp230 == 0)) {
                            this.Manager.Comment("reaching state \'S127\'");
                            bool temp216;
                            bool temp217;
                            bool temp218;
                            bool temp219;
                            bool temp220;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp221;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp216, out temp217, out temp218, out temp219, out temp220, out temp221);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp216, temp217, temp218, temp219, temp220, temp221);
                            this.Manager.Comment("reaching state \'S151\'");
                            int temp222 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker96)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker97)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker98)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker99)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker100)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker101)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker102)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker103)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker104)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker105)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker106)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker107)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker108)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker109)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker110)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker111)));
                            if ((temp222 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS175();
                                goto label42;
                            }
                            if ((temp222 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS175();
                                goto label42;
                            }
                            if ((temp222 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS175();
                                goto label42;
                            }
                            if ((temp222 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS175();
                                goto label42;
                            }
                            if ((temp222 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS175();
                                goto label42;
                            }
                            if ((temp222 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS175();
                                goto label42;
                            }
                            if ((temp222 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS175();
                                goto label42;
                            }
                            if ((temp222 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS175();
                                goto label42;
                            }
                            if ((temp222 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS175();
                                goto label42;
                            }
                            if ((temp222 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS175();
                                goto label42;
                            }
                            if ((temp222 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS175();
                                goto label42;
                            }
                            if ((temp222 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS175();
                                goto label42;
                            }
                            if ((temp222 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS175();
                                goto label42;
                            }
                            if ((temp222 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS175();
                                goto label42;
                            }
                            if ((temp222 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS175();
                                goto label42;
                            }
                            if ((temp222 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS175();
                                goto label42;
                            }
                            throw new InvalidOperationException("never reached");
                        label42:
;
                            goto label44;
                        }
                        if ((temp230 == 1)) {
                            this.Manager.Comment("reaching state \'S128\'");
                            bool temp223;
                            bool temp224;
                            bool temp225;
                            bool temp226;
                            bool temp227;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp228;
                            this.Manager.Comment("executing step \'call RopCopyToMethod(NoOverWrite,True,True,False,out _,out _,out " +
                                    "_,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyToMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, false, out temp223, out temp224, out temp225, out temp226, out temp227, out temp228);
                            this.Manager.Checkpoint("MS-OXCPRPT_R821");
                            this.Manager.AddReturn(RopCopyToMethodInfo, null, temp223, temp224, temp225, temp226, temp227, temp228);
                            this.Manager.Comment("reaching state \'S152\'");
                            int temp229 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker112)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker113)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker114)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker115)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker116)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker117)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker118)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker119)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker120)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker121)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker122)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker123)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker124)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker125)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker126)), new ExpectedReturn(S05_RopCopyToFailSynchronously_TestSuite.RopCopyToMethodInfo, null, new RopCopyToMethodDelegate1(this.MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker127)));
                            if ((temp229 == 0)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS176();
                                goto label43;
                            }
                            if ((temp229 == 1)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS176();
                                goto label43;
                            }
                            if ((temp229 == 2)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS176();
                                goto label43;
                            }
                            if ((temp229 == 3)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS176();
                                goto label43;
                            }
                            if ((temp229 == 4)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS176();
                                goto label43;
                            }
                            if ((temp229 == 5)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS176();
                                goto label43;
                            }
                            if ((temp229 == 6)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS176();
                                goto label43;
                            }
                            if ((temp229 == 7)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS176();
                                goto label43;
                            }
                            if ((temp229 == 8)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS176();
                                goto label43;
                            }
                            if ((temp229 == 9)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS176();
                                goto label43;
                            }
                            if ((temp229 == 10)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS176();
                                goto label43;
                            }
                            if ((temp229 == 11)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS176();
                                goto label43;
                            }
                            if ((temp229 == 12)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS176();
                                goto label43;
                            }
                            if ((temp229 == 13)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS176();
                                goto label43;
                            }
                            if ((temp229 == 14)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS176();
                                goto label43;
                            }
                            if ((temp229 == 15)) {
                                S05_RopCopyToFailSynchronously_TestSuiteS176();
                                goto label43;
                            }
                            throw new InvalidOperationException("never reached");
                        label43:
;
                            goto label44;
                        }
                        throw new InvalidOperationException("never reached");
                    label44:
;
                        goto label45;
                    }
                    throw new InvalidOperationException("never reached");
                label45:
;
                    goto label46;
                }
                throw new InvalidOperationException("never reached");
            label46:
;
                goto label47;
            }
            if ((temp233 == 1)) {
                this.Manager.Comment("reaching state \'S11\'");
                goto label47;
            }
            throw new InvalidOperationException("never reached");
        label47:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S32");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S55");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S101");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS169() {
            this.Manager.Comment("reaching state \'S169\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker1(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker2(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker3(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker4(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker5(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker6(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker7(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker8(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker9(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker10(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker11(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker12(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker13(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker14(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker15(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S101");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker16(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS170() {
            this.Manager.Comment("reaching state \'S170\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker17(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker18(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker19(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker20(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker21(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker22(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker23(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker24(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker25(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker26(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker27(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker28(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker29(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker30(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker31(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S55");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S102");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker32(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS171() {
            this.Manager.Comment("reaching state \'S171\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker33(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker34(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker35(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker36(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker37(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker38(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker39(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker40(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker41(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker42(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker43(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker44(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker45(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker46(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker47(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S102");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker48(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS172() {
            this.Manager.Comment("reaching state \'S172\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker49(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker50(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker51(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker52(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker53(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker54(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker55(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker56(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker57(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker58(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker59(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker60(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker61(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker62(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker63(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S32");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S56");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S103");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker64(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS173() {
            this.Manager.Comment("reaching state \'S173\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker65(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker66(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker67(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker68(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker69(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker70(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker71(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker72(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker73(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker74(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker75(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker76(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker77(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker78(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker79(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S103");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker80(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS174() {
            this.Manager.Comment("reaching state \'S174\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker81(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker82(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker83(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker84(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker85(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker86(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker87(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker88(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker89(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker90(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker91(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker92(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker93(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker94(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker95(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S56");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S104");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker96(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS175() {
            this.Manager.Comment("reaching state \'S175\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker97(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker98(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker99(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker100(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker101(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker102(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker103(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker104(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker105(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker106(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker107(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker108(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker109(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker110(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker111(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S104");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker112(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void S05_RopCopyToFailSynchronously_TestSuiteS176() {
            this.Manager.Comment("reaching state \'S176\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker113(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker114(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker115(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker116(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker117(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out True,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker118(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker119(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out True,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker120(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out False,out False,out False,out False,ou" +
                    "t True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker121(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out F" +
                    "alse,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker122(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker123(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out True,out False,out T" +
                    "rue,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker124(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker125(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out True,out False,out " +
                    "True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker126(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out True,out False,out False,out " +
                    "False,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2RopCopyToMethodChecker127(bool isPropertiesDeleted, bool isSubObjectCopied, bool isOverwriteDestination, bool isReturnedRopProgress, bool isChangedInDB, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyToMethod/[out True,out False,out False,out False,out" +
                    " True,out NullDestinationObject]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSubObjectCopied, "isSubObjectCopied of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyToMethod, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, error, "error of RopCopyToMethod, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R177");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R177");
        }
        
        private void MSOXCPRPT_S05_RopCopyToFailSynchronously_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
    }
}