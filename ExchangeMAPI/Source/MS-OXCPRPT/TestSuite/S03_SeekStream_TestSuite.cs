//-----------------------------------------------------------------------
// Copyright (c) 2014 Microsoft Corporation. All rights reserved.
// Use of this sample source code is subject to the terms of the Microsoft license 
// agreement under which you licensed this sample source code and is provided AS-IS.
// If you did not accept the terms of the license agreement, you are not authorized 
// to use this sample source code. For the terms of the license, please see the 
// license agreement between you and Microsoft.
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCPRPT {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.6.100.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S03_SeekStream_TestSuite : PtfTestClassBase {
        
        public S03_SeekStream_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter IMS_OXCPRPTAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCPRPTAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp23 == 0)) {
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S76\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S95\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S114\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S133\'");
                bool temp1;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(25505,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(25505, out temp1);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1);
                this.Manager.Comment("reaching state \'S152\'");
                int temp22 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker7)));
                if ((temp22 == 0)) {
                    this.Manager.Comment("reaching state \'S171\'");
                    bool temp2;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2561,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2561, out temp2);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp2);
                    this.Manager.Comment("reaching state \'S197\'");
                    int temp11 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker4)));
                    if ((temp11 == 0)) {
                        this.Manager.Comment("reaching state \'S223\'");
                        bool temp3;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp3);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                        this.Manager.Comment("reaching state \'S263\'");
                        int temp6 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker3)));
                        if ((temp6 == 0)) {
                            this.Manager.Comment("reaching state \'S291\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp4;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypStrin" +
                                    "g,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp4);
                            this.Manager.Comment("reaching state \'S347\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out NotSupported]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp4, "error of RopOpenStreamWithDifferentPropertyType, state S347");
                            this.Manager.Comment("reaching state \'S403\'");
                            goto label0;
                        }
                        if ((temp6 == 1)) {
                            this.Manager.Comment("reaching state \'S292\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp5;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypStrin" +
                                    "g,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp5);
                            this.Manager.Comment("reaching state \'S348\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out NotSupported]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp5, "error of RopOpenStreamWithDifferentPropertyType, state S348");
                            this.Manager.Comment("reaching state \'S404\'");
                            goto label0;
                        }
                        throw new InvalidOperationException("never reached");
                    label0:
;
                        goto label2;
                    }
                    if ((temp11 == 1)) {
                        this.Manager.Comment("reaching state \'S224\'");
                        bool temp7;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp7);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp7);
                        this.Manager.Comment("reaching state \'S264\'");
                        int temp10 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker5)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker6)));
                        if ((temp10 == 0)) {
                            this.Manager.Comment("reaching state \'S293\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp8;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypStrin" +
                                    "g,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp8);
                            this.Manager.Comment("reaching state \'S349\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out NotSupported]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp8, "error of RopOpenStreamWithDifferentPropertyType, state S349");
                            this.Manager.Comment("reaching state \'S405\'");
                            goto label1;
                        }
                        if ((temp10 == 1)) {
                            this.Manager.Comment("reaching state \'S294\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp9;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypStrin" +
                                    "g,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp9);
                            this.Manager.Comment("reaching state \'S350\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out NotSupported]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp9, "error of RopOpenStreamWithDifferentPropertyType, state S350");
                            this.Manager.Comment("reaching state \'S406\'");
                            goto label1;
                        }
                        throw new InvalidOperationException("never reached");
                    label1:
;
                        goto label2;
                    }
                    throw new InvalidOperationException("never reached");
                label2:
;
                    goto label6;
                }
                if ((temp22 == 1)) {
                    this.Manager.Comment("reaching state \'S172\'");
                    bool temp12;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2561,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2561, out temp12);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp12);
                    this.Manager.Comment("reaching state \'S198\'");
                    int temp21 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker8)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker11)));
                    if ((temp21 == 0)) {
                        this.Manager.Comment("reaching state \'S225\'");
                        bool temp13;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp13);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp13);
                        this.Manager.Comment("reaching state \'S265\'");
                        int temp16 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker9)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker10)));
                        if ((temp16 == 0)) {
                            this.Manager.Comment("reaching state \'S295\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp14;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypStrin" +
                                    "g,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp14);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25505");
                            this.Manager.Comment("reaching state \'S351\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp14, "error of RopOpenStreamWithDifferentPropertyType, state S351");
                            this.Manager.Comment("reaching state \'S407\'");
                            goto label3;
                        }
                        if ((temp16 == 1)) {
                            this.Manager.Comment("reaching state \'S296\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp15;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypStrin" +
                                    "g,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp15);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25505");
                            this.Manager.Comment("reaching state \'S352\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp15, "error of RopOpenStreamWithDifferentPropertyType, state S352");
                            this.Manager.Comment("reaching state \'S408\'");
                            goto label3;
                        }
                        throw new InvalidOperationException("never reached");
                    label3:
;
                        goto label5;
                    }
                    if ((temp21 == 1)) {
                        this.Manager.Comment("reaching state \'S226\'");
                        bool temp17;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp17);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp17);
                        this.Manager.Comment("reaching state \'S266\'");
                        int temp20 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker12)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker13)));
                        if ((temp20 == 0)) {
                            this.Manager.Comment("reaching state \'S297\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp18;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypStrin" +
                                    "g,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp18);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25505");
                            this.Manager.Comment("reaching state \'S353\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp18, "error of RopOpenStreamWithDifferentPropertyType, state S353");
                            this.Manager.Comment("reaching state \'S409\'");
                            goto label4;
                        }
                        if ((temp20 == 1)) {
                            this.Manager.Comment("reaching state \'S298\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp19;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypStrin" +
                                    "g,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp19);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25505");
                            this.Manager.Comment("reaching state \'S354\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp19, "error of RopOpenStreamWithDifferentPropertyType, state S354");
                            this.Manager.Comment("reaching state \'S410\'");
                            goto label4;
                        }
                        throw new InvalidOperationException("never reached");
                    label4:
;
                        goto label5;
                    }
                    throw new InvalidOperationException("never reached");
                label5:
;
                    goto label6;
                }
                throw new InvalidOperationException("never reached");
            label6:
;
                goto label7;
            }
            if ((temp23 == 1)) {
                this.Manager.Comment("reaching state \'S39\'");
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S152");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S197");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S263");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S263");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S197");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S264");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S264");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S152");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S198");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S265");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S265");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S198");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S266");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S266");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite1() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite1");
            this.Manager.Comment("reaching state \'S10\'");
            bool temp24;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp24);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp24);
            this.Manager.Comment("reaching state \'S11\'");
            int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp29 == 0)) {
                this.Manager.Comment("reaching state \'S48\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S81\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S100\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S119\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S138\'");
                bool temp25;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp26;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp25, out temp26);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S157\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp25, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S157");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp26, "error of RopOpenStreamMethod, state S157");
                this.Manager.Comment("reaching state \'S179\'");
                bool temp27;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp28;
                this.Manager.Comment("executing step \'call RopSeekStreamMethod(Normal,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopSeekStreamMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.SeekStreamCondition.Normal, out temp27, out temp28);
                this.Manager.Comment("reaching state \'S205\'");
                this.Manager.Comment("checking step \'return RopSeekStreamMethod/[out False,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp27, "isStreamExtended of RopSeekStreamMethod, state S205");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp28, "error of RopSeekStreamMethod, state S205");
                this.Manager.Comment("reaching state \'S237\'");
                goto label8;
            }
            if ((temp29 == 1)) {
                this.Manager.Comment("reaching state \'S49\'");
                goto label8;
            }
            throw new InvalidOperationException("never reached");
        label8:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite2() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite2");
            this.Manager.Comment("reaching state \'S12\'");
            bool temp30;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp30);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp30);
            this.Manager.Comment("reaching state \'S13\'");
            int temp35 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp35 == 0)) {
                this.Manager.Comment("reaching state \'S50\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S82\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S101\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S120\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S139\'");
                bool temp31;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp32;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp31, out temp32);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S158\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp31, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S158");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp32, "error of RopOpenStreamMethod, state S158");
                this.Manager.Comment("reaching state \'S180\'");
                bool temp33;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp34;
                this.Manager.Comment("executing step \'call RopSeekStreamMethod(MovedBeyondMaxStreamSize,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopSeekStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.SeekStreamCondition)(0)), out temp33, out temp34);
                this.Manager.Checkpoint("MS-OXCPRPT_R582");
                this.Manager.Comment("reaching state \'S206\'");
                this.Manager.Comment("checking step \'return RopSeekStreamMethod/[out False,out StreamSeekError]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp33, "isStreamExtended of RopSeekStreamMethod, state S206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.StreamSeekError, temp34, "error of RopSeekStreamMethod, state S206");
                this.Manager.Comment("reaching state \'S238\'");
                goto label9;
            }
            if ((temp35 == 1)) {
                this.Manager.Comment("reaching state \'S51\'");
                goto label9;
            }
            throw new InvalidOperationException("never reached");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S13");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S13");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite3() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite3");
            this.Manager.Comment("reaching state \'S14\'");
            bool temp36;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp36);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp36);
            this.Manager.Comment("reaching state \'S15\'");
            int temp59 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp59 == 0)) {
                this.Manager.Comment("reaching state \'S52\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S83\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S102\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S121\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S140\'");
                bool temp37;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(25505,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(25505, out temp37);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp37);
                this.Manager.Comment("reaching state \'S159\'");
                int temp58 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker7)));
                if ((temp58 == 0)) {
                    this.Manager.Comment("reaching state \'S181\'");
                    bool temp38;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2561,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2561, out temp38);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp38);
                    this.Manager.Comment("reaching state \'S207\'");
                    int temp47 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker1)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker4)));
                    if ((temp47 == 0)) {
                        this.Manager.Comment("reaching state \'S239\'");
                        bool temp39;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp39);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp39);
                        this.Manager.Comment("reaching state \'S275\'");
                        int temp42 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker2)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker3)));
                        if ((temp42 == 0)) {
                            this.Manager.Comment("reaching state \'S315\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp40;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypStrin" +
                                    "g,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp40);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25509");
                            this.Manager.Comment("reaching state \'S371\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp40, "error of RopOpenStreamWithDifferentPropertyType, state S371");
                            this.Manager.Comment("reaching state \'S427\'");
                            goto label10;
                        }
                        if ((temp42 == 1)) {
                            this.Manager.Comment("reaching state \'S316\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp41;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypStrin" +
                                    "g,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp41);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25509");
                            this.Manager.Comment("reaching state \'S372\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp41, "error of RopOpenStreamWithDifferentPropertyType, state S372");
                            this.Manager.Comment("reaching state \'S428\'");
                            goto label10;
                        }
                        throw new InvalidOperationException("never reached");
                    label10:
;
                        goto label12;
                    }
                    if ((temp47 == 1)) {
                        this.Manager.Comment("reaching state \'S240\'");
                        bool temp43;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp43);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp43);
                        this.Manager.Comment("reaching state \'S276\'");
                        int temp46 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker5)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker6)));
                        if ((temp46 == 0)) {
                            this.Manager.Comment("reaching state \'S317\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp44;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypStrin" +
                                    "g,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp44);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25509");
                            this.Manager.Comment("reaching state \'S373\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp44, "error of RopOpenStreamWithDifferentPropertyType, state S373");
                            this.Manager.Comment("reaching state \'S429\'");
                            goto label11;
                        }
                        if ((temp46 == 1)) {
                            this.Manager.Comment("reaching state \'S318\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp45;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypStrin" +
                                    "g,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp45);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25509");
                            this.Manager.Comment("reaching state \'S374\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp45, "error of RopOpenStreamWithDifferentPropertyType, state S374");
                            this.Manager.Comment("reaching state \'S430\'");
                            goto label11;
                        }
                        throw new InvalidOperationException("never reached");
                    label11:
;
                        goto label12;
                    }
                    throw new InvalidOperationException("never reached");
                label12:
;
                    goto label16;
                }
                if ((temp58 == 1)) {
                    this.Manager.Comment("reaching state \'S182\'");
                    bool temp48;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2561,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2561, out temp48);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp48);
                    this.Manager.Comment("reaching state \'S208\'");
                    int temp57 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker8)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker11)));
                    if ((temp57 == 0)) {
                        this.Manager.Comment("reaching state \'S241\'");
                        bool temp49;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp49);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp49);
                        this.Manager.Comment("reaching state \'S277\'");
                        int temp52 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker9)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker10)));
                        if ((temp52 == 0)) {
                            this.Manager.Comment("reaching state \'S319\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp50;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypStrin" +
                                    "g,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp50);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25509");
                            this.Manager.Comment("reaching state \'S375\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp50, "error of RopOpenStreamWithDifferentPropertyType, state S375");
                            this.Manager.Comment("reaching state \'S431\'");
                            goto label13;
                        }
                        if ((temp52 == 1)) {
                            this.Manager.Comment("reaching state \'S320\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp51;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypStrin" +
                                    "g,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp51);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25509");
                            this.Manager.Comment("reaching state \'S376\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp51, "error of RopOpenStreamWithDifferentPropertyType, state S376");
                            this.Manager.Comment("reaching state \'S432\'");
                            goto label13;
                        }
                        throw new InvalidOperationException("never reached");
                    label13:
;
                        goto label15;
                    }
                    if ((temp57 == 1)) {
                        this.Manager.Comment("reaching state \'S242\'");
                        bool temp53;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp53);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp53);
                        this.Manager.Comment("reaching state \'S278\'");
                        int temp56 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker12)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker13)));
                        if ((temp56 == 0)) {
                            this.Manager.Comment("reaching state \'S321\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp54;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypStrin" +
                                    "g,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp54);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25509");
                            this.Manager.Comment("reaching state \'S377\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp54, "error of RopOpenStreamWithDifferentPropertyType, state S377");
                            this.Manager.Comment("reaching state \'S433\'");
                            goto label14;
                        }
                        if ((temp56 == 1)) {
                            this.Manager.Comment("reaching state \'S322\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp55;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypStrin" +
                                    "g,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp55);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25509");
                            this.Manager.Comment("reaching state \'S378\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp55, "error of RopOpenStreamWithDifferentPropertyType, state S378");
                            this.Manager.Comment("reaching state \'S434\'");
                            goto label14;
                        }
                        throw new InvalidOperationException("never reached");
                    label14:
;
                        goto label15;
                    }
                    throw new InvalidOperationException("never reached");
                label15:
;
                    goto label16;
                }
                throw new InvalidOperationException("never reached");
            label16:
;
                goto label17;
            }
            if ((temp59 == 1)) {
                this.Manager.Comment("reaching state \'S53\'");
                goto label17;
            }
            throw new InvalidOperationException("never reached");
        label17:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S15");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S159");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S207");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S275");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S275");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S207");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S276");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S276");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S159");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S208");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S277");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S277");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S208");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S278");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite3CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S278");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S15");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite4() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite4");
            this.Manager.Comment("reaching state \'S16\'");
            bool temp60;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp60);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp60);
            this.Manager.Comment("reaching state \'S17\'");
            int temp83 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp83 == 0)) {
                this.Manager.Comment("reaching state \'S54\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S84\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S103\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S122\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S141\'");
                bool temp61;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(25505,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(25505, out temp61);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp61);
                this.Manager.Comment("reaching state \'S160\'");
                int temp82 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker7)));
                if ((temp82 == 0)) {
                    this.Manager.Comment("reaching state \'S183\'");
                    bool temp62;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2561,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2561, out temp62);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp62);
                    this.Manager.Comment("reaching state \'S209\'");
                    int temp71 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker1)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker4)));
                    if ((temp71 == 0)) {
                        this.Manager.Comment("reaching state \'S243\'");
                        bool temp63;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp63);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp63);
                        this.Manager.Comment("reaching state \'S279\'");
                        int temp66 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker2)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker3)));
                        if ((temp66 == 0)) {
                            this.Manager.Comment("reaching state \'S323\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp64;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp64);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25506");
                            this.Manager.Comment("reaching state \'S379\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp64, "error of RopOpenStreamWithDifferentPropertyType, state S379");
                            this.Manager.Comment("reaching state \'S435\'");
                            goto label18;
                        }
                        if ((temp66 == 1)) {
                            this.Manager.Comment("reaching state \'S324\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp65;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp65);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25506");
                            this.Manager.Comment("reaching state \'S380\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp65, "error of RopOpenStreamWithDifferentPropertyType, state S380");
                            this.Manager.Comment("reaching state \'S436\'");
                            goto label18;
                        }
                        throw new InvalidOperationException("never reached");
                    label18:
;
                        goto label20;
                    }
                    if ((temp71 == 1)) {
                        this.Manager.Comment("reaching state \'S244\'");
                        bool temp67;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp67);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp67);
                        this.Manager.Comment("reaching state \'S280\'");
                        int temp70 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker5)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker6)));
                        if ((temp70 == 0)) {
                            this.Manager.Comment("reaching state \'S325\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp68;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp68);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25506");
                            this.Manager.Comment("reaching state \'S381\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp68, "error of RopOpenStreamWithDifferentPropertyType, state S381");
                            this.Manager.Comment("reaching state \'S437\'");
                            goto label19;
                        }
                        if ((temp70 == 1)) {
                            this.Manager.Comment("reaching state \'S326\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp69;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp69);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25506");
                            this.Manager.Comment("reaching state \'S382\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp69, "error of RopOpenStreamWithDifferentPropertyType, state S382");
                            this.Manager.Comment("reaching state \'S438\'");
                            goto label19;
                        }
                        throw new InvalidOperationException("never reached");
                    label19:
;
                        goto label20;
                    }
                    throw new InvalidOperationException("never reached");
                label20:
;
                    goto label24;
                }
                if ((temp82 == 1)) {
                    this.Manager.Comment("reaching state \'S184\'");
                    bool temp72;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2561,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2561, out temp72);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp72);
                    this.Manager.Comment("reaching state \'S210\'");
                    int temp81 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker8)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker11)));
                    if ((temp81 == 0)) {
                        this.Manager.Comment("reaching state \'S245\'");
                        bool temp73;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp73);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp73);
                        this.Manager.Comment("reaching state \'S281\'");
                        int temp76 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker9)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker10)));
                        if ((temp76 == 0)) {
                            this.Manager.Comment("reaching state \'S327\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp74;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp74);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25506");
                            this.Manager.Comment("reaching state \'S383\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp74, "error of RopOpenStreamWithDifferentPropertyType, state S383");
                            this.Manager.Comment("reaching state \'S439\'");
                            goto label21;
                        }
                        if ((temp76 == 1)) {
                            this.Manager.Comment("reaching state \'S328\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp75;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp75);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25506");
                            this.Manager.Comment("reaching state \'S384\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp75, "error of RopOpenStreamWithDifferentPropertyType, state S384");
                            this.Manager.Comment("reaching state \'S440\'");
                            goto label21;
                        }
                        throw new InvalidOperationException("never reached");
                    label21:
;
                        goto label23;
                    }
                    if ((temp81 == 1)) {
                        this.Manager.Comment("reaching state \'S246\'");
                        bool temp77;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp77);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp77);
                        this.Manager.Comment("reaching state \'S282\'");
                        int temp80 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker12)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker13)));
                        if ((temp80 == 0)) {
                            this.Manager.Comment("reaching state \'S329\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp78;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp78);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25506");
                            this.Manager.Comment("reaching state \'S385\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp78, "error of RopOpenStreamWithDifferentPropertyType, state S385");
                            this.Manager.Comment("reaching state \'S441\'");
                            goto label22;
                        }
                        if ((temp80 == 1)) {
                            this.Manager.Comment("reaching state \'S330\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp79;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp79);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25506");
                            this.Manager.Comment("reaching state \'S386\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp79, "error of RopOpenStreamWithDifferentPropertyType, state S386");
                            this.Manager.Comment("reaching state \'S442\'");
                            goto label22;
                        }
                        throw new InvalidOperationException("never reached");
                    label22:
;
                        goto label23;
                    }
                    throw new InvalidOperationException("never reached");
                label23:
;
                    goto label24;
                }
                throw new InvalidOperationException("never reached");
            label24:
;
                goto label25;
            }
            if ((temp83 == 1)) {
                this.Manager.Comment("reaching state \'S55\'");
                goto label25;
            }
            throw new InvalidOperationException("never reached");
        label25:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S17");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S160");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S209");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S279");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S279");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S209");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S280");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S280");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S160");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S210");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S281");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S281");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S210");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S282");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite4CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S282");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S17");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite5() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite5");
            this.Manager.Comment("reaching state \'S18\'");
            bool temp84;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp84);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp84);
            this.Manager.Comment("reaching state \'S19\'");
            int temp107 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp107 == 0)) {
                this.Manager.Comment("reaching state \'S56\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S85\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S104\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S123\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S142\'");
                bool temp85;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(25505,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(25505, out temp85);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp85);
                this.Manager.Comment("reaching state \'S161\'");
                int temp106 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker7)));
                if ((temp106 == 0)) {
                    this.Manager.Comment("reaching state \'S185\'");
                    bool temp86;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2561,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2561, out temp86);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp86);
                    this.Manager.Comment("reaching state \'S211\'");
                    int temp95 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker1)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker4)));
                    if ((temp95 == 0)) {
                        this.Manager.Comment("reaching state \'S247\'");
                        bool temp87;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp87);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp87);
                        this.Manager.Comment("reaching state \'S283\'");
                        int temp90 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker2)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker3)));
                        if ((temp90 == 0)) {
                            this.Manager.Comment("reaching state \'S331\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp88;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypObjec" +
                                    "t,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypObject, out temp88);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25507");
                            this.Manager.Comment("reaching state \'S387\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp88, "error of RopOpenStreamWithDifferentPropertyType, state S387");
                            this.Manager.Comment("reaching state \'S443\'");
                            goto label26;
                        }
                        if ((temp90 == 1)) {
                            this.Manager.Comment("reaching state \'S332\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp89;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypObjec" +
                                    "t,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypObject, out temp89);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25507");
                            this.Manager.Comment("reaching state \'S388\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp89, "error of RopOpenStreamWithDifferentPropertyType, state S388");
                            this.Manager.Comment("reaching state \'S444\'");
                            goto label26;
                        }
                        throw new InvalidOperationException("never reached");
                    label26:
;
                        goto label28;
                    }
                    if ((temp95 == 1)) {
                        this.Manager.Comment("reaching state \'S248\'");
                        bool temp91;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp91);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp91);
                        this.Manager.Comment("reaching state \'S284\'");
                        int temp94 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker5)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker6)));
                        if ((temp94 == 0)) {
                            this.Manager.Comment("reaching state \'S333\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp92;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypObjec" +
                                    "t,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypObject, out temp92);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25507");
                            this.Manager.Comment("reaching state \'S389\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp92, "error of RopOpenStreamWithDifferentPropertyType, state S389");
                            this.Manager.Comment("reaching state \'S445\'");
                            goto label27;
                        }
                        if ((temp94 == 1)) {
                            this.Manager.Comment("reaching state \'S334\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp93;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypObjec" +
                                    "t,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypObject, out temp93);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25507");
                            this.Manager.Comment("reaching state \'S390\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp93, "error of RopOpenStreamWithDifferentPropertyType, state S390");
                            this.Manager.Comment("reaching state \'S446\'");
                            goto label27;
                        }
                        throw new InvalidOperationException("never reached");
                    label27:
;
                        goto label28;
                    }
                    throw new InvalidOperationException("never reached");
                label28:
;
                    goto label32;
                }
                if ((temp106 == 1)) {
                    this.Manager.Comment("reaching state \'S186\'");
                    bool temp96;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2561,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2561, out temp96);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp96);
                    this.Manager.Comment("reaching state \'S212\'");
                    int temp105 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker8)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker11)));
                    if ((temp105 == 0)) {
                        this.Manager.Comment("reaching state \'S249\'");
                        bool temp97;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp97);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp97);
                        this.Manager.Comment("reaching state \'S285\'");
                        int temp100 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker9)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker10)));
                        if ((temp100 == 0)) {
                            this.Manager.Comment("reaching state \'S335\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp98;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypObjec" +
                                    "t,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypObject, out temp98);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25507");
                            this.Manager.Comment("reaching state \'S391\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp98, "error of RopOpenStreamWithDifferentPropertyType, state S391");
                            this.Manager.Comment("reaching state \'S447\'");
                            goto label29;
                        }
                        if ((temp100 == 1)) {
                            this.Manager.Comment("reaching state \'S336\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp99;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypObjec" +
                                    "t,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypObject, out temp99);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25507");
                            this.Manager.Comment("reaching state \'S392\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp99, "error of RopOpenStreamWithDifferentPropertyType, state S392");
                            this.Manager.Comment("reaching state \'S448\'");
                            goto label29;
                        }
                        throw new InvalidOperationException("never reached");
                    label29:
;
                        goto label31;
                    }
                    if ((temp105 == 1)) {
                        this.Manager.Comment("reaching state \'S250\'");
                        bool temp101;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp101);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp101);
                        this.Manager.Comment("reaching state \'S286\'");
                        int temp104 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker12)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker13)));
                        if ((temp104 == 0)) {
                            this.Manager.Comment("reaching state \'S337\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp102;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypObjec" +
                                    "t,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypObject, out temp102);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25507");
                            this.Manager.Comment("reaching state \'S393\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp102, "error of RopOpenStreamWithDifferentPropertyType, state S393");
                            this.Manager.Comment("reaching state \'S449\'");
                            goto label30;
                        }
                        if ((temp104 == 1)) {
                            this.Manager.Comment("reaching state \'S338\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp103;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypObjec" +
                                    "t,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypObject, out temp103);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25507");
                            this.Manager.Comment("reaching state \'S394\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp103, "error of RopOpenStreamWithDifferentPropertyType, state S394");
                            this.Manager.Comment("reaching state \'S450\'");
                            goto label30;
                        }
                        throw new InvalidOperationException("never reached");
                    label30:
;
                        goto label31;
                    }
                    throw new InvalidOperationException("never reached");
                label31:
;
                    goto label32;
                }
                throw new InvalidOperationException("never reached");
            label32:
;
                goto label33;
            }
            if ((temp107 == 1)) {
                this.Manager.Comment("reaching state \'S57\'");
                goto label33;
            }
            throw new InvalidOperationException("never reached");
        label33:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S19");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S161");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S211");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S283");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S283");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S211");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S284");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S284");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S161");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S212");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S285");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S285");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S212");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S286");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite5CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S286");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S19");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite6() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite6");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp108;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp108);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp108);
            this.Manager.Comment("reaching state \'S3\'");
            int temp131 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite6CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite6CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp131 == 0)) {
                this.Manager.Comment("reaching state \'S40\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S77\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S96\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S115\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S134\'");
                bool temp109;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(25505,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(25505, out temp109);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp109);
                this.Manager.Comment("reaching state \'S153\'");
                int temp130 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker7)));
                if ((temp130 == 0)) {
                    this.Manager.Comment("reaching state \'S173\'");
                    bool temp110;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2561,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2561, out temp110);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp110);
                    this.Manager.Comment("reaching state \'S199\'");
                    int temp119 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker1)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker4)));
                    if ((temp119 == 0)) {
                        this.Manager.Comment("reaching state \'S227\'");
                        bool temp111;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp111);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp111);
                        this.Manager.Comment("reaching state \'S267\'");
                        int temp114 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker2)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker3)));
                        if ((temp114 == 0)) {
                            this.Manager.Comment("reaching state \'S299\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp112;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp112);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25502");
                            this.Manager.Comment("reaching state \'S355\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp112, "error of RopOpenStreamWithDifferentPropertyType, state S355");
                            this.Manager.Comment("reaching state \'S411\'");
                            goto label34;
                        }
                        if ((temp114 == 1)) {
                            this.Manager.Comment("reaching state \'S300\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp113;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp113);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25502");
                            this.Manager.Comment("reaching state \'S356\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp113, "error of RopOpenStreamWithDifferentPropertyType, state S356");
                            this.Manager.Comment("reaching state \'S412\'");
                            goto label34;
                        }
                        throw new InvalidOperationException("never reached");
                    label34:
;
                        goto label36;
                    }
                    if ((temp119 == 1)) {
                        this.Manager.Comment("reaching state \'S228\'");
                        bool temp115;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp115);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp115);
                        this.Manager.Comment("reaching state \'S268\'");
                        int temp118 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker5)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker6)));
                        if ((temp118 == 0)) {
                            this.Manager.Comment("reaching state \'S301\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp116;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp116);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25502");
                            this.Manager.Comment("reaching state \'S357\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp116, "error of RopOpenStreamWithDifferentPropertyType, state S357");
                            this.Manager.Comment("reaching state \'S413\'");
                            goto label35;
                        }
                        if ((temp118 == 1)) {
                            this.Manager.Comment("reaching state \'S302\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp117;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp117);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25502");
                            this.Manager.Comment("reaching state \'S358\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp117, "error of RopOpenStreamWithDifferentPropertyType, state S358");
                            this.Manager.Comment("reaching state \'S414\'");
                            goto label35;
                        }
                        throw new InvalidOperationException("never reached");
                    label35:
;
                        goto label36;
                    }
                    throw new InvalidOperationException("never reached");
                label36:
;
                    goto label40;
                }
                if ((temp130 == 1)) {
                    this.Manager.Comment("reaching state \'S174\'");
                    bool temp120;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2561,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2561, out temp120);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp120);
                    this.Manager.Comment("reaching state \'S200\'");
                    int temp129 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker8)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker11)));
                    if ((temp129 == 0)) {
                        this.Manager.Comment("reaching state \'S229\'");
                        bool temp121;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp121);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp121);
                        this.Manager.Comment("reaching state \'S269\'");
                        int temp124 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker9)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker10)));
                        if ((temp124 == 0)) {
                            this.Manager.Comment("reaching state \'S303\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp122;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp122);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25502");
                            this.Manager.Comment("reaching state \'S359\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp122, "error of RopOpenStreamWithDifferentPropertyType, state S359");
                            this.Manager.Comment("reaching state \'S415\'");
                            goto label37;
                        }
                        if ((temp124 == 1)) {
                            this.Manager.Comment("reaching state \'S304\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp123;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp123);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25502");
                            this.Manager.Comment("reaching state \'S360\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp123, "error of RopOpenStreamWithDifferentPropertyType, state S360");
                            this.Manager.Comment("reaching state \'S416\'");
                            goto label37;
                        }
                        throw new InvalidOperationException("never reached");
                    label37:
;
                        goto label39;
                    }
                    if ((temp129 == 1)) {
                        this.Manager.Comment("reaching state \'S230\'");
                        bool temp125;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp125);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp125);
                        this.Manager.Comment("reaching state \'S270\'");
                        int temp128 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker12)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker13)));
                        if ((temp128 == 0)) {
                            this.Manager.Comment("reaching state \'S305\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp126;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp126);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25502");
                            this.Manager.Comment("reaching state \'S361\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp126, "error of RopOpenStreamWithDifferentPropertyType, state S361");
                            this.Manager.Comment("reaching state \'S417\'");
                            goto label38;
                        }
                        if ((temp128 == 1)) {
                            this.Manager.Comment("reaching state \'S306\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp127;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp127);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25502");
                            this.Manager.Comment("reaching state \'S362\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp127, "error of RopOpenStreamWithDifferentPropertyType, state S362");
                            this.Manager.Comment("reaching state \'S418\'");
                            goto label38;
                        }
                        throw new InvalidOperationException("never reached");
                    label38:
;
                        goto label39;
                    }
                    throw new InvalidOperationException("never reached");
                label39:
;
                    goto label40;
                }
                throw new InvalidOperationException("never reached");
            label40:
;
                goto label41;
            }
            if ((temp131 == 1)) {
                this.Manager.Comment("reaching state \'S41\'");
                goto label41;
            }
            throw new InvalidOperationException("never reached");
        label41:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite6CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S153");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S199");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S267");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S267");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S199");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S268");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S268");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S153");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S200");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S269");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S269");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S200");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S270");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite6CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S270");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite6CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite7() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite7");
            this.Manager.Comment("reaching state \'S20\'");
            bool temp132;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp132);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp132);
            this.Manager.Comment("reaching state \'S21\'");
            int temp137 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite7CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite7CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp137 == 0)) {
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S86\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S105\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S124\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S143\'");
                bool temp133;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp134;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp133, out temp134);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S162\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp133, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S162");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp134, "error of RopOpenStreamMethod, state S162");
                this.Manager.Comment("reaching state \'S187\'");
                bool temp135;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp136;
                this.Manager.Comment("executing step \'call RopSeekStreamMethod(MovedBeyondEndOfStream,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopSeekStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.SeekStreamCondition)(1)), out temp135, out temp136);
                this.Manager.Checkpoint("MS-OXCPRPT_R583");
                this.Manager.Comment("reaching state \'S213\'");
                this.Manager.Comment("checking step \'return RopSeekStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp135, "isStreamExtended of RopSeekStreamMethod, state S213");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp136, "error of RopSeekStreamMethod, state S213");
                this.Manager.Comment("reaching state \'S251\'");
                goto label42;
            }
            if ((temp137 == 1)) {
                this.Manager.Comment("reaching state \'S59\'");
                goto label42;
            }
            throw new InvalidOperationException("never reached");
        label42:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite7CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S21");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite7CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S21");
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite8() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite8");
            this.Manager.Comment("reaching state \'S22\'");
            bool temp138;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp138);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp138);
            this.Manager.Comment("reaching state \'S23\'");
            int temp143 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite8CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite8CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp143 == 0)) {
                this.Manager.Comment("reaching state \'S60\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S87\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S106\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S125\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S144\'");
                bool temp139;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp140;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp139, out temp140);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S163\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp139, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S163");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp140, "error of RopOpenStreamMethod, state S163");
                this.Manager.Comment("reaching state \'S188\'");
                bool temp141;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp142;
                this.Manager.Comment("executing step \'call RopSeekStreamMethod(OriginInvalid,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopSeekStreamMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.SeekStreamCondition.OriginInvalid, out temp141, out temp142);
                this.Manager.Comment("reaching state \'S214\'");
                this.Manager.Comment("checking step \'return RopSeekStreamMethod/[out False,out StreamInvalidParam]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp141, "isStreamExtended of RopSeekStreamMethod, state S214");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.StreamInvalidParam, temp142, "error of RopSeekStreamMethod, state S214");
                this.Manager.Comment("reaching state \'S252\'");
                goto label43;
            }
            if ((temp143 == 1)) {
                this.Manager.Comment("reaching state \'S61\'");
                goto label43;
            }
            throw new InvalidOperationException("never reached");
        label43:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite8CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S23");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite8CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S23");
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite9() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite9");
            this.Manager.Comment("reaching state \'S24\'");
            bool temp144;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp144);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp144);
            this.Manager.Comment("reaching state \'S25\'");
            int temp149 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite9CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite9CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp149 == 0)) {
                this.Manager.Comment("reaching state \'S62\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S88\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S107\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S126\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S145\'");
                bool temp145;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp146;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp145, out temp146);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S164\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp145, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S164");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp146, "error of RopOpenStreamMethod, state S164");
                this.Manager.Comment("reaching state \'S189\'");
                bool temp147;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp148;
                this.Manager.Comment("executing step \'call RopSeekStreamMethod(Normal,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopSeekStreamMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.SeekStreamCondition.Normal, out temp147, out temp148);
                this.Manager.Comment("reaching state \'S215\'");
                this.Manager.Comment("checking step \'return RopSeekStreamMethod/[out False,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp147, "isStreamExtended of RopSeekStreamMethod, state S215");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp148, "error of RopSeekStreamMethod, state S215");
                this.Manager.Comment("reaching state \'S253\'");
                goto label44;
            }
            if ((temp149 == 1)) {
                this.Manager.Comment("reaching state \'S63\'");
                goto label44;
            }
            throw new InvalidOperationException("never reached");
        label44:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite9CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S25");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite9CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S25");
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite10() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite10");
            this.Manager.Comment("reaching state \'S26\'");
            bool temp150;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp150);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp150);
            this.Manager.Comment("reaching state \'S27\'");
            int temp155 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite10CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite10CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp155 == 0)) {
                this.Manager.Comment("reaching state \'S64\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S89\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S108\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S127\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S146\'");
                bool temp151;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp152;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp151, out temp152);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S165\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp151, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S165");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp152, "error of RopOpenStreamMethod, state S165");
                this.Manager.Comment("reaching state \'S190\'");
                bool temp153;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp154;
                this.Manager.Comment("executing step \'call RopSeekStreamMethod(MovedBeyondMaxStreamSize,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopSeekStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.SeekStreamCondition)(0)), out temp153, out temp154);
                this.Manager.Checkpoint("MS-OXCPRPT_R582");
                this.Manager.Comment("reaching state \'S216\'");
                this.Manager.Comment("checking step \'return RopSeekStreamMethod/[out False,out StreamSeekError]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp153, "isStreamExtended of RopSeekStreamMethod, state S216");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.StreamSeekError, temp154, "error of RopSeekStreamMethod, state S216");
                this.Manager.Comment("reaching state \'S254\'");
                goto label45;
            }
            if ((temp155 == 1)) {
                this.Manager.Comment("reaching state \'S65\'");
                goto label45;
            }
            throw new InvalidOperationException("never reached");
        label45:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite10CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S27");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite10CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S27");
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite11() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite11");
            this.Manager.Comment("reaching state \'S28\'");
            bool temp156;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp156);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp156);
            this.Manager.Comment("reaching state \'S29\'");
            int temp179 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite11CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite11CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp179 == 0)) {
                this.Manager.Comment("reaching state \'S66\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S90\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S109\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S147\'");
                bool temp157;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(25505,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(25505, out temp157);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp157);
                this.Manager.Comment("reaching state \'S166\'");
                int temp178 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker7)));
                if ((temp178 == 0)) {
                    this.Manager.Comment("reaching state \'S191\'");
                    bool temp158;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2561,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2561, out temp158);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp158);
                    this.Manager.Comment("reaching state \'S217\'");
                    int temp167 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker1)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker4)));
                    if ((temp167 == 0)) {
                        this.Manager.Comment("reaching state \'S255\'");
                        bool temp159;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp159);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp159);
                        this.Manager.Comment("reaching state \'S287\'");
                        int temp162 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker2)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker3)));
                        if ((temp162 == 0)) {
                            this.Manager.Comment("reaching state \'S339\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp160;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp160);
                            this.Manager.Comment("reaching state \'S395\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp160, "error of RopOpenStreamWithDifferentPropertyType, state S395");
                            this.Manager.Comment("reaching state \'S451\'");
                            goto label46;
                        }
                        if ((temp162 == 1)) {
                            this.Manager.Comment("reaching state \'S340\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp161;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp161);
                            this.Manager.Comment("reaching state \'S396\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp161, "error of RopOpenStreamWithDifferentPropertyType, state S396");
                            this.Manager.Comment("reaching state \'S452\'");
                            goto label46;
                        }
                        throw new InvalidOperationException("never reached");
                    label46:
;
                        goto label48;
                    }
                    if ((temp167 == 1)) {
                        this.Manager.Comment("reaching state \'S256\'");
                        bool temp163;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp163);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp163);
                        this.Manager.Comment("reaching state \'S288\'");
                        int temp166 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker5)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker6)));
                        if ((temp166 == 0)) {
                            this.Manager.Comment("reaching state \'S341\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp164;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp164);
                            this.Manager.Comment("reaching state \'S397\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp164, "error of RopOpenStreamWithDifferentPropertyType, state S397");
                            this.Manager.Comment("reaching state \'S453\'");
                            goto label47;
                        }
                        if ((temp166 == 1)) {
                            this.Manager.Comment("reaching state \'S342\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp165;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp165);
                            this.Manager.Comment("reaching state \'S398\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp165, "error of RopOpenStreamWithDifferentPropertyType, state S398");
                            this.Manager.Comment("reaching state \'S454\'");
                            goto label47;
                        }
                        throw new InvalidOperationException("never reached");
                    label47:
;
                        goto label48;
                    }
                    throw new InvalidOperationException("never reached");
                label48:
;
                    goto label52;
                }
                if ((temp178 == 1)) {
                    this.Manager.Comment("reaching state \'S192\'");
                    bool temp168;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2561,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2561, out temp168);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp168);
                    this.Manager.Comment("reaching state \'S218\'");
                    int temp177 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker8)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker11)));
                    if ((temp177 == 0)) {
                        this.Manager.Comment("reaching state \'S257\'");
                        bool temp169;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp169);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp169);
                        this.Manager.Comment("reaching state \'S289\'");
                        int temp172 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker9)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker10)));
                        if ((temp172 == 0)) {
                            this.Manager.Comment("reaching state \'S343\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp170;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp170);
                            this.Manager.Comment("reaching state \'S399\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp170, "error of RopOpenStreamWithDifferentPropertyType, state S399");
                            this.Manager.Comment("reaching state \'S455\'");
                            goto label49;
                        }
                        if ((temp172 == 1)) {
                            this.Manager.Comment("reaching state \'S344\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp171;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp171);
                            this.Manager.Comment("reaching state \'S400\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp171, "error of RopOpenStreamWithDifferentPropertyType, state S400");
                            this.Manager.Comment("reaching state \'S456\'");
                            goto label49;
                        }
                        throw new InvalidOperationException("never reached");
                    label49:
;
                        goto label51;
                    }
                    if ((temp177 == 1)) {
                        this.Manager.Comment("reaching state \'S258\'");
                        bool temp173;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp173);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp173);
                        this.Manager.Comment("reaching state \'S290\'");
                        int temp176 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker12)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker13)));
                        if ((temp176 == 0)) {
                            this.Manager.Comment("reaching state \'S345\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp174;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp174);
                            this.Manager.Comment("reaching state \'S401\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp174, "error of RopOpenStreamWithDifferentPropertyType, state S401");
                            this.Manager.Comment("reaching state \'S457\'");
                            goto label50;
                        }
                        if ((temp176 == 1)) {
                            this.Manager.Comment("reaching state \'S346\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp175;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypBinar" +
                                    "y,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp175);
                            this.Manager.Comment("reaching state \'S402\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp175, "error of RopOpenStreamWithDifferentPropertyType, state S402");
                            this.Manager.Comment("reaching state \'S458\'");
                            goto label50;
                        }
                        throw new InvalidOperationException("never reached");
                    label50:
;
                        goto label51;
                    }
                    throw new InvalidOperationException("never reached");
                label51:
;
                    goto label52;
                }
                throw new InvalidOperationException("never reached");
            label52:
;
                goto label53;
            }
            if ((temp179 == 1)) {
                this.Manager.Comment("reaching state \'S67\'");
                goto label53;
            }
            throw new InvalidOperationException("never reached");
        label53:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite11CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S29");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S166");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S217");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S287");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S287");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S217");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S288");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S288");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S166");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S218");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S289");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S289");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S218");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S290");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite11CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S290");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite11CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S29");
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite12() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite12");
            this.Manager.Comment("reaching state \'S30\'");
            bool temp180;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp180);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp180);
            this.Manager.Comment("reaching state \'S31\'");
            int temp185 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite12CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite12CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp185 == 0)) {
                this.Manager.Comment("reaching state \'S68\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S91\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S110\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S129\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S148\'");
                bool temp181;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp182;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp181, out temp182);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S167\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp181, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp182, "error of RopOpenStreamMethod, state S167");
                this.Manager.Comment("reaching state \'S193\'");
                bool temp183;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp184;
                this.Manager.Comment("executing step \'call RopSeekStreamMethod(MovedBeyondEndOfStream,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopSeekStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.SeekStreamCondition)(1)), out temp183, out temp184);
                this.Manager.Checkpoint("MS-OXCPRPT_R583");
                this.Manager.Comment("reaching state \'S219\'");
                this.Manager.Comment("checking step \'return RopSeekStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp183, "isStreamExtended of RopSeekStreamMethod, state S219");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp184, "error of RopSeekStreamMethod, state S219");
                this.Manager.Comment("reaching state \'S259\'");
                goto label54;
            }
            if ((temp185 == 1)) {
                this.Manager.Comment("reaching state \'S69\'");
                goto label54;
            }
            throw new InvalidOperationException("never reached");
        label54:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite12CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S31");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite12CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S31");
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite13() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite13");
            this.Manager.Comment("reaching state \'S32\'");
            bool temp186;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp186);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp186);
            this.Manager.Comment("reaching state \'S33\'");
            int temp191 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite13CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite13CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp191 == 0)) {
                this.Manager.Comment("reaching state \'S70\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S92\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S111\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S130\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S149\'");
                bool temp187;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp188;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp187, out temp188);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S168\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp187, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp188, "error of RopOpenStreamMethod, state S168");
                this.Manager.Comment("reaching state \'S194\'");
                bool temp189;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp190;
                this.Manager.Comment("executing step \'call RopSeekStreamMethod(OriginInvalid,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopSeekStreamMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.SeekStreamCondition.OriginInvalid, out temp189, out temp190);
                this.Manager.Comment("reaching state \'S220\'");
                this.Manager.Comment("checking step \'return RopSeekStreamMethod/[out False,out StreamInvalidParam]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp189, "isStreamExtended of RopSeekStreamMethod, state S220");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.StreamInvalidParam, temp190, "error of RopSeekStreamMethod, state S220");
                this.Manager.Comment("reaching state \'S260\'");
                goto label55;
            }
            if ((temp191 == 1)) {
                this.Manager.Comment("reaching state \'S71\'");
                goto label55;
            }
            throw new InvalidOperationException("never reached");
        label55:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite13CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S33");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite13CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S33");
        }
        #endregion
        
        #region Test Starting in S34
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite14() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite14");
            this.Manager.Comment("reaching state \'S34\'");
            bool temp192;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp192);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp192);
            this.Manager.Comment("reaching state \'S35\'");
            int temp197 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite14CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite14CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp197 == 0)) {
                this.Manager.Comment("reaching state \'S72\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S93\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S112\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S131\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S150\'");
                bool temp193;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp194;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp193, out temp194);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S169\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp193, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp194, "error of RopOpenStreamMethod, state S169");
                this.Manager.Comment("reaching state \'S195\'");
                bool temp195;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp196;
                this.Manager.Comment("executing step \'call RopSeekStreamMethod(Normal,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopSeekStreamMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.SeekStreamCondition.Normal, out temp195, out temp196);
                this.Manager.Comment("reaching state \'S221\'");
                this.Manager.Comment("checking step \'return RopSeekStreamMethod/[out False,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp195, "isStreamExtended of RopSeekStreamMethod, state S221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp196, "error of RopSeekStreamMethod, state S221");
                this.Manager.Comment("reaching state \'S261\'");
                goto label56;
            }
            if ((temp197 == 1)) {
                this.Manager.Comment("reaching state \'S73\'");
                goto label56;
            }
            throw new InvalidOperationException("never reached");
        label56:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite14CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S35");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite14CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S35");
        }
        #endregion
        
        #region Test Starting in S36
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite15() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite15");
            this.Manager.Comment("reaching state \'S36\'");
            bool temp198;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp198);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp198);
            this.Manager.Comment("reaching state \'S37\'");
            int temp203 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite15CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite15CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp203 == 0)) {
                this.Manager.Comment("reaching state \'S74\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S94\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S113\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S132\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S151\'");
                bool temp199;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp200;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp199, out temp200);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S170\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp199, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S170");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp200, "error of RopOpenStreamMethod, state S170");
                this.Manager.Comment("reaching state \'S196\'");
                bool temp201;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp202;
                this.Manager.Comment("executing step \'call RopSeekStreamMethod(MovedBeyondMaxStreamSize,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopSeekStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.SeekStreamCondition)(0)), out temp201, out temp202);
                this.Manager.Checkpoint("MS-OXCPRPT_R582");
                this.Manager.Comment("reaching state \'S222\'");
                this.Manager.Comment("checking step \'return RopSeekStreamMethod/[out False,out StreamSeekError]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp201, "isStreamExtended of RopSeekStreamMethod, state S222");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.StreamSeekError, temp202, "error of RopSeekStreamMethod, state S222");
                this.Manager.Comment("reaching state \'S262\'");
                goto label57;
            }
            if ((temp203 == 1)) {
                this.Manager.Comment("reaching state \'S75\'");
                goto label57;
            }
            throw new InvalidOperationException("never reached");
        label57:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite15CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S37");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite15CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S37");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite16() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite16");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp204;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp204);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp204);
            this.Manager.Comment("reaching state \'S5\'");
            int temp227 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite16CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite16CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp227 == 0)) {
                this.Manager.Comment("reaching state \'S42\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S78\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S97\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S135\'");
                bool temp205;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(25505,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(25505, out temp205);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp205);
                this.Manager.Comment("reaching state \'S154\'");
                int temp226 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker7)));
                if ((temp226 == 0)) {
                    this.Manager.Comment("reaching state \'S175\'");
                    bool temp206;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2561,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2561, out temp206);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp206);
                    this.Manager.Comment("reaching state \'S201\'");
                    int temp215 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker1)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker4)));
                    if ((temp215 == 0)) {
                        this.Manager.Comment("reaching state \'S231\'");
                        bool temp207;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp207);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp207);
                        this.Manager.Comment("reaching state \'S271\'");
                        int temp210 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker2)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker3)));
                        if ((temp210 == 0)) {
                            this.Manager.Comment("reaching state \'S307\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp208;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypObjec" +
                                    "t,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypObject, out temp208);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25503");
                            this.Manager.Comment("reaching state \'S363\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp208, "error of RopOpenStreamWithDifferentPropertyType, state S363");
                            this.Manager.Comment("reaching state \'S419\'");
                            goto label58;
                        }
                        if ((temp210 == 1)) {
                            this.Manager.Comment("reaching state \'S308\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp209;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypObjec" +
                                    "t,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypObject, out temp209);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25503");
                            this.Manager.Comment("reaching state \'S364\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp209, "error of RopOpenStreamWithDifferentPropertyType, state S364");
                            this.Manager.Comment("reaching state \'S420\'");
                            goto label58;
                        }
                        throw new InvalidOperationException("never reached");
                    label58:
;
                        goto label60;
                    }
                    if ((temp215 == 1)) {
                        this.Manager.Comment("reaching state \'S232\'");
                        bool temp211;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp211);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp211);
                        this.Manager.Comment("reaching state \'S272\'");
                        int temp214 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker5)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker6)));
                        if ((temp214 == 0)) {
                            this.Manager.Comment("reaching state \'S309\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp212;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypObjec" +
                                    "t,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypObject, out temp212);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25503");
                            this.Manager.Comment("reaching state \'S365\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp212, "error of RopOpenStreamWithDifferentPropertyType, state S365");
                            this.Manager.Comment("reaching state \'S421\'");
                            goto label59;
                        }
                        if ((temp214 == 1)) {
                            this.Manager.Comment("reaching state \'S310\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp213;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypObjec" +
                                    "t,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypObject, out temp213);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25503");
                            this.Manager.Comment("reaching state \'S366\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp213, "error of RopOpenStreamWithDifferentPropertyType, state S366");
                            this.Manager.Comment("reaching state \'S422\'");
                            goto label59;
                        }
                        throw new InvalidOperationException("never reached");
                    label59:
;
                        goto label60;
                    }
                    throw new InvalidOperationException("never reached");
                label60:
;
                    goto label64;
                }
                if ((temp226 == 1)) {
                    this.Manager.Comment("reaching state \'S176\'");
                    bool temp216;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2561,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2561, out temp216);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp216);
                    this.Manager.Comment("reaching state \'S202\'");
                    int temp225 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker8)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker11)));
                    if ((temp225 == 0)) {
                        this.Manager.Comment("reaching state \'S233\'");
                        bool temp217;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp217);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp217);
                        this.Manager.Comment("reaching state \'S273\'");
                        int temp220 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker9)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker10)));
                        if ((temp220 == 0)) {
                            this.Manager.Comment("reaching state \'S311\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp218;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypObjec" +
                                    "t,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypObject, out temp218);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25503");
                            this.Manager.Comment("reaching state \'S367\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp218, "error of RopOpenStreamWithDifferentPropertyType, state S367");
                            this.Manager.Comment("reaching state \'S423\'");
                            goto label61;
                        }
                        if ((temp220 == 1)) {
                            this.Manager.Comment("reaching state \'S312\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp219;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypObjec" +
                                    "t,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypObject, out temp219);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25503");
                            this.Manager.Comment("reaching state \'S368\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp219, "error of RopOpenStreamWithDifferentPropertyType, state S368");
                            this.Manager.Comment("reaching state \'S424\'");
                            goto label61;
                        }
                        throw new InvalidOperationException("never reached");
                    label61:
;
                        goto label63;
                    }
                    if ((temp225 == 1)) {
                        this.Manager.Comment("reaching state \'S234\'");
                        bool temp221;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp221);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp221);
                        this.Manager.Comment("reaching state \'S274\'");
                        int temp224 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker12)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker13)));
                        if ((temp224 == 0)) {
                            this.Manager.Comment("reaching state \'S313\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp222;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypObjec" +
                                    "t,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypObject, out temp222);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25503");
                            this.Manager.Comment("reaching state \'S369\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp222, "error of RopOpenStreamWithDifferentPropertyType, state S369");
                            this.Manager.Comment("reaching state \'S425\'");
                            goto label62;
                        }
                        if ((temp224 == 1)) {
                            this.Manager.Comment("reaching state \'S314\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp223;
                            this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FirstObject,PtypObjec" +
                                    "t,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypObject, out temp223);
                            this.Manager.Checkpoint("MS-OXCPRPT_R25503");
                            this.Manager.Comment("reaching state \'S370\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp223, "error of RopOpenStreamWithDifferentPropertyType, state S370");
                            this.Manager.Comment("reaching state \'S426\'");
                            goto label62;
                        }
                        throw new InvalidOperationException("never reached");
                    label62:
;
                        goto label63;
                    }
                    throw new InvalidOperationException("never reached");
                label63:
;
                    goto label64;
                }
                throw new InvalidOperationException("never reached");
            label64:
;
                goto label65;
            }
            if ((temp227 == 1)) {
                this.Manager.Comment("reaching state \'S43\'");
                goto label65;
            }
            throw new InvalidOperationException("never reached");
        label65:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite16CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S154");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S201");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S271");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S271");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S201");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S272");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S272");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S154");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S202");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S273");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S273");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S202");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S274");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite16CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S274");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite16CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite17() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite17");
            this.Manager.Comment("reaching state \'S6\'");
            bool temp228;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp228);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp228);
            this.Manager.Comment("reaching state \'S7\'");
            int temp233 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite17CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite17CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp233 == 0)) {
                this.Manager.Comment("reaching state \'S44\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S79\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S98\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S117\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S136\'");
                bool temp229;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp230;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp229, out temp230);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S155\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp229, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S155");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp230, "error of RopOpenStreamMethod, state S155");
                this.Manager.Comment("reaching state \'S177\'");
                bool temp231;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp232;
                this.Manager.Comment("executing step \'call RopSeekStreamMethod(MovedBeyondEndOfStream,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopSeekStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.SeekStreamCondition)(1)), out temp231, out temp232);
                this.Manager.Checkpoint("MS-OXCPRPT_R583");
                this.Manager.Comment("reaching state \'S203\'");
                this.Manager.Comment("checking step \'return RopSeekStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp231, "isStreamExtended of RopSeekStreamMethod, state S203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp232, "error of RopSeekStreamMethod, state S203");
                this.Manager.Comment("reaching state \'S235\'");
                goto label66;
            }
            if ((temp233 == 1)) {
                this.Manager.Comment("reaching state \'S45\'");
                goto label66;
            }
            throw new InvalidOperationException("never reached");
        label66:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite17CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite17CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStream_TestSuite18() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStream_TestSuite18");
            this.Manager.Comment("reaching state \'S8\'");
            bool temp234;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp234);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp234);
            this.Manager.Comment("reaching state \'S9\'");
            int temp239 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite18CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStream_TestSuite18CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp239 == 0)) {
                this.Manager.Comment("reaching state \'S46\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S80\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S99\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S118\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S137\'");
                bool temp235;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp236;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp235, out temp236);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S156\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp235, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S156");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp236, "error of RopOpenStreamMethod, state S156");
                this.Manager.Comment("reaching state \'S178\'");
                bool temp237;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp238;
                this.Manager.Comment("executing step \'call RopSeekStreamMethod(OriginInvalid,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopSeekStreamMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.SeekStreamCondition.OriginInvalid, out temp237, out temp238);
                this.Manager.Comment("reaching state \'S204\'");
                this.Manager.Comment("checking step \'return RopSeekStreamMethod/[out False,out StreamInvalidParam]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp237, "isStreamExtended of RopSeekStreamMethod, state S204");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.StreamInvalidParam, temp238, "error of RopSeekStreamMethod, state S204");
                this.Manager.Comment("reaching state \'S236\'");
                goto label67;
            }
            if ((temp239 == 1)) {
                this.Manager.Comment("reaching state \'S47\'");
                goto label67;
            }
            throw new InvalidOperationException("never reached");
        label67:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite18CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        
        private void MSOXCPRPT_S03_SeekStream_TestSuite18CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        #endregion
    }
}