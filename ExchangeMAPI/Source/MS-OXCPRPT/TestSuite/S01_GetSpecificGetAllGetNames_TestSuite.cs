//-----------------------------------------------------------------------
// Copyright (c) 2014 Microsoft Corporation. All rights reserved.
// Use of this sample source code is subject to the terms of the Microsoft license 
// agreement under which you licensed this sample source code and is provided AS-IS.
// If you did not accept the terms of the license agreement, you are not authorized 
// to use this sample source code. For the terms of the license, please see the 
// license agreement between you and Microsoft.
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCPRPT {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.6.100.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S01_GetSpecificGetAllGetNames_TestSuite : PtfTestClassBase {
        
        public S01_GetSpecificGetAllGetNames_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter IMS_OXCPRPTAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCPRPTAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp11 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp11 == 0)) {
                this.Manager.Comment("reaching state \'S78\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S156\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S195\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S234\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S273\'");
                bool temp1;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp1);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1);
                this.Manager.Comment("reaching state \'S312\'");
                int temp10 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuiteCheckRequirementEnabledChecker3)));
                if ((temp10 == 0)) {
                    this.Manager.Comment("reaching state \'S351\'");
                    bool temp2;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp2);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp2);
                    this.Manager.Comment("reaching state \'S414\'");
                    int temp5 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuiteCheckRequirementEnabledChecker2)));
                    if ((temp5 == 0)) {
                        this.Manager.Comment("reaching state \'S462\'");
                        bool temp3;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, true, out temp3);
                        this.Manager.Comment("reaching state \'S558\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp3, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S558");
                        this.Manager.Comment("reaching state \'S654\'");
                        goto label0;
                    }
                    if ((temp5 == 1)) {
                        this.Manager.Comment("reaching state \'S463\'");
                        bool temp4;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, true, out temp4);
                        this.Manager.Checkpoint("MS-OXCPRPT_R90707");
                        this.Manager.Comment("reaching state \'S559\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp4, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S559");
                        this.Manager.Comment("reaching state \'S655\'");
                        goto label0;
                    }
                    throw new InvalidOperationException("never reached");
                label0:
;
                    goto label2;
                }
                if ((temp10 == 1)) {
                    this.Manager.Comment("reaching state \'S352\'");
                    bool temp6;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp6);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp6);
                    this.Manager.Comment("reaching state \'S415\'");
                    int temp9 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuiteCheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuiteCheckRequirementEnabledChecker5)));
                    if ((temp9 == 0)) {
                        this.Manager.Comment("reaching state \'S464\'");
                        bool temp7;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, true, out temp7);
                        this.Manager.Checkpoint("MS-OXCPRPT_R644");
                        this.Manager.Checkpoint("MS-OXCPRPT_R85");
                        this.Manager.Checkpoint("MS-OXCPRPT_R86703");
                        this.Manager.Comment("reaching state \'S560\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp7, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S560");
                        this.Manager.Comment("reaching state \'S656\'");
                        goto label1;
                    }
                    if ((temp9 == 1)) {
                        this.Manager.Comment("reaching state \'S465\'");
                        bool temp8;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, true, out temp8);
                        this.Manager.Checkpoint("MS-OXCPRPT_R644");
                        this.Manager.Checkpoint("MS-OXCPRPT_R85");
                        this.Manager.Checkpoint("MS-OXCPRPT_R86703");
                        this.Manager.Checkpoint("MS-OXCPRPT_R90707");
                        this.Manager.Comment("reaching state \'S561\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp8, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S561");
                        this.Manager.Comment("reaching state \'S657\'");
                        goto label1;
                    }
                    throw new InvalidOperationException("never reached");
                label1:
;
                    goto label2;
                }
                throw new InvalidOperationException("never reached");
            label2:
;
                goto label3;
            }
            if ((temp11 == 1)) {
                this.Manager.Comment("reaching state \'S79\'");
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S312");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S414");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S414");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S312");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S415");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S415");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite1() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite1");
            this.Manager.Comment("reaching state \'S10\'");
            bool temp12;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp12);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp12);
            this.Manager.Comment("reaching state \'S11\'");
            int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp23 == 0)) {
                this.Manager.Comment("reaching state \'S88\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S161\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S200\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S239\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S278\'");
                bool temp13;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp13);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp13);
                this.Manager.Comment("reaching state \'S317\'");
                int temp22 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite1CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite1CheckRequirementEnabledChecker3)));
                if ((temp22 == 0)) {
                    this.Manager.Comment("reaching state \'S361\'");
                    bool temp14;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp14);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp14);
                    this.Manager.Comment("reaching state \'S424\'");
                    int temp17 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite1CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite1CheckRequirementEnabledChecker2)));
                    if ((temp17 == 0)) {
                        this.Manager.Comment("reaching state \'S482\'");
                        bool temp15;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(True,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(true, true, false, out temp15);
                        this.Manager.Comment("reaching state \'S578\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp15, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S578");
                        this.Manager.Comment("reaching state \'S674\'");
                        goto label4;
                    }
                    if ((temp17 == 1)) {
                        this.Manager.Comment("reaching state \'S483\'");
                        bool temp16;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(True,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(true, true, false, out temp16);
                        this.Manager.Comment("reaching state \'S579\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp16, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S579");
                        this.Manager.Comment("reaching state \'S675\'");
                        goto label4;
                    }
                    throw new InvalidOperationException("never reached");
                label4:
;
                    goto label6;
                }
                if ((temp22 == 1)) {
                    this.Manager.Comment("reaching state \'S362\'");
                    bool temp18;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp18);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp18);
                    this.Manager.Comment("reaching state \'S425\'");
                    int temp21 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite1CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite1CheckRequirementEnabledChecker5)));
                    if ((temp21 == 0)) {
                        this.Manager.Comment("reaching state \'S484\'");
                        bool temp19;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(True,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(true, true, false, out temp19);
                        this.Manager.Comment("reaching state \'S580\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp19, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S580");
                        this.Manager.Comment("reaching state \'S676\'");
                        goto label5;
                    }
                    if ((temp21 == 1)) {
                        this.Manager.Comment("reaching state \'S485\'");
                        bool temp20;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(True,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(true, true, false, out temp20);
                        this.Manager.Comment("reaching state \'S581\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp20, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S581");
                        this.Manager.Comment("reaching state \'S677\'");
                        goto label5;
                    }
                    throw new InvalidOperationException("never reached");
                label5:
;
                    goto label6;
                }
                throw new InvalidOperationException("never reached");
            label6:
;
                goto label7;
            }
            if ((temp23 == 1)) {
                this.Manager.Comment("reaching state \'S89\'");
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite1CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S317");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite1CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S424");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite1CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S424");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite1CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S317");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite1CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S425");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite1CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S425");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite2() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite2");
            this.Manager.Comment("reaching state \'S12\'");
            bool temp24;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp24);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp24);
            this.Manager.Comment("reaching state \'S13\'");
            int temp35 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp35 == 0)) {
                this.Manager.Comment("reaching state \'S90\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S162\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S201\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S240\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S279\'");
                bool temp25;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp25);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp25);
                this.Manager.Comment("reaching state \'S318\'");
                int temp34 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite2CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite2CheckRequirementEnabledChecker3)));
                if ((temp34 == 0)) {
                    this.Manager.Comment("reaching state \'S363\'");
                    bool temp26;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp26);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp26);
                    this.Manager.Comment("reaching state \'S426\'");
                    int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite2CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite2CheckRequirementEnabledChecker2)));
                    if ((temp29 == 0)) {
                        this.Manager.Comment("reaching state \'S486\'");
                        bool temp27;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, true, false, out temp27);
                        this.Manager.Comment("reaching state \'S582\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp27, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S582");
                        this.Manager.Comment("reaching state \'S678\'");
                        goto label8;
                    }
                    if ((temp29 == 1)) {
                        this.Manager.Comment("reaching state \'S487\'");
                        bool temp28;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, true, false, out temp28);
                        this.Manager.Comment("reaching state \'S583\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp28, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S583");
                        this.Manager.Comment("reaching state \'S679\'");
                        goto label8;
                    }
                    throw new InvalidOperationException("never reached");
                label8:
;
                    goto label10;
                }
                if ((temp34 == 1)) {
                    this.Manager.Comment("reaching state \'S364\'");
                    bool temp30;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp30);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp30);
                    this.Manager.Comment("reaching state \'S427\'");
                    int temp33 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite2CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite2CheckRequirementEnabledChecker5)));
                    if ((temp33 == 0)) {
                        this.Manager.Comment("reaching state \'S488\'");
                        bool temp31;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, true, false, out temp31);
                        this.Manager.Comment("reaching state \'S584\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp31, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S584");
                        this.Manager.Comment("reaching state \'S680\'");
                        goto label9;
                    }
                    if ((temp33 == 1)) {
                        this.Manager.Comment("reaching state \'S489\'");
                        bool temp32;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, true, false, out temp32);
                        this.Manager.Comment("reaching state \'S585\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp32, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S585");
                        this.Manager.Comment("reaching state \'S681\'");
                        goto label9;
                    }
                    throw new InvalidOperationException("never reached");
                label9:
;
                    goto label10;
                }
                throw new InvalidOperationException("never reached");
            label10:
;
                goto label11;
            }
            if ((temp35 == 1)) {
                this.Manager.Comment("reaching state \'S91\'");
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S13");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite2CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S318");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite2CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S426");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite2CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S426");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite2CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S318");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite2CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S427");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite2CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S427");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S13");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite3() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite3");
            this.Manager.Comment("reaching state \'S14\'");
            bool temp36;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp36);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp36);
            this.Manager.Comment("reaching state \'S15\'");
            int temp37 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite3CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite3CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp37 == 0)) {
                this.Manager.Comment("reaching state \'S92\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S163\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S202\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S241\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S280\'");
                this.Manager.Comment("executing step \'call RopGetNamesFromPropertyIdsMethod(HaveAssociatedName)\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetNamesFromPropertyIdsMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyIdType)(1)));
                this.Manager.Comment("reaching state \'S319\'");
                this.Manager.Comment("checking step \'return RopGetNamesFromPropertyIdsMethod\'");
                this.Manager.Comment("reaching state \'S365\'");
                goto label12;
            }
            if ((temp37 == 1)) {
                this.Manager.Comment("reaching state \'S93\'");
                goto label12;
            }
            throw new InvalidOperationException("never reached");
        label12:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite3CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S15");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite3CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S15");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite4() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite4");
            this.Manager.Comment("reaching state \'S16\'");
            bool temp38;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp38);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp38);
            this.Manager.Comment("reaching state \'S17\'");
            int temp39 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite4CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite4CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp39 == 0)) {
                this.Manager.Comment("reaching state \'S94\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S164\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S203\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S242\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S281\'");
                this.Manager.Comment("executing step \'call RopGetNamesFromPropertyIdsMethod(NoAssociatedName)\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetNamesFromPropertyIdsMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyIdType.NoAssociatedName);
                this.Manager.Comment("reaching state \'S320\'");
                this.Manager.Comment("checking step \'return RopGetNamesFromPropertyIdsMethod\'");
                this.Manager.Comment("reaching state \'S366\'");
                goto label13;
            }
            if ((temp39 == 1)) {
                this.Manager.Comment("reaching state \'S95\'");
                goto label13;
            }
            throw new InvalidOperationException("never reached");
        label13:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite4CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S17");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite4CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S17");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite5() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite5");
            this.Manager.Comment("reaching state \'S18\'");
            bool temp40;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp40);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp40);
            this.Manager.Comment("reaching state \'S19\'");
            int temp41 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite5CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite5CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp41 == 0)) {
                this.Manager.Comment("reaching state \'S96\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S165\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S204\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S243\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S282\'");
                this.Manager.Comment("executing step \'call RopGetNamesFromPropertyIdsMethod(LessThan0x8000)\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetNamesFromPropertyIdsMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyIdType)(0)));
                this.Manager.Comment("reaching state \'S321\'");
                this.Manager.Comment("checking step \'return RopGetNamesFromPropertyIdsMethod\'");
                this.Manager.Comment("reaching state \'S367\'");
                goto label14;
            }
            if ((temp41 == 1)) {
                this.Manager.Comment("reaching state \'S97\'");
                goto label14;
            }
            throw new InvalidOperationException("never reached");
        label14:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite5CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S19");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite5CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S19");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite6() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite6");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp42;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp42);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp42);
            this.Manager.Comment("reaching state \'S3\'");
            int temp53 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite6CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite6CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp53 == 0)) {
                this.Manager.Comment("reaching state \'S80\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S157\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S196\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S235\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S274\'");
                bool temp43;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp43);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp43);
                this.Manager.Comment("reaching state \'S313\'");
                int temp52 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite6CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite6CheckRequirementEnabledChecker3)));
                if ((temp52 == 0)) {
                    this.Manager.Comment("reaching state \'S353\'");
                    bool temp44;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp44);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp44);
                    this.Manager.Comment("reaching state \'S416\'");
                    int temp47 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite6CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite6CheckRequirementEnabledChecker2)));
                    if ((temp47 == 0)) {
                        this.Manager.Comment("reaching state \'S466\'");
                        bool temp45;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, false, out temp45);
                        this.Manager.Comment("reaching state \'S562\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp45, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S562");
                        this.Manager.Comment("reaching state \'S658\'");
                        goto label15;
                    }
                    if ((temp47 == 1)) {
                        this.Manager.Comment("reaching state \'S467\'");
                        bool temp46;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, true, out temp46);
                        this.Manager.Comment("reaching state \'S563\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp46, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S563");
                        this.Manager.Comment("reaching state \'S659\'");
                        goto label15;
                    }
                    throw new InvalidOperationException("never reached");
                label15:
;
                    goto label17;
                }
                if ((temp52 == 1)) {
                    this.Manager.Comment("reaching state \'S354\'");
                    bool temp48;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp48);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp48);
                    this.Manager.Comment("reaching state \'S417\'");
                    int temp51 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite6CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite6CheckRequirementEnabledChecker5)));
                    if ((temp51 == 0)) {
                        this.Manager.Comment("reaching state \'S468\'");
                        bool temp49;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, true, out temp49);
                        this.Manager.Comment("reaching state \'S564\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp49, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S564");
                        this.Manager.Comment("reaching state \'S660\'");
                        goto label16;
                    }
                    if ((temp51 == 1)) {
                        this.Manager.Comment("reaching state \'S469\'");
                        bool temp50;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, true, out temp50);
                        this.Manager.Comment("reaching state \'S565\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp50, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S565");
                        this.Manager.Comment("reaching state \'S661\'");
                        goto label16;
                    }
                    throw new InvalidOperationException("never reached");
                label16:
;
                    goto label17;
                }
                throw new InvalidOperationException("never reached");
            label17:
;
                goto label18;
            }
            if ((temp53 == 1)) {
                this.Manager.Comment("reaching state \'S81\'");
                goto label18;
            }
            throw new InvalidOperationException("never reached");
        label18:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite6CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite6CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S313");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite6CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S416");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite6CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S416");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite6CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S313");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite6CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S417");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite6CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S417");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite6CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite7() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite7");
            this.Manager.Comment("reaching state \'S20\'");
            bool temp54;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp54);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp54);
            this.Manager.Comment("reaching state \'S21\'");
            int temp55 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite7CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite7CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp55 == 0)) {
                this.Manager.Comment("reaching state \'S98\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S166\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S205\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S244\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S283\'");
                this.Manager.Comment("executing step \'call RopGetPropertiesSpecificForTaggedProperties()\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificForTaggedProperties();
                this.Manager.Comment("reaching state \'S322\'");
                this.Manager.Comment("checking step \'return RopGetPropertiesSpecificForTaggedProperties\'");
                this.Manager.Comment("reaching state \'S368\'");
                goto label19;
            }
            if ((temp55 == 1)) {
                this.Manager.Comment("reaching state \'S99\'");
                goto label19;
            }
            throw new InvalidOperationException("never reached");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite7CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S21");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite7CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S21");
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite8() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite8");
            this.Manager.Comment("reaching state \'S22\'");
            bool temp56;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp56);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp56);
            this.Manager.Comment("reaching state \'S23\'");
            int temp67 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite8CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite8CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp67 == 0)) {
                this.Manager.Comment("reaching state \'S100\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S167\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S206\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S245\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S284\'");
                bool temp57;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp57);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp57);
                this.Manager.Comment("reaching state \'S323\'");
                int temp66 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite8CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite8CheckRequirementEnabledChecker3)));
                if ((temp66 == 0)) {
                    this.Manager.Comment("reaching state \'S369\'");
                    bool temp58;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp58);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp58);
                    this.Manager.Comment("reaching state \'S428\'");
                    int temp61 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite8CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite8CheckRequirementEnabledChecker2)));
                    if ((temp61 == 0)) {
                        this.Manager.Comment("reaching state \'S490\'");
                        bool temp59;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, true, out temp59);
                        this.Manager.Comment("reaching state \'S586\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp59, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S586");
                        this.Manager.Comment("reaching state \'S682\'");
                        goto label20;
                    }
                    if ((temp61 == 1)) {
                        this.Manager.Comment("reaching state \'S491\'");
                        bool temp60;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, true, out temp60);
                        this.Manager.Checkpoint("MS-OXCPRPT_R90707");
                        this.Manager.Comment("reaching state \'S587\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp60, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S587");
                        this.Manager.Comment("reaching state \'S683\'");
                        goto label20;
                    }
                    throw new InvalidOperationException("never reached");
                label20:
;
                    goto label22;
                }
                if ((temp66 == 1)) {
                    this.Manager.Comment("reaching state \'S370\'");
                    bool temp62;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp62);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp62);
                    this.Manager.Comment("reaching state \'S429\'");
                    int temp65 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite8CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite8CheckRequirementEnabledChecker5)));
                    if ((temp65 == 0)) {
                        this.Manager.Comment("reaching state \'S492\'");
                        bool temp63;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, true, out temp63);
                        this.Manager.Checkpoint("MS-OXCPRPT_R644");
                        this.Manager.Checkpoint("MS-OXCPRPT_R85");
                        this.Manager.Checkpoint("MS-OXCPRPT_R86703");
                        this.Manager.Comment("reaching state \'S588\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp63, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S588");
                        this.Manager.Comment("reaching state \'S684\'");
                        goto label21;
                    }
                    if ((temp65 == 1)) {
                        this.Manager.Comment("reaching state \'S493\'");
                        bool temp64;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, true, out temp64);
                        this.Manager.Checkpoint("MS-OXCPRPT_R644");
                        this.Manager.Checkpoint("MS-OXCPRPT_R85");
                        this.Manager.Checkpoint("MS-OXCPRPT_R86703");
                        this.Manager.Checkpoint("MS-OXCPRPT_R90707");
                        this.Manager.Comment("reaching state \'S589\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp64, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S589");
                        this.Manager.Comment("reaching state \'S685\'");
                        goto label21;
                    }
                    throw new InvalidOperationException("never reached");
                label21:
;
                    goto label22;
                }
                throw new InvalidOperationException("never reached");
            label22:
;
                goto label23;
            }
            if ((temp67 == 1)) {
                this.Manager.Comment("reaching state \'S101\'");
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite8CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S23");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite8CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S323");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite8CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S428");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite8CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S428");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite8CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S323");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite8CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S429");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite8CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S429");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite8CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S23");
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite9() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite9");
            this.Manager.Comment("reaching state \'S24\'");
            bool temp68;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp68);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp68);
            this.Manager.Comment("reaching state \'S25\'");
            int temp79 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite9CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite9CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp79 == 0)) {
                this.Manager.Comment("reaching state \'S102\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S168\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S207\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S246\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S285\'");
                bool temp69;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp69);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp69);
                this.Manager.Comment("reaching state \'S324\'");
                int temp78 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite9CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite9CheckRequirementEnabledChecker3)));
                if ((temp78 == 0)) {
                    this.Manager.Comment("reaching state \'S371\'");
                    bool temp70;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp70);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp70);
                    this.Manager.Comment("reaching state \'S430\'");
                    int temp73 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite9CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite9CheckRequirementEnabledChecker2)));
                    if ((temp73 == 0)) {
                        this.Manager.Comment("reaching state \'S494\'");
                        bool temp71;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, false, out temp71);
                        this.Manager.Comment("reaching state \'S590\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp71, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S590");
                        this.Manager.Comment("reaching state \'S686\'");
                        goto label24;
                    }
                    if ((temp73 == 1)) {
                        this.Manager.Comment("reaching state \'S495\'");
                        bool temp72;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, true, out temp72);
                        this.Manager.Comment("reaching state \'S591\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp72, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S591");
                        this.Manager.Comment("reaching state \'S687\'");
                        goto label24;
                    }
                    throw new InvalidOperationException("never reached");
                label24:
;
                    goto label26;
                }
                if ((temp78 == 1)) {
                    this.Manager.Comment("reaching state \'S372\'");
                    bool temp74;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp74);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp74);
                    this.Manager.Comment("reaching state \'S431\'");
                    int temp77 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite9CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite9CheckRequirementEnabledChecker5)));
                    if ((temp77 == 0)) {
                        this.Manager.Comment("reaching state \'S496\'");
                        bool temp75;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, true, out temp75);
                        this.Manager.Comment("reaching state \'S592\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp75, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S592");
                        this.Manager.Comment("reaching state \'S688\'");
                        goto label25;
                    }
                    if ((temp77 == 1)) {
                        this.Manager.Comment("reaching state \'S497\'");
                        bool temp76;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, true, out temp76);
                        this.Manager.Comment("reaching state \'S593\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp76, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S593");
                        this.Manager.Comment("reaching state \'S689\'");
                        goto label25;
                    }
                    throw new InvalidOperationException("never reached");
                label25:
;
                    goto label26;
                }
                throw new InvalidOperationException("never reached");
            label26:
;
                goto label27;
            }
            if ((temp79 == 1)) {
                this.Manager.Comment("reaching state \'S103\'");
                goto label27;
            }
            throw new InvalidOperationException("never reached");
        label27:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite9CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S25");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite9CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S324");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite9CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S430");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite9CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S430");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite9CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S324");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite9CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S431");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite9CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S431");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite9CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S25");
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite10() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite10");
            this.Manager.Comment("reaching state \'S26\'");
            bool temp80;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp80);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp80);
            this.Manager.Comment("reaching state \'S27\'");
            int temp91 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite10CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite10CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp91 == 0)) {
                this.Manager.Comment("reaching state \'S104\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S169\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S208\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S247\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S286\'");
                bool temp81;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp81);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp81);
                this.Manager.Comment("reaching state \'S325\'");
                int temp90 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite10CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite10CheckRequirementEnabledChecker3)));
                if ((temp90 == 0)) {
                    this.Manager.Comment("reaching state \'S373\'");
                    bool temp82;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp82);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp82);
                    this.Manager.Comment("reaching state \'S432\'");
                    int temp85 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite10CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite10CheckRequirementEnabledChecker2)));
                    if ((temp85 == 0)) {
                        this.Manager.Comment("reaching state \'S498\'");
                        bool temp83;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, true, out temp83);
                        this.Manager.Comment("reaching state \'S594\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp83, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S594");
                        this.Manager.Comment("reaching state \'S690\'");
                        goto label28;
                    }
                    if ((temp85 == 1)) {
                        this.Manager.Comment("reaching state \'S499\'");
                        bool temp84;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, false, out temp84);
                        this.Manager.Comment("reaching state \'S595\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp84, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S595");
                        this.Manager.Comment("reaching state \'S691\'");
                        goto label28;
                    }
                    throw new InvalidOperationException("never reached");
                label28:
;
                    goto label30;
                }
                if ((temp90 == 1)) {
                    this.Manager.Comment("reaching state \'S374\'");
                    bool temp86;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp86);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp86);
                    this.Manager.Comment("reaching state \'S433\'");
                    int temp89 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite10CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite10CheckRequirementEnabledChecker5)));
                    if ((temp89 == 0)) {
                        this.Manager.Comment("reaching state \'S500\'");
                        bool temp87;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, false, out temp87);
                        this.Manager.Comment("reaching state \'S596\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp87, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S596");
                        this.Manager.Comment("reaching state \'S692\'");
                        goto label29;
                    }
                    if ((temp89 == 1)) {
                        this.Manager.Comment("reaching state \'S501\'");
                        bool temp88;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, false, out temp88);
                        this.Manager.Comment("reaching state \'S597\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp88, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S597");
                        this.Manager.Comment("reaching state \'S693\'");
                        goto label29;
                    }
                    throw new InvalidOperationException("never reached");
                label29:
;
                    goto label30;
                }
                throw new InvalidOperationException("never reached");
            label30:
;
                goto label31;
            }
            if ((temp91 == 1)) {
                this.Manager.Comment("reaching state \'S105\'");
                goto label31;
            }
            throw new InvalidOperationException("never reached");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite10CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S27");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite10CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S325");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite10CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S432");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite10CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S432");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite10CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S325");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite10CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S433");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite10CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S433");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite10CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S27");
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite11() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite11");
            this.Manager.Comment("reaching state \'S28\'");
            bool temp92;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp92);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp92);
            this.Manager.Comment("reaching state \'S29\'");
            int temp103 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite11CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite11CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp103 == 0)) {
                this.Manager.Comment("reaching state \'S106\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S170\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S209\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S248\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S287\'");
                bool temp93;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp93);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp93);
                this.Manager.Comment("reaching state \'S326\'");
                int temp102 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite11CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite11CheckRequirementEnabledChecker3)));
                if ((temp102 == 0)) {
                    this.Manager.Comment("reaching state \'S375\'");
                    bool temp94;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp94);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp94);
                    this.Manager.Comment("reaching state \'S434\'");
                    int temp97 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite11CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite11CheckRequirementEnabledChecker2)));
                    if ((temp97 == 0)) {
                        this.Manager.Comment("reaching state \'S502\'");
                        bool temp95;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, false, out temp95);
                        this.Manager.Comment("reaching state \'S598\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp95, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S598");
                        this.Manager.Comment("reaching state \'S694\'");
                        goto label32;
                    }
                    if ((temp97 == 1)) {
                        this.Manager.Comment("reaching state \'S503\'");
                        bool temp96;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, false, out temp96);
                        this.Manager.Checkpoint("MS-OXCPRPT_R90707");
                        this.Manager.Comment("reaching state \'S599\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp96, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S599");
                        this.Manager.Comment("reaching state \'S695\'");
                        goto label32;
                    }
                    throw new InvalidOperationException("never reached");
                label32:
;
                    goto label34;
                }
                if ((temp102 == 1)) {
                    this.Manager.Comment("reaching state \'S376\'");
                    bool temp98;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp98);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp98);
                    this.Manager.Comment("reaching state \'S435\'");
                    int temp101 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite11CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite11CheckRequirementEnabledChecker5)));
                    if ((temp101 == 0)) {
                        this.Manager.Comment("reaching state \'S504\'");
                        bool temp99;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, false, out temp99);
                        this.Manager.Checkpoint("MS-OXCPRPT_R644");
                        this.Manager.Checkpoint("MS-OXCPRPT_R85");
                        this.Manager.Checkpoint("MS-OXCPRPT_R86703");
                        this.Manager.Comment("reaching state \'S600\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp99, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S600");
                        this.Manager.Comment("reaching state \'S696\'");
                        goto label33;
                    }
                    if ((temp101 == 1)) {
                        this.Manager.Comment("reaching state \'S505\'");
                        bool temp100;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, false, out temp100);
                        this.Manager.Checkpoint("MS-OXCPRPT_R644");
                        this.Manager.Checkpoint("MS-OXCPRPT_R85");
                        this.Manager.Checkpoint("MS-OXCPRPT_R86703");
                        this.Manager.Checkpoint("MS-OXCPRPT_R90707");
                        this.Manager.Comment("reaching state \'S601\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp100, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S601");
                        this.Manager.Comment("reaching state \'S697\'");
                        goto label33;
                    }
                    throw new InvalidOperationException("never reached");
                label33:
;
                    goto label34;
                }
                throw new InvalidOperationException("never reached");
            label34:
;
                goto label35;
            }
            if ((temp103 == 1)) {
                this.Manager.Comment("reaching state \'S107\'");
                goto label35;
            }
            throw new InvalidOperationException("never reached");
        label35:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite11CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S29");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite11CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S326");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite11CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S434");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite11CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S434");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite11CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S326");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite11CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S435");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite11CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S435");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite11CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S29");
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite12() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite12");
            this.Manager.Comment("reaching state \'S30\'");
            bool temp104;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp104);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp104);
            this.Manager.Comment("reaching state \'S31\'");
            int temp115 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite12CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite12CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp115 == 0)) {
                this.Manager.Comment("reaching state \'S108\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S171\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S210\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S249\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S288\'");
                bool temp105;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp105);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp105);
                this.Manager.Comment("reaching state \'S327\'");
                int temp114 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite12CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite12CheckRequirementEnabledChecker3)));
                if ((temp114 == 0)) {
                    this.Manager.Comment("reaching state \'S377\'");
                    bool temp106;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp106);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp106);
                    this.Manager.Comment("reaching state \'S436\'");
                    int temp109 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite12CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite12CheckRequirementEnabledChecker2)));
                    if ((temp109 == 0)) {
                        this.Manager.Comment("reaching state \'S506\'");
                        bool temp107;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, false, true, out temp107);
                        this.Manager.Comment("reaching state \'S602\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp107, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S602");
                        this.Manager.Comment("reaching state \'S698\'");
                        goto label36;
                    }
                    if ((temp109 == 1)) {
                        this.Manager.Comment("reaching state \'S507\'");
                        bool temp108;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, false, true, out temp108);
                        this.Manager.Checkpoint("MS-OXCPRPT_R9070102");
                        this.Manager.Comment("reaching state \'S603\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp108, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S603");
                        this.Manager.Comment("reaching state \'S699\'");
                        goto label36;
                    }
                    throw new InvalidOperationException("never reached");
                label36:
;
                    goto label38;
                }
                if ((temp114 == 1)) {
                    this.Manager.Comment("reaching state \'S378\'");
                    bool temp110;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp110);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp110);
                    this.Manager.Comment("reaching state \'S437\'");
                    int temp113 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite12CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite12CheckRequirementEnabledChecker5)));
                    if ((temp113 == 0)) {
                        this.Manager.Comment("reaching state \'S508\'");
                        bool temp111;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, false, true, out temp111);
                        this.Manager.Checkpoint("MS-OXCPRPT_R63");
                        this.Manager.Checkpoint("MS-OXCPRPT_R86703");
                        this.Manager.Checkpoint("MS-OXCPRPT_R644");
                        this.Manager.Comment("reaching state \'S604\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp111, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S604");
                        this.Manager.Comment("reaching state \'S700\'");
                        goto label37;
                    }
                    if ((temp113 == 1)) {
                        this.Manager.Comment("reaching state \'S509\'");
                        bool temp112;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, false, true, out temp112);
                        this.Manager.Checkpoint("MS-OXCPRPT_R63");
                        this.Manager.Checkpoint("MS-OXCPRPT_R86703");
                        this.Manager.Checkpoint("MS-OXCPRPT_R644");
                        this.Manager.Checkpoint("MS-OXCPRPT_R9070102");
                        this.Manager.Comment("reaching state \'S605\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp112, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S605");
                        this.Manager.Comment("reaching state \'S701\'");
                        goto label37;
                    }
                    throw new InvalidOperationException("never reached");
                label37:
;
                    goto label38;
                }
                throw new InvalidOperationException("never reached");
            label38:
;
                goto label39;
            }
            if ((temp115 == 1)) {
                this.Manager.Comment("reaching state \'S109\'");
                goto label39;
            }
            throw new InvalidOperationException("never reached");
        label39:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite12CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S31");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite12CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S327");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite12CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S436");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite12CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S436");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite12CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S327");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite12CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S437");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite12CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S437");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite12CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S31");
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite13() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite13");
            this.Manager.Comment("reaching state \'S32\'");
            bool temp116;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp116);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp116);
            this.Manager.Comment("reaching state \'S33\'");
            int temp127 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite13CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite13CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp127 == 0)) {
                this.Manager.Comment("reaching state \'S110\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S172\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S211\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S250\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S289\'");
                bool temp117;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp117);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp117);
                this.Manager.Comment("reaching state \'S328\'");
                int temp126 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite13CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite13CheckRequirementEnabledChecker3)));
                if ((temp126 == 0)) {
                    this.Manager.Comment("reaching state \'S379\'");
                    bool temp118;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp118);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp118);
                    this.Manager.Comment("reaching state \'S438\'");
                    int temp121 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite13CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite13CheckRequirementEnabledChecker2)));
                    if ((temp121 == 0)) {
                        this.Manager.Comment("reaching state \'S510\'");
                        bool temp119;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(True,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(true, true, false, out temp119);
                        this.Manager.Comment("reaching state \'S606\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp119, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S606");
                        this.Manager.Comment("reaching state \'S702\'");
                        goto label40;
                    }
                    if ((temp121 == 1)) {
                        this.Manager.Comment("reaching state \'S511\'");
                        bool temp120;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(True,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(true, true, false, out temp120);
                        this.Manager.Comment("reaching state \'S607\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp120, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S607");
                        this.Manager.Comment("reaching state \'S703\'");
                        goto label40;
                    }
                    throw new InvalidOperationException("never reached");
                label40:
;
                    goto label42;
                }
                if ((temp126 == 1)) {
                    this.Manager.Comment("reaching state \'S380\'");
                    bool temp122;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp122);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp122);
                    this.Manager.Comment("reaching state \'S439\'");
                    int temp125 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite13CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite13CheckRequirementEnabledChecker5)));
                    if ((temp125 == 0)) {
                        this.Manager.Comment("reaching state \'S512\'");
                        bool temp123;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(True,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(true, true, false, out temp123);
                        this.Manager.Comment("reaching state \'S608\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp123, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S608");
                        this.Manager.Comment("reaching state \'S704\'");
                        goto label41;
                    }
                    if ((temp125 == 1)) {
                        this.Manager.Comment("reaching state \'S513\'");
                        bool temp124;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(True,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(true, true, false, out temp124);
                        this.Manager.Comment("reaching state \'S609\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp124, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S609");
                        this.Manager.Comment("reaching state \'S705\'");
                        goto label41;
                    }
                    throw new InvalidOperationException("never reached");
                label41:
;
                    goto label42;
                }
                throw new InvalidOperationException("never reached");
            label42:
;
                goto label43;
            }
            if ((temp127 == 1)) {
                this.Manager.Comment("reaching state \'S111\'");
                goto label43;
            }
            throw new InvalidOperationException("never reached");
        label43:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite13CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S33");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite13CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S328");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite13CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S438");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite13CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S438");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite13CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S328");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite13CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S439");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite13CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S439");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite13CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S33");
        }
        #endregion
        
        #region Test Starting in S34
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite14() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite14");
            this.Manager.Comment("reaching state \'S34\'");
            bool temp128;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp128);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp128);
            this.Manager.Comment("reaching state \'S35\'");
            int temp139 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite14CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite14CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp139 == 0)) {
                this.Manager.Comment("reaching state \'S112\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S173\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S212\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S251\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S290\'");
                bool temp129;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp129);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp129);
                this.Manager.Comment("reaching state \'S329\'");
                int temp138 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite14CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite14CheckRequirementEnabledChecker3)));
                if ((temp138 == 0)) {
                    this.Manager.Comment("reaching state \'S381\'");
                    bool temp130;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp130);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp130);
                    this.Manager.Comment("reaching state \'S440\'");
                    int temp133 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite14CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite14CheckRequirementEnabledChecker2)));
                    if ((temp133 == 0)) {
                        this.Manager.Comment("reaching state \'S514\'");
                        bool temp131;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, true, false, out temp131);
                        this.Manager.Comment("reaching state \'S610\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp131, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S610");
                        this.Manager.Comment("reaching state \'S706\'");
                        goto label44;
                    }
                    if ((temp133 == 1)) {
                        this.Manager.Comment("reaching state \'S515\'");
                        bool temp132;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, true, false, out temp132);
                        this.Manager.Comment("reaching state \'S611\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp132, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S611");
                        this.Manager.Comment("reaching state \'S707\'");
                        goto label44;
                    }
                    throw new InvalidOperationException("never reached");
                label44:
;
                    goto label46;
                }
                if ((temp138 == 1)) {
                    this.Manager.Comment("reaching state \'S382\'");
                    bool temp134;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp134);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp134);
                    this.Manager.Comment("reaching state \'S441\'");
                    int temp137 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite14CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite14CheckRequirementEnabledChecker5)));
                    if ((temp137 == 0)) {
                        this.Manager.Comment("reaching state \'S516\'");
                        bool temp135;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, true, false, out temp135);
                        this.Manager.Comment("reaching state \'S612\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp135, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S612");
                        this.Manager.Comment("reaching state \'S708\'");
                        goto label45;
                    }
                    if ((temp137 == 1)) {
                        this.Manager.Comment("reaching state \'S517\'");
                        bool temp136;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, true, false, out temp136);
                        this.Manager.Comment("reaching state \'S613\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp136, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S613");
                        this.Manager.Comment("reaching state \'S709\'");
                        goto label45;
                    }
                    throw new InvalidOperationException("never reached");
                label45:
;
                    goto label46;
                }
                throw new InvalidOperationException("never reached");
            label46:
;
                goto label47;
            }
            if ((temp139 == 1)) {
                this.Manager.Comment("reaching state \'S113\'");
                goto label47;
            }
            throw new InvalidOperationException("never reached");
        label47:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite14CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S35");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite14CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S329");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite14CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S440");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite14CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S440");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite14CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S329");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite14CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S441");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite14CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S441");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite14CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S35");
        }
        #endregion
        
        #region Test Starting in S36
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite15() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite15");
            this.Manager.Comment("reaching state \'S36\'");
            bool temp140;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp140);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp140);
            this.Manager.Comment("reaching state \'S37\'");
            int temp141 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite15CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite15CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp141 == 0)) {
                this.Manager.Comment("reaching state \'S114\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S174\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S213\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S252\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S291\'");
                this.Manager.Comment("executing step \'call RopGetNamesFromPropertyIdsMethod(HaveAssociatedName)\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetNamesFromPropertyIdsMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyIdType)(1)));
                this.Manager.Comment("reaching state \'S330\'");
                this.Manager.Comment("checking step \'return RopGetNamesFromPropertyIdsMethod\'");
                this.Manager.Comment("reaching state \'S383\'");
                goto label48;
            }
            if ((temp141 == 1)) {
                this.Manager.Comment("reaching state \'S115\'");
                goto label48;
            }
            throw new InvalidOperationException("never reached");
        label48:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite15CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S37");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite15CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S37");
        }
        #endregion
        
        #region Test Starting in S38
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite16() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite16");
            this.Manager.Comment("reaching state \'S38\'");
            bool temp142;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp142);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp142);
            this.Manager.Comment("reaching state \'S39\'");
            int temp143 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite16CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite16CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp143 == 0)) {
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S175\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S214\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S253\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S292\'");
                this.Manager.Comment("executing step \'call RopGetNamesFromPropertyIdsMethod(NoAssociatedName)\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetNamesFromPropertyIdsMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyIdType.NoAssociatedName);
                this.Manager.Comment("reaching state \'S331\'");
                this.Manager.Comment("checking step \'return RopGetNamesFromPropertyIdsMethod\'");
                this.Manager.Comment("reaching state \'S384\'");
                goto label49;
            }
            if ((temp143 == 1)) {
                this.Manager.Comment("reaching state \'S117\'");
                goto label49;
            }
            throw new InvalidOperationException("never reached");
        label49:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite16CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S39");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite16CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S39");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite17() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite17");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp144;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp144);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp144);
            this.Manager.Comment("reaching state \'S5\'");
            int temp155 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite17CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite17CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp155 == 0)) {
                this.Manager.Comment("reaching state \'S82\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S158\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S197\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S236\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S275\'");
                bool temp145;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp145);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp145);
                this.Manager.Comment("reaching state \'S314\'");
                int temp154 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite17CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite17CheckRequirementEnabledChecker3)));
                if ((temp154 == 0)) {
                    this.Manager.Comment("reaching state \'S355\'");
                    bool temp146;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp146);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp146);
                    this.Manager.Comment("reaching state \'S418\'");
                    int temp149 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite17CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite17CheckRequirementEnabledChecker2)));
                    if ((temp149 == 0)) {
                        this.Manager.Comment("reaching state \'S470\'");
                        bool temp147;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, true, out temp147);
                        this.Manager.Comment("reaching state \'S566\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp147, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S566");
                        this.Manager.Comment("reaching state \'S662\'");
                        goto label50;
                    }
                    if ((temp149 == 1)) {
                        this.Manager.Comment("reaching state \'S471\'");
                        bool temp148;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, false, out temp148);
                        this.Manager.Comment("reaching state \'S567\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp148, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S567");
                        this.Manager.Comment("reaching state \'S663\'");
                        goto label50;
                    }
                    throw new InvalidOperationException("never reached");
                label50:
;
                    goto label52;
                }
                if ((temp154 == 1)) {
                    this.Manager.Comment("reaching state \'S356\'");
                    bool temp150;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp150);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp150);
                    this.Manager.Comment("reaching state \'S419\'");
                    int temp153 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite17CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite17CheckRequirementEnabledChecker5)));
                    if ((temp153 == 0)) {
                        this.Manager.Comment("reaching state \'S472\'");
                        bool temp151;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, false, out temp151);
                        this.Manager.Comment("reaching state \'S568\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp151, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S568");
                        this.Manager.Comment("reaching state \'S664\'");
                        goto label51;
                    }
                    if ((temp153 == 1)) {
                        this.Manager.Comment("reaching state \'S473\'");
                        bool temp152;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, false, out temp152);
                        this.Manager.Comment("reaching state \'S569\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp152, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S569");
                        this.Manager.Comment("reaching state \'S665\'");
                        goto label51;
                    }
                    throw new InvalidOperationException("never reached");
                label51:
;
                    goto label52;
                }
                throw new InvalidOperationException("never reached");
            label52:
;
                goto label53;
            }
            if ((temp155 == 1)) {
                this.Manager.Comment("reaching state \'S83\'");
                goto label53;
            }
            throw new InvalidOperationException("never reached");
        label53:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite17CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite17CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S314");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite17CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S418");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite17CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S418");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite17CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S314");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite17CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S419");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite17CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S419");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite17CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
        
        #region Test Starting in S40
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite18() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite18");
            this.Manager.Comment("reaching state \'S40\'");
            bool temp156;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp156);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp156);
            this.Manager.Comment("reaching state \'S41\'");
            int temp157 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite18CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite18CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp157 == 0)) {
                this.Manager.Comment("reaching state \'S118\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S176\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S215\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S254\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S293\'");
                this.Manager.Comment("executing step \'call RopGetNamesFromPropertyIdsMethod(LessThan0x8000)\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetNamesFromPropertyIdsMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyIdType)(0)));
                this.Manager.Comment("reaching state \'S332\'");
                this.Manager.Comment("checking step \'return RopGetNamesFromPropertyIdsMethod\'");
                this.Manager.Comment("reaching state \'S385\'");
                goto label54;
            }
            if ((temp157 == 1)) {
                this.Manager.Comment("reaching state \'S119\'");
                goto label54;
            }
            throw new InvalidOperationException("never reached");
        label54:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite18CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S41");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite18CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S41");
        }
        #endregion
        
        #region Test Starting in S42
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite19() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite19");
            this.Manager.Comment("reaching state \'S42\'");
            bool temp158;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp158);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp158);
            this.Manager.Comment("reaching state \'S43\'");
            int temp159 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite19CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite19CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp159 == 0)) {
                this.Manager.Comment("reaching state \'S120\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S177\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S216\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S255\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S294\'");
                this.Manager.Comment("executing step \'call RopGetPropertiesSpecificForTaggedProperties()\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificForTaggedProperties();
                this.Manager.Comment("reaching state \'S333\'");
                this.Manager.Comment("checking step \'return RopGetPropertiesSpecificForTaggedProperties\'");
                this.Manager.Comment("reaching state \'S386\'");
                goto label55;
            }
            if ((temp159 == 1)) {
                this.Manager.Comment("reaching state \'S121\'");
                goto label55;
            }
            throw new InvalidOperationException("never reached");
        label55:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite19CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S43");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite19CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S43");
        }
        #endregion
        
        #region Test Starting in S44
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite20() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite20");
            this.Manager.Comment("reaching state \'S44\'");
            bool temp160;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp160);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp160);
            this.Manager.Comment("reaching state \'S45\'");
            int temp171 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite20CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite20CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp171 == 0)) {
                this.Manager.Comment("reaching state \'S122\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S178\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S217\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S256\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S295\'");
                bool temp161;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp161);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp161);
                this.Manager.Comment("reaching state \'S334\'");
                int temp170 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite20CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite20CheckRequirementEnabledChecker3)));
                if ((temp170 == 0)) {
                    this.Manager.Comment("reaching state \'S387\'");
                    bool temp162;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp162);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp162);
                    this.Manager.Comment("reaching state \'S442\'");
                    int temp165 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite20CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite20CheckRequirementEnabledChecker2)));
                    if ((temp165 == 0)) {
                        this.Manager.Comment("reaching state \'S518\'");
                        bool temp163;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, true, out temp163);
                        this.Manager.Comment("reaching state \'S614\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp163, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S614");
                        this.Manager.Comment("reaching state \'S710\'");
                        goto label56;
                    }
                    if ((temp165 == 1)) {
                        this.Manager.Comment("reaching state \'S519\'");
                        bool temp164;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, true, out temp164);
                        this.Manager.Checkpoint("MS-OXCPRPT_R90707");
                        this.Manager.Comment("reaching state \'S615\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp164, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S615");
                        this.Manager.Comment("reaching state \'S711\'");
                        goto label56;
                    }
                    throw new InvalidOperationException("never reached");
                label56:
;
                    goto label58;
                }
                if ((temp170 == 1)) {
                    this.Manager.Comment("reaching state \'S388\'");
                    bool temp166;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp166);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp166);
                    this.Manager.Comment("reaching state \'S443\'");
                    int temp169 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite20CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite20CheckRequirementEnabledChecker5)));
                    if ((temp169 == 0)) {
                        this.Manager.Comment("reaching state \'S520\'");
                        bool temp167;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, true, out temp167);
                        this.Manager.Comment("reaching state \'S616\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp167, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S616");
                        this.Manager.Comment("reaching state \'S712\'");
                        goto label57;
                    }
                    if ((temp169 == 1)) {
                        this.Manager.Comment("reaching state \'S521\'");
                        bool temp168;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, true, out temp168);
                        this.Manager.Checkpoint("MS-OXCPRPT_R90707");
                        this.Manager.Comment("reaching state \'S617\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp168, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S617");
                        this.Manager.Comment("reaching state \'S713\'");
                        goto label57;
                    }
                    throw new InvalidOperationException("never reached");
                label57:
;
                    goto label58;
                }
                throw new InvalidOperationException("never reached");
            label58:
;
                goto label59;
            }
            if ((temp171 == 1)) {
                this.Manager.Comment("reaching state \'S123\'");
                goto label59;
            }
            throw new InvalidOperationException("never reached");
        label59:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite20CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S45");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite20CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S334");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite20CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S442");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite20CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S442");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite20CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S334");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite20CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S443");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite20CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S443");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite20CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S45");
        }
        #endregion
        
        #region Test Starting in S46
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite21() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite21");
            this.Manager.Comment("reaching state \'S46\'");
            bool temp172;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp172);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp172);
            this.Manager.Comment("reaching state \'S47\'");
            int temp183 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite21CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite21CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp183 == 0)) {
                this.Manager.Comment("reaching state \'S124\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S179\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S218\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S257\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S296\'");
                bool temp173;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp173);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp173);
                this.Manager.Comment("reaching state \'S335\'");
                int temp182 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite21CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite21CheckRequirementEnabledChecker3)));
                if ((temp182 == 0)) {
                    this.Manager.Comment("reaching state \'S389\'");
                    bool temp174;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp174);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp174);
                    this.Manager.Comment("reaching state \'S444\'");
                    int temp177 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite21CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite21CheckRequirementEnabledChecker2)));
                    if ((temp177 == 0)) {
                        this.Manager.Comment("reaching state \'S522\'");
                        bool temp175;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, false, out temp175);
                        this.Manager.Comment("reaching state \'S618\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp175, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S618");
                        this.Manager.Comment("reaching state \'S714\'");
                        goto label60;
                    }
                    if ((temp177 == 1)) {
                        this.Manager.Comment("reaching state \'S523\'");
                        bool temp176;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, true, out temp176);
                        this.Manager.Comment("reaching state \'S619\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp176, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S619");
                        this.Manager.Comment("reaching state \'S715\'");
                        goto label60;
                    }
                    throw new InvalidOperationException("never reached");
                label60:
;
                    goto label62;
                }
                if ((temp182 == 1)) {
                    this.Manager.Comment("reaching state \'S390\'");
                    bool temp178;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp178);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp178);
                    this.Manager.Comment("reaching state \'S445\'");
                    int temp181 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite21CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite21CheckRequirementEnabledChecker5)));
                    if ((temp181 == 0)) {
                        this.Manager.Comment("reaching state \'S524\'");
                        bool temp179;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, true, out temp179);
                        this.Manager.Comment("reaching state \'S620\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp179, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S620");
                        this.Manager.Comment("reaching state \'S716\'");
                        goto label61;
                    }
                    if ((temp181 == 1)) {
                        this.Manager.Comment("reaching state \'S525\'");
                        bool temp180;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, true, out temp180);
                        this.Manager.Comment("reaching state \'S621\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp180, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S621");
                        this.Manager.Comment("reaching state \'S717\'");
                        goto label61;
                    }
                    throw new InvalidOperationException("never reached");
                label61:
;
                    goto label62;
                }
                throw new InvalidOperationException("never reached");
            label62:
;
                goto label63;
            }
            if ((temp183 == 1)) {
                this.Manager.Comment("reaching state \'S125\'");
                goto label63;
            }
            throw new InvalidOperationException("never reached");
        label63:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite21CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S47");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite21CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S335");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite21CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S444");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite21CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S444");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite21CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S335");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite21CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S445");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite21CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S445");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite21CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S47");
        }
        #endregion
        
        #region Test Starting in S48
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite22() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite22");
            this.Manager.Comment("reaching state \'S48\'");
            bool temp184;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp184);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp184);
            this.Manager.Comment("reaching state \'S49\'");
            int temp195 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite22CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite22CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp195 == 0)) {
                this.Manager.Comment("reaching state \'S126\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S180\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S219\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S258\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S297\'");
                bool temp185;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp185);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp185);
                this.Manager.Comment("reaching state \'S336\'");
                int temp194 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite22CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite22CheckRequirementEnabledChecker3)));
                if ((temp194 == 0)) {
                    this.Manager.Comment("reaching state \'S391\'");
                    bool temp186;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp186);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp186);
                    this.Manager.Comment("reaching state \'S446\'");
                    int temp189 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite22CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite22CheckRequirementEnabledChecker2)));
                    if ((temp189 == 0)) {
                        this.Manager.Comment("reaching state \'S526\'");
                        bool temp187;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, true, out temp187);
                        this.Manager.Comment("reaching state \'S622\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp187, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S622");
                        this.Manager.Comment("reaching state \'S718\'");
                        goto label64;
                    }
                    if ((temp189 == 1)) {
                        this.Manager.Comment("reaching state \'S527\'");
                        bool temp188;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, false, out temp188);
                        this.Manager.Comment("reaching state \'S623\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp188, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S623");
                        this.Manager.Comment("reaching state \'S719\'");
                        goto label64;
                    }
                    throw new InvalidOperationException("never reached");
                label64:
;
                    goto label66;
                }
                if ((temp194 == 1)) {
                    this.Manager.Comment("reaching state \'S392\'");
                    bool temp190;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp190);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp190);
                    this.Manager.Comment("reaching state \'S447\'");
                    int temp193 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite22CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite22CheckRequirementEnabledChecker5)));
                    if ((temp193 == 0)) {
                        this.Manager.Comment("reaching state \'S528\'");
                        bool temp191;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, false, out temp191);
                        this.Manager.Comment("reaching state \'S624\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp191, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S624");
                        this.Manager.Comment("reaching state \'S720\'");
                        goto label65;
                    }
                    if ((temp193 == 1)) {
                        this.Manager.Comment("reaching state \'S529\'");
                        bool temp192;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, false, out temp192);
                        this.Manager.Comment("reaching state \'S625\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp192, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S625");
                        this.Manager.Comment("reaching state \'S721\'");
                        goto label65;
                    }
                    throw new InvalidOperationException("never reached");
                label65:
;
                    goto label66;
                }
                throw new InvalidOperationException("never reached");
            label66:
;
                goto label67;
            }
            if ((temp195 == 1)) {
                this.Manager.Comment("reaching state \'S127\'");
                goto label67;
            }
            throw new InvalidOperationException("never reached");
        label67:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite22CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S49");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite22CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S336");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite22CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S446");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite22CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S446");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite22CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S336");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite22CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S447");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite22CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S447");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite22CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S49");
        }
        #endregion
        
        #region Test Starting in S50
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite23() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite23");
            this.Manager.Comment("reaching state \'S50\'");
            bool temp196;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp196);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp196);
            this.Manager.Comment("reaching state \'S51\'");
            int temp207 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite23CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite23CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp207 == 0)) {
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S181\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S220\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S259\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S298\'");
                bool temp197;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp197);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp197);
                this.Manager.Comment("reaching state \'S337\'");
                int temp206 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite23CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite23CheckRequirementEnabledChecker3)));
                if ((temp206 == 0)) {
                    this.Manager.Comment("reaching state \'S393\'");
                    bool temp198;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp198);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp198);
                    this.Manager.Comment("reaching state \'S448\'");
                    int temp201 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite23CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite23CheckRequirementEnabledChecker2)));
                    if ((temp201 == 0)) {
                        this.Manager.Comment("reaching state \'S530\'");
                        bool temp199;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, false, out temp199);
                        this.Manager.Comment("reaching state \'S626\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp199, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S626");
                        this.Manager.Comment("reaching state \'S722\'");
                        goto label68;
                    }
                    if ((temp201 == 1)) {
                        this.Manager.Comment("reaching state \'S531\'");
                        bool temp200;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, false, out temp200);
                        this.Manager.Checkpoint("MS-OXCPRPT_R90707");
                        this.Manager.Comment("reaching state \'S627\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp200, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S627");
                        this.Manager.Comment("reaching state \'S723\'");
                        goto label68;
                    }
                    throw new InvalidOperationException("never reached");
                label68:
;
                    goto label70;
                }
                if ((temp206 == 1)) {
                    this.Manager.Comment("reaching state \'S394\'");
                    bool temp202;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp202);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp202);
                    this.Manager.Comment("reaching state \'S449\'");
                    int temp205 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite23CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite23CheckRequirementEnabledChecker5)));
                    if ((temp205 == 0)) {
                        this.Manager.Comment("reaching state \'S532\'");
                        bool temp203;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, false, out temp203);
                        this.Manager.Comment("reaching state \'S628\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp203, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S628");
                        this.Manager.Comment("reaching state \'S724\'");
                        goto label69;
                    }
                    if ((temp205 == 1)) {
                        this.Manager.Comment("reaching state \'S533\'");
                        bool temp204;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, false, out temp204);
                        this.Manager.Checkpoint("MS-OXCPRPT_R90707");
                        this.Manager.Comment("reaching state \'S629\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp204, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S629");
                        this.Manager.Comment("reaching state \'S725\'");
                        goto label69;
                    }
                    throw new InvalidOperationException("never reached");
                label69:
;
                    goto label70;
                }
                throw new InvalidOperationException("never reached");
            label70:
;
                goto label71;
            }
            if ((temp207 == 1)) {
                this.Manager.Comment("reaching state \'S129\'");
                goto label71;
            }
            throw new InvalidOperationException("never reached");
        label71:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite23CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S51");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite23CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S337");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite23CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S448");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite23CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S448");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite23CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S337");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite23CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S449");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite23CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S449");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite23CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S51");
        }
        #endregion
        
        #region Test Starting in S52
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite24() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite24");
            this.Manager.Comment("reaching state \'S52\'");
            bool temp208;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp208);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp208);
            this.Manager.Comment("reaching state \'S53\'");
            int temp219 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite24CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite24CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp219 == 0)) {
                this.Manager.Comment("reaching state \'S130\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S182\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S221\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S260\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S299\'");
                bool temp209;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp209);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp209);
                this.Manager.Comment("reaching state \'S338\'");
                int temp218 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite24CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite24CheckRequirementEnabledChecker3)));
                if ((temp218 == 0)) {
                    this.Manager.Comment("reaching state \'S395\'");
                    bool temp210;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp210);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp210);
                    this.Manager.Comment("reaching state \'S450\'");
                    int temp213 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite24CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite24CheckRequirementEnabledChecker2)));
                    if ((temp213 == 0)) {
                        this.Manager.Comment("reaching state \'S534\'");
                        bool temp211;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, false, true, out temp211);
                        this.Manager.Comment("reaching state \'S630\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp211, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S630");
                        this.Manager.Comment("reaching state \'S726\'");
                        goto label72;
                    }
                    if ((temp213 == 1)) {
                        this.Manager.Comment("reaching state \'S535\'");
                        bool temp212;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, false, true, out temp212);
                        this.Manager.Checkpoint("MS-OXCPRPT_R9070102");
                        this.Manager.Comment("reaching state \'S631\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp212, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S631");
                        this.Manager.Comment("reaching state \'S727\'");
                        goto label72;
                    }
                    throw new InvalidOperationException("never reached");
                label72:
;
                    goto label74;
                }
                if ((temp218 == 1)) {
                    this.Manager.Comment("reaching state \'S396\'");
                    bool temp214;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp214);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp214);
                    this.Manager.Comment("reaching state \'S451\'");
                    int temp217 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite24CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite24CheckRequirementEnabledChecker5)));
                    if ((temp217 == 0)) {
                        this.Manager.Comment("reaching state \'S536\'");
                        bool temp215;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, false, true, out temp215);
                        this.Manager.Comment("reaching state \'S632\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp215, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S632");
                        this.Manager.Comment("reaching state \'S728\'");
                        goto label73;
                    }
                    if ((temp217 == 1)) {
                        this.Manager.Comment("reaching state \'S537\'");
                        bool temp216;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, false, true, out temp216);
                        this.Manager.Checkpoint("MS-OXCPRPT_R9070102");
                        this.Manager.Comment("reaching state \'S633\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp216, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S633");
                        this.Manager.Comment("reaching state \'S729\'");
                        goto label73;
                    }
                    throw new InvalidOperationException("never reached");
                label73:
;
                    goto label74;
                }
                throw new InvalidOperationException("never reached");
            label74:
;
                goto label75;
            }
            if ((temp219 == 1)) {
                this.Manager.Comment("reaching state \'S131\'");
                goto label75;
            }
            throw new InvalidOperationException("never reached");
        label75:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite24CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S53");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite24CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S338");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite24CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S450");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite24CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S450");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite24CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S338");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite24CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S451");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite24CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S451");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite24CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S53");
        }
        #endregion
        
        #region Test Starting in S54
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite25() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite25");
            this.Manager.Comment("reaching state \'S54\'");
            bool temp220;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp220);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp220);
            this.Manager.Comment("reaching state \'S55\'");
            int temp231 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite25CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite25CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp231 == 0)) {
                this.Manager.Comment("reaching state \'S132\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S183\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S222\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S261\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S300\'");
                bool temp221;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp221);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp221);
                this.Manager.Comment("reaching state \'S339\'");
                int temp230 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite25CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite25CheckRequirementEnabledChecker3)));
                if ((temp230 == 0)) {
                    this.Manager.Comment("reaching state \'S397\'");
                    bool temp222;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp222);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp222);
                    this.Manager.Comment("reaching state \'S452\'");
                    int temp225 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite25CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite25CheckRequirementEnabledChecker2)));
                    if ((temp225 == 0)) {
                        this.Manager.Comment("reaching state \'S538\'");
                        bool temp223;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(True,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(true, true, false, out temp223);
                        this.Manager.Comment("reaching state \'S634\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp223, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S634");
                        this.Manager.Comment("reaching state \'S730\'");
                        goto label76;
                    }
                    if ((temp225 == 1)) {
                        this.Manager.Comment("reaching state \'S539\'");
                        bool temp224;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(True,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(true, true, false, out temp224);
                        this.Manager.Comment("reaching state \'S635\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp224, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S635");
                        this.Manager.Comment("reaching state \'S731\'");
                        goto label76;
                    }
                    throw new InvalidOperationException("never reached");
                label76:
;
                    goto label78;
                }
                if ((temp230 == 1)) {
                    this.Manager.Comment("reaching state \'S398\'");
                    bool temp226;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp226);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp226);
                    this.Manager.Comment("reaching state \'S453\'");
                    int temp229 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite25CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite25CheckRequirementEnabledChecker5)));
                    if ((temp229 == 0)) {
                        this.Manager.Comment("reaching state \'S540\'");
                        bool temp227;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(True,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(true, true, false, out temp227);
                        this.Manager.Comment("reaching state \'S636\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp227, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S636");
                        this.Manager.Comment("reaching state \'S732\'");
                        goto label77;
                    }
                    if ((temp229 == 1)) {
                        this.Manager.Comment("reaching state \'S541\'");
                        bool temp228;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(True,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(true, true, false, out temp228);
                        this.Manager.Comment("reaching state \'S637\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp228, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S637");
                        this.Manager.Comment("reaching state \'S733\'");
                        goto label77;
                    }
                    throw new InvalidOperationException("never reached");
                label77:
;
                    goto label78;
                }
                throw new InvalidOperationException("never reached");
            label78:
;
                goto label79;
            }
            if ((temp231 == 1)) {
                this.Manager.Comment("reaching state \'S133\'");
                goto label79;
            }
            throw new InvalidOperationException("never reached");
        label79:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite25CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S55");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite25CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S339");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite25CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S452");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite25CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S452");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite25CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S339");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite25CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S453");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite25CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S453");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite25CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S55");
        }
        #endregion
        
        #region Test Starting in S56
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite26() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite26");
            this.Manager.Comment("reaching state \'S56\'");
            bool temp232;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp232);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp232);
            this.Manager.Comment("reaching state \'S57\'");
            int temp243 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite26CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite26CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp243 == 0)) {
                this.Manager.Comment("reaching state \'S134\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S184\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S223\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S262\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S301\'");
                bool temp233;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp233);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp233);
                this.Manager.Comment("reaching state \'S340\'");
                int temp242 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite26CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite26CheckRequirementEnabledChecker3)));
                if ((temp242 == 0)) {
                    this.Manager.Comment("reaching state \'S399\'");
                    bool temp234;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp234);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp234);
                    this.Manager.Comment("reaching state \'S454\'");
                    int temp237 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite26CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite26CheckRequirementEnabledChecker2)));
                    if ((temp237 == 0)) {
                        this.Manager.Comment("reaching state \'S542\'");
                        bool temp235;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, true, false, out temp235);
                        this.Manager.Comment("reaching state \'S638\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp235, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S638");
                        this.Manager.Comment("reaching state \'S734\'");
                        goto label80;
                    }
                    if ((temp237 == 1)) {
                        this.Manager.Comment("reaching state \'S543\'");
                        bool temp236;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, true, false, out temp236);
                        this.Manager.Comment("reaching state \'S639\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp236, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S639");
                        this.Manager.Comment("reaching state \'S735\'");
                        goto label80;
                    }
                    throw new InvalidOperationException("never reached");
                label80:
;
                    goto label82;
                }
                if ((temp242 == 1)) {
                    this.Manager.Comment("reaching state \'S400\'");
                    bool temp238;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp238);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp238);
                    this.Manager.Comment("reaching state \'S455\'");
                    int temp241 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite26CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite26CheckRequirementEnabledChecker5)));
                    if ((temp241 == 0)) {
                        this.Manager.Comment("reaching state \'S544\'");
                        bool temp239;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, true, false, out temp239);
                        this.Manager.Comment("reaching state \'S640\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp239, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S640");
                        this.Manager.Comment("reaching state \'S736\'");
                        goto label81;
                    }
                    if ((temp241 == 1)) {
                        this.Manager.Comment("reaching state \'S545\'");
                        bool temp240;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, true, false, out temp240);
                        this.Manager.Comment("reaching state \'S641\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp240, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S641");
                        this.Manager.Comment("reaching state \'S737\'");
                        goto label81;
                    }
                    throw new InvalidOperationException("never reached");
                label81:
;
                    goto label82;
                }
                throw new InvalidOperationException("never reached");
            label82:
;
                goto label83;
            }
            if ((temp243 == 1)) {
                this.Manager.Comment("reaching state \'S135\'");
                goto label83;
            }
            throw new InvalidOperationException("never reached");
        label83:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite26CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S57");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite26CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S340");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite26CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S454");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite26CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S454");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite26CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S340");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite26CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S455");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite26CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S455");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite26CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S57");
        }
        #endregion
        
        #region Test Starting in S58
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite27() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite27");
            this.Manager.Comment("reaching state \'S58\'");
            bool temp244;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp244);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp244);
            this.Manager.Comment("reaching state \'S59\'");
            int temp245 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite27CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite27CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp245 == 0)) {
                this.Manager.Comment("reaching state \'S136\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S185\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S224\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S263\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S302\'");
                this.Manager.Comment("executing step \'call RopGetNamesFromPropertyIdsMethod(HaveAssociatedName)\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetNamesFromPropertyIdsMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyIdType)(1)));
                this.Manager.Comment("reaching state \'S341\'");
                this.Manager.Comment("checking step \'return RopGetNamesFromPropertyIdsMethod\'");
                this.Manager.Comment("reaching state \'S401\'");
                goto label84;
            }
            if ((temp245 == 1)) {
                this.Manager.Comment("reaching state \'S137\'");
                goto label84;
            }
            throw new InvalidOperationException("never reached");
        label84:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite27CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S59");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite27CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S59");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite28() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite28");
            this.Manager.Comment("reaching state \'S6\'");
            bool temp246;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp246);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp246);
            this.Manager.Comment("reaching state \'S7\'");
            int temp257 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite28CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite28CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp257 == 0)) {
                this.Manager.Comment("reaching state \'S84\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S159\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S198\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S237\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S276\'");
                bool temp247;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp247);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp247);
                this.Manager.Comment("reaching state \'S315\'");
                int temp256 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite28CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite28CheckRequirementEnabledChecker3)));
                if ((temp256 == 0)) {
                    this.Manager.Comment("reaching state \'S357\'");
                    bool temp248;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp248);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp248);
                    this.Manager.Comment("reaching state \'S420\'");
                    int temp251 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite28CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite28CheckRequirementEnabledChecker2)));
                    if ((temp251 == 0)) {
                        this.Manager.Comment("reaching state \'S474\'");
                        bool temp249;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, false, out temp249);
                        this.Manager.Comment("reaching state \'S570\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp249, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S570");
                        this.Manager.Comment("reaching state \'S666\'");
                        goto label85;
                    }
                    if ((temp251 == 1)) {
                        this.Manager.Comment("reaching state \'S475\'");
                        bool temp250;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, false, out temp250);
                        this.Manager.Checkpoint("MS-OXCPRPT_R90707");
                        this.Manager.Comment("reaching state \'S571\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp250, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S571");
                        this.Manager.Comment("reaching state \'S667\'");
                        goto label85;
                    }
                    throw new InvalidOperationException("never reached");
                label85:
;
                    goto label87;
                }
                if ((temp256 == 1)) {
                    this.Manager.Comment("reaching state \'S358\'");
                    bool temp252;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp252);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp252);
                    this.Manager.Comment("reaching state \'S421\'");
                    int temp255 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite28CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite28CheckRequirementEnabledChecker5)));
                    if ((temp255 == 0)) {
                        this.Manager.Comment("reaching state \'S476\'");
                        bool temp253;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, false, out temp253);
                        this.Manager.Checkpoint("MS-OXCPRPT_R644");
                        this.Manager.Checkpoint("MS-OXCPRPT_R85");
                        this.Manager.Checkpoint("MS-OXCPRPT_R86703");
                        this.Manager.Comment("reaching state \'S572\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp253, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S572");
                        this.Manager.Comment("reaching state \'S668\'");
                        goto label86;
                    }
                    if ((temp255 == 1)) {
                        this.Manager.Comment("reaching state \'S477\'");
                        bool temp254;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(false, true, false, out temp254);
                        this.Manager.Checkpoint("MS-OXCPRPT_R644");
                        this.Manager.Checkpoint("MS-OXCPRPT_R85");
                        this.Manager.Checkpoint("MS-OXCPRPT_R86703");
                        this.Manager.Checkpoint("MS-OXCPRPT_R90707");
                        this.Manager.Comment("reaching state \'S573\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp254, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S573");
                        this.Manager.Comment("reaching state \'S669\'");
                        goto label86;
                    }
                    throw new InvalidOperationException("never reached");
                label86:
;
                    goto label87;
                }
                throw new InvalidOperationException("never reached");
            label87:
;
                goto label88;
            }
            if ((temp257 == 1)) {
                this.Manager.Comment("reaching state \'S85\'");
                goto label88;
            }
            throw new InvalidOperationException("never reached");
        label88:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite28CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite28CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S315");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite28CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S420");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite28CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S420");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite28CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S315");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite28CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S421");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite28CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S421");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite28CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        #endregion
        
        #region Test Starting in S60
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite29() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite29");
            this.Manager.Comment("reaching state \'S60\'");
            bool temp258;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp258);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp258);
            this.Manager.Comment("reaching state \'S61\'");
            int temp259 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite29CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite29CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp259 == 0)) {
                this.Manager.Comment("reaching state \'S138\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S186\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S225\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S264\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S303\'");
                this.Manager.Comment("executing step \'call RopGetNamesFromPropertyIdsMethod(NoAssociatedName)\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetNamesFromPropertyIdsMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyIdType.NoAssociatedName);
                this.Manager.Comment("reaching state \'S342\'");
                this.Manager.Comment("checking step \'return RopGetNamesFromPropertyIdsMethod\'");
                this.Manager.Comment("reaching state \'S402\'");
                goto label89;
            }
            if ((temp259 == 1)) {
                this.Manager.Comment("reaching state \'S139\'");
                goto label89;
            }
            throw new InvalidOperationException("never reached");
        label89:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite29CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S61");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite29CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S61");
        }
        #endregion
        
        #region Test Starting in S62
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite30() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite30");
            this.Manager.Comment("reaching state \'S62\'");
            bool temp260;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp260);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp260);
            this.Manager.Comment("reaching state \'S63\'");
            int temp261 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite30CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite30CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp261 == 0)) {
                this.Manager.Comment("reaching state \'S140\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S187\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S226\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S265\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S304\'");
                this.Manager.Comment("executing step \'call RopGetNamesFromPropertyIdsMethod(LessThan0x8000)\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetNamesFromPropertyIdsMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyIdType)(0)));
                this.Manager.Comment("reaching state \'S343\'");
                this.Manager.Comment("checking step \'return RopGetNamesFromPropertyIdsMethod\'");
                this.Manager.Comment("reaching state \'S403\'");
                goto label90;
            }
            if ((temp261 == 1)) {
                this.Manager.Comment("reaching state \'S141\'");
                goto label90;
            }
            throw new InvalidOperationException("never reached");
        label90:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite30CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S63");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite30CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S63");
        }
        #endregion
        
        #region Test Starting in S64
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite31() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite31");
            this.Manager.Comment("reaching state \'S64\'");
            bool temp262;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp262);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp262);
            this.Manager.Comment("reaching state \'S65\'");
            int temp263 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite31CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite31CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp263 == 0)) {
                this.Manager.Comment("reaching state \'S142\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S188\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S227\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S266\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S305\'");
                this.Manager.Comment("executing step \'call RopGetPropertiesSpecificForTaggedProperties()\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificForTaggedProperties();
                this.Manager.Comment("reaching state \'S344\'");
                this.Manager.Comment("checking step \'return RopGetPropertiesSpecificForTaggedProperties\'");
                this.Manager.Comment("reaching state \'S404\'");
                goto label91;
            }
            if ((temp263 == 1)) {
                this.Manager.Comment("reaching state \'S143\'");
                goto label91;
            }
            throw new InvalidOperationException("never reached");
        label91:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite31CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S65");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite31CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S65");
        }
        #endregion
        
        #region Test Starting in S66
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite32() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite32");
            this.Manager.Comment("reaching state \'S66\'");
            bool temp264;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp264);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp264);
            this.Manager.Comment("reaching state \'S67\'");
            int temp275 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite32CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite32CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp275 == 0)) {
                this.Manager.Comment("reaching state \'S144\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S189\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S228\'");
                this.Manager.Comment("executing step \'call GetObject(Logon,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S267\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S306\'");
                bool temp265;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp265);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp265);
                this.Manager.Comment("reaching state \'S345\'");
                int temp274 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite32CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite32CheckRequirementEnabledChecker3)));
                if ((temp274 == 0)) {
                    this.Manager.Comment("reaching state \'S405\'");
                    bool temp266;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp266);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp266);
                    this.Manager.Comment("reaching state \'S456\'");
                    int temp269 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite32CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite32CheckRequirementEnabledChecker2)));
                    if ((temp269 == 0)) {
                        this.Manager.Comment("reaching state \'S546\'");
                        bool temp267;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, true, out temp267);
                        this.Manager.Comment("reaching state \'S642\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp267, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S642");
                        this.Manager.Comment("reaching state \'S738\'");
                        goto label92;
                    }
                    if ((temp269 == 1)) {
                        this.Manager.Comment("reaching state \'S547\'");
                        bool temp268;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, true, out temp268);
                        this.Manager.Comment("reaching state \'S643\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp268, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S643");
                        this.Manager.Comment("reaching state \'S739\'");
                        goto label92;
                    }
                    throw new InvalidOperationException("never reached");
                label92:
;
                    goto label94;
                }
                if ((temp274 == 1)) {
                    this.Manager.Comment("reaching state \'S406\'");
                    bool temp270;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp270);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp270);
                    this.Manager.Comment("reaching state \'S457\'");
                    int temp273 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite32CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite32CheckRequirementEnabledChecker5)));
                    if ((temp273 == 0)) {
                        this.Manager.Comment("reaching state \'S548\'");
                        bool temp271;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, true, out temp271);
                        this.Manager.Comment("reaching state \'S644\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp271, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S644");
                        this.Manager.Comment("reaching state \'S740\'");
                        goto label93;
                    }
                    if ((temp273 == 1)) {
                        this.Manager.Comment("reaching state \'S549\'");
                        bool temp272;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, true, out temp272);
                        this.Manager.Comment("reaching state \'S645\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp272, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S645");
                        this.Manager.Comment("reaching state \'S741\'");
                        goto label93;
                    }
                    throw new InvalidOperationException("never reached");
                label93:
;
                    goto label94;
                }
                throw new InvalidOperationException("never reached");
            label94:
;
                goto label95;
            }
            if ((temp275 == 1)) {
                this.Manager.Comment("reaching state \'S145\'");
                goto label95;
            }
            throw new InvalidOperationException("never reached");
        label95:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite32CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S67");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite32CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S345");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite32CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S456");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite32CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S456");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite32CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S345");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite32CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S457");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite32CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S457");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite32CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S67");
        }
        #endregion
        
        #region Test Starting in S68
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite33() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite33");
            this.Manager.Comment("reaching state \'S68\'");
            bool temp276;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp276);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp276);
            this.Manager.Comment("reaching state \'S69\'");
            int temp287 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite33CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite33CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp287 == 0)) {
                this.Manager.Comment("reaching state \'S146\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S190\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S229\'");
                this.Manager.Comment("executing step \'call GetObject(Logon,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S268\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S307\'");
                bool temp277;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp277);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp277);
                this.Manager.Comment("reaching state \'S346\'");
                int temp286 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite33CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite33CheckRequirementEnabledChecker3)));
                if ((temp286 == 0)) {
                    this.Manager.Comment("reaching state \'S407\'");
                    bool temp278;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp278);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp278);
                    this.Manager.Comment("reaching state \'S458\'");
                    int temp281 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite33CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite33CheckRequirementEnabledChecker2)));
                    if ((temp281 == 0)) {
                        this.Manager.Comment("reaching state \'S550\'");
                        bool temp279;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, false, out temp279);
                        this.Manager.Comment("reaching state \'S646\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp279, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S646");
                        this.Manager.Comment("reaching state \'S742\'");
                        goto label96;
                    }
                    if ((temp281 == 1)) {
                        this.Manager.Comment("reaching state \'S551\'");
                        bool temp280;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, false, out temp280);
                        this.Manager.Comment("reaching state \'S647\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp280, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S647");
                        this.Manager.Comment("reaching state \'S743\'");
                        goto label96;
                    }
                    throw new InvalidOperationException("never reached");
                label96:
;
                    goto label98;
                }
                if ((temp286 == 1)) {
                    this.Manager.Comment("reaching state \'S408\'");
                    bool temp282;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(90707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90707, out temp282);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp282);
                    this.Manager.Comment("reaching state \'S459\'");
                    int temp285 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite33CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite33CheckRequirementEnabledChecker5)));
                    if ((temp285 == 0)) {
                        this.Manager.Comment("reaching state \'S552\'");
                        bool temp283;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, false, out temp283);
                        this.Manager.Comment("reaching state \'S648\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp283, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S648");
                        this.Manager.Comment("reaching state \'S744\'");
                        goto label97;
                    }
                    if ((temp285 == 1)) {
                        this.Manager.Comment("reaching state \'S553\'");
                        bool temp284;
                        this.Manager.Comment("executing step \'call RopGetPropertiesAllMethod(True,False,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesAllMethod(true, false, false, out temp284);
                        this.Manager.Comment("reaching state \'S649\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesAllMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp284, "isValueContainsNotEnoughMemory of RopGetPropertiesAllMethod, state S649");
                        this.Manager.Comment("reaching state \'S745\'");
                        goto label97;
                    }
                    throw new InvalidOperationException("never reached");
                label97:
;
                    goto label98;
                }
                throw new InvalidOperationException("never reached");
            label98:
;
                goto label99;
            }
            if ((temp287 == 1)) {
                this.Manager.Comment("reaching state \'S147\'");
                goto label99;
            }
            throw new InvalidOperationException("never reached");
        label99:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite33CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S69");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite33CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S346");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite33CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S458");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite33CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S458");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite33CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S346");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite33CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S459");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite33CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S459");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite33CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S69");
        }
        #endregion
        
        #region Test Starting in S70
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite34() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite34");
            this.Manager.Comment("reaching state \'S70\'");
            bool temp288;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp288);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp288);
            this.Manager.Comment("reaching state \'S71\'");
            int temp299 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite34CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite34CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp299 == 0)) {
                this.Manager.Comment("reaching state \'S148\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S191\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S230\'");
                this.Manager.Comment("executing step \'call GetObject(Logon,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S269\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S308\'");
                bool temp289;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp289);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp289);
                this.Manager.Comment("reaching state \'S347\'");
                int temp298 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite34CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite34CheckRequirementEnabledChecker3)));
                if ((temp298 == 0)) {
                    this.Manager.Comment("reaching state \'S409\'");
                    bool temp290;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp290);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp290);
                    this.Manager.Comment("reaching state \'S460\'");
                    int temp293 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite34CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite34CheckRequirementEnabledChecker2)));
                    if ((temp293 == 0)) {
                        this.Manager.Comment("reaching state \'S554\'");
                        bool temp291;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, true, false, out temp291);
                        this.Manager.Comment("reaching state \'S650\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp291, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S650");
                        this.Manager.Comment("reaching state \'S746\'");
                        goto label100;
                    }
                    if ((temp293 == 1)) {
                        this.Manager.Comment("reaching state \'S555\'");
                        bool temp292;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, true, false, out temp292);
                        this.Manager.Comment("reaching state \'S651\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp292, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S651");
                        this.Manager.Comment("reaching state \'S747\'");
                        goto label100;
                    }
                    throw new InvalidOperationException("never reached");
                label100:
;
                    goto label102;
                }
                if ((temp298 == 1)) {
                    this.Manager.Comment("reaching state \'S410\'");
                    bool temp294;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp294);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp294);
                    this.Manager.Comment("reaching state \'S461\'");
                    int temp297 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite34CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite34CheckRequirementEnabledChecker5)));
                    if ((temp297 == 0)) {
                        this.Manager.Comment("reaching state \'S556\'");
                        bool temp295;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, true, false, out temp295);
                        this.Manager.Comment("reaching state \'S652\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp295, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S652");
                        this.Manager.Comment("reaching state \'S748\'");
                        goto label101;
                    }
                    if ((temp297 == 1)) {
                        this.Manager.Comment("reaching state \'S557\'");
                        bool temp296;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,True,False,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, true, false, out temp296);
                        this.Manager.Comment("reaching state \'S653\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp296, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S653");
                        this.Manager.Comment("reaching state \'S749\'");
                        goto label101;
                    }
                    throw new InvalidOperationException("never reached");
                label101:
;
                    goto label102;
                }
                throw new InvalidOperationException("never reached");
            label102:
;
                goto label103;
            }
            if ((temp299 == 1)) {
                this.Manager.Comment("reaching state \'S149\'");
                goto label103;
            }
            throw new InvalidOperationException("never reached");
        label103:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite34CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S71");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite34CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S347");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite34CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S460");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite34CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S460");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite34CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S347");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite34CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S461");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite34CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S461");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite34CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S71");
        }
        #endregion
        
        #region Test Starting in S72
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite35() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite35");
            this.Manager.Comment("reaching state \'S72\'");
            bool temp300;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp300);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp300);
            this.Manager.Comment("reaching state \'S73\'");
            int temp301 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite35CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite35CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp301 == 0)) {
                this.Manager.Comment("reaching state \'S150\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S192\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S231\'");
                this.Manager.Comment("executing step \'call GetObject(Logon,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S270\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S309\'");
                this.Manager.Comment("executing step \'call RopGetNamesFromPropertyIdsMethod(HaveAssociatedName)\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetNamesFromPropertyIdsMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyIdType)(1)));
                this.Manager.Comment("reaching state \'S348\'");
                this.Manager.Comment("checking step \'return RopGetNamesFromPropertyIdsMethod\'");
                this.Manager.Comment("reaching state \'S411\'");
                goto label104;
            }
            if ((temp301 == 1)) {
                this.Manager.Comment("reaching state \'S151\'");
                goto label104;
            }
            throw new InvalidOperationException("never reached");
        label104:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite35CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S73");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite35CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S73");
        }
        #endregion
        
        #region Test Starting in S74
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite36() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite36");
            this.Manager.Comment("reaching state \'S74\'");
            bool temp302;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp302);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp302);
            this.Manager.Comment("reaching state \'S75\'");
            int temp303 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite36CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite36CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp303 == 0)) {
                this.Manager.Comment("reaching state \'S152\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S193\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S232\'");
                this.Manager.Comment("executing step \'call GetObject(Logon,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S271\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S310\'");
                this.Manager.Comment("executing step \'call RopGetNamesFromPropertyIdsMethod(NoAssociatedName)\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetNamesFromPropertyIdsMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyIdType.NoAssociatedName);
                this.Manager.Comment("reaching state \'S349\'");
                this.Manager.Comment("checking step \'return RopGetNamesFromPropertyIdsMethod\'");
                this.Manager.Comment("reaching state \'S412\'");
                goto label105;
            }
            if ((temp303 == 1)) {
                this.Manager.Comment("reaching state \'S153\'");
                goto label105;
            }
            throw new InvalidOperationException("never reached");
        label105:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite36CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S75");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite36CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S75");
        }
        #endregion
        
        #region Test Starting in S76
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite37() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite37");
            this.Manager.Comment("reaching state \'S76\'");
            bool temp304;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp304);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp304);
            this.Manager.Comment("reaching state \'S77\'");
            int temp305 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite37CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite37CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp305 == 0)) {
                this.Manager.Comment("reaching state \'S154\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S194\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S233\'");
                this.Manager.Comment("executing step \'call GetObject(Logon,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S272\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S311\'");
                this.Manager.Comment("executing step \'call RopGetNamesFromPropertyIdsMethod(LessThan0x8000)\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetNamesFromPropertyIdsMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyIdType)(0)));
                this.Manager.Comment("reaching state \'S350\'");
                this.Manager.Comment("checking step \'return RopGetNamesFromPropertyIdsMethod\'");
                this.Manager.Comment("reaching state \'S413\'");
                goto label106;
            }
            if ((temp305 == 1)) {
                this.Manager.Comment("reaching state \'S155\'");
                goto label106;
            }
            throw new InvalidOperationException("never reached");
        label106:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite37CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S77");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite37CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S77");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite38() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite38");
            this.Manager.Comment("reaching state \'S8\'");
            bool temp306;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp306);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp306);
            this.Manager.Comment("reaching state \'S9\'");
            int temp317 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite38CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite38CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp317 == 0)) {
                this.Manager.Comment("reaching state \'S86\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S160\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S199\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S238\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S277\'");
                bool temp307;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86703,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86703, out temp307);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp307);
                this.Manager.Comment("reaching state \'S316\'");
                int temp316 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite38CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite38CheckRequirementEnabledChecker3)));
                if ((temp316 == 0)) {
                    this.Manager.Comment("reaching state \'S359\'");
                    bool temp308;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp308);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp308);
                    this.Manager.Comment("reaching state \'S422\'");
                    int temp311 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite38CheckRequirementEnabledChecker1)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite38CheckRequirementEnabledChecker2)));
                    if ((temp311 == 0)) {
                        this.Manager.Comment("reaching state \'S478\'");
                        bool temp309;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, false, true, out temp309);
                        this.Manager.Comment("reaching state \'S574\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp309, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S574");
                        this.Manager.Comment("reaching state \'S670\'");
                        goto label107;
                    }
                    if ((temp311 == 1)) {
                        this.Manager.Comment("reaching state \'S479\'");
                        bool temp310;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, false, true, out temp310);
                        this.Manager.Checkpoint("MS-OXCPRPT_R9070102");
                        this.Manager.Comment("reaching state \'S575\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp310, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S575");
                        this.Manager.Comment("reaching state \'S671\'");
                        goto label107;
                    }
                    throw new InvalidOperationException("never reached");
                label107:
;
                    goto label109;
                }
                if ((temp316 == 1)) {
                    this.Manager.Comment("reaching state \'S360\'");
                    bool temp312;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(9070102,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(9070102, out temp312);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp312);
                    this.Manager.Comment("reaching state \'S423\'");
                    int temp315 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite38CheckRequirementEnabledChecker4)), new ExpectedReturn(S01_GetSpecificGetAllGetNames_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite38CheckRequirementEnabledChecker5)));
                    if ((temp315 == 0)) {
                        this.Manager.Comment("reaching state \'S480\'");
                        bool temp313;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, false, true, out temp313);
                        this.Manager.Checkpoint("MS-OXCPRPT_R63");
                        this.Manager.Checkpoint("MS-OXCPRPT_R86703");
                        this.Manager.Checkpoint("MS-OXCPRPT_R644");
                        this.Manager.Comment("reaching state \'S576\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp313, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S576");
                        this.Manager.Comment("reaching state \'S672\'");
                        goto label108;
                    }
                    if ((temp315 == 1)) {
                        this.Manager.Comment("reaching state \'S481\'");
                        bool temp314;
                        this.Manager.Comment("executing step \'call RopGetPropertiesSpecificMethod(False,False,True,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificMethod(false, false, true, out temp314);
                        this.Manager.Checkpoint("MS-OXCPRPT_R63");
                        this.Manager.Checkpoint("MS-OXCPRPT_R86703");
                        this.Manager.Checkpoint("MS-OXCPRPT_R644");
                        this.Manager.Checkpoint("MS-OXCPRPT_R9070102");
                        this.Manager.Comment("reaching state \'S577\'");
                        this.Manager.Comment("checking step \'return RopGetPropertiesSpecificMethod/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp314, "isValueContainsNotEnoughMemory of RopGetPropertiesSpecificMethod, state S577");
                        this.Manager.Comment("reaching state \'S673\'");
                        goto label108;
                    }
                    throw new InvalidOperationException("never reached");
                label108:
;
                    goto label109;
                }
                throw new InvalidOperationException("never reached");
            label109:
;
                goto label110;
            }
            if ((temp317 == 1)) {
                this.Manager.Comment("reaching state \'S87\'");
                goto label110;
            }
            throw new InvalidOperationException("never reached");
        label110:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite38CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite38CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S316");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite38CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S422");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite38CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S422");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite38CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S316");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite38CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S423");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite38CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S423");
        }
        
        private void MSOXCPRPT_S01_GetSpecificGetAllGetNames_TestSuite38CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        #endregion
    }
}