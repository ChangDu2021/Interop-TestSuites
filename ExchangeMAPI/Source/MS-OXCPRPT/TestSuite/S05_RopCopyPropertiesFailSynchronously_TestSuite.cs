//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCPRPT {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.6.100.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S05_RopCopyPropertiesFailSynchronously_TestSuite : PtfTestClassBase {
        
        public S05_RopCopyPropertiesFailSynchronously_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter IMS_OXCPRPTAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCPRPTAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp69 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp69 == 0)) {
                this.Manager.Comment("reaching state \'S6\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S15\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("executing step \'call GetObject(Message,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S27\'");
                bool temp1;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86701,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86701, out temp1);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1);
                this.Manager.Comment("reaching state \'S30\'");
                int temp68 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker7)));
                if ((temp68 == 0)) {
                    this.Manager.Comment("reaching state \'S33\'");
                    bool temp2;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp2);
                    this.Manager.Comment("reaching state \'S39\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp2, "enabled of CheckRequirementEnabled, state S39");
                    this.Manager.Comment("reaching state \'S45\'");
                    bool temp3;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp3);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                    this.Manager.Comment("reaching state \'S51\'");
                    int temp34 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker4)));
                    if ((temp34 == 0)) {
                        this.Manager.Comment("reaching state \'S57\'");
                        bool temp4;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp4);
                        this.Manager.Comment("reaching state \'S69\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp4, "enabled of CheckRequirementEnabled, state S69");
                        this.Manager.Comment("reaching state \'S81\'");
                        bool temp5;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp5);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp5);
                        this.Manager.Comment("reaching state \'S93\'");
                        int temp18 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker3)));
                        if ((temp18 == 0)) {
                            this.Manager.Comment("reaching state \'S105\'");
                            bool temp6;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp6);
                            this.Manager.Comment("reaching state \'S129\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp6, "enabled of CheckRequirementEnabled, state S129");
                            this.Manager.Comment("reaching state \'S153\'");
                            bool temp7;
                            bool temp8;
                            bool temp9;
                            bool temp10;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp11;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(MoveAndNoOverWrite,True,True,out _,o" +
                                    "ut _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.MoveAndNoOverWrite, true, true, out temp7, out temp8, out temp9, out temp10, out temp11);
                            this.Manager.Comment("reaching state \'S177\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out InvalidParameter]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp7, "isPropertiesDeleted of RopCopyPropertiesMethod, state S177");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp8, "isChangedInDB of RopCopyPropertiesMethod, state S177");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp9, "isOverwriteDestination of RopCopyPropertiesMethod, state S177");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp10, "isReturnedRopProgress of RopCopyPropertiesMethod, state S177");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, temp11, "error of RopCopyPropertiesMethod, state S177");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86502");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R86502");
                            this.Manager.Comment("reaching state \'S201\'");
                            goto label0;
                        }
                        if ((temp18 == 1)) {
                            this.Manager.Comment("reaching state \'S106\'");
                            bool temp12;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp12);
                            this.Manager.Comment("reaching state \'S130\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp12, "enabled of CheckRequirementEnabled, state S130");
                            this.Manager.Comment("reaching state \'S154\'");
                            bool temp13;
                            bool temp14;
                            bool temp15;
                            bool temp16;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp17;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(MoveAndNoOverWrite,True,True,out _,o" +
                                    "ut _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.MoveAndNoOverWrite, true, true, out temp13, out temp14, out temp15, out temp16, out temp17);
                            this.Manager.Comment("reaching state \'S178\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out InvalidParameter]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp13, "isPropertiesDeleted of RopCopyPropertiesMethod, state S178");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp14, "isChangedInDB of RopCopyPropertiesMethod, state S178");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp15, "isOverwriteDestination of RopCopyPropertiesMethod, state S178");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp16, "isReturnedRopProgress of RopCopyPropertiesMethod, state S178");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, temp17, "error of RopCopyPropertiesMethod, state S178");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86502");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R86502");
                            this.Manager.Comment("reaching state \'S202\'");
                            goto label0;
                        }
                        throw new InvalidOperationException("never reached");
                    label0:
;
                        goto label2;
                    }
                    if ((temp34 == 1)) {
                        this.Manager.Comment("reaching state \'S58\'");
                        bool temp19;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp19);
                        this.Manager.Comment("reaching state \'S70\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp19, "enabled of CheckRequirementEnabled, state S70");
                        this.Manager.Comment("reaching state \'S82\'");
                        bool temp20;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp20);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp20);
                        this.Manager.Comment("reaching state \'S94\'");
                        int temp33 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker6)));
                        if ((temp33 == 0)) {
                            this.Manager.Comment("reaching state \'S107\'");
                            bool temp21;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp21);
                            this.Manager.Comment("reaching state \'S131\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp21, "enabled of CheckRequirementEnabled, state S131");
                            this.Manager.Comment("reaching state \'S155\'");
                            bool temp22;
                            bool temp23;
                            bool temp24;
                            bool temp25;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp26;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(MoveAndNoOverWrite,True,True,out _,o" +
                                    "ut _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.MoveAndNoOverWrite, true, true, out temp22, out temp23, out temp24, out temp25, out temp26);
                            this.Manager.Comment("reaching state \'S179\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out InvalidParameter]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp22, "isPropertiesDeleted of RopCopyPropertiesMethod, state S179");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp23, "isChangedInDB of RopCopyPropertiesMethod, state S179");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp24, "isOverwriteDestination of RopCopyPropertiesMethod, state S179");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp25, "isReturnedRopProgress of RopCopyPropertiesMethod, state S179");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, temp26, "error of RopCopyPropertiesMethod, state S179");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86502");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R86502");
                            this.Manager.Comment("reaching state \'S203\'");
                            goto label1;
                        }
                        if ((temp33 == 1)) {
                            this.Manager.Comment("reaching state \'S108\'");
                            bool temp27;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp27);
                            this.Manager.Comment("reaching state \'S132\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp27, "enabled of CheckRequirementEnabled, state S132");
                            this.Manager.Comment("reaching state \'S156\'");
                            bool temp28;
                            bool temp29;
                            bool temp30;
                            bool temp31;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp32;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(MoveAndNoOverWrite,True,True,out _,o" +
                                    "ut _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.MoveAndNoOverWrite, true, true, out temp28, out temp29, out temp30, out temp31, out temp32);
                            this.Manager.Comment("reaching state \'S180\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out InvalidParameter]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp28, "isPropertiesDeleted of RopCopyPropertiesMethod, state S180");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp29, "isChangedInDB of RopCopyPropertiesMethod, state S180");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp30, "isOverwriteDestination of RopCopyPropertiesMethod, state S180");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp31, "isReturnedRopProgress of RopCopyPropertiesMethod, state S180");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, temp32, "error of RopCopyPropertiesMethod, state S180");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86502");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R86502");
                            this.Manager.Comment("reaching state \'S204\'");
                            goto label1;
                        }
                        throw new InvalidOperationException("never reached");
                    label1:
;
                        goto label2;
                    }
                    throw new InvalidOperationException("never reached");
                label2:
;
                    goto label6;
                }
                if ((temp68 == 1)) {
                    this.Manager.Comment("reaching state \'S34\'");
                    bool temp35;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp35);
                    this.Manager.Comment("reaching state \'S40\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp35, "enabled of CheckRequirementEnabled, state S40");
                    this.Manager.Comment("reaching state \'S46\'");
                    bool temp36;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp36);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp36);
                    this.Manager.Comment("reaching state \'S52\'");
                    int temp67 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker11)));
                    if ((temp67 == 0)) {
                        this.Manager.Comment("reaching state \'S59\'");
                        bool temp37;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp37);
                        this.Manager.Comment("reaching state \'S71\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp37, "enabled of CheckRequirementEnabled, state S71");
                        this.Manager.Comment("reaching state \'S83\'");
                        bool temp38;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp38);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp38);
                        this.Manager.Comment("reaching state \'S95\'");
                        int temp51 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker10)));
                        if ((temp51 == 0)) {
                            this.Manager.Comment("reaching state \'S109\'");
                            bool temp39;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp39);
                            this.Manager.Comment("reaching state \'S133\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp39, "enabled of CheckRequirementEnabled, state S133");
                            this.Manager.Comment("reaching state \'S157\'");
                            bool temp40;
                            bool temp41;
                            bool temp42;
                            bool temp43;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp44;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(MoveAndNoOverWrite,True,True,out _,o" +
                                    "ut _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.MoveAndNoOverWrite, true, true, out temp40, out temp41, out temp42, out temp43, out temp44);
                            this.Manager.Comment("reaching state \'S181\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp40, "isPropertiesDeleted of RopCopyPropertiesMethod, state S181");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp41, "isChangedInDB of RopCopyPropertiesMethod, state S181");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp42, "isOverwriteDestination of RopCopyPropertiesMethod, state S181");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp43, "isReturnedRopProgress of RopCopyPropertiesMethod, state S181");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp44, "error of RopCopyPropertiesMethod, state S181");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86701");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R86701");
                            this.Manager.Comment("reaching state \'S205\'");
                            goto label3;
                        }
                        if ((temp51 == 1)) {
                            this.Manager.Comment("reaching state \'S110\'");
                            bool temp45;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp45);
                            this.Manager.Comment("reaching state \'S134\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp45, "enabled of CheckRequirementEnabled, state S134");
                            this.Manager.Comment("reaching state \'S158\'");
                            bool temp46;
                            bool temp47;
                            bool temp48;
                            bool temp49;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp50;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(MoveAndNoOverWrite,True,True,out _,o" +
                                    "ut _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.MoveAndNoOverWrite, true, true, out temp46, out temp47, out temp48, out temp49, out temp50);
                            this.Manager.Comment("reaching state \'S182\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp46, "isPropertiesDeleted of RopCopyPropertiesMethod, state S182");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp47, "isChangedInDB of RopCopyPropertiesMethod, state S182");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp48, "isOverwriteDestination of RopCopyPropertiesMethod, state S182");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp49, "isReturnedRopProgress of RopCopyPropertiesMethod, state S182");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp50, "error of RopCopyPropertiesMethod, state S182");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86701");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R86701");
                            this.Manager.Comment("reaching state \'S206\'");
                            goto label3;
                        }
                        throw new InvalidOperationException("never reached");
                    label3:
;
                        goto label5;
                    }
                    if ((temp67 == 1)) {
                        this.Manager.Comment("reaching state \'S60\'");
                        bool temp52;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp52);
                        this.Manager.Comment("reaching state \'S72\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp52, "enabled of CheckRequirementEnabled, state S72");
                        this.Manager.Comment("reaching state \'S84\'");
                        bool temp53;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp53);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp53);
                        this.Manager.Comment("reaching state \'S96\'");
                        int temp66 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker13)));
                        if ((temp66 == 0)) {
                            this.Manager.Comment("reaching state \'S111\'");
                            bool temp54;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp54);
                            this.Manager.Comment("reaching state \'S135\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp54, "enabled of CheckRequirementEnabled, state S135");
                            this.Manager.Comment("reaching state \'S159\'");
                            bool temp55;
                            bool temp56;
                            bool temp57;
                            bool temp58;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp59;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(MoveAndNoOverWrite,True,True,out _,o" +
                                    "ut _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.MoveAndNoOverWrite, true, true, out temp55, out temp56, out temp57, out temp58, out temp59);
                            this.Manager.Comment("reaching state \'S183\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp55, "isPropertiesDeleted of RopCopyPropertiesMethod, state S183");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp56, "isChangedInDB of RopCopyPropertiesMethod, state S183");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp57, "isOverwriteDestination of RopCopyPropertiesMethod, state S183");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp58, "isReturnedRopProgress of RopCopyPropertiesMethod, state S183");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp59, "error of RopCopyPropertiesMethod, state S183");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86701");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R86701");
                            this.Manager.Comment("reaching state \'S207\'");
                            goto label4;
                        }
                        if ((temp66 == 1)) {
                            this.Manager.Comment("reaching state \'S112\'");
                            bool temp60;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp60);
                            this.Manager.Comment("reaching state \'S136\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp60, "enabled of CheckRequirementEnabled, state S136");
                            this.Manager.Comment("reaching state \'S160\'");
                            bool temp61;
                            bool temp62;
                            bool temp63;
                            bool temp64;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp65;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(MoveAndNoOverWrite,True,True,out _,o" +
                                    "ut _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.MoveAndNoOverWrite, true, true, out temp61, out temp62, out temp63, out temp64, out temp65);
                            this.Manager.Comment("reaching state \'S184\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp61, "isPropertiesDeleted of RopCopyPropertiesMethod, state S184");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp62, "isChangedInDB of RopCopyPropertiesMethod, state S184");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp63, "isOverwriteDestination of RopCopyPropertiesMethod, state S184");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp64, "isReturnedRopProgress of RopCopyPropertiesMethod, state S184");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp65, "error of RopCopyPropertiesMethod, state S184");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86701");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R86701");
                            this.Manager.Comment("reaching state \'S208\'");
                            goto label4;
                        }
                        throw new InvalidOperationException("never reached");
                    label4:
;
                        goto label5;
                    }
                    throw new InvalidOperationException("never reached");
                label5:
;
                    goto label6;
                }
                throw new InvalidOperationException("never reached");
            label6:
;
                goto label7;
            }
            if ((temp69 == 1)) {
                this.Manager.Comment("reaching state \'S7\'");
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S30");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S51");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S93");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S93");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S51");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S94");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S94");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S30");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S52");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S95");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S95");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S52");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S96");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S96");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp70;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp70);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp70);
            this.Manager.Comment("reaching state \'S3\'");
            int temp139 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp139 == 0)) {
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S13\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S19\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S25\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S28\'");
                bool temp71;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86701,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86701, out temp71);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp71);
                this.Manager.Comment("reaching state \'S31\'");
                int temp138 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker7)));
                if ((temp138 == 0)) {
                    this.Manager.Comment("reaching state \'S35\'");
                    bool temp72;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp72);
                    this.Manager.Comment("reaching state \'S41\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp72, "enabled of CheckRequirementEnabled, state S41");
                    this.Manager.Comment("reaching state \'S47\'");
                    bool temp73;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp73);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp73);
                    this.Manager.Comment("reaching state \'S53\'");
                    int temp104 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker4)));
                    if ((temp104 == 0)) {
                        this.Manager.Comment("reaching state \'S61\'");
                        bool temp74;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp74);
                        this.Manager.Comment("reaching state \'S73\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp74, "enabled of CheckRequirementEnabled, state S73");
                        this.Manager.Comment("reaching state \'S85\'");
                        bool temp75;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp75);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp75);
                        this.Manager.Comment("reaching state \'S97\'");
                        int temp88 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker3)));
                        if ((temp88 == 0)) {
                            this.Manager.Comment("reaching state \'S113\'");
                            bool temp76;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp76);
                            this.Manager.Comment("reaching state \'S137\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp76, "enabled of CheckRequirementEnabled, state S137");
                            this.Manager.Comment("reaching state \'S161\'");
                            bool temp77;
                            bool temp78;
                            bool temp79;
                            bool temp80;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp81;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp77, out temp78, out temp79, out temp80, out temp81);
                            this.Manager.Comment("reaching state \'S185\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NotSupported]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp77, "isPropertiesDeleted of RopCopyPropertiesMethod, state S185");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp78, "isChangedInDB of RopCopyPropertiesMethod, state S185");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp79, "isOverwriteDestination of RopCopyPropertiesMethod, state S185");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp80, "isReturnedRopProgress of RopCopyPropertiesMethod, state S185");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp81, "error of RopCopyPropertiesMethod, state S185");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S209\'");
                            goto label8;
                        }
                        if ((temp88 == 1)) {
                            this.Manager.Comment("reaching state \'S114\'");
                            bool temp82;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp82);
                            this.Manager.Comment("reaching state \'S138\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp82, "enabled of CheckRequirementEnabled, state S138");
                            this.Manager.Comment("reaching state \'S162\'");
                            bool temp83;
                            bool temp84;
                            bool temp85;
                            bool temp86;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp87;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp83, out temp84, out temp85, out temp86, out temp87);
                            this.Manager.Comment("reaching state \'S186\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NotSupported]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp83, "isPropertiesDeleted of RopCopyPropertiesMethod, state S186");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp84, "isChangedInDB of RopCopyPropertiesMethod, state S186");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp85, "isOverwriteDestination of RopCopyPropertiesMethod, state S186");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp86, "isReturnedRopProgress of RopCopyPropertiesMethod, state S186");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp87, "error of RopCopyPropertiesMethod, state S186");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S210\'");
                            goto label8;
                        }
                        throw new InvalidOperationException("never reached");
                    label8:
;
                        goto label10;
                    }
                    if ((temp104 == 1)) {
                        this.Manager.Comment("reaching state \'S62\'");
                        bool temp89;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp89);
                        this.Manager.Comment("reaching state \'S74\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp89, "enabled of CheckRequirementEnabled, state S74");
                        this.Manager.Comment("reaching state \'S86\'");
                        bool temp90;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp90);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp90);
                        this.Manager.Comment("reaching state \'S98\'");
                        int temp103 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker6)));
                        if ((temp103 == 0)) {
                            this.Manager.Comment("reaching state \'S115\'");
                            bool temp91;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp91);
                            this.Manager.Comment("reaching state \'S139\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp91, "enabled of CheckRequirementEnabled, state S139");
                            this.Manager.Comment("reaching state \'S163\'");
                            bool temp92;
                            bool temp93;
                            bool temp94;
                            bool temp95;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp96;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp92, out temp93, out temp94, out temp95, out temp96);
                            this.Manager.Comment("reaching state \'S187\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NotSupported]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp92, "isPropertiesDeleted of RopCopyPropertiesMethod, state S187");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp93, "isChangedInDB of RopCopyPropertiesMethod, state S187");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp94, "isOverwriteDestination of RopCopyPropertiesMethod, state S187");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp95, "isReturnedRopProgress of RopCopyPropertiesMethod, state S187");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp96, "error of RopCopyPropertiesMethod, state S187");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S211\'");
                            goto label9;
                        }
                        if ((temp103 == 1)) {
                            this.Manager.Comment("reaching state \'S116\'");
                            bool temp97;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp97);
                            this.Manager.Comment("reaching state \'S140\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp97, "enabled of CheckRequirementEnabled, state S140");
                            this.Manager.Comment("reaching state \'S164\'");
                            bool temp98;
                            bool temp99;
                            bool temp100;
                            bool temp101;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp102;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp98, out temp99, out temp100, out temp101, out temp102);
                            this.Manager.Comment("reaching state \'S188\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NotSupported]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp98, "isPropertiesDeleted of RopCopyPropertiesMethod, state S188");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp99, "isChangedInDB of RopCopyPropertiesMethod, state S188");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp100, "isOverwriteDestination of RopCopyPropertiesMethod, state S188");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp101, "isReturnedRopProgress of RopCopyPropertiesMethod, state S188");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp102, "error of RopCopyPropertiesMethod, state S188");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S212\'");
                            goto label9;
                        }
                        throw new InvalidOperationException("never reached");
                    label9:
;
                        goto label10;
                    }
                    throw new InvalidOperationException("never reached");
                label10:
;
                    goto label14;
                }
                if ((temp138 == 1)) {
                    this.Manager.Comment("reaching state \'S36\'");
                    bool temp105;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp105);
                    this.Manager.Comment("reaching state \'S42\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp105, "enabled of CheckRequirementEnabled, state S42");
                    this.Manager.Comment("reaching state \'S48\'");
                    bool temp106;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp106);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp106);
                    this.Manager.Comment("reaching state \'S54\'");
                    int temp137 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker11)));
                    if ((temp137 == 0)) {
                        this.Manager.Comment("reaching state \'S63\'");
                        bool temp107;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp107);
                        this.Manager.Comment("reaching state \'S75\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp107, "enabled of CheckRequirementEnabled, state S75");
                        this.Manager.Comment("reaching state \'S87\'");
                        bool temp108;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp108);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp108);
                        this.Manager.Comment("reaching state \'S99\'");
                        int temp121 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker10)));
                        if ((temp121 == 0)) {
                            this.Manager.Comment("reaching state \'S117\'");
                            bool temp109;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp109);
                            this.Manager.Comment("reaching state \'S141\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp109, "enabled of CheckRequirementEnabled, state S141");
                            this.Manager.Comment("reaching state \'S165\'");
                            bool temp110;
                            bool temp111;
                            bool temp112;
                            bool temp113;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp114;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp110, out temp111, out temp112, out temp113, out temp114);
                            this.Manager.Comment("reaching state \'S189\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NotSupported]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp110, "isPropertiesDeleted of RopCopyPropertiesMethod, state S189");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp111, "isChangedInDB of RopCopyPropertiesMethod, state S189");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp112, "isOverwriteDestination of RopCopyPropertiesMethod, state S189");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp113, "isReturnedRopProgress of RopCopyPropertiesMethod, state S189");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp114, "error of RopCopyPropertiesMethod, state S189");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S213\'");
                            goto label11;
                        }
                        if ((temp121 == 1)) {
                            this.Manager.Comment("reaching state \'S118\'");
                            bool temp115;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp115);
                            this.Manager.Comment("reaching state \'S142\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp115, "enabled of CheckRequirementEnabled, state S142");
                            this.Manager.Comment("reaching state \'S166\'");
                            bool temp116;
                            bool temp117;
                            bool temp118;
                            bool temp119;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp120;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp116, out temp117, out temp118, out temp119, out temp120);
                            this.Manager.Comment("reaching state \'S190\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NotSupported]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp116, "isPropertiesDeleted of RopCopyPropertiesMethod, state S190");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp117, "isChangedInDB of RopCopyPropertiesMethod, state S190");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp118, "isOverwriteDestination of RopCopyPropertiesMethod, state S190");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp119, "isReturnedRopProgress of RopCopyPropertiesMethod, state S190");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp120, "error of RopCopyPropertiesMethod, state S190");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S214\'");
                            goto label11;
                        }
                        throw new InvalidOperationException("never reached");
                    label11:
;
                        goto label13;
                    }
                    if ((temp137 == 1)) {
                        this.Manager.Comment("reaching state \'S64\'");
                        bool temp122;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp122);
                        this.Manager.Comment("reaching state \'S76\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp122, "enabled of CheckRequirementEnabled, state S76");
                        this.Manager.Comment("reaching state \'S88\'");
                        bool temp123;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp123);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp123);
                        this.Manager.Comment("reaching state \'S100\'");
                        int temp136 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker13)));
                        if ((temp136 == 0)) {
                            this.Manager.Comment("reaching state \'S119\'");
                            bool temp124;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp124);
                            this.Manager.Comment("reaching state \'S143\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp124, "enabled of CheckRequirementEnabled, state S143");
                            this.Manager.Comment("reaching state \'S167\'");
                            bool temp125;
                            bool temp126;
                            bool temp127;
                            bool temp128;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp129;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp125, out temp126, out temp127, out temp128, out temp129);
                            this.Manager.Comment("reaching state \'S191\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NotSupported]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp125, "isPropertiesDeleted of RopCopyPropertiesMethod, state S191");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp126, "isChangedInDB of RopCopyPropertiesMethod, state S191");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp127, "isOverwriteDestination of RopCopyPropertiesMethod, state S191");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp128, "isReturnedRopProgress of RopCopyPropertiesMethod, state S191");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp129, "error of RopCopyPropertiesMethod, state S191");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S215\'");
                            goto label12;
                        }
                        if ((temp136 == 1)) {
                            this.Manager.Comment("reaching state \'S120\'");
                            bool temp130;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp130);
                            this.Manager.Comment("reaching state \'S144\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp130, "enabled of CheckRequirementEnabled, state S144");
                            this.Manager.Comment("reaching state \'S168\'");
                            bool temp131;
                            bool temp132;
                            bool temp133;
                            bool temp134;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp135;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp131, out temp132, out temp133, out temp134, out temp135);
                            this.Manager.Comment("reaching state \'S192\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NotSupported]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp131, "isPropertiesDeleted of RopCopyPropertiesMethod, state S192");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp132, "isChangedInDB of RopCopyPropertiesMethod, state S192");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp133, "isOverwriteDestination of RopCopyPropertiesMethod, state S192");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp134, "isReturnedRopProgress of RopCopyPropertiesMethod, state S192");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp135, "error of RopCopyPropertiesMethod, state S192");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S216\'");
                            goto label12;
                        }
                        throw new InvalidOperationException("never reached");
                    label12:
;
                        goto label13;
                    }
                    throw new InvalidOperationException("never reached");
                label13:
;
                    goto label14;
                }
                throw new InvalidOperationException("never reached");
            label14:
;
                goto label15;
            }
            if ((temp139 == 1)) {
                this.Manager.Comment("reaching state \'S9\'");
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S31");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S53");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S97");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S97");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S53");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S98");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S98");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S31");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S54");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S99");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S99");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S54");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S100");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S100");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp140;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp140);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp140);
            this.Manager.Comment("reaching state \'S5\'");
            int temp209 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp209 == 0)) {
                this.Manager.Comment("reaching state \'S10\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S17\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("executing step \'call GetObject(Message,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S29\'");
                bool temp141;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86701,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86701, out temp141);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp141);
                this.Manager.Comment("reaching state \'S32\'");
                int temp208 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker7)));
                if ((temp208 == 0)) {
                    this.Manager.Comment("reaching state \'S37\'");
                    bool temp142;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp142);
                    this.Manager.Comment("reaching state \'S43\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp142, "enabled of CheckRequirementEnabled, state S43");
                    this.Manager.Comment("reaching state \'S49\'");
                    bool temp143;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp143);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp143);
                    this.Manager.Comment("reaching state \'S55\'");
                    int temp174 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker4)));
                    if ((temp174 == 0)) {
                        this.Manager.Comment("reaching state \'S65\'");
                        bool temp144;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp144);
                        this.Manager.Comment("reaching state \'S77\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp144, "enabled of CheckRequirementEnabled, state S77");
                        this.Manager.Comment("reaching state \'S89\'");
                        bool temp145;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp145);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp145);
                        this.Manager.Comment("reaching state \'S101\'");
                        int temp158 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker3)));
                        if ((temp158 == 0)) {
                            this.Manager.Comment("reaching state \'S121\'");
                            bool temp146;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp146);
                            this.Manager.Comment("reaching state \'S145\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp146, "enabled of CheckRequirementEnabled, state S145");
                            this.Manager.Comment("reaching state \'S169\'");
                            bool temp147;
                            bool temp148;
                            bool temp149;
                            bool temp150;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp151;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,False,out _,out _,o" +
                                    "ut _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, false, out temp147, out temp148, out temp149, out temp150, out temp151);
                            this.Manager.Comment("reaching state \'S193\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NullDestinationObject]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp147, "isPropertiesDeleted of RopCopyPropertiesMethod, state S193");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp148, "isChangedInDB of RopCopyPropertiesMethod, state S193");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp149, "isOverwriteDestination of RopCopyPropertiesMethod, state S193");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp150, "isReturnedRopProgress of RopCopyPropertiesMethod, state S193");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp151, "error of RopCopyPropertiesMethod, state S193");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S217\'");
                            goto label16;
                        }
                        if ((temp158 == 1)) {
                            this.Manager.Comment("reaching state \'S122\'");
                            bool temp152;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp152);
                            this.Manager.Comment("reaching state \'S146\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp152, "enabled of CheckRequirementEnabled, state S146");
                            this.Manager.Comment("reaching state \'S170\'");
                            bool temp153;
                            bool temp154;
                            bool temp155;
                            bool temp156;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp157;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,False,out _,out _,o" +
                                    "ut _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, false, out temp153, out temp154, out temp155, out temp156, out temp157);
                            this.Manager.Comment("reaching state \'S194\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NullDestinationObject]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp153, "isPropertiesDeleted of RopCopyPropertiesMethod, state S194");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp154, "isChangedInDB of RopCopyPropertiesMethod, state S194");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp155, "isOverwriteDestination of RopCopyPropertiesMethod, state S194");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp156, "isReturnedRopProgress of RopCopyPropertiesMethod, state S194");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp157, "error of RopCopyPropertiesMethod, state S194");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S218\'");
                            goto label16;
                        }
                        throw new InvalidOperationException("never reached");
                    label16:
;
                        goto label18;
                    }
                    if ((temp174 == 1)) {
                        this.Manager.Comment("reaching state \'S66\'");
                        bool temp159;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp159);
                        this.Manager.Comment("reaching state \'S78\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp159, "enabled of CheckRequirementEnabled, state S78");
                        this.Manager.Comment("reaching state \'S90\'");
                        bool temp160;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp160);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp160);
                        this.Manager.Comment("reaching state \'S102\'");
                        int temp173 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker6)));
                        if ((temp173 == 0)) {
                            this.Manager.Comment("reaching state \'S123\'");
                            bool temp161;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp161);
                            this.Manager.Comment("reaching state \'S147\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp161, "enabled of CheckRequirementEnabled, state S147");
                            this.Manager.Comment("reaching state \'S171\'");
                            bool temp162;
                            bool temp163;
                            bool temp164;
                            bool temp165;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp166;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,False,out _,out _,o" +
                                    "ut _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, false, out temp162, out temp163, out temp164, out temp165, out temp166);
                            this.Manager.Comment("reaching state \'S195\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NullDestinationObject]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp162, "isPropertiesDeleted of RopCopyPropertiesMethod, state S195");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp163, "isChangedInDB of RopCopyPropertiesMethod, state S195");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp164, "isOverwriteDestination of RopCopyPropertiesMethod, state S195");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp165, "isReturnedRopProgress of RopCopyPropertiesMethod, state S195");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp166, "error of RopCopyPropertiesMethod, state S195");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S219\'");
                            goto label17;
                        }
                        if ((temp173 == 1)) {
                            this.Manager.Comment("reaching state \'S124\'");
                            bool temp167;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp167);
                            this.Manager.Comment("reaching state \'S148\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp167, "enabled of CheckRequirementEnabled, state S148");
                            this.Manager.Comment("reaching state \'S172\'");
                            bool temp168;
                            bool temp169;
                            bool temp170;
                            bool temp171;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp172;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,False,out _,out _,o" +
                                    "ut _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, false, out temp168, out temp169, out temp170, out temp171, out temp172);
                            this.Manager.Comment("reaching state \'S196\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NullDestinationObject]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp168, "isPropertiesDeleted of RopCopyPropertiesMethod, state S196");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp169, "isChangedInDB of RopCopyPropertiesMethod, state S196");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp170, "isOverwriteDestination of RopCopyPropertiesMethod, state S196");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp171, "isReturnedRopProgress of RopCopyPropertiesMethod, state S196");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp172, "error of RopCopyPropertiesMethod, state S196");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S220\'");
                            goto label17;
                        }
                        throw new InvalidOperationException("never reached");
                    label17:
;
                        goto label18;
                    }
                    throw new InvalidOperationException("never reached");
                label18:
;
                    goto label22;
                }
                if ((temp208 == 1)) {
                    this.Manager.Comment("reaching state \'S38\'");
                    bool temp175;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp175);
                    this.Manager.Comment("reaching state \'S44\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp175, "enabled of CheckRequirementEnabled, state S44");
                    this.Manager.Comment("reaching state \'S50\'");
                    bool temp176;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp176);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp176);
                    this.Manager.Comment("reaching state \'S56\'");
                    int temp207 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker11)));
                    if ((temp207 == 0)) {
                        this.Manager.Comment("reaching state \'S67\'");
                        bool temp177;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp177);
                        this.Manager.Comment("reaching state \'S79\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp177, "enabled of CheckRequirementEnabled, state S79");
                        this.Manager.Comment("reaching state \'S91\'");
                        bool temp178;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp178);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp178);
                        this.Manager.Comment("reaching state \'S103\'");
                        int temp191 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker10)));
                        if ((temp191 == 0)) {
                            this.Manager.Comment("reaching state \'S125\'");
                            bool temp179;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp179);
                            this.Manager.Comment("reaching state \'S149\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp179, "enabled of CheckRequirementEnabled, state S149");
                            this.Manager.Comment("reaching state \'S173\'");
                            bool temp180;
                            bool temp181;
                            bool temp182;
                            bool temp183;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp184;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,False,out _,out _,o" +
                                    "ut _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, false, out temp180, out temp181, out temp182, out temp183, out temp184);
                            this.Manager.Comment("reaching state \'S197\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NullDestinationObject]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp180, "isPropertiesDeleted of RopCopyPropertiesMethod, state S197");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp181, "isChangedInDB of RopCopyPropertiesMethod, state S197");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp182, "isOverwriteDestination of RopCopyPropertiesMethod, state S197");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp183, "isReturnedRopProgress of RopCopyPropertiesMethod, state S197");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp184, "error of RopCopyPropertiesMethod, state S197");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S221\'");
                            goto label19;
                        }
                        if ((temp191 == 1)) {
                            this.Manager.Comment("reaching state \'S126\'");
                            bool temp185;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp185);
                            this.Manager.Comment("reaching state \'S150\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp185, "enabled of CheckRequirementEnabled, state S150");
                            this.Manager.Comment("reaching state \'S174\'");
                            bool temp186;
                            bool temp187;
                            bool temp188;
                            bool temp189;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp190;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,False,out _,out _,o" +
                                    "ut _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, false, out temp186, out temp187, out temp188, out temp189, out temp190);
                            this.Manager.Comment("reaching state \'S198\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NullDestinationObject]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp186, "isPropertiesDeleted of RopCopyPropertiesMethod, state S198");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp187, "isChangedInDB of RopCopyPropertiesMethod, state S198");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp188, "isOverwriteDestination of RopCopyPropertiesMethod, state S198");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp189, "isReturnedRopProgress of RopCopyPropertiesMethod, state S198");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp190, "error of RopCopyPropertiesMethod, state S198");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S222\'");
                            goto label19;
                        }
                        throw new InvalidOperationException("never reached");
                    label19:
;
                        goto label21;
                    }
                    if ((temp207 == 1)) {
                        this.Manager.Comment("reaching state \'S68\'");
                        bool temp192;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp192);
                        this.Manager.Comment("reaching state \'S80\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp192, "enabled of CheckRequirementEnabled, state S80");
                        this.Manager.Comment("reaching state \'S92\'");
                        bool temp193;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp193);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp193);
                        this.Manager.Comment("reaching state \'S104\'");
                        int temp206 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyPropertiesFailSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker13)));
                        if ((temp206 == 0)) {
                            this.Manager.Comment("reaching state \'S127\'");
                            bool temp194;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp194);
                            this.Manager.Comment("reaching state \'S151\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp194, "enabled of CheckRequirementEnabled, state S151");
                            this.Manager.Comment("reaching state \'S175\'");
                            bool temp195;
                            bool temp196;
                            bool temp197;
                            bool temp198;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp199;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,False,out _,out _,o" +
                                    "ut _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, false, out temp195, out temp196, out temp197, out temp198, out temp199);
                            this.Manager.Comment("reaching state \'S199\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NullDestinationObject]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp195, "isPropertiesDeleted of RopCopyPropertiesMethod, state S199");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp196, "isChangedInDB of RopCopyPropertiesMethod, state S199");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp197, "isOverwriteDestination of RopCopyPropertiesMethod, state S199");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp198, "isReturnedRopProgress of RopCopyPropertiesMethod, state S199");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp199, "error of RopCopyPropertiesMethod, state S199");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S223\'");
                            goto label20;
                        }
                        if ((temp206 == 1)) {
                            this.Manager.Comment("reaching state \'S128\'");
                            bool temp200;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp200);
                            this.Manager.Comment("reaching state \'S152\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp200, "enabled of CheckRequirementEnabled, state S152");
                            this.Manager.Comment("reaching state \'S176\'");
                            bool temp201;
                            bool temp202;
                            bool temp203;
                            bool temp204;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp205;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,False,out _,out _,o" +
                                    "ut _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, false, out temp201, out temp202, out temp203, out temp204, out temp205);
                            this.Manager.Comment("reaching state \'S200\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NullDestinationObject]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp201, "isPropertiesDeleted of RopCopyPropertiesMethod, state S200");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp202, "isChangedInDB of RopCopyPropertiesMethod, state S200");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp203, "isOverwriteDestination of RopCopyPropertiesMethod, state S200");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp204, "isReturnedRopProgress of RopCopyPropertiesMethod, state S200");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp205, "error of RopCopyPropertiesMethod, state S200");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S224\'");
                            goto label20;
                        }
                        throw new InvalidOperationException("never reached");
                    label20:
;
                        goto label21;
                    }
                    throw new InvalidOperationException("never reached");
                label21:
;
                    goto label22;
                }
                throw new InvalidOperationException("never reached");
            label22:
;
                goto label23;
            }
            if ((temp209 == 1)) {
                this.Manager.Comment("reaching state \'S11\'");
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S32");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S55");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S101");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S101");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S55");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S102");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S102");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S32");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S56");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S103");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S103");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S56");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S104");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S104");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesFailSynchronously_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
    }
}