//-----------------------------------------------------------------------
// Copyright (c) 2014 Microsoft Corporation. All rights reserved.
// Use of this sample source code is subject to the terms of the Microsoft license 
// agreement under which you licensed this sample source code and is provided AS-IS.
// If you did not accept the terms of the license agreement, you are not authorized 
// to use this sample source code. For the terms of the license, please see the 
// license agreement between you and Microsoft.
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCPRPT {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.6.100.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S04_CopyToStreamsCloneStream_TestSuite : PtfTestClassBase {
        
        public S04_CopyToStreamsCloneStream_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter IMS_OXCPRPTAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCPRPTAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite() {
            this.Manager.BeginTest("MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp19 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp19 == 0)) {
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S36\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S45\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S54\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S63\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S72\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S81\'");
                bool temp1;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp2;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp1, out temp2);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S90\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp2, "error of RopOpenStreamMethod, state S90");
                this.Manager.Comment("reaching state \'S99\'");
                bool temp3;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp4;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(SecondObject,ReadWrite,True,out _,out _)" +
                        "\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp3, out temp4);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S108\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp3, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S108");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp4, "error of RopOpenStreamMethod, state S108");
                this.Manager.Comment("reaching state \'S117\'");
                bool temp5;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(867091,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(867091, out temp5);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp5);
                this.Manager.Comment("reaching state \'S126\'");
                int temp18 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuiteCheckRequirementEnabledChecker3)));
                if ((temp18 == 0)) {
                    this.Manager.Comment("reaching state \'S135\'");
                    bool temp6;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp7;
                    this.Manager.Comment("executing step \'call RopCopyToStreamMethod(False,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopCopyToStreamMethod(false, out temp6, out temp7);
                    this.Manager.Comment("reaching state \'S153\'");
                    this.Manager.Comment("checking step \'return RopCopyToStreamMethod/[out False,out NullDestinationObject]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp6, "isReadWriteSuccess of RopCopyToStreamMethod, state S153");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp7, "error of RopCopyToStreamMethod, state S153");
                    this.Manager.Comment("reaching state \'S171\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                    this.Manager.Comment("reaching state \'S189\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S207\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(SecondObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                    this.Manager.Comment("reaching state \'S225\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S243\'");
                    bool temp8;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp9;
                    this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp8, out temp9);
                    this.Manager.Checkpoint("MS-OXCPRPT_R885");
                    this.Manager.Comment("reaching state \'S261\'");
                    this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp8, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S261");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp9, "error of RopOpenStreamMethod, state S261");
                    this.Manager.Comment("reaching state \'S279\'");
                    bool temp10;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(753,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(753, out temp10);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp10);
                    this.Manager.Comment("reaching state \'S297\'");
                    int temp11 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuiteCheckRequirementEnabledChecker2)));
                    if ((temp11 == 0)) {
                        this.Manager.Comment("reaching state \'S315\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S351\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S387\'");
                        goto label0;
                    }
                    if ((temp11 == 1)) {
                        this.Manager.Comment("reaching state \'S316\'");
                        this.Manager.Comment("executing step \'call RopCloneStreamMethod()\'");
                        this.IMS_OXCPRPTAdapterInstance.RopCloneStreamMethod();
                        this.Manager.Comment("reaching state \'S352\'");
                        this.Manager.Comment("checking step \'return RopCloneStreamMethod\'");
                        this.Manager.Comment("reaching state \'S388\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S423\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S429\'");
                        goto label0;
                    }
                    throw new InvalidOperationException("never reached");
                label0:
;
                    goto label2;
                }
                if ((temp18 == 1)) {
                    this.Manager.Comment("reaching state \'S136\'");
                    bool temp12;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp13;
                    this.Manager.Comment("executing step \'call RopCopyToStreamMethod(False,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopCopyToStreamMethod(false, out temp12, out temp13);
                    this.Manager.Comment("reaching state \'S154\'");
                    this.Manager.Comment("checking step \'return RopCopyToStreamMethod/[out False,out NullDestinationObject]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp12, "isReadWriteSuccess of RopCopyToStreamMethod, state S154");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp13, "error of RopCopyToStreamMethod, state S154");
                    this.Manager.Comment("reaching state \'S172\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                    this.Manager.Comment("reaching state \'S190\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S208\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(SecondObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                    this.Manager.Comment("reaching state \'S226\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S244\'");
                    bool temp14;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp15;
                    this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp14, out temp15);
                    this.Manager.Checkpoint("MS-OXCPRPT_R885");
                    this.Manager.Comment("reaching state \'S262\'");
                    this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp14, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S262");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp15, "error of RopOpenStreamMethod, state S262");
                    this.Manager.Comment("reaching state \'S280\'");
                    bool temp16;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(753,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(753, out temp16);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp16);
                    this.Manager.Comment("reaching state \'S298\'");
                    int temp17 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuiteCheckRequirementEnabledChecker4)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuiteCheckRequirementEnabledChecker5)));
                    if ((temp17 == 0)) {
                        this.Manager.Comment("reaching state \'S317\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S353\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S389\'");
                        goto label1;
                    }
                    if ((temp17 == 1)) {
                        this.Manager.Comment("reaching state \'S318\'");
                        this.Manager.Comment("executing step \'call RopCloneStreamMethod()\'");
                        this.IMS_OXCPRPTAdapterInstance.RopCloneStreamMethod();
                        this.Manager.Comment("reaching state \'S354\'");
                        this.Manager.Comment("checking step \'return RopCloneStreamMethod\'");
                        this.Manager.Comment("reaching state \'S390\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S424\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S430\'");
                        goto label1;
                    }
                    throw new InvalidOperationException("never reached");
                label1:
;
                    goto label2;
                }
                throw new InvalidOperationException("never reached");
            label2:
;
                goto label3;
            }
            if ((temp19 == 1)) {
                this.Manager.Comment("reaching state \'S19\'");
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S126");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S297");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S297");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S126");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S298");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S298");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite1() {
            this.Manager.BeginTest("MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite1");
            this.Manager.Comment("reaching state \'S10\'");
            bool temp20;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp20);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp20);
            this.Manager.Comment("reaching state \'S11\'");
            int temp39 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp39 == 0)) {
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S41\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S50\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S68\'");
                this.Manager.Comment("executing step \'call GetObject(Message,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S77\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S86\'");
                bool temp21;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp22;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp21, out temp22);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S95\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp21, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp22, "error of RopOpenStreamMethod, state S95");
                this.Manager.Comment("reaching state \'S104\'");
                bool temp23;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp24;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(SecondObject,ReadWrite,True,out _,out _)" +
                        "\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp23, out temp24);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S113\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp23, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp24, "error of RopOpenStreamMethod, state S113");
                this.Manager.Comment("reaching state \'S122\'");
                bool temp25;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(867091,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(867091, out temp25);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp25);
                this.Manager.Comment("reaching state \'S131\'");
                int temp38 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite1CheckRequirementEnabledChecker)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite1CheckRequirementEnabledChecker3)));
                if ((temp38 == 0)) {
                    this.Manager.Comment("reaching state \'S145\'");
                    bool temp26;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp27;
                    this.Manager.Comment("executing step \'call RopCopyToStreamMethod(True,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopCopyToStreamMethod(true, out temp26, out temp27);
                    this.Manager.Checkpoint("MS-OXCPRPT_R592");
                    this.Manager.Comment("reaching state \'S163\'");
                    this.Manager.Comment("checking step \'return RopCopyToStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp26, "isReadWriteSuccess of RopCopyToStreamMethod, state S163");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp27, "error of RopCopyToStreamMethod, state S163");
                    this.Manager.Comment("reaching state \'S181\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                    this.Manager.Comment("reaching state \'S199\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S217\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(SecondObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                    this.Manager.Comment("reaching state \'S235\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S253\'");
                    bool temp28;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp29;
                    this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp28, out temp29);
                    this.Manager.Checkpoint("MS-OXCPRPT_R885");
                    this.Manager.Comment("reaching state \'S271\'");
                    this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp28, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S271");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp29, "error of RopOpenStreamMethod, state S271");
                    this.Manager.Comment("reaching state \'S289\'");
                    bool temp30;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(753,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(753, out temp30);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp30);
                    this.Manager.Comment("reaching state \'S307\'");
                    int temp31 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite1CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite1CheckRequirementEnabledChecker2)));
                    if ((temp31 == 0)) {
                        this.Manager.Comment("reaching state \'S335\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S371\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S407\'");
                        goto label4;
                    }
                    if ((temp31 == 1)) {
                        this.Manager.Comment("reaching state \'S336\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S372\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S408\'");
                        goto label4;
                    }
                    throw new InvalidOperationException("never reached");
                label4:
;
                    goto label6;
                }
                if ((temp38 == 1)) {
                    this.Manager.Comment("reaching state \'S146\'");
                    bool temp32;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp33;
                    this.Manager.Comment("executing step \'call RopCopyToStreamMethod(True,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopCopyToStreamMethod(true, out temp32, out temp33);
                    this.Manager.Checkpoint("MS-OXCPRPT_R867091");
                    this.Manager.Checkpoint("MS-OXCPRPT_R592");
                    this.Manager.Comment("reaching state \'S164\'");
                    this.Manager.Comment("checking step \'return RopCopyToStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp32, "isReadWriteSuccess of RopCopyToStreamMethod, state S164");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp33, "error of RopCopyToStreamMethod, state S164");
                    this.Manager.Comment("reaching state \'S182\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                    this.Manager.Comment("reaching state \'S200\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S218\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(SecondObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                    this.Manager.Comment("reaching state \'S236\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S254\'");
                    bool temp34;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp35;
                    this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp34, out temp35);
                    this.Manager.Checkpoint("MS-OXCPRPT_R885");
                    this.Manager.Comment("reaching state \'S272\'");
                    this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp34, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S272");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp35, "error of RopOpenStreamMethod, state S272");
                    this.Manager.Comment("reaching state \'S290\'");
                    bool temp36;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(753,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(753, out temp36);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp36);
                    this.Manager.Comment("reaching state \'S308\'");
                    int temp37 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite1CheckRequirementEnabledChecker4)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite1CheckRequirementEnabledChecker5)));
                    if ((temp37 == 0)) {
                        this.Manager.Comment("reaching state \'S337\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S373\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S409\'");
                        goto label5;
                    }
                    if ((temp37 == 1)) {
                        this.Manager.Comment("reaching state \'S338\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S374\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S410\'");
                        goto label5;
                    }
                    throw new InvalidOperationException("never reached");
                label5:
;
                    goto label6;
                }
                throw new InvalidOperationException("never reached");
            label6:
;
                goto label7;
            }
            if ((temp39 == 1)) {
                this.Manager.Comment("reaching state \'S29\'");
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite1CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S131");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite1CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S307");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite1CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S307");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite1CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S131");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite1CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S308");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite1CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S308");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite2() {
            this.Manager.BeginTest("MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite2");
            this.Manager.Comment("reaching state \'S12\'");
            bool temp40;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp40);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp40);
            this.Manager.Comment("reaching state \'S13\'");
            int temp59 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp59 == 0)) {
                this.Manager.Comment("reaching state \'S30\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S42\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S51\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S60\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S69\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S78\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S87\'");
                bool temp41;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp42;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp41, out temp42);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S96\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp41, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp42, "error of RopOpenStreamMethod, state S96");
                this.Manager.Comment("reaching state \'S105\'");
                bool temp43;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp44;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(SecondObject,ReadWrite,True,out _,out _)" +
                        "\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp43, out temp44);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S114\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp43, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S114");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp44, "error of RopOpenStreamMethod, state S114");
                this.Manager.Comment("reaching state \'S123\'");
                bool temp45;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(867091,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(867091, out temp45);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp45);
                this.Manager.Comment("reaching state \'S132\'");
                int temp58 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite2CheckRequirementEnabledChecker)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite2CheckRequirementEnabledChecker3)));
                if ((temp58 == 0)) {
                    this.Manager.Comment("reaching state \'S147\'");
                    bool temp46;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp47;
                    this.Manager.Comment("executing step \'call RopCopyToStreamMethod(False,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopCopyToStreamMethod(false, out temp46, out temp47);
                    this.Manager.Comment("reaching state \'S165\'");
                    this.Manager.Comment("checking step \'return RopCopyToStreamMethod/[out False,out NullDestinationObject]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp46, "isReadWriteSuccess of RopCopyToStreamMethod, state S165");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp47, "error of RopCopyToStreamMethod, state S165");
                    this.Manager.Comment("reaching state \'S183\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                    this.Manager.Comment("reaching state \'S201\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S219\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(SecondObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                    this.Manager.Comment("reaching state \'S237\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S255\'");
                    bool temp48;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp49;
                    this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp48, out temp49);
                    this.Manager.Checkpoint("MS-OXCPRPT_R885");
                    this.Manager.Comment("reaching state \'S273\'");
                    this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp48, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S273");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp49, "error of RopOpenStreamMethod, state S273");
                    this.Manager.Comment("reaching state \'S291\'");
                    bool temp50;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(753,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(753, out temp50);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp50);
                    this.Manager.Comment("reaching state \'S309\'");
                    int temp51 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite2CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite2CheckRequirementEnabledChecker2)));
                    if ((temp51 == 0)) {
                        this.Manager.Comment("reaching state \'S339\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S375\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S411\'");
                        goto label8;
                    }
                    if ((temp51 == 1)) {
                        this.Manager.Comment("reaching state \'S340\'");
                        this.Manager.Comment("executing step \'call RopCloneStreamMethod()\'");
                        this.IMS_OXCPRPTAdapterInstance.RopCloneStreamMethod();
                        this.Manager.Comment("reaching state \'S376\'");
                        this.Manager.Comment("checking step \'return RopCloneStreamMethod\'");
                        this.Manager.Comment("reaching state \'S412\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S427\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S433\'");
                        goto label8;
                    }
                    throw new InvalidOperationException("never reached");
                label8:
;
                    goto label10;
                }
                if ((temp58 == 1)) {
                    this.Manager.Comment("reaching state \'S148\'");
                    bool temp52;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp53;
                    this.Manager.Comment("executing step \'call RopCopyToStreamMethod(False,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopCopyToStreamMethod(false, out temp52, out temp53);
                    this.Manager.Comment("reaching state \'S166\'");
                    this.Manager.Comment("checking step \'return RopCopyToStreamMethod/[out False,out NullDestinationObject]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp52, "isReadWriteSuccess of RopCopyToStreamMethod, state S166");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp53, "error of RopCopyToStreamMethod, state S166");
                    this.Manager.Comment("reaching state \'S184\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                    this.Manager.Comment("reaching state \'S202\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S220\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(SecondObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                    this.Manager.Comment("reaching state \'S238\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S256\'");
                    bool temp54;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp55;
                    this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp54, out temp55);
                    this.Manager.Checkpoint("MS-OXCPRPT_R885");
                    this.Manager.Comment("reaching state \'S274\'");
                    this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp54, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S274");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp55, "error of RopOpenStreamMethod, state S274");
                    this.Manager.Comment("reaching state \'S292\'");
                    bool temp56;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(753,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(753, out temp56);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp56);
                    this.Manager.Comment("reaching state \'S310\'");
                    int temp57 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite2CheckRequirementEnabledChecker4)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite2CheckRequirementEnabledChecker5)));
                    if ((temp57 == 0)) {
                        this.Manager.Comment("reaching state \'S341\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S377\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S413\'");
                        goto label9;
                    }
                    if ((temp57 == 1)) {
                        this.Manager.Comment("reaching state \'S342\'");
                        this.Manager.Comment("executing step \'call RopCloneStreamMethod()\'");
                        this.IMS_OXCPRPTAdapterInstance.RopCloneStreamMethod();
                        this.Manager.Comment("reaching state \'S378\'");
                        this.Manager.Comment("checking step \'return RopCloneStreamMethod\'");
                        this.Manager.Comment("reaching state \'S414\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S428\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S434\'");
                        goto label9;
                    }
                    throw new InvalidOperationException("never reached");
                label9:
;
                    goto label10;
                }
                throw new InvalidOperationException("never reached");
            label10:
;
                goto label11;
            }
            if ((temp59 == 1)) {
                this.Manager.Comment("reaching state \'S31\'");
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S13");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite2CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S132");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite2CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S309");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite2CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S309");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite2CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S132");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite2CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S310");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite2CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S310");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S13");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite3() {
            this.Manager.BeginTest("MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite3");
            this.Manager.Comment("reaching state \'S14\'");
            bool temp60;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp60);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp60);
            this.Manager.Comment("reaching state \'S15\'");
            int temp79 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp79 == 0)) {
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S43\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S52\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S61\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S70\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S79\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S88\'");
                bool temp61;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp62;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp61, out temp62);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S97\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp61, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp62, "error of RopOpenStreamMethod, state S97");
                this.Manager.Comment("reaching state \'S106\'");
                bool temp63;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp64;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(SecondObject,ReadWrite,True,out _,out _)" +
                        "\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp63, out temp64);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S115\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp63, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S115");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp64, "error of RopOpenStreamMethod, state S115");
                this.Manager.Comment("reaching state \'S124\'");
                bool temp65;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(867091,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(867091, out temp65);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp65);
                this.Manager.Comment("reaching state \'S133\'");
                int temp78 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite3CheckRequirementEnabledChecker)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite3CheckRequirementEnabledChecker3)));
                if ((temp78 == 0)) {
                    this.Manager.Comment("reaching state \'S149\'");
                    bool temp66;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp67;
                    this.Manager.Comment("executing step \'call RopCopyToStreamMethod(False,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopCopyToStreamMethod(false, out temp66, out temp67);
                    this.Manager.Comment("reaching state \'S167\'");
                    this.Manager.Comment("checking step \'return RopCopyToStreamMethod/[out False,out NullDestinationObject]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp66, "isReadWriteSuccess of RopCopyToStreamMethod, state S167");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp67, "error of RopCopyToStreamMethod, state S167");
                    this.Manager.Comment("reaching state \'S185\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                    this.Manager.Comment("reaching state \'S203\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S221\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(SecondObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                    this.Manager.Comment("reaching state \'S239\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S257\'");
                    bool temp68;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp69;
                    this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp68, out temp69);
                    this.Manager.Checkpoint("MS-OXCPRPT_R885");
                    this.Manager.Comment("reaching state \'S275\'");
                    this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp68, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S275");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp69, "error of RopOpenStreamMethod, state S275");
                    this.Manager.Comment("reaching state \'S293\'");
                    bool temp70;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(753,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(753, out temp70);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp70);
                    this.Manager.Comment("reaching state \'S311\'");
                    int temp71 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite3CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite3CheckRequirementEnabledChecker2)));
                    if ((temp71 == 0)) {
                        this.Manager.Comment("reaching state \'S343\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S379\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S415\'");
                        goto label12;
                    }
                    if ((temp71 == 1)) {
                        this.Manager.Comment("reaching state \'S344\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S380\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S416\'");
                        goto label12;
                    }
                    throw new InvalidOperationException("never reached");
                label12:
;
                    goto label14;
                }
                if ((temp78 == 1)) {
                    this.Manager.Comment("reaching state \'S150\'");
                    bool temp72;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp73;
                    this.Manager.Comment("executing step \'call RopCopyToStreamMethod(False,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopCopyToStreamMethod(false, out temp72, out temp73);
                    this.Manager.Comment("reaching state \'S168\'");
                    this.Manager.Comment("checking step \'return RopCopyToStreamMethod/[out False,out NullDestinationObject]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp72, "isReadWriteSuccess of RopCopyToStreamMethod, state S168");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp73, "error of RopCopyToStreamMethod, state S168");
                    this.Manager.Comment("reaching state \'S186\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                    this.Manager.Comment("reaching state \'S204\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S222\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(SecondObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                    this.Manager.Comment("reaching state \'S240\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S258\'");
                    bool temp74;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp75;
                    this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp74, out temp75);
                    this.Manager.Checkpoint("MS-OXCPRPT_R885");
                    this.Manager.Comment("reaching state \'S276\'");
                    this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp74, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S276");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp75, "error of RopOpenStreamMethod, state S276");
                    this.Manager.Comment("reaching state \'S294\'");
                    bool temp76;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(753,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(753, out temp76);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp76);
                    this.Manager.Comment("reaching state \'S312\'");
                    int temp77 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite3CheckRequirementEnabledChecker4)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite3CheckRequirementEnabledChecker5)));
                    if ((temp77 == 0)) {
                        this.Manager.Comment("reaching state \'S345\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S381\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S417\'");
                        goto label13;
                    }
                    if ((temp77 == 1)) {
                        this.Manager.Comment("reaching state \'S346\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S382\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S418\'");
                        goto label13;
                    }
                    throw new InvalidOperationException("never reached");
                label13:
;
                    goto label14;
                }
                throw new InvalidOperationException("never reached");
            label14:
;
                goto label15;
            }
            if ((temp79 == 1)) {
                this.Manager.Comment("reaching state \'S33\'");
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S15");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite3CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S133");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite3CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S311");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite3CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S311");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite3CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S133");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite3CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S312");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite3CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S312");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S15");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite4() {
            this.Manager.BeginTest("MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite4");
            this.Manager.Comment("reaching state \'S16\'");
            bool temp80;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp80);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp80);
            this.Manager.Comment("reaching state \'S17\'");
            int temp99 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp99 == 0)) {
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S44\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S53\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S62\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S71\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S80\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S89\'");
                bool temp81;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp82;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp81, out temp82);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S98\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp81, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S98");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp82, "error of RopOpenStreamMethod, state S98");
                this.Manager.Comment("reaching state \'S107\'");
                bool temp83;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp84;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(SecondObject,ReadWrite,True,out _,out _)" +
                        "\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp83, out temp84);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp83, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S116");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp84, "error of RopOpenStreamMethod, state S116");
                this.Manager.Comment("reaching state \'S125\'");
                bool temp85;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(867091,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(867091, out temp85);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp85);
                this.Manager.Comment("reaching state \'S134\'");
                int temp98 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite4CheckRequirementEnabledChecker)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite4CheckRequirementEnabledChecker3)));
                if ((temp98 == 0)) {
                    this.Manager.Comment("reaching state \'S151\'");
                    bool temp86;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp87;
                    this.Manager.Comment("executing step \'call RopCopyToStreamMethod(True,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopCopyToStreamMethod(true, out temp86, out temp87);
                    this.Manager.Checkpoint("MS-OXCPRPT_R592");
                    this.Manager.Comment("reaching state \'S169\'");
                    this.Manager.Comment("checking step \'return RopCopyToStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp86, "isReadWriteSuccess of RopCopyToStreamMethod, state S169");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp87, "error of RopCopyToStreamMethod, state S169");
                    this.Manager.Comment("reaching state \'S187\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                    this.Manager.Comment("reaching state \'S205\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S223\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(SecondObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                    this.Manager.Comment("reaching state \'S241\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S259\'");
                    bool temp88;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp89;
                    this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp88, out temp89);
                    this.Manager.Checkpoint("MS-OXCPRPT_R885");
                    this.Manager.Comment("reaching state \'S277\'");
                    this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp88, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S277");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp89, "error of RopOpenStreamMethod, state S277");
                    this.Manager.Comment("reaching state \'S295\'");
                    bool temp90;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(753,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(753, out temp90);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp90);
                    this.Manager.Comment("reaching state \'S313\'");
                    int temp91 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite4CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite4CheckRequirementEnabledChecker2)));
                    if ((temp91 == 0)) {
                        this.Manager.Comment("reaching state \'S347\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S383\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S419\'");
                        goto label16;
                    }
                    if ((temp91 == 1)) {
                        this.Manager.Comment("reaching state \'S348\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S384\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S420\'");
                        goto label16;
                    }
                    throw new InvalidOperationException("never reached");
                label16:
;
                    goto label18;
                }
                if ((temp98 == 1)) {
                    this.Manager.Comment("reaching state \'S152\'");
                    bool temp92;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp93;
                    this.Manager.Comment("executing step \'call RopCopyToStreamMethod(True,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopCopyToStreamMethod(true, out temp92, out temp93);
                    this.Manager.Checkpoint("MS-OXCPRPT_R867091");
                    this.Manager.Checkpoint("MS-OXCPRPT_R592");
                    this.Manager.Comment("reaching state \'S170\'");
                    this.Manager.Comment("checking step \'return RopCopyToStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp92, "isReadWriteSuccess of RopCopyToStreamMethod, state S170");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp93, "error of RopCopyToStreamMethod, state S170");
                    this.Manager.Comment("reaching state \'S188\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                    this.Manager.Comment("reaching state \'S206\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S224\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(SecondObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                    this.Manager.Comment("reaching state \'S242\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S260\'");
                    bool temp94;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp95;
                    this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp94, out temp95);
                    this.Manager.Checkpoint("MS-OXCPRPT_R885");
                    this.Manager.Comment("reaching state \'S278\'");
                    this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp94, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S278");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp95, "error of RopOpenStreamMethod, state S278");
                    this.Manager.Comment("reaching state \'S296\'");
                    bool temp96;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(753,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(753, out temp96);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp96);
                    this.Manager.Comment("reaching state \'S314\'");
                    int temp97 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite4CheckRequirementEnabledChecker4)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite4CheckRequirementEnabledChecker5)));
                    if ((temp97 == 0)) {
                        this.Manager.Comment("reaching state \'S349\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S385\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S421\'");
                        goto label17;
                    }
                    if ((temp97 == 1)) {
                        this.Manager.Comment("reaching state \'S350\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S386\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S422\'");
                        goto label17;
                    }
                    throw new InvalidOperationException("never reached");
                label17:
;
                    goto label18;
                }
                throw new InvalidOperationException("never reached");
            label18:
;
                goto label19;
            }
            if ((temp99 == 1)) {
                this.Manager.Comment("reaching state \'S35\'");
                goto label19;
            }
            throw new InvalidOperationException("never reached");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S17");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite4CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S134");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite4CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S313");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite4CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S313");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite4CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S134");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite4CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S314");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite4CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S314");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S17");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite5() {
            this.Manager.BeginTest("MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite5");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp100;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp100);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp100);
            this.Manager.Comment("reaching state \'S3\'");
            int temp119 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp119 == 0)) {
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S37\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S46\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S55\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S64\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S73\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S82\'");
                bool temp101;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp102;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp101, out temp102);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S91\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp101, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp102, "error of RopOpenStreamMethod, state S91");
                this.Manager.Comment("reaching state \'S100\'");
                bool temp103;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp104;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(SecondObject,ReadWrite,True,out _,out _)" +
                        "\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp103, out temp104);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S109\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp103, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S109");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp104, "error of RopOpenStreamMethod, state S109");
                this.Manager.Comment("reaching state \'S118\'");
                bool temp105;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(867091,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(867091, out temp105);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp105);
                this.Manager.Comment("reaching state \'S127\'");
                int temp118 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite5CheckRequirementEnabledChecker)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite5CheckRequirementEnabledChecker3)));
                if ((temp118 == 0)) {
                    this.Manager.Comment("reaching state \'S137\'");
                    bool temp106;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp107;
                    this.Manager.Comment("executing step \'call RopCopyToStreamMethod(False,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopCopyToStreamMethod(false, out temp106, out temp107);
                    this.Manager.Comment("reaching state \'S155\'");
                    this.Manager.Comment("checking step \'return RopCopyToStreamMethod/[out False,out NullDestinationObject]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp106, "isReadWriteSuccess of RopCopyToStreamMethod, state S155");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp107, "error of RopCopyToStreamMethod, state S155");
                    this.Manager.Comment("reaching state \'S173\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                    this.Manager.Comment("reaching state \'S191\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S209\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(SecondObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                    this.Manager.Comment("reaching state \'S227\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S245\'");
                    bool temp108;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp109;
                    this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp108, out temp109);
                    this.Manager.Checkpoint("MS-OXCPRPT_R885");
                    this.Manager.Comment("reaching state \'S263\'");
                    this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp108, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S263");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp109, "error of RopOpenStreamMethod, state S263");
                    this.Manager.Comment("reaching state \'S281\'");
                    bool temp110;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(753,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(753, out temp110);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp110);
                    this.Manager.Comment("reaching state \'S299\'");
                    int temp111 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite5CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite5CheckRequirementEnabledChecker2)));
                    if ((temp111 == 0)) {
                        this.Manager.Comment("reaching state \'S319\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S355\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S391\'");
                        goto label20;
                    }
                    if ((temp111 == 1)) {
                        this.Manager.Comment("reaching state \'S320\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S356\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S392\'");
                        goto label20;
                    }
                    throw new InvalidOperationException("never reached");
                label20:
;
                    goto label22;
                }
                if ((temp118 == 1)) {
                    this.Manager.Comment("reaching state \'S138\'");
                    bool temp112;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp113;
                    this.Manager.Comment("executing step \'call RopCopyToStreamMethod(False,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopCopyToStreamMethod(false, out temp112, out temp113);
                    this.Manager.Comment("reaching state \'S156\'");
                    this.Manager.Comment("checking step \'return RopCopyToStreamMethod/[out False,out NullDestinationObject]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp112, "isReadWriteSuccess of RopCopyToStreamMethod, state S156");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp113, "error of RopCopyToStreamMethod, state S156");
                    this.Manager.Comment("reaching state \'S174\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                    this.Manager.Comment("reaching state \'S192\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S210\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(SecondObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                    this.Manager.Comment("reaching state \'S228\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S246\'");
                    bool temp114;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp115;
                    this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp114, out temp115);
                    this.Manager.Checkpoint("MS-OXCPRPT_R885");
                    this.Manager.Comment("reaching state \'S264\'");
                    this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp114, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S264");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp115, "error of RopOpenStreamMethod, state S264");
                    this.Manager.Comment("reaching state \'S282\'");
                    bool temp116;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(753,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(753, out temp116);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp116);
                    this.Manager.Comment("reaching state \'S300\'");
                    int temp117 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite5CheckRequirementEnabledChecker4)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite5CheckRequirementEnabledChecker5)));
                    if ((temp117 == 0)) {
                        this.Manager.Comment("reaching state \'S321\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S357\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S393\'");
                        goto label21;
                    }
                    if ((temp117 == 1)) {
                        this.Manager.Comment("reaching state \'S322\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S358\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S394\'");
                        goto label21;
                    }
                    throw new InvalidOperationException("never reached");
                label21:
;
                    goto label22;
                }
                throw new InvalidOperationException("never reached");
            label22:
;
                goto label23;
            }
            if ((temp119 == 1)) {
                this.Manager.Comment("reaching state \'S21\'");
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite5CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S127");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite5CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S299");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite5CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S299");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite5CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S127");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite5CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S300");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite5CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S300");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite6() {
            this.Manager.BeginTest("MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite6");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp120;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp120);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp120);
            this.Manager.Comment("reaching state \'S5\'");
            int temp139 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite6CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite6CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp139 == 0)) {
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S47\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S56\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S65\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S74\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S83\'");
                bool temp121;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp122;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp121, out temp122);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S92\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp121, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp122, "error of RopOpenStreamMethod, state S92");
                this.Manager.Comment("reaching state \'S101\'");
                bool temp123;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp124;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(SecondObject,ReadWrite,True,out _,out _)" +
                        "\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp123, out temp124);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S110\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp123, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S110");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp124, "error of RopOpenStreamMethod, state S110");
                this.Manager.Comment("reaching state \'S119\'");
                bool temp125;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(867091,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(867091, out temp125);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp125);
                this.Manager.Comment("reaching state \'S128\'");
                int temp138 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite6CheckRequirementEnabledChecker)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite6CheckRequirementEnabledChecker3)));
                if ((temp138 == 0)) {
                    this.Manager.Comment("reaching state \'S139\'");
                    bool temp126;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp127;
                    this.Manager.Comment("executing step \'call RopCopyToStreamMethod(True,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopCopyToStreamMethod(true, out temp126, out temp127);
                    this.Manager.Checkpoint("MS-OXCPRPT_R592");
                    this.Manager.Comment("reaching state \'S157\'");
                    this.Manager.Comment("checking step \'return RopCopyToStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp126, "isReadWriteSuccess of RopCopyToStreamMethod, state S157");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp127, "error of RopCopyToStreamMethod, state S157");
                    this.Manager.Comment("reaching state \'S175\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                    this.Manager.Comment("reaching state \'S193\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S211\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(SecondObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                    this.Manager.Comment("reaching state \'S229\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S247\'");
                    bool temp128;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp129;
                    this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp128, out temp129);
                    this.Manager.Checkpoint("MS-OXCPRPT_R885");
                    this.Manager.Comment("reaching state \'S265\'");
                    this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp128, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S265");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp129, "error of RopOpenStreamMethod, state S265");
                    this.Manager.Comment("reaching state \'S283\'");
                    bool temp130;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(753,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(753, out temp130);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp130);
                    this.Manager.Comment("reaching state \'S301\'");
                    int temp131 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite6CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite6CheckRequirementEnabledChecker2)));
                    if ((temp131 == 0)) {
                        this.Manager.Comment("reaching state \'S323\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S359\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S395\'");
                        goto label24;
                    }
                    if ((temp131 == 1)) {
                        this.Manager.Comment("reaching state \'S324\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S360\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S396\'");
                        goto label24;
                    }
                    throw new InvalidOperationException("never reached");
                label24:
;
                    goto label26;
                }
                if ((temp138 == 1)) {
                    this.Manager.Comment("reaching state \'S140\'");
                    bool temp132;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp133;
                    this.Manager.Comment("executing step \'call RopCopyToStreamMethod(True,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopCopyToStreamMethod(true, out temp132, out temp133);
                    this.Manager.Checkpoint("MS-OXCPRPT_R867091");
                    this.Manager.Checkpoint("MS-OXCPRPT_R592");
                    this.Manager.Comment("reaching state \'S158\'");
                    this.Manager.Comment("checking step \'return RopCopyToStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp132, "isReadWriteSuccess of RopCopyToStreamMethod, state S158");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp133, "error of RopCopyToStreamMethod, state S158");
                    this.Manager.Comment("reaching state \'S176\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                    this.Manager.Comment("reaching state \'S194\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S212\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(SecondObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                    this.Manager.Comment("reaching state \'S230\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S248\'");
                    bool temp134;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp135;
                    this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp134, out temp135);
                    this.Manager.Checkpoint("MS-OXCPRPT_R885");
                    this.Manager.Comment("reaching state \'S266\'");
                    this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp134, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S266");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp135, "error of RopOpenStreamMethod, state S266");
                    this.Manager.Comment("reaching state \'S284\'");
                    bool temp136;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(753,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(753, out temp136);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp136);
                    this.Manager.Comment("reaching state \'S302\'");
                    int temp137 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite6CheckRequirementEnabledChecker4)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite6CheckRequirementEnabledChecker5)));
                    if ((temp137 == 0)) {
                        this.Manager.Comment("reaching state \'S325\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S361\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S397\'");
                        goto label25;
                    }
                    if ((temp137 == 1)) {
                        this.Manager.Comment("reaching state \'S326\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S362\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S398\'");
                        goto label25;
                    }
                    throw new InvalidOperationException("never reached");
                label25:
;
                    goto label26;
                }
                throw new InvalidOperationException("never reached");
            label26:
;
                goto label27;
            }
            if ((temp139 == 1)) {
                this.Manager.Comment("reaching state \'S23\'");
                goto label27;
            }
            throw new InvalidOperationException("never reached");
        label27:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite6CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite6CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S128");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite6CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S301");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite6CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S301");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite6CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S128");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite6CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S302");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite6CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S302");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite6CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite7() {
            this.Manager.BeginTest("MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite7");
            this.Manager.Comment("reaching state \'S6\'");
            bool temp140;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp140);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp140);
            this.Manager.Comment("reaching state \'S7\'");
            int temp159 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite7CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite7CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp159 == 0)) {
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S39\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S48\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S57\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S66\'");
                this.Manager.Comment("executing step \'call GetObject(Message,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S75\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S84\'");
                bool temp141;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp142;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp141, out temp142);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S93\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp141, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp142, "error of RopOpenStreamMethod, state S93");
                this.Manager.Comment("reaching state \'S102\'");
                bool temp143;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp144;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(SecondObject,ReadWrite,True,out _,out _)" +
                        "\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp143, out temp144);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S111\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp143, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S111");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp144, "error of RopOpenStreamMethod, state S111");
                this.Manager.Comment("reaching state \'S120\'");
                bool temp145;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(867091,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(867091, out temp145);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp145);
                this.Manager.Comment("reaching state \'S129\'");
                int temp158 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite7CheckRequirementEnabledChecker)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite7CheckRequirementEnabledChecker3)));
                if ((temp158 == 0)) {
                    this.Manager.Comment("reaching state \'S141\'");
                    bool temp146;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp147;
                    this.Manager.Comment("executing step \'call RopCopyToStreamMethod(False,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopCopyToStreamMethod(false, out temp146, out temp147);
                    this.Manager.Comment("reaching state \'S159\'");
                    this.Manager.Comment("checking step \'return RopCopyToStreamMethod/[out False,out NullDestinationObject]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp146, "isReadWriteSuccess of RopCopyToStreamMethod, state S159");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp147, "error of RopCopyToStreamMethod, state S159");
                    this.Manager.Comment("reaching state \'S177\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                    this.Manager.Comment("reaching state \'S195\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S213\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(SecondObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                    this.Manager.Comment("reaching state \'S231\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S249\'");
                    bool temp148;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp149;
                    this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp148, out temp149);
                    this.Manager.Checkpoint("MS-OXCPRPT_R885");
                    this.Manager.Comment("reaching state \'S267\'");
                    this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp148, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S267");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp149, "error of RopOpenStreamMethod, state S267");
                    this.Manager.Comment("reaching state \'S285\'");
                    bool temp150;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(753,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(753, out temp150);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp150);
                    this.Manager.Comment("reaching state \'S303\'");
                    int temp151 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite7CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite7CheckRequirementEnabledChecker2)));
                    if ((temp151 == 0)) {
                        this.Manager.Comment("reaching state \'S327\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S363\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S399\'");
                        goto label28;
                    }
                    if ((temp151 == 1)) {
                        this.Manager.Comment("reaching state \'S328\'");
                        this.Manager.Comment("executing step \'call RopCloneStreamMethod()\'");
                        this.IMS_OXCPRPTAdapterInstance.RopCloneStreamMethod();
                        this.Manager.Comment("reaching state \'S364\'");
                        this.Manager.Comment("checking step \'return RopCloneStreamMethod\'");
                        this.Manager.Comment("reaching state \'S400\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S425\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S431\'");
                        goto label28;
                    }
                    throw new InvalidOperationException("never reached");
                label28:
;
                    goto label30;
                }
                if ((temp158 == 1)) {
                    this.Manager.Comment("reaching state \'S142\'");
                    bool temp152;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp153;
                    this.Manager.Comment("executing step \'call RopCopyToStreamMethod(False,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopCopyToStreamMethod(false, out temp152, out temp153);
                    this.Manager.Comment("reaching state \'S160\'");
                    this.Manager.Comment("checking step \'return RopCopyToStreamMethod/[out False,out NullDestinationObject]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp152, "isReadWriteSuccess of RopCopyToStreamMethod, state S160");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp153, "error of RopCopyToStreamMethod, state S160");
                    this.Manager.Comment("reaching state \'S178\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                    this.Manager.Comment("reaching state \'S196\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S214\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(SecondObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                    this.Manager.Comment("reaching state \'S232\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S250\'");
                    bool temp154;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp155;
                    this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp154, out temp155);
                    this.Manager.Checkpoint("MS-OXCPRPT_R885");
                    this.Manager.Comment("reaching state \'S268\'");
                    this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp154, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S268");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp155, "error of RopOpenStreamMethod, state S268");
                    this.Manager.Comment("reaching state \'S286\'");
                    bool temp156;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(753,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(753, out temp156);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp156);
                    this.Manager.Comment("reaching state \'S304\'");
                    int temp157 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite7CheckRequirementEnabledChecker4)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite7CheckRequirementEnabledChecker5)));
                    if ((temp157 == 0)) {
                        this.Manager.Comment("reaching state \'S329\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S365\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S401\'");
                        goto label29;
                    }
                    if ((temp157 == 1)) {
                        this.Manager.Comment("reaching state \'S330\'");
                        this.Manager.Comment("executing step \'call RopCloneStreamMethod()\'");
                        this.IMS_OXCPRPTAdapterInstance.RopCloneStreamMethod();
                        this.Manager.Comment("reaching state \'S366\'");
                        this.Manager.Comment("checking step \'return RopCloneStreamMethod\'");
                        this.Manager.Comment("reaching state \'S402\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S426\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S432\'");
                        goto label29;
                    }
                    throw new InvalidOperationException("never reached");
                label29:
;
                    goto label30;
                }
                throw new InvalidOperationException("never reached");
            label30:
;
                goto label31;
            }
            if ((temp159 == 1)) {
                this.Manager.Comment("reaching state \'S25\'");
                goto label31;
            }
            throw new InvalidOperationException("never reached");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite7CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite7CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S129");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite7CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S303");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite7CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S303");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite7CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S129");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite7CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S304");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite7CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S304");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite7CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite8() {
            this.Manager.BeginTest("MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite8");
            this.Manager.Comment("reaching state \'S8\'");
            bool temp160;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp160);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp160);
            this.Manager.Comment("reaching state \'S9\'");
            int temp179 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite8CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite8CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp179 == 0)) {
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S40\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S49\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S67\'");
                this.Manager.Comment("executing step \'call GetObject(Message,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S76\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S85\'");
                bool temp161;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp162;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp161, out temp162);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S94\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp161, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp162, "error of RopOpenStreamMethod, state S94");
                this.Manager.Comment("reaching state \'S103\'");
                bool temp163;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp164;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(SecondObject,ReadWrite,True,out _,out _)" +
                        "\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp163, out temp164);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S112\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp163, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp164, "error of RopOpenStreamMethod, state S112");
                this.Manager.Comment("reaching state \'S121\'");
                bool temp165;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(867091,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(867091, out temp165);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp165);
                this.Manager.Comment("reaching state \'S130\'");
                int temp178 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite8CheckRequirementEnabledChecker)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite8CheckRequirementEnabledChecker3)));
                if ((temp178 == 0)) {
                    this.Manager.Comment("reaching state \'S143\'");
                    bool temp166;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp167;
                    this.Manager.Comment("executing step \'call RopCopyToStreamMethod(False,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopCopyToStreamMethod(false, out temp166, out temp167);
                    this.Manager.Comment("reaching state \'S161\'");
                    this.Manager.Comment("checking step \'return RopCopyToStreamMethod/[out False,out NullDestinationObject]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp166, "isReadWriteSuccess of RopCopyToStreamMethod, state S161");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp167, "error of RopCopyToStreamMethod, state S161");
                    this.Manager.Comment("reaching state \'S179\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                    this.Manager.Comment("reaching state \'S197\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S215\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(SecondObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                    this.Manager.Comment("reaching state \'S233\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S251\'");
                    bool temp168;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp169;
                    this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp168, out temp169);
                    this.Manager.Checkpoint("MS-OXCPRPT_R885");
                    this.Manager.Comment("reaching state \'S269\'");
                    this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp168, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S269");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp169, "error of RopOpenStreamMethod, state S269");
                    this.Manager.Comment("reaching state \'S287\'");
                    bool temp170;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(753,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(753, out temp170);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp170);
                    this.Manager.Comment("reaching state \'S305\'");
                    int temp171 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite8CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite8CheckRequirementEnabledChecker2)));
                    if ((temp171 == 0)) {
                        this.Manager.Comment("reaching state \'S331\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S367\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S403\'");
                        goto label32;
                    }
                    if ((temp171 == 1)) {
                        this.Manager.Comment("reaching state \'S332\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S368\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S404\'");
                        goto label32;
                    }
                    throw new InvalidOperationException("never reached");
                label32:
;
                    goto label34;
                }
                if ((temp178 == 1)) {
                    this.Manager.Comment("reaching state \'S144\'");
                    bool temp172;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp173;
                    this.Manager.Comment("executing step \'call RopCopyToStreamMethod(False,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopCopyToStreamMethod(false, out temp172, out temp173);
                    this.Manager.Comment("reaching state \'S162\'");
                    this.Manager.Comment("checking step \'return RopCopyToStreamMethod/[out False,out NullDestinationObject]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp172, "isReadWriteSuccess of RopCopyToStreamMethod, state S162");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NullDestinationObject, temp173, "error of RopCopyToStreamMethod, state S162");
                    this.Manager.Comment("reaching state \'S180\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                    this.Manager.Comment("reaching state \'S198\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S216\'");
                    this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(SecondObject)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                    this.Manager.Comment("reaching state \'S234\'");
                    this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                    this.Manager.Comment("reaching state \'S252\'");
                    bool temp174;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp175;
                    this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp174, out temp175);
                    this.Manager.Checkpoint("MS-OXCPRPT_R885");
                    this.Manager.Comment("reaching state \'S270\'");
                    this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp174, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S270");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp175, "error of RopOpenStreamMethod, state S270");
                    this.Manager.Comment("reaching state \'S288\'");
                    bool temp176;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(753,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(753, out temp176);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp176);
                    this.Manager.Comment("reaching state \'S306\'");
                    int temp177 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite8CheckRequirementEnabledChecker4)), new ExpectedReturn(S04_CopyToStreamsCloneStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite8CheckRequirementEnabledChecker5)));
                    if ((temp177 == 0)) {
                        this.Manager.Comment("reaching state \'S333\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S369\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S405\'");
                        goto label33;
                    }
                    if ((temp177 == 1)) {
                        this.Manager.Comment("reaching state \'S334\'");
                        this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                        this.Manager.Comment("reaching state \'S370\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                        this.Manager.Comment("reaching state \'S406\'");
                        goto label33;
                    }
                    throw new InvalidOperationException("never reached");
                label33:
;
                    goto label34;
                }
                throw new InvalidOperationException("never reached");
            label34:
;
                goto label35;
            }
            if ((temp179 == 1)) {
                this.Manager.Comment("reaching state \'S27\'");
                goto label35;
            }
            throw new InvalidOperationException("never reached");
        label35:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite8CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite8CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S130");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite8CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S305");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite8CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S305");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite8CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S130");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite8CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S306");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite8CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S306");
        }
        
        private void MSOXCPRPT_S04_CopyToStreamsCloneStream_TestSuite8CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        #endregion
    }
}