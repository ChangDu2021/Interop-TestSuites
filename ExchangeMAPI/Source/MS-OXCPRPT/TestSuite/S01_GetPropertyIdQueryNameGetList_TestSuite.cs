//-----------------------------------------------------------------------
// Copyright (c) 2014 Microsoft Corporation. All rights reserved.
// Use of this sample source code is subject to the terms of the Microsoft license 
// agreement under which you licensed this sample source code and is provided AS-IS.
// If you did not accept the terms of the license agreement, you are not authorized 
// to use this sample source code. For the terms of the license, please see the 
// license agreement between you and Microsoft.
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCPRPT {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.6.100.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S01_GetPropertyIdQueryNameGetList_TestSuite : PtfTestClassBase {
        
        public S01_GetPropertyIdQueryNameGetList_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter IMS_OXCPRPTAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCPRPTAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp9 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp9 == 0)) {
                this.Manager.Comment("reaching state \'S88\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S176\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S220\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S264\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S308\'");
                bool temp1;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp1);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1);
                this.Manager.Comment("reaching state \'S352\'");
                int temp8 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuiteCheckRequirementEnabledChecker1)));
                if ((temp8 == 0)) {
                    this.Manager.Comment("reaching state \'S396\'");
                    bool temp2;
                    bool temp3;
                    bool temp4;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(NoIds,True,out _,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags.NoIds, true, out temp2, out temp3, out temp4);
                    this.Manager.Checkpoint("MS-OXCPRPT_R877");
                    this.Manager.Checkpoint("MS-OXCPRPT_R878");
                    this.Manager.Comment("reaching state \'S484\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out True,out False,out True]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp2, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S484");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp3, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S484");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp4, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S484");
                    this.Manager.Comment("reaching state \'S572\'");
                    goto label0;
                }
                if ((temp8 == 1)) {
                    this.Manager.Comment("reaching state \'S397\'");
                    bool temp5;
                    bool temp6;
                    bool temp7;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(NoIds,True,out _,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags.NoIds, true, out temp5, out temp6, out temp7);
                    this.Manager.Checkpoint("MS-OXCPRPT_R877");
                    this.Manager.Checkpoint("MS-OXCPRPT_R878");
                    this.Manager.Comment("reaching state \'S485\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out True,out False,out True]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp5, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S485");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp6, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S485");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp7, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S485");
                    this.Manager.Comment("reaching state \'S573\'");
                    goto label0;
                }
                throw new InvalidOperationException("never reached");
            label0:
;
                goto label1;
            }
            if ((temp9 == 1)) {
                this.Manager.Comment("reaching state \'S89\'");
                goto label1;
            }
            throw new InvalidOperationException("never reached");
        label1:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S352");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S352");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite1() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite1");
            this.Manager.Comment("reaching state \'S10\'");
            bool temp10;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp10);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp10);
            this.Manager.Comment("reaching state \'S11\'");
            int temp17 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp17 == 0)) {
                this.Manager.Comment("reaching state \'S98\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S181\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S225\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S269\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S313\'");
                bool temp11;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp11);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp11);
                this.Manager.Comment("reaching state \'S357\'");
                int temp16 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite1CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite1CheckRequirementEnabledChecker1)));
                if ((temp16 == 0)) {
                    this.Manager.Comment("reaching state \'S406\'");
                    bool temp12;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp13;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(True,False,True,NoConstrain" +
                            "t,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(true, false, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp12, out temp13);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S494\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp12, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S494");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp13, "error of RopGetPropertyIdsFromNamesMethod, state S494");
                    this.Manager.Comment("reaching state \'S582\'");
                    goto label2;
                }
                if ((temp16 == 1)) {
                    this.Manager.Comment("reaching state \'S407\'");
                    bool temp14;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp15;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(True,False,True,NoConstrain" +
                            "t,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(true, false, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp14, out temp15);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S495\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp14, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S495");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp15, "error of RopGetPropertyIdsFromNamesMethod, state S495");
                    this.Manager.Comment("reaching state \'S583\'");
                    goto label2;
                }
                throw new InvalidOperationException("never reached");
            label2:
;
                goto label3;
            }
            if ((temp17 == 1)) {
                this.Manager.Comment("reaching state \'S99\'");
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite1CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S357");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite1CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S357");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite2() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite2");
            this.Manager.Comment("reaching state \'S12\'");
            bool temp18;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp18);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp18);
            this.Manager.Comment("reaching state \'S13\'");
            int temp25 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp25 == 0)) {
                this.Manager.Comment("reaching state \'S100\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S182\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S226\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S270\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S314\'");
                bool temp19;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp19);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp19);
                this.Manager.Comment("reaching state \'S358\'");
                int temp24 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite2CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite2CheckRequirementEnabledChecker1)));
                if ((temp24 == 0)) {
                    this.Manager.Comment("reaching state \'S408\'");
                    bool temp20;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp21;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,NoConstrain" +
                            "t,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp20, out temp21);
                    this.Manager.Comment("reaching state \'S496\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp20, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S496");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp21, "error of RopGetPropertyIdsFromNamesMethod, state S496");
                    this.Manager.Comment("reaching state \'S584\'");
                    goto label4;
                }
                if ((temp24 == 1)) {
                    this.Manager.Comment("reaching state \'S409\'");
                    bool temp22;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp23;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,NoConstrain" +
                            "t,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp22, out temp23);
                    this.Manager.Comment("reaching state \'S497\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp22, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S497");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp23, "error of RopGetPropertyIdsFromNamesMethod, state S497");
                    this.Manager.Comment("reaching state \'S585\'");
                    goto label4;
                }
                throw new InvalidOperationException("never reached");
            label4:
;
                goto label5;
            }
            if ((temp25 == 1)) {
                this.Manager.Comment("reaching state \'S101\'");
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S13");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite2CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S358");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite2CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S358");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S13");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite3() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite3");
            this.Manager.Comment("reaching state \'S14\'");
            bool temp26;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp26);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp26);
            this.Manager.Comment("reaching state \'S15\'");
            int temp33 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite3CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite3CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp33 == 0)) {
                this.Manager.Comment("reaching state \'S102\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S183\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S227\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S271\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S315\'");
                bool temp27;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp27);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp27);
                this.Manager.Comment("reaching state \'S359\'");
                int temp32 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite3CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite3CheckRequirementEnabledChecker1)));
                if ((temp32 == 0)) {
                    this.Manager.Comment("reaching state \'S410\'");
                    bool temp28;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp29;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,PS_MAPIAndK" +
                            "ind0x00,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName)(0)), out temp28, out temp29);
                    this.Manager.Comment("reaching state \'S498\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp28, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S498");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp29, "error of RopGetPropertyIdsFromNamesMethod, state S498");
                    this.Manager.Comment("reaching state \'S586\'");
                    goto label6;
                }
                if ((temp32 == 1)) {
                    this.Manager.Comment("reaching state \'S411\'");
                    bool temp30;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp31;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,PS_MAPIAndK" +
                            "ind0x00,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName)(0)), out temp30, out temp31);
                    this.Manager.Comment("reaching state \'S499\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp30, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S499");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp31, "error of RopGetPropertyIdsFromNamesMethod, state S499");
                    this.Manager.Comment("reaching state \'S587\'");
                    goto label6;
                }
                throw new InvalidOperationException("never reached");
            label6:
;
                goto label7;
            }
            if ((temp33 == 1)) {
                this.Manager.Comment("reaching state \'S103\'");
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite3CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S15");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite3CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S359");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite3CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S359");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite3CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S15");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite4() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite4");
            this.Manager.Comment("reaching state \'S16\'");
            bool temp34;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp34);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp34);
            this.Manager.Comment("reaching state \'S17\'");
            int temp41 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite4CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite4CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp41 == 0)) {
                this.Manager.Comment("reaching state \'S104\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S184\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S228\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S272\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S316\'");
                bool temp35;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp35);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp35);
                this.Manager.Comment("reaching state \'S360\'");
                int temp40 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite4CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite4CheckRequirementEnabledChecker1)));
                if ((temp40 == 0)) {
                    this.Manager.Comment("reaching state \'S412\'");
                    bool temp36;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp37;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,Kind0x01,ou" +
                            "t _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.Kind0x01, out temp36, out temp37);
                    this.Manager.Comment("reaching state \'S500\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp36, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S500");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp37, "error of RopGetPropertyIdsFromNamesMethod, state S500");
                    this.Manager.Comment("reaching state \'S588\'");
                    goto label8;
                }
                if ((temp40 == 1)) {
                    this.Manager.Comment("reaching state \'S413\'");
                    bool temp38;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp39;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,Kind0x01,ou" +
                            "t _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.Kind0x01, out temp38, out temp39);
                    this.Manager.Comment("reaching state \'S501\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp38, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S501");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp39, "error of RopGetPropertyIdsFromNamesMethod, state S501");
                    this.Manager.Comment("reaching state \'S589\'");
                    goto label8;
                }
                throw new InvalidOperationException("never reached");
            label8:
;
                goto label9;
            }
            if ((temp41 == 1)) {
                this.Manager.Comment("reaching state \'S105\'");
                goto label9;
            }
            throw new InvalidOperationException("never reached");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite4CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S17");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite4CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S360");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite4CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S360");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite4CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S17");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite5() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite5");
            this.Manager.Comment("reaching state \'S18\'");
            bool temp42;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp42);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp42);
            this.Manager.Comment("reaching state \'S19\'");
            int temp49 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite5CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite5CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp49 == 0)) {
                this.Manager.Comment("reaching state \'S106\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S185\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S229\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S273\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S317\'");
                bool temp43;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp43);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp43);
                this.Manager.Comment("reaching state \'S361\'");
                int temp48 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite5CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite5CheckRequirementEnabledChecker1)));
                if ((temp48 == 0)) {
                    this.Manager.Comment("reaching state \'S414\'");
                    bool temp44;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp45;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,False,NoConstrai" +
                            "nt,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, false, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp44, out temp45);
                    this.Manager.Checkpoint("MS-OXCPRPT_R628");
                    this.Manager.Comment("reaching state \'S502\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp44, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S502");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp45, "error of RopGetPropertyIdsFromNamesMethod, state S502");
                    this.Manager.Comment("reaching state \'S590\'");
                    goto label10;
                }
                if ((temp48 == 1)) {
                    this.Manager.Comment("reaching state \'S415\'");
                    bool temp46;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp47;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,False,NoConstrai" +
                            "nt,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, false, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp46, out temp47);
                    this.Manager.Checkpoint("MS-OXCPRPT_R628");
                    this.Manager.Comment("reaching state \'S503\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp46, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S503");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp47, "error of RopGetPropertyIdsFromNamesMethod, state S503");
                    this.Manager.Comment("reaching state \'S591\'");
                    goto label10;
                }
                throw new InvalidOperationException("never reached");
            label10:
;
                goto label11;
            }
            if ((temp49 == 1)) {
                this.Manager.Comment("reaching state \'S107\'");
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite5CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S19");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite5CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S361");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite5CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S361");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite5CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S19");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite6() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite6");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp50;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp50);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp50);
            this.Manager.Comment("reaching state \'S3\'");
            int temp59 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite6CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite6CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp59 == 0)) {
                this.Manager.Comment("reaching state \'S90\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S177\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S221\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S265\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S309\'");
                bool temp51;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp51);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp51);
                this.Manager.Comment("reaching state \'S353\'");
                int temp58 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite6CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite6CheckRequirementEnabledChecker1)));
                if ((temp58 == 0)) {
                    this.Manager.Comment("reaching state \'S398\'");
                    bool temp52;
                    bool temp53;
                    bool temp54;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(OtherValue,False,out _,out _,o" +
                            "ut _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags.OtherValue, false, out temp52, out temp53, out temp54);
                    this.Manager.Comment("reaching state \'S486\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out False,out False,out Fals" +
                            "e]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp52, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S486");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp53, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S486");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp54, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S486");
                    this.Manager.Comment("reaching state \'S574\'");
                    goto label12;
                }
                if ((temp58 == 1)) {
                    this.Manager.Comment("reaching state \'S399\'");
                    bool temp55;
                    bool temp56;
                    bool temp57;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(OtherValue,False,out _,out _,o" +
                            "ut _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags.OtherValue, false, out temp55, out temp56, out temp57);
                    this.Manager.Comment("reaching state \'S487\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out False,out False,out Fals" +
                            "e]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp55, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S487");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp56, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S487");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp57, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S487");
                    this.Manager.Comment("reaching state \'S575\'");
                    goto label12;
                }
                throw new InvalidOperationException("never reached");
            label12:
;
                goto label13;
            }
            if ((temp59 == 1)) {
                this.Manager.Comment("reaching state \'S91\'");
                goto label13;
            }
            throw new InvalidOperationException("never reached");
        label13:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite6CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite6CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S353");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite6CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S353");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite6CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite7() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite7");
            this.Manager.Comment("reaching state \'S20\'");
            bool temp60;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp60);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp60);
            this.Manager.Comment("reaching state \'S21\'");
            int temp67 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite7CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite7CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp67 == 0)) {
                this.Manager.Comment("reaching state \'S108\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S186\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S230\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S274\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S318\'");
                bool temp61;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp61);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp61);
                this.Manager.Comment("reaching state \'S362\'");
                int temp66 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite7CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite7CheckRequirementEnabledChecker1)));
                if ((temp66 == 0)) {
                    this.Manager.Comment("reaching state \'S416\'");
                    bool temp62;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp63;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,False,False,NoConstra" +
                            "int,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, false, false, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp62, out temp63);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S504\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp62, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S504");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp63, "error of RopGetPropertyIdsFromNamesMethod, state S504");
                    this.Manager.Comment("reaching state \'S592\'");
                    goto label14;
                }
                if ((temp66 == 1)) {
                    this.Manager.Comment("reaching state \'S417\'");
                    bool temp64;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp65;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,False,False,NoConstra" +
                            "int,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, false, false, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp64, out temp65);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S505\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp64, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S505");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp65, "error of RopGetPropertyIdsFromNamesMethod, state S505");
                    this.Manager.Comment("reaching state \'S593\'");
                    goto label14;
                }
                throw new InvalidOperationException("never reached");
            label14:
;
                goto label15;
            }
            if ((temp67 == 1)) {
                this.Manager.Comment("reaching state \'S109\'");
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite7CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S21");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite7CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S362");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite7CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S362");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite7CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S21");
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite8() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite8");
            this.Manager.Comment("reaching state \'S22\'");
            bool temp68;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp68);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp68);
            this.Manager.Comment("reaching state \'S23\'");
            int temp77 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite8CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite8CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp77 == 0)) {
                this.Manager.Comment("reaching state \'S110\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S187\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S231\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S275\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S319\'");
                bool temp69;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp69);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp69);
                this.Manager.Comment("reaching state \'S363\'");
                int temp76 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite8CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite8CheckRequirementEnabledChecker1)));
                if ((temp76 == 0)) {
                    this.Manager.Comment("reaching state \'S418\'");
                    bool temp70;
                    bool temp71;
                    bool temp72;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(NoIds,True,out _,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags.NoIds, true, out temp70, out temp71, out temp72);
                    this.Manager.Checkpoint("MS-OXCPRPT_R877");
                    this.Manager.Checkpoint("MS-OXCPRPT_R878");
                    this.Manager.Comment("reaching state \'S506\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out True,out False,out True]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp70, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S506");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp71, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S506");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp72, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S506");
                    this.Manager.Comment("reaching state \'S594\'");
                    goto label16;
                }
                if ((temp76 == 1)) {
                    this.Manager.Comment("reaching state \'S419\'");
                    bool temp73;
                    bool temp74;
                    bool temp75;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(NoIds,True,out _,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags.NoIds, true, out temp73, out temp74, out temp75);
                    this.Manager.Checkpoint("MS-OXCPRPT_R877");
                    this.Manager.Checkpoint("MS-OXCPRPT_R878");
                    this.Manager.Comment("reaching state \'S507\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out True,out False,out True]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp73, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S507");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp74, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S507");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp75, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S507");
                    this.Manager.Comment("reaching state \'S595\'");
                    goto label16;
                }
                throw new InvalidOperationException("never reached");
            label16:
;
                goto label17;
            }
            if ((temp77 == 1)) {
                this.Manager.Comment("reaching state \'S111\'");
                goto label17;
            }
            throw new InvalidOperationException("never reached");
        label17:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite8CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S23");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite8CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S363");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite8CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S363");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite8CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S23");
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite9() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite9");
            this.Manager.Comment("reaching state \'S24\'");
            bool temp78;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp78);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp78);
            this.Manager.Comment("reaching state \'S25\'");
            int temp87 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite9CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite9CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp87 == 0)) {
                this.Manager.Comment("reaching state \'S112\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S188\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S232\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S276\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S320\'");
                bool temp79;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp79);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp79);
                this.Manager.Comment("reaching state \'S364\'");
                int temp86 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite9CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite9CheckRequirementEnabledChecker1)));
                if ((temp86 == 0)) {
                    this.Manager.Comment("reaching state \'S420\'");
                    bool temp80;
                    bool temp81;
                    bool temp82;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(OtherValue,False,out _,out _,o" +
                            "ut _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags.OtherValue, false, out temp80, out temp81, out temp82);
                    this.Manager.Comment("reaching state \'S508\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out False,out False,out Fals" +
                            "e]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp80, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S508");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp81, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S508");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp82, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S508");
                    this.Manager.Comment("reaching state \'S596\'");
                    goto label18;
                }
                if ((temp86 == 1)) {
                    this.Manager.Comment("reaching state \'S421\'");
                    bool temp83;
                    bool temp84;
                    bool temp85;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(OtherValue,False,out _,out _,o" +
                            "ut _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags.OtherValue, false, out temp83, out temp84, out temp85);
                    this.Manager.Comment("reaching state \'S509\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out False,out False,out Fals" +
                            "e]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp83, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S509");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp84, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S509");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp85, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S509");
                    this.Manager.Comment("reaching state \'S597\'");
                    goto label18;
                }
                throw new InvalidOperationException("never reached");
            label18:
;
                goto label19;
            }
            if ((temp87 == 1)) {
                this.Manager.Comment("reaching state \'S113\'");
                goto label19;
            }
            throw new InvalidOperationException("never reached");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite9CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S25");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite9CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S364");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite9CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S364");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite9CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S25");
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite10() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite10");
            this.Manager.Comment("reaching state \'S26\'");
            bool temp88;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp88);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp88);
            this.Manager.Comment("reaching state \'S27\'");
            int temp97 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite10CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite10CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp97 == 0)) {
                this.Manager.Comment("reaching state \'S114\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S189\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S233\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S277\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S321\'");
                bool temp89;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp89);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp89);
                this.Manager.Comment("reaching state \'S365\'");
                int temp96 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite10CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite10CheckRequirementEnabledChecker1)));
                if ((temp96 == 0)) {
                    this.Manager.Comment("reaching state \'S422\'");
                    bool temp90;
                    bool temp91;
                    bool temp92;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(NoStrings,False,out _,out _,ou" +
                            "t _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags)(1)), false, out temp90, out temp91, out temp92);
                    this.Manager.Checkpoint("MS-OXCPRPT_R876");
                    this.Manager.Comment("reaching state \'S510\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out False,out True,out False" +
                            "]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp90, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S510");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp91, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S510");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp92, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S510");
                    this.Manager.Comment("reaching state \'S598\'");
                    goto label20;
                }
                if ((temp96 == 1)) {
                    this.Manager.Comment("reaching state \'S423\'");
                    bool temp93;
                    bool temp94;
                    bool temp95;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(NoStrings,False,out _,out _,ou" +
                            "t _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags)(1)), false, out temp93, out temp94, out temp95);
                    this.Manager.Checkpoint("MS-OXCPRPT_R876");
                    this.Manager.Comment("reaching state \'S511\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out False,out True,out False" +
                            "]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp93, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S511");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp94, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S511");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp95, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S511");
                    this.Manager.Comment("reaching state \'S599\'");
                    goto label20;
                }
                throw new InvalidOperationException("never reached");
            label20:
;
                goto label21;
            }
            if ((temp97 == 1)) {
                this.Manager.Comment("reaching state \'S115\'");
                goto label21;
            }
            throw new InvalidOperationException("never reached");
        label21:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite10CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S27");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite10CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S365");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite10CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S365");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite10CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S27");
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite11() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite11");
            this.Manager.Comment("reaching state \'S28\'");
            bool temp98;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp98);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp98);
            this.Manager.Comment("reaching state \'S29\'");
            int temp101 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite11CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite11CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp101 == 0)) {
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S190\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S234\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S278\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S322\'");
                bool temp99;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp99);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp99);
                this.Manager.Comment("reaching state \'S366\'");
                int temp100 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite11CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite11CheckRequirementEnabledChecker1)));
                if ((temp100 == 0)) {
                    this.Manager.Comment("reaching state \'S424\'");
                    this.Manager.Comment("executing step \'call RopGetPropertiesListMethod()\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesListMethod();
                    this.Manager.Comment("reaching state \'S512\'");
                    this.Manager.Comment("checking step \'return RopGetPropertiesListMethod\'");
                    this.Manager.Comment("reaching state \'S600\'");
                    goto label22;
                }
                if ((temp100 == 1)) {
                    this.Manager.Comment("reaching state \'S425\'");
                    this.Manager.Comment("executing step \'call RopGetPropertiesListMethod()\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesListMethod();
                    this.Manager.Comment("reaching state \'S513\'");
                    this.Manager.Comment("checking step \'return RopGetPropertiesListMethod\'");
                    this.Manager.Comment("reaching state \'S601\'");
                    goto label22;
                }
                throw new InvalidOperationException("never reached");
            label22:
;
                goto label23;
            }
            if ((temp101 == 1)) {
                this.Manager.Comment("reaching state \'S117\'");
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite11CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S29");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite11CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S366");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite11CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S366");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite11CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S29");
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite12() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite12");
            this.Manager.Comment("reaching state \'S30\'");
            bool temp102;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp102);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp102);
            this.Manager.Comment("reaching state \'S31\'");
            int temp109 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite12CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite12CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp109 == 0)) {
                this.Manager.Comment("reaching state \'S118\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S191\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S235\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S279\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S323\'");
                bool temp103;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp103);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp103);
                this.Manager.Comment("reaching state \'S367\'");
                int temp108 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite12CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite12CheckRequirementEnabledChecker1)));
                if ((temp108 == 0)) {
                    this.Manager.Comment("reaching state \'S426\'");
                    bool temp104;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp105;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,False,True,NoConstrai" +
                            "nt,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, false, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp104, out temp105);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S514\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp104, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S514");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp105, "error of RopGetPropertyIdsFromNamesMethod, state S514");
                    this.Manager.Comment("reaching state \'S602\'");
                    goto label24;
                }
                if ((temp108 == 1)) {
                    this.Manager.Comment("reaching state \'S427\'");
                    bool temp106;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp107;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,False,True,NoConstrai" +
                            "nt,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, false, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp106, out temp107);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S515\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp106, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S515");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp107, "error of RopGetPropertyIdsFromNamesMethod, state S515");
                    this.Manager.Comment("reaching state \'S603\'");
                    goto label24;
                }
                throw new InvalidOperationException("never reached");
            label24:
;
                goto label25;
            }
            if ((temp109 == 1)) {
                this.Manager.Comment("reaching state \'S119\'");
                goto label25;
            }
            throw new InvalidOperationException("never reached");
        label25:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite12CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S31");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite12CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S367");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite12CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S367");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite12CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S31");
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite13() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite13");
            this.Manager.Comment("reaching state \'S32\'");
            bool temp110;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp110);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp110);
            this.Manager.Comment("reaching state \'S33\'");
            int temp117 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite13CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite13CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp117 == 0)) {
                this.Manager.Comment("reaching state \'S120\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S192\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S236\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S280\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S324\'");
                bool temp111;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp111);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp111);
                this.Manager.Comment("reaching state \'S368\'");
                int temp116 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite13CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite13CheckRequirementEnabledChecker1)));
                if ((temp116 == 0)) {
                    this.Manager.Comment("reaching state \'S428\'");
                    bool temp112;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp113;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(True,False,True,NoConstrain" +
                            "t,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(true, false, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp112, out temp113);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S516\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp112, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S516");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp113, "error of RopGetPropertyIdsFromNamesMethod, state S516");
                    this.Manager.Comment("reaching state \'S604\'");
                    goto label26;
                }
                if ((temp116 == 1)) {
                    this.Manager.Comment("reaching state \'S429\'");
                    bool temp114;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp115;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(True,False,True,NoConstrain" +
                            "t,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(true, false, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp114, out temp115);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S517\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp114, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S517");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp115, "error of RopGetPropertyIdsFromNamesMethod, state S517");
                    this.Manager.Comment("reaching state \'S605\'");
                    goto label26;
                }
                throw new InvalidOperationException("never reached");
            label26:
;
                goto label27;
            }
            if ((temp117 == 1)) {
                this.Manager.Comment("reaching state \'S121\'");
                goto label27;
            }
            throw new InvalidOperationException("never reached");
        label27:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite13CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S33");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite13CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S368");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite13CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S368");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite13CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S33");
        }
        #endregion
        
        #region Test Starting in S34
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite14() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite14");
            this.Manager.Comment("reaching state \'S34\'");
            bool temp118;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp118);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp118);
            this.Manager.Comment("reaching state \'S35\'");
            int temp125 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite14CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite14CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp125 == 0)) {
                this.Manager.Comment("reaching state \'S122\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S193\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S237\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S281\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S325\'");
                bool temp119;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp119);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp119);
                this.Manager.Comment("reaching state \'S369\'");
                int temp124 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite14CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite14CheckRequirementEnabledChecker1)));
                if ((temp124 == 0)) {
                    this.Manager.Comment("reaching state \'S430\'");
                    bool temp120;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp121;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,NoConstrain" +
                            "t,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp120, out temp121);
                    this.Manager.Comment("reaching state \'S518\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp120, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S518");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp121, "error of RopGetPropertyIdsFromNamesMethod, state S518");
                    this.Manager.Comment("reaching state \'S606\'");
                    goto label28;
                }
                if ((temp124 == 1)) {
                    this.Manager.Comment("reaching state \'S431\'");
                    bool temp122;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp123;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,NoConstrain" +
                            "t,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp122, out temp123);
                    this.Manager.Comment("reaching state \'S519\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp122, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S519");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp123, "error of RopGetPropertyIdsFromNamesMethod, state S519");
                    this.Manager.Comment("reaching state \'S607\'");
                    goto label28;
                }
                throw new InvalidOperationException("never reached");
            label28:
;
                goto label29;
            }
            if ((temp125 == 1)) {
                this.Manager.Comment("reaching state \'S123\'");
                goto label29;
            }
            throw new InvalidOperationException("never reached");
        label29:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite14CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S35");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite14CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S369");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite14CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S369");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite14CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S35");
        }
        #endregion
        
        #region Test Starting in S36
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite15() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite15");
            this.Manager.Comment("reaching state \'S36\'");
            bool temp126;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp126);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp126);
            this.Manager.Comment("reaching state \'S37\'");
            int temp133 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite15CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite15CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp133 == 0)) {
                this.Manager.Comment("reaching state \'S124\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S194\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S238\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S282\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S326\'");
                bool temp127;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp127);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp127);
                this.Manager.Comment("reaching state \'S370\'");
                int temp132 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite15CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite15CheckRequirementEnabledChecker1)));
                if ((temp132 == 0)) {
                    this.Manager.Comment("reaching state \'S432\'");
                    bool temp128;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp129;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,PS_MAPIAndK" +
                            "ind0x00,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName)(0)), out temp128, out temp129);
                    this.Manager.Comment("reaching state \'S520\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp128, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S520");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp129, "error of RopGetPropertyIdsFromNamesMethod, state S520");
                    this.Manager.Comment("reaching state \'S608\'");
                    goto label30;
                }
                if ((temp132 == 1)) {
                    this.Manager.Comment("reaching state \'S433\'");
                    bool temp130;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp131;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,PS_MAPIAndK" +
                            "ind0x00,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName)(0)), out temp130, out temp131);
                    this.Manager.Comment("reaching state \'S521\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp130, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S521");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp131, "error of RopGetPropertyIdsFromNamesMethod, state S521");
                    this.Manager.Comment("reaching state \'S609\'");
                    goto label30;
                }
                throw new InvalidOperationException("never reached");
            label30:
;
                goto label31;
            }
            if ((temp133 == 1)) {
                this.Manager.Comment("reaching state \'S125\'");
                goto label31;
            }
            throw new InvalidOperationException("never reached");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite15CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S37");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite15CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S370");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite15CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S370");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite15CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S37");
        }
        #endregion
        
        #region Test Starting in S38
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite16() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite16");
            this.Manager.Comment("reaching state \'S38\'");
            bool temp134;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp134);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp134);
            this.Manager.Comment("reaching state \'S39\'");
            int temp141 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite16CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite16CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp141 == 0)) {
                this.Manager.Comment("reaching state \'S126\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S195\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S239\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S283\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S327\'");
                bool temp135;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp135);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp135);
                this.Manager.Comment("reaching state \'S371\'");
                int temp140 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite16CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite16CheckRequirementEnabledChecker1)));
                if ((temp140 == 0)) {
                    this.Manager.Comment("reaching state \'S434\'");
                    bool temp136;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp137;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,Kind0x01,ou" +
                            "t _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.Kind0x01, out temp136, out temp137);
                    this.Manager.Comment("reaching state \'S522\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp136, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S522");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp137, "error of RopGetPropertyIdsFromNamesMethod, state S522");
                    this.Manager.Comment("reaching state \'S610\'");
                    goto label32;
                }
                if ((temp140 == 1)) {
                    this.Manager.Comment("reaching state \'S435\'");
                    bool temp138;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp139;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,Kind0x01,ou" +
                            "t _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.Kind0x01, out temp138, out temp139);
                    this.Manager.Comment("reaching state \'S523\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp138, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S523");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp139, "error of RopGetPropertyIdsFromNamesMethod, state S523");
                    this.Manager.Comment("reaching state \'S611\'");
                    goto label32;
                }
                throw new InvalidOperationException("never reached");
            label32:
;
                goto label33;
            }
            if ((temp141 == 1)) {
                this.Manager.Comment("reaching state \'S127\'");
                goto label33;
            }
            throw new InvalidOperationException("never reached");
        label33:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite16CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S39");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite16CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S371");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite16CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S371");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite16CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S39");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite17() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite17");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp142;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp142);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp142);
            this.Manager.Comment("reaching state \'S5\'");
            int temp151 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite17CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite17CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp151 == 0)) {
                this.Manager.Comment("reaching state \'S92\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S178\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S222\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S266\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S310\'");
                bool temp143;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp143);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp143);
                this.Manager.Comment("reaching state \'S354\'");
                int temp150 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite17CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite17CheckRequirementEnabledChecker1)));
                if ((temp150 == 0)) {
                    this.Manager.Comment("reaching state \'S400\'");
                    bool temp144;
                    bool temp145;
                    bool temp146;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(NoStrings,False,out _,out _,ou" +
                            "t _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags)(1)), false, out temp144, out temp145, out temp146);
                    this.Manager.Checkpoint("MS-OXCPRPT_R876");
                    this.Manager.Comment("reaching state \'S488\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out False,out True,out False" +
                            "]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp144, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S488");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp145, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S488");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp146, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S488");
                    this.Manager.Comment("reaching state \'S576\'");
                    goto label34;
                }
                if ((temp150 == 1)) {
                    this.Manager.Comment("reaching state \'S401\'");
                    bool temp147;
                    bool temp148;
                    bool temp149;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(NoStrings,False,out _,out _,ou" +
                            "t _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags)(1)), false, out temp147, out temp148, out temp149);
                    this.Manager.Checkpoint("MS-OXCPRPT_R876");
                    this.Manager.Comment("reaching state \'S489\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out False,out True,out False" +
                            "]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp147, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S489");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp148, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S489");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp149, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S489");
                    this.Manager.Comment("reaching state \'S577\'");
                    goto label34;
                }
                throw new InvalidOperationException("never reached");
            label34:
;
                goto label35;
            }
            if ((temp151 == 1)) {
                this.Manager.Comment("reaching state \'S93\'");
                goto label35;
            }
            throw new InvalidOperationException("never reached");
        label35:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite17CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite17CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S354");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite17CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S354");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite17CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
        
        #region Test Starting in S40
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite18() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite18");
            this.Manager.Comment("reaching state \'S40\'");
            bool temp152;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp152);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp152);
            this.Manager.Comment("reaching state \'S41\'");
            int temp159 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite18CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite18CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp159 == 0)) {
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S196\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S240\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S284\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S328\'");
                bool temp153;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp153);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp153);
                this.Manager.Comment("reaching state \'S372\'");
                int temp158 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite18CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite18CheckRequirementEnabledChecker1)));
                if ((temp158 == 0)) {
                    this.Manager.Comment("reaching state \'S436\'");
                    bool temp154;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp155;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,False,NoConstrai" +
                            "nt,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, false, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp154, out temp155);
                    this.Manager.Checkpoint("MS-OXCPRPT_R628");
                    this.Manager.Comment("reaching state \'S524\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp154, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S524");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp155, "error of RopGetPropertyIdsFromNamesMethod, state S524");
                    this.Manager.Comment("reaching state \'S612\'");
                    goto label36;
                }
                if ((temp158 == 1)) {
                    this.Manager.Comment("reaching state \'S437\'");
                    bool temp156;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp157;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,False,NoConstrai" +
                            "nt,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, false, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp156, out temp157);
                    this.Manager.Checkpoint("MS-OXCPRPT_R628");
                    this.Manager.Comment("reaching state \'S525\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp156, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S525");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp157, "error of RopGetPropertyIdsFromNamesMethod, state S525");
                    this.Manager.Comment("reaching state \'S613\'");
                    goto label36;
                }
                throw new InvalidOperationException("never reached");
            label36:
;
                goto label37;
            }
            if ((temp159 == 1)) {
                this.Manager.Comment("reaching state \'S129\'");
                goto label37;
            }
            throw new InvalidOperationException("never reached");
        label37:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite18CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S41");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite18CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S372");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite18CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S372");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite18CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S41");
        }
        #endregion
        
        #region Test Starting in S42
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite19() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite19");
            this.Manager.Comment("reaching state \'S42\'");
            bool temp160;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp160);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp160);
            this.Manager.Comment("reaching state \'S43\'");
            int temp167 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite19CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite19CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp167 == 0)) {
                this.Manager.Comment("reaching state \'S130\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S197\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S241\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S285\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S329\'");
                bool temp161;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp161);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp161);
                this.Manager.Comment("reaching state \'S373\'");
                int temp166 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite19CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite19CheckRequirementEnabledChecker1)));
                if ((temp166 == 0)) {
                    this.Manager.Comment("reaching state \'S438\'");
                    bool temp162;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp163;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,False,False,NoConstra" +
                            "int,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, false, false, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp162, out temp163);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S526\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp162, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S526");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp163, "error of RopGetPropertyIdsFromNamesMethod, state S526");
                    this.Manager.Comment("reaching state \'S614\'");
                    goto label38;
                }
                if ((temp166 == 1)) {
                    this.Manager.Comment("reaching state \'S439\'");
                    bool temp164;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp165;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,False,False,NoConstra" +
                            "int,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, false, false, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp164, out temp165);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S527\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp164, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S527");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp165, "error of RopGetPropertyIdsFromNamesMethod, state S527");
                    this.Manager.Comment("reaching state \'S615\'");
                    goto label38;
                }
                throw new InvalidOperationException("never reached");
            label38:
;
                goto label39;
            }
            if ((temp167 == 1)) {
                this.Manager.Comment("reaching state \'S131\'");
                goto label39;
            }
            throw new InvalidOperationException("never reached");
        label39:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite19CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S43");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite19CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S373");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite19CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S373");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite19CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S43");
        }
        #endregion
        
        #region Test Starting in S44
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite20() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite20");
            this.Manager.Comment("reaching state \'S44\'");
            bool temp168;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp168);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp168);
            this.Manager.Comment("reaching state \'S45\'");
            int temp177 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite20CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite20CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp177 == 0)) {
                this.Manager.Comment("reaching state \'S132\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S198\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S242\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S286\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S330\'");
                bool temp169;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp169);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp169);
                this.Manager.Comment("reaching state \'S374\'");
                int temp176 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite20CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite20CheckRequirementEnabledChecker1)));
                if ((temp176 == 0)) {
                    this.Manager.Comment("reaching state \'S440\'");
                    bool temp170;
                    bool temp171;
                    bool temp172;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(NoIds,True,out _,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags.NoIds, true, out temp170, out temp171, out temp172);
                    this.Manager.Checkpoint("MS-OXCPRPT_R877");
                    this.Manager.Checkpoint("MS-OXCPRPT_R878");
                    this.Manager.Comment("reaching state \'S528\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out True,out False,out True]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp170, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S528");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp171, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S528");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp172, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S528");
                    this.Manager.Comment("reaching state \'S616\'");
                    goto label40;
                }
                if ((temp176 == 1)) {
                    this.Manager.Comment("reaching state \'S441\'");
                    bool temp173;
                    bool temp174;
                    bool temp175;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(NoIds,True,out _,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags.NoIds, true, out temp173, out temp174, out temp175);
                    this.Manager.Checkpoint("MS-OXCPRPT_R877");
                    this.Manager.Checkpoint("MS-OXCPRPT_R878");
                    this.Manager.Comment("reaching state \'S529\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out True,out False,out True]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp173, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S529");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp174, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S529");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp175, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S529");
                    this.Manager.Comment("reaching state \'S617\'");
                    goto label40;
                }
                throw new InvalidOperationException("never reached");
            label40:
;
                goto label41;
            }
            if ((temp177 == 1)) {
                this.Manager.Comment("reaching state \'S133\'");
                goto label41;
            }
            throw new InvalidOperationException("never reached");
        label41:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite20CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S45");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite20CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S374");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite20CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S374");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite20CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S45");
        }
        #endregion
        
        #region Test Starting in S46
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite21() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite21");
            this.Manager.Comment("reaching state \'S46\'");
            bool temp178;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp178);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp178);
            this.Manager.Comment("reaching state \'S47\'");
            int temp187 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite21CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite21CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp187 == 0)) {
                this.Manager.Comment("reaching state \'S134\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S199\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S243\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S287\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S331\'");
                bool temp179;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp179);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp179);
                this.Manager.Comment("reaching state \'S375\'");
                int temp186 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite21CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite21CheckRequirementEnabledChecker1)));
                if ((temp186 == 0)) {
                    this.Manager.Comment("reaching state \'S442\'");
                    bool temp180;
                    bool temp181;
                    bool temp182;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(OtherValue,False,out _,out _,o" +
                            "ut _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags.OtherValue, false, out temp180, out temp181, out temp182);
                    this.Manager.Comment("reaching state \'S530\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out False,out False,out Fals" +
                            "e]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp180, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S530");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp181, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S530");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp182, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S530");
                    this.Manager.Comment("reaching state \'S618\'");
                    goto label42;
                }
                if ((temp186 == 1)) {
                    this.Manager.Comment("reaching state \'S443\'");
                    bool temp183;
                    bool temp184;
                    bool temp185;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(OtherValue,False,out _,out _,o" +
                            "ut _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags.OtherValue, false, out temp183, out temp184, out temp185);
                    this.Manager.Comment("reaching state \'S531\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out False,out False,out Fals" +
                            "e]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp183, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S531");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp184, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S531");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp185, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S531");
                    this.Manager.Comment("reaching state \'S619\'");
                    goto label42;
                }
                throw new InvalidOperationException("never reached");
            label42:
;
                goto label43;
            }
            if ((temp187 == 1)) {
                this.Manager.Comment("reaching state \'S135\'");
                goto label43;
            }
            throw new InvalidOperationException("never reached");
        label43:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite21CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S47");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite21CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S375");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite21CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S375");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite21CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S47");
        }
        #endregion
        
        #region Test Starting in S48
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite22() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite22");
            this.Manager.Comment("reaching state \'S48\'");
            bool temp188;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp188);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp188);
            this.Manager.Comment("reaching state \'S49\'");
            int temp197 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite22CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite22CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp197 == 0)) {
                this.Manager.Comment("reaching state \'S136\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S200\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S244\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S288\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S332\'");
                bool temp189;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp189);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp189);
                this.Manager.Comment("reaching state \'S376\'");
                int temp196 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite22CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite22CheckRequirementEnabledChecker1)));
                if ((temp196 == 0)) {
                    this.Manager.Comment("reaching state \'S444\'");
                    bool temp190;
                    bool temp191;
                    bool temp192;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(NoStrings,False,out _,out _,ou" +
                            "t _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags)(1)), false, out temp190, out temp191, out temp192);
                    this.Manager.Checkpoint("MS-OXCPRPT_R876");
                    this.Manager.Comment("reaching state \'S532\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out False,out True,out False" +
                            "]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp190, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S532");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp191, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S532");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp192, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S532");
                    this.Manager.Comment("reaching state \'S620\'");
                    goto label44;
                }
                if ((temp196 == 1)) {
                    this.Manager.Comment("reaching state \'S445\'");
                    bool temp193;
                    bool temp194;
                    bool temp195;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(NoStrings,False,out _,out _,ou" +
                            "t _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags)(1)), false, out temp193, out temp194, out temp195);
                    this.Manager.Checkpoint("MS-OXCPRPT_R876");
                    this.Manager.Comment("reaching state \'S533\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out False,out True,out False" +
                            "]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp193, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S533");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp194, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S533");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp195, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S533");
                    this.Manager.Comment("reaching state \'S621\'");
                    goto label44;
                }
                throw new InvalidOperationException("never reached");
            label44:
;
                goto label45;
            }
            if ((temp197 == 1)) {
                this.Manager.Comment("reaching state \'S137\'");
                goto label45;
            }
            throw new InvalidOperationException("never reached");
        label45:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite22CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S49");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite22CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S376");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite22CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S376");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite22CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S49");
        }
        #endregion
        
        #region Test Starting in S50
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite23() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite23");
            this.Manager.Comment("reaching state \'S50\'");
            bool temp198;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp198);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp198);
            this.Manager.Comment("reaching state \'S51\'");
            int temp201 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite23CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite23CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp201 == 0)) {
                this.Manager.Comment("reaching state \'S138\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S201\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S245\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S289\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S333\'");
                bool temp199;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp199);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp199);
                this.Manager.Comment("reaching state \'S377\'");
                int temp200 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite23CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite23CheckRequirementEnabledChecker1)));
                if ((temp200 == 0)) {
                    this.Manager.Comment("reaching state \'S446\'");
                    this.Manager.Comment("executing step \'call RopGetPropertiesListMethod()\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesListMethod();
                    this.Manager.Comment("reaching state \'S534\'");
                    this.Manager.Comment("checking step \'return RopGetPropertiesListMethod\'");
                    this.Manager.Comment("reaching state \'S622\'");
                    goto label46;
                }
                if ((temp200 == 1)) {
                    this.Manager.Comment("reaching state \'S447\'");
                    this.Manager.Comment("executing step \'call RopGetPropertiesListMethod()\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesListMethod();
                    this.Manager.Comment("reaching state \'S535\'");
                    this.Manager.Comment("checking step \'return RopGetPropertiesListMethod\'");
                    this.Manager.Comment("reaching state \'S623\'");
                    goto label46;
                }
                throw new InvalidOperationException("never reached");
            label46:
;
                goto label47;
            }
            if ((temp201 == 1)) {
                this.Manager.Comment("reaching state \'S139\'");
                goto label47;
            }
            throw new InvalidOperationException("never reached");
        label47:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite23CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S51");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite23CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S377");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite23CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S377");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite23CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S51");
        }
        #endregion
        
        #region Test Starting in S52
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite24() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite24");
            this.Manager.Comment("reaching state \'S52\'");
            bool temp202;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp202);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp202);
            this.Manager.Comment("reaching state \'S53\'");
            int temp209 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite24CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite24CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp209 == 0)) {
                this.Manager.Comment("reaching state \'S140\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S202\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S246\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S290\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S334\'");
                bool temp203;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp203);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp203);
                this.Manager.Comment("reaching state \'S378\'");
                int temp208 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite24CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite24CheckRequirementEnabledChecker1)));
                if ((temp208 == 0)) {
                    this.Manager.Comment("reaching state \'S448\'");
                    bool temp204;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp205;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,False,True,NoConstrai" +
                            "nt,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, false, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp204, out temp205);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S536\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp204, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S536");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp205, "error of RopGetPropertyIdsFromNamesMethod, state S536");
                    this.Manager.Comment("reaching state \'S624\'");
                    goto label48;
                }
                if ((temp208 == 1)) {
                    this.Manager.Comment("reaching state \'S449\'");
                    bool temp206;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp207;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,False,True,NoConstrai" +
                            "nt,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, false, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp206, out temp207);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S537\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp206, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S537");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp207, "error of RopGetPropertyIdsFromNamesMethod, state S537");
                    this.Manager.Comment("reaching state \'S625\'");
                    goto label48;
                }
                throw new InvalidOperationException("never reached");
            label48:
;
                goto label49;
            }
            if ((temp209 == 1)) {
                this.Manager.Comment("reaching state \'S141\'");
                goto label49;
            }
            throw new InvalidOperationException("never reached");
        label49:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite24CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S53");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite24CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S378");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite24CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S378");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite24CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S53");
        }
        #endregion
        
        #region Test Starting in S54
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite25() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite25");
            this.Manager.Comment("reaching state \'S54\'");
            bool temp210;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp210);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp210);
            this.Manager.Comment("reaching state \'S55\'");
            int temp217 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite25CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite25CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp217 == 0)) {
                this.Manager.Comment("reaching state \'S142\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S203\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S247\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S291\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S335\'");
                bool temp211;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp211);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp211);
                this.Manager.Comment("reaching state \'S379\'");
                int temp216 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite25CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite25CheckRequirementEnabledChecker1)));
                if ((temp216 == 0)) {
                    this.Manager.Comment("reaching state \'S450\'");
                    bool temp212;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp213;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(True,False,True,NoConstrain" +
                            "t,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(true, false, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp212, out temp213);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S538\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp212, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S538");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp213, "error of RopGetPropertyIdsFromNamesMethod, state S538");
                    this.Manager.Comment("reaching state \'S626\'");
                    goto label50;
                }
                if ((temp216 == 1)) {
                    this.Manager.Comment("reaching state \'S451\'");
                    bool temp214;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp215;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(True,False,True,NoConstrain" +
                            "t,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(true, false, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp214, out temp215);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S539\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp214, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S539");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp215, "error of RopGetPropertyIdsFromNamesMethod, state S539");
                    this.Manager.Comment("reaching state \'S627\'");
                    goto label50;
                }
                throw new InvalidOperationException("never reached");
            label50:
;
                goto label51;
            }
            if ((temp217 == 1)) {
                this.Manager.Comment("reaching state \'S143\'");
                goto label51;
            }
            throw new InvalidOperationException("never reached");
        label51:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite25CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S55");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite25CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S379");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite25CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S379");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite25CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S55");
        }
        #endregion
        
        #region Test Starting in S56
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite26() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite26");
            this.Manager.Comment("reaching state \'S56\'");
            bool temp218;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp218);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp218);
            this.Manager.Comment("reaching state \'S57\'");
            int temp225 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite26CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite26CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp225 == 0)) {
                this.Manager.Comment("reaching state \'S144\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S204\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S248\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S292\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S336\'");
                bool temp219;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp219);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp219);
                this.Manager.Comment("reaching state \'S380\'");
                int temp224 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite26CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite26CheckRequirementEnabledChecker1)));
                if ((temp224 == 0)) {
                    this.Manager.Comment("reaching state \'S452\'");
                    bool temp220;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp221;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,NoConstrain" +
                            "t,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp220, out temp221);
                    this.Manager.Comment("reaching state \'S540\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp220, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S540");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp221, "error of RopGetPropertyIdsFromNamesMethod, state S540");
                    this.Manager.Comment("reaching state \'S628\'");
                    goto label52;
                }
                if ((temp224 == 1)) {
                    this.Manager.Comment("reaching state \'S453\'");
                    bool temp222;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp223;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,NoConstrain" +
                            "t,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp222, out temp223);
                    this.Manager.Comment("reaching state \'S541\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp222, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S541");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp223, "error of RopGetPropertyIdsFromNamesMethod, state S541");
                    this.Manager.Comment("reaching state \'S629\'");
                    goto label52;
                }
                throw new InvalidOperationException("never reached");
            label52:
;
                goto label53;
            }
            if ((temp225 == 1)) {
                this.Manager.Comment("reaching state \'S145\'");
                goto label53;
            }
            throw new InvalidOperationException("never reached");
        label53:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite26CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S57");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite26CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S380");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite26CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S380");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite26CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S57");
        }
        #endregion
        
        #region Test Starting in S58
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite27() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite27");
            this.Manager.Comment("reaching state \'S58\'");
            bool temp226;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp226);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp226);
            this.Manager.Comment("reaching state \'S59\'");
            int temp233 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite27CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite27CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp233 == 0)) {
                this.Manager.Comment("reaching state \'S146\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S205\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S249\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S293\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S337\'");
                bool temp227;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp227);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp227);
                this.Manager.Comment("reaching state \'S381\'");
                int temp232 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite27CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite27CheckRequirementEnabledChecker1)));
                if ((temp232 == 0)) {
                    this.Manager.Comment("reaching state \'S454\'");
                    bool temp228;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp229;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,PS_MAPIAndK" +
                            "ind0x00,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName)(0)), out temp228, out temp229);
                    this.Manager.Comment("reaching state \'S542\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp228, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S542");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp229, "error of RopGetPropertyIdsFromNamesMethod, state S542");
                    this.Manager.Comment("reaching state \'S630\'");
                    goto label54;
                }
                if ((temp232 == 1)) {
                    this.Manager.Comment("reaching state \'S455\'");
                    bool temp230;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp231;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,PS_MAPIAndK" +
                            "ind0x00,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName)(0)), out temp230, out temp231);
                    this.Manager.Comment("reaching state \'S543\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp230, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S543");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp231, "error of RopGetPropertyIdsFromNamesMethod, state S543");
                    this.Manager.Comment("reaching state \'S631\'");
                    goto label54;
                }
                throw new InvalidOperationException("never reached");
            label54:
;
                goto label55;
            }
            if ((temp233 == 1)) {
                this.Manager.Comment("reaching state \'S147\'");
                goto label55;
            }
            throw new InvalidOperationException("never reached");
        label55:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite27CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S59");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite27CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S381");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite27CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S381");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite27CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S59");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite28() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite28");
            this.Manager.Comment("reaching state \'S6\'");
            bool temp234;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp234);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp234);
            this.Manager.Comment("reaching state \'S7\'");
            int temp237 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite28CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite28CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp237 == 0)) {
                this.Manager.Comment("reaching state \'S94\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S179\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S223\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S267\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S311\'");
                bool temp235;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp235);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp235);
                this.Manager.Comment("reaching state \'S355\'");
                int temp236 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite28CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite28CheckRequirementEnabledChecker1)));
                if ((temp236 == 0)) {
                    this.Manager.Comment("reaching state \'S402\'");
                    this.Manager.Comment("executing step \'call RopGetPropertiesListMethod()\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesListMethod();
                    this.Manager.Comment("reaching state \'S490\'");
                    this.Manager.Comment("checking step \'return RopGetPropertiesListMethod\'");
                    this.Manager.Comment("reaching state \'S578\'");
                    goto label56;
                }
                if ((temp236 == 1)) {
                    this.Manager.Comment("reaching state \'S403\'");
                    this.Manager.Comment("executing step \'call RopGetPropertiesListMethod()\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesListMethod();
                    this.Manager.Comment("reaching state \'S491\'");
                    this.Manager.Comment("checking step \'return RopGetPropertiesListMethod\'");
                    this.Manager.Comment("reaching state \'S579\'");
                    goto label56;
                }
                throw new InvalidOperationException("never reached");
            label56:
;
                goto label57;
            }
            if ((temp237 == 1)) {
                this.Manager.Comment("reaching state \'S95\'");
                goto label57;
            }
            throw new InvalidOperationException("never reached");
        label57:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite28CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite28CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S355");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite28CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S355");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite28CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        #endregion
        
        #region Test Starting in S60
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite29() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite29");
            this.Manager.Comment("reaching state \'S60\'");
            bool temp238;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp238);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp238);
            this.Manager.Comment("reaching state \'S61\'");
            int temp245 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite29CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite29CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp245 == 0)) {
                this.Manager.Comment("reaching state \'S148\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S206\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S250\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S294\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S338\'");
                bool temp239;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp239);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp239);
                this.Manager.Comment("reaching state \'S382\'");
                int temp244 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite29CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite29CheckRequirementEnabledChecker1)));
                if ((temp244 == 0)) {
                    this.Manager.Comment("reaching state \'S456\'");
                    bool temp240;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp241;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,Kind0x01,ou" +
                            "t _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.Kind0x01, out temp240, out temp241);
                    this.Manager.Comment("reaching state \'S544\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp240, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S544");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp241, "error of RopGetPropertyIdsFromNamesMethod, state S544");
                    this.Manager.Comment("reaching state \'S632\'");
                    goto label58;
                }
                if ((temp244 == 1)) {
                    this.Manager.Comment("reaching state \'S457\'");
                    bool temp242;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp243;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,Kind0x01,ou" +
                            "t _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.Kind0x01, out temp242, out temp243);
                    this.Manager.Comment("reaching state \'S545\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp242, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S545");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp243, "error of RopGetPropertyIdsFromNamesMethod, state S545");
                    this.Manager.Comment("reaching state \'S633\'");
                    goto label58;
                }
                throw new InvalidOperationException("never reached");
            label58:
;
                goto label59;
            }
            if ((temp245 == 1)) {
                this.Manager.Comment("reaching state \'S149\'");
                goto label59;
            }
            throw new InvalidOperationException("never reached");
        label59:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite29CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S61");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite29CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S382");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite29CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S382");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite29CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S61");
        }
        #endregion
        
        #region Test Starting in S62
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite30() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite30");
            this.Manager.Comment("reaching state \'S62\'");
            bool temp246;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp246);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp246);
            this.Manager.Comment("reaching state \'S63\'");
            int temp253 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite30CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite30CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp253 == 0)) {
                this.Manager.Comment("reaching state \'S150\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S207\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S251\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S295\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S339\'");
                bool temp247;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp247);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp247);
                this.Manager.Comment("reaching state \'S383\'");
                int temp252 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite30CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite30CheckRequirementEnabledChecker1)));
                if ((temp252 == 0)) {
                    this.Manager.Comment("reaching state \'S458\'");
                    bool temp248;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp249;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,False,NoConstrai" +
                            "nt,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, false, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp248, out temp249);
                    this.Manager.Checkpoint("MS-OXCPRPT_R628");
                    this.Manager.Comment("reaching state \'S546\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp248, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S546");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp249, "error of RopGetPropertyIdsFromNamesMethod, state S546");
                    this.Manager.Comment("reaching state \'S634\'");
                    goto label60;
                }
                if ((temp252 == 1)) {
                    this.Manager.Comment("reaching state \'S459\'");
                    bool temp250;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp251;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,False,NoConstrai" +
                            "nt,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, false, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp250, out temp251);
                    this.Manager.Checkpoint("MS-OXCPRPT_R628");
                    this.Manager.Comment("reaching state \'S547\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp250, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S547");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp251, "error of RopGetPropertyIdsFromNamesMethod, state S547");
                    this.Manager.Comment("reaching state \'S635\'");
                    goto label60;
                }
                throw new InvalidOperationException("never reached");
            label60:
;
                goto label61;
            }
            if ((temp253 == 1)) {
                this.Manager.Comment("reaching state \'S151\'");
                goto label61;
            }
            throw new InvalidOperationException("never reached");
        label61:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite30CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S63");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite30CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S383");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite30CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S383");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite30CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S63");
        }
        #endregion
        
        #region Test Starting in S64
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite31() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite31");
            this.Manager.Comment("reaching state \'S64\'");
            bool temp254;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp254);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp254);
            this.Manager.Comment("reaching state \'S65\'");
            int temp261 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite31CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite31CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp261 == 0)) {
                this.Manager.Comment("reaching state \'S152\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S208\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S252\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S296\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S340\'");
                bool temp255;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp255);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp255);
                this.Manager.Comment("reaching state \'S384\'");
                int temp260 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite31CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite31CheckRequirementEnabledChecker1)));
                if ((temp260 == 0)) {
                    this.Manager.Comment("reaching state \'S460\'");
                    bool temp256;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp257;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,False,False,NoConstra" +
                            "int,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, false, false, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp256, out temp257);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S548\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp256, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S548");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp257, "error of RopGetPropertyIdsFromNamesMethod, state S548");
                    this.Manager.Comment("reaching state \'S636\'");
                    goto label62;
                }
                if ((temp260 == 1)) {
                    this.Manager.Comment("reaching state \'S461\'");
                    bool temp258;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp259;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,False,False,NoConstra" +
                            "int,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, false, false, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp258, out temp259);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S549\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp258, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S549");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp259, "error of RopGetPropertyIdsFromNamesMethod, state S549");
                    this.Manager.Comment("reaching state \'S637\'");
                    goto label62;
                }
                throw new InvalidOperationException("never reached");
            label62:
;
                goto label63;
            }
            if ((temp261 == 1)) {
                this.Manager.Comment("reaching state \'S153\'");
                goto label63;
            }
            throw new InvalidOperationException("never reached");
        label63:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite31CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S65");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite31CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S384");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite31CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S384");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite31CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S65");
        }
        #endregion
        
        #region Test Starting in S66
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite32() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite32");
            this.Manager.Comment("reaching state \'S66\'");
            bool temp262;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp262);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp262);
            this.Manager.Comment("reaching state \'S67\'");
            int temp268 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite32CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite32CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp268 == 0)) {
                this.Manager.Comment("reaching state \'S154\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S209\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S253\'");
                this.Manager.Comment("executing step \'call GetObject(Logon,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S297\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S341\'");
                bool temp263;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp263);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp263);
                this.Manager.Comment("reaching state \'S385\'");
                int temp267 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite32CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite32CheckRequirementEnabledChecker1)));
                if ((temp267 == 0)) {
                    this.Manager.Comment("reaching state \'S462\'");
                    this.Manager.Comment("executing step \'call RopGetPropertiesListMethod()\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesListMethod();
                    this.Manager.Comment("reaching state \'S550\'");
                    this.Manager.Comment("checking step \'return RopGetPropertiesListMethod\'");
                    this.Manager.Comment("reaching state \'S638\'");
                    goto label64;
                }
                if ((temp267 == 1)) {
                    this.Manager.Comment("reaching state \'S463\'");
                    bool temp264;
                    bool temp265;
                    bool temp266;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(NoIds,True,out _,out _,out _)\'" +
                            "");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags.NoIds, true, out temp264, out temp265, out temp266);
                    this.Manager.Checkpoint("MS-OXCPRPT_R877");
                    this.Manager.Checkpoint("MS-OXCPRPT_R878");
                    this.Manager.Comment("reaching state \'S551\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out True,out False,out True]" +
                            "\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp264, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S551");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp265, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S551");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp266, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S551");
                    this.Manager.Comment("reaching state \'S639\'");
                    goto label64;
                }
                throw new InvalidOperationException("never reached");
            label64:
;
                goto label65;
            }
            if ((temp268 == 1)) {
                this.Manager.Comment("reaching state \'S155\'");
                goto label65;
            }
            throw new InvalidOperationException("never reached");
        label65:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite32CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S67");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite32CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S385");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite32CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S385");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite32CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S67");
        }
        #endregion
        
        #region Test Starting in S68
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite33() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite33");
            this.Manager.Comment("reaching state \'S68\'");
            bool temp269;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp269);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp269);
            this.Manager.Comment("reaching state \'S69\'");
            int temp275 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite33CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite33CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp275 == 0)) {
                this.Manager.Comment("reaching state \'S156\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S210\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S254\'");
                this.Manager.Comment("executing step \'call GetObject(Logon,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S298\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S342\'");
                bool temp270;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp270);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp270);
                this.Manager.Comment("reaching state \'S386\'");
                int temp274 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite33CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite33CheckRequirementEnabledChecker1)));
                if ((temp274 == 0)) {
                    this.Manager.Comment("reaching state \'S464\'");
                    this.Manager.Comment("executing step \'call RopGetPropertiesListMethod()\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesListMethod();
                    this.Manager.Comment("reaching state \'S552\'");
                    this.Manager.Comment("checking step \'return RopGetPropertiesListMethod\'");
                    this.Manager.Comment("reaching state \'S640\'");
                    goto label66;
                }
                if ((temp274 == 1)) {
                    this.Manager.Comment("reaching state \'S465\'");
                    bool temp271;
                    bool temp272;
                    bool temp273;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(OtherValue,False,out _,out _,o" +
                            "ut _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags.OtherValue, false, out temp271, out temp272, out temp273);
                    this.Manager.Comment("reaching state \'S553\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out False,out False,out Fals" +
                            "e]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp271, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S553");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp272, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S553");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp273, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S553");
                    this.Manager.Comment("reaching state \'S641\'");
                    goto label66;
                }
                throw new InvalidOperationException("never reached");
            label66:
;
                goto label67;
            }
            if ((temp275 == 1)) {
                this.Manager.Comment("reaching state \'S157\'");
                goto label67;
            }
            throw new InvalidOperationException("never reached");
        label67:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite33CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S69");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite33CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S386");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite33CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S386");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite33CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S69");
        }
        #endregion
        
        #region Test Starting in S70
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite34() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite34");
            this.Manager.Comment("reaching state \'S70\'");
            bool temp276;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp276);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp276);
            this.Manager.Comment("reaching state \'S71\'");
            int temp282 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite34CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite34CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp282 == 0)) {
                this.Manager.Comment("reaching state \'S158\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S211\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S255\'");
                this.Manager.Comment("executing step \'call GetObject(Logon,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S299\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S343\'");
                bool temp277;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp277);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp277);
                this.Manager.Comment("reaching state \'S387\'");
                int temp281 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite34CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite34CheckRequirementEnabledChecker1)));
                if ((temp281 == 0)) {
                    this.Manager.Comment("reaching state \'S466\'");
                    this.Manager.Comment("executing step \'call RopGetPropertiesListMethod()\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesListMethod();
                    this.Manager.Comment("reaching state \'S554\'");
                    this.Manager.Comment("checking step \'return RopGetPropertiesListMethod\'");
                    this.Manager.Comment("reaching state \'S642\'");
                    goto label68;
                }
                if ((temp281 == 1)) {
                    this.Manager.Comment("reaching state \'S467\'");
                    bool temp278;
                    bool temp279;
                    bool temp280;
                    this.Manager.Comment("executing step \'call RopQueryNamedPropertiesMethod(NoStrings,False,out _,out _,ou" +
                            "t _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopQueryNamedPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.QueryFlags)(1)), false, out temp278, out temp279, out temp280);
                    this.Manager.Checkpoint("MS-OXCPRPT_R876");
                    this.Manager.Comment("reaching state \'S555\'");
                    this.Manager.Comment("checking step \'return RopQueryNamedPropertiesMethod/[out False,out True,out False" +
                            "]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp278, "isKind0x01Returned of RopQueryNamedPropertiesMethod, state S555");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp279, "isKind0x00Returned of RopQueryNamedPropertiesMethod, state S555");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp280, "isNamedPropertyGuidReturned of RopQueryNamedPropertiesMethod, state S555");
                    this.Manager.Comment("reaching state \'S643\'");
                    goto label68;
                }
                throw new InvalidOperationException("never reached");
            label68:
;
                goto label69;
            }
            if ((temp282 == 1)) {
                this.Manager.Comment("reaching state \'S159\'");
                goto label69;
            }
            throw new InvalidOperationException("never reached");
        label69:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite34CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S71");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite34CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S387");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite34CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S387");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite34CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S71");
        }
        #endregion
        
        #region Test Starting in S72
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite35() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite35");
            this.Manager.Comment("reaching state \'S72\'");
            bool temp283;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp283);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp283);
            this.Manager.Comment("reaching state \'S73\'");
            int temp286 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite35CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite35CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp286 == 0)) {
                this.Manager.Comment("reaching state \'S160\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S212\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S256\'");
                this.Manager.Comment("executing step \'call GetObject(Logon,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S300\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S344\'");
                bool temp284;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp284);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp284);
                this.Manager.Comment("reaching state \'S388\'");
                int temp285 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite35CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite35CheckRequirementEnabledChecker1)));
                if ((temp285 == 0)) {
                    this.Manager.Comment("reaching state \'S468\'");
                    this.Manager.Comment("executing step \'call RopGetPropertiesListMethod()\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesListMethod();
                    this.Manager.Comment("reaching state \'S556\'");
                    this.Manager.Comment("checking step \'return RopGetPropertiesListMethod\'");
                    this.Manager.Comment("reaching state \'S644\'");
                    goto label70;
                }
                if ((temp285 == 1)) {
                    this.Manager.Comment("reaching state \'S469\'");
                    this.Manager.Comment("executing step \'call RopGetPropertiesListMethod()\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesListMethod();
                    this.Manager.Comment("reaching state \'S557\'");
                    this.Manager.Comment("checking step \'return RopGetPropertiesListMethod\'");
                    this.Manager.Comment("reaching state \'S645\'");
                    goto label70;
                }
                throw new InvalidOperationException("never reached");
            label70:
;
                goto label71;
            }
            if ((temp286 == 1)) {
                this.Manager.Comment("reaching state \'S161\'");
                goto label71;
            }
            throw new InvalidOperationException("never reached");
        label71:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite35CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S73");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite35CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S388");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite35CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S388");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite35CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S73");
        }
        #endregion
        
        #region Test Starting in S74
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite36() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite36");
            this.Manager.Comment("reaching state \'S74\'");
            bool temp287;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp287);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp287);
            this.Manager.Comment("reaching state \'S75\'");
            int temp294 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite36CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite36CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp294 == 0)) {
                this.Manager.Comment("reaching state \'S162\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S213\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S257\'");
                this.Manager.Comment("executing step \'call GetObject(Logon,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S301\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S345\'");
                bool temp288;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp288);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp288);
                this.Manager.Comment("reaching state \'S389\'");
                int temp293 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite36CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite36CheckRequirementEnabledChecker1)));
                if ((temp293 == 0)) {
                    this.Manager.Comment("reaching state \'S470\'");
                    bool temp289;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp290;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,False,True,NoConstrai" +
                            "nt,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, false, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp289, out temp290);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S558\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp289, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S558");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp290, "error of RopGetPropertyIdsFromNamesMethod, state S558");
                    this.Manager.Comment("reaching state \'S646\'");
                    goto label72;
                }
                if ((temp293 == 1)) {
                    this.Manager.Comment("reaching state \'S471\'");
                    bool temp291;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp292;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,False,True,NoConstrai" +
                            "nt,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, false, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp291, out temp292);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S559\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp291, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S559");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp292, "error of RopGetPropertyIdsFromNamesMethod, state S559");
                    this.Manager.Comment("reaching state \'S647\'");
                    goto label72;
                }
                throw new InvalidOperationException("never reached");
            label72:
;
                goto label73;
            }
            if ((temp294 == 1)) {
                this.Manager.Comment("reaching state \'S163\'");
                goto label73;
            }
            throw new InvalidOperationException("never reached");
        label73:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite36CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S75");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite36CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S389");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite36CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S389");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite36CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S75");
        }
        #endregion
        
        #region Test Starting in S76
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite37() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite37");
            this.Manager.Comment("reaching state \'S76\'");
            bool temp295;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp295);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp295);
            this.Manager.Comment("reaching state \'S77\'");
            int temp302 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite37CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite37CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp302 == 0)) {
                this.Manager.Comment("reaching state \'S164\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S214\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S258\'");
                this.Manager.Comment("executing step \'call GetObject(Logon,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S302\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S346\'");
                bool temp296;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp296);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp296);
                this.Manager.Comment("reaching state \'S390\'");
                int temp301 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite37CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite37CheckRequirementEnabledChecker1)));
                if ((temp301 == 0)) {
                    this.Manager.Comment("reaching state \'S472\'");
                    bool temp297;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp298;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(True,False,True,NoConstrain" +
                            "t,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(true, false, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp297, out temp298);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S560\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp297, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S560");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp298, "error of RopGetPropertyIdsFromNamesMethod, state S560");
                    this.Manager.Comment("reaching state \'S648\'");
                    goto label74;
                }
                if ((temp301 == 1)) {
                    this.Manager.Comment("reaching state \'S473\'");
                    bool temp299;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp300;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(True,False,True,NoConstrain" +
                            "t,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(true, false, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp299, out temp300);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S561\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp299, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S561");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp300, "error of RopGetPropertyIdsFromNamesMethod, state S561");
                    this.Manager.Comment("reaching state \'S649\'");
                    goto label74;
                }
                throw new InvalidOperationException("never reached");
            label74:
;
                goto label75;
            }
            if ((temp302 == 1)) {
                this.Manager.Comment("reaching state \'S165\'");
                goto label75;
            }
            throw new InvalidOperationException("never reached");
        label75:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite37CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S77");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite37CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S390");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite37CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S390");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite37CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S77");
        }
        #endregion
        
        #region Test Starting in S78
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite38() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite38");
            this.Manager.Comment("reaching state \'S78\'");
            bool temp303;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp303);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp303);
            this.Manager.Comment("reaching state \'S79\'");
            int temp310 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite38CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite38CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp310 == 0)) {
                this.Manager.Comment("reaching state \'S166\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S215\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S259\'");
                this.Manager.Comment("executing step \'call GetObject(Logon,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S303\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S347\'");
                bool temp304;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp304);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp304);
                this.Manager.Comment("reaching state \'S391\'");
                int temp309 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite38CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite38CheckRequirementEnabledChecker1)));
                if ((temp309 == 0)) {
                    this.Manager.Comment("reaching state \'S474\'");
                    bool temp305;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp306;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,NoConstrain" +
                            "t,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp305, out temp306);
                    this.Manager.Comment("reaching state \'S562\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp305, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S562");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp306, "error of RopGetPropertyIdsFromNamesMethod, state S562");
                    this.Manager.Comment("reaching state \'S650\'");
                    goto label76;
                }
                if ((temp309 == 1)) {
                    this.Manager.Comment("reaching state \'S475\'");
                    bool temp307;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp308;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,NoConstrain" +
                            "t,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp307, out temp308);
                    this.Manager.Comment("reaching state \'S563\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp307, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S563");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp308, "error of RopGetPropertyIdsFromNamesMethod, state S563");
                    this.Manager.Comment("reaching state \'S651\'");
                    goto label76;
                }
                throw new InvalidOperationException("never reached");
            label76:
;
                goto label77;
            }
            if ((temp310 == 1)) {
                this.Manager.Comment("reaching state \'S167\'");
                goto label77;
            }
            throw new InvalidOperationException("never reached");
        label77:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite38CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S79");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite38CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S391");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite38CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S391");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite38CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S79");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite39() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite39");
            this.Manager.Comment("reaching state \'S8\'");
            bool temp311;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp311);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp311);
            this.Manager.Comment("reaching state \'S9\'");
            int temp318 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite39CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite39CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp318 == 0)) {
                this.Manager.Comment("reaching state \'S96\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S180\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S224\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S268\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S312\'");
                bool temp312;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp312);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp312);
                this.Manager.Comment("reaching state \'S356\'");
                int temp317 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite39CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite39CheckRequirementEnabledChecker1)));
                if ((temp317 == 0)) {
                    this.Manager.Comment("reaching state \'S404\'");
                    bool temp313;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp314;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,False,True,NoConstrai" +
                            "nt,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, false, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp313, out temp314);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S492\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp313, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S492");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp314, "error of RopGetPropertyIdsFromNamesMethod, state S492");
                    this.Manager.Comment("reaching state \'S580\'");
                    goto label78;
                }
                if ((temp317 == 1)) {
                    this.Manager.Comment("reaching state \'S405\'");
                    bool temp315;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp316;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,False,True,NoConstrai" +
                            "nt,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, false, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp315, out temp316);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S493\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp315, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S493");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp316, "error of RopGetPropertyIdsFromNamesMethod, state S493");
                    this.Manager.Comment("reaching state \'S581\'");
                    goto label78;
                }
                throw new InvalidOperationException("never reached");
            label78:
;
                goto label79;
            }
            if ((temp318 == 1)) {
                this.Manager.Comment("reaching state \'S97\'");
                goto label79;
            }
            throw new InvalidOperationException("never reached");
        label79:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite39CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite39CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S356");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite39CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S356");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite39CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        #endregion
        
        #region Test Starting in S80
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite40() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite40");
            this.Manager.Comment("reaching state \'S80\'");
            bool temp319;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp319);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp319);
            this.Manager.Comment("reaching state \'S81\'");
            int temp326 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite40CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite40CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp326 == 0)) {
                this.Manager.Comment("reaching state \'S168\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S216\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S260\'");
                this.Manager.Comment("executing step \'call GetObject(Logon,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S304\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S348\'");
                bool temp320;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp320);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp320);
                this.Manager.Comment("reaching state \'S392\'");
                int temp325 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite40CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite40CheckRequirementEnabledChecker1)));
                if ((temp325 == 0)) {
                    this.Manager.Comment("reaching state \'S476\'");
                    bool temp321;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp322;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,PS_MAPIAndK" +
                            "ind0x00,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName)(0)), out temp321, out temp322);
                    this.Manager.Comment("reaching state \'S564\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp321, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S564");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp322, "error of RopGetPropertyIdsFromNamesMethod, state S564");
                    this.Manager.Comment("reaching state \'S652\'");
                    goto label80;
                }
                if ((temp325 == 1)) {
                    this.Manager.Comment("reaching state \'S477\'");
                    bool temp323;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp324;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,PS_MAPIAndK" +
                            "ind0x00,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName)(0)), out temp323, out temp324);
                    this.Manager.Comment("reaching state \'S565\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp323, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S565");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp324, "error of RopGetPropertyIdsFromNamesMethod, state S565");
                    this.Manager.Comment("reaching state \'S653\'");
                    goto label80;
                }
                throw new InvalidOperationException("never reached");
            label80:
;
                goto label81;
            }
            if ((temp326 == 1)) {
                this.Manager.Comment("reaching state \'S169\'");
                goto label81;
            }
            throw new InvalidOperationException("never reached");
        label81:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite40CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S81");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite40CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S392");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite40CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S392");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite40CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S81");
        }
        #endregion
        
        #region Test Starting in S82
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite41() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite41");
            this.Manager.Comment("reaching state \'S82\'");
            bool temp327;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp327);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp327);
            this.Manager.Comment("reaching state \'S83\'");
            int temp334 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite41CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite41CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp334 == 0)) {
                this.Manager.Comment("reaching state \'S170\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S217\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S261\'");
                this.Manager.Comment("executing step \'call GetObject(Logon,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S305\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S349\'");
                bool temp328;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp328);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp328);
                this.Manager.Comment("reaching state \'S393\'");
                int temp333 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite41CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite41CheckRequirementEnabledChecker1)));
                if ((temp333 == 0)) {
                    this.Manager.Comment("reaching state \'S478\'");
                    bool temp329;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp330;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,Kind0x01,ou" +
                            "t _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.Kind0x01, out temp329, out temp330);
                    this.Manager.Comment("reaching state \'S566\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp329, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S566");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp330, "error of RopGetPropertyIdsFromNamesMethod, state S566");
                    this.Manager.Comment("reaching state \'S654\'");
                    goto label82;
                }
                if ((temp333 == 1)) {
                    this.Manager.Comment("reaching state \'S479\'");
                    bool temp331;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp332;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,True,Kind0x01,ou" +
                            "t _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, true, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.Kind0x01, out temp331, out temp332);
                    this.Manager.Comment("reaching state \'S567\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp331, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S567");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp332, "error of RopGetPropertyIdsFromNamesMethod, state S567");
                    this.Manager.Comment("reaching state \'S655\'");
                    goto label82;
                }
                throw new InvalidOperationException("never reached");
            label82:
;
                goto label83;
            }
            if ((temp334 == 1)) {
                this.Manager.Comment("reaching state \'S171\'");
                goto label83;
            }
            throw new InvalidOperationException("never reached");
        label83:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite41CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S83");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite41CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S393");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite41CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S393");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite41CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S83");
        }
        #endregion
        
        #region Test Starting in S84
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite42() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite42");
            this.Manager.Comment("reaching state \'S84\'");
            bool temp335;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp335);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp335);
            this.Manager.Comment("reaching state \'S85\'");
            int temp342 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite42CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite42CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp342 == 0)) {
                this.Manager.Comment("reaching state \'S172\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S218\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S262\'");
                this.Manager.Comment("executing step \'call GetObject(Logon,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S306\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S350\'");
                bool temp336;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp336);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp336);
                this.Manager.Comment("reaching state \'S394\'");
                int temp341 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite42CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite42CheckRequirementEnabledChecker1)));
                if ((temp341 == 0)) {
                    this.Manager.Comment("reaching state \'S480\'");
                    bool temp337;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp338;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,False,NoConstrai" +
                            "nt,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, false, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp337, out temp338);
                    this.Manager.Checkpoint("MS-OXCPRPT_R628");
                    this.Manager.Comment("reaching state \'S568\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp337, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S568");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp338, "error of RopGetPropertyIdsFromNamesMethod, state S568");
                    this.Manager.Comment("reaching state \'S656\'");
                    goto label84;
                }
                if ((temp341 == 1)) {
                    this.Manager.Comment("reaching state \'S481\'");
                    bool temp339;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp340;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,True,False,NoConstrai" +
                            "nt,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, true, false, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp339, out temp340);
                    this.Manager.Checkpoint("MS-OXCPRPT_R628");
                    this.Manager.Comment("reaching state \'S569\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out True,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp339, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S569");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp340, "error of RopGetPropertyIdsFromNamesMethod, state S569");
                    this.Manager.Comment("reaching state \'S657\'");
                    goto label84;
                }
                throw new InvalidOperationException("never reached");
            label84:
;
                goto label85;
            }
            if ((temp342 == 1)) {
                this.Manager.Comment("reaching state \'S173\'");
                goto label85;
            }
            throw new InvalidOperationException("never reached");
        label85:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite42CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S85");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite42CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S394");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite42CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S394");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite42CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S85");
        }
        #endregion
        
        #region Test Starting in S86
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite43() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite43");
            this.Manager.Comment("reaching state \'S86\'");
            bool temp343;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp343);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp343);
            this.Manager.Comment("reaching state \'S87\'");
            int temp350 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite43CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite43CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp350 == 0)) {
                this.Manager.Comment("reaching state \'S174\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S219\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S263\'");
                this.Manager.Comment("executing step \'call GetObject(Logon,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S307\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S351\'");
                bool temp344;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(12904,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(12904, out temp344);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp344);
                this.Manager.Comment("reaching state \'S395\'");
                int temp349 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite43CheckRequirementEnabledChecker)), new ExpectedReturn(S01_GetPropertyIdQueryNameGetList_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite43CheckRequirementEnabledChecker1)));
                if ((temp349 == 0)) {
                    this.Manager.Comment("reaching state \'S482\'");
                    bool temp345;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp346;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,False,False,NoConstra" +
                            "int,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, false, false, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp345, out temp346);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S570\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp345, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S570");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp346, "error of RopGetPropertyIdsFromNamesMethod, state S570");
                    this.Manager.Comment("reaching state \'S658\'");
                    goto label86;
                }
                if ((temp349 == 1)) {
                    this.Manager.Comment("reaching state \'S483\'");
                    bool temp347;
                    Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp348;
                    this.Manager.Comment("executing step \'call RopGetPropertyIdsFromNamesMethod(False,False,False,NoConstra" +
                            "int,out _,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.RopGetPropertyIdsFromNamesMethod(false, false, false, Microsoft.Protocols.TestSuites.MS_OXCPRPT.SpecificPropertyName.NoConstraint, out temp347, out temp348);
                    this.Manager.Checkpoint("MS-OXCPRPT_R62801");
                    this.Manager.Comment("reaching state \'S571\'");
                    this.Manager.Comment("checking step \'return RopGetPropertyIdsFromNamesMethod/[out False,out None]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp347, "isCreatedEntryReturned of RopGetPropertyIdsFromNamesMethod, state S571");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp348, "error of RopGetPropertyIdsFromNamesMethod, state S571");
                    this.Manager.Comment("reaching state \'S659\'");
                    goto label86;
                }
                throw new InvalidOperationException("never reached");
            label86:
;
                goto label87;
            }
            if ((temp350 == 1)) {
                this.Manager.Comment("reaching state \'S175\'");
                goto label87;
            }
            throw new InvalidOperationException("never reached");
        label87:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite43CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S87");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite43CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S395");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite43CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S395");
        }
        
        private void MSOXCPRPT_S01_GetPropertyIdQueryNameGetList_TestSuite43CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S87");
        }
        #endregion
    }
}