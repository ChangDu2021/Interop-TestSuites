//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.36366
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCPRPT {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S04_StreamExtendedForErrorCodeTable_TestSuite : PtfTestClassBase {
        
        public S04_StreamExtendedForErrorCodeTable_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter IMS_OXCPRPTAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCPRPTAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite() {
            this.Manager.BeginTest("MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp41 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp41 == 0)) {
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S30\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S36\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S42\'");
                bool temp1;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp2;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp1, out temp2);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S48\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S48");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp2, "error of RopOpenStreamMethod, state S48");
                this.Manager.Comment("reaching state \'S54\'");
                this.Manager.Comment("executing step \'call RopReadStreamMethod(True)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReadStreamMethod(true);
                this.Manager.Comment("reaching state \'S60\'");
                this.Manager.Comment("checking step \'return RopReadStreamMethod\'");
                this.Manager.Comment("reaching state \'S64\'");
                bool temp3;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86706,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86706, out temp3);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                this.Manager.Comment("reaching state \'S68\'");
                int temp40 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker7)));
                if ((temp40 == 0)) {
                    this.Manager.Comment("reaching state \'S72\'");
                    bool temp4;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp4);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp4);
                    this.Manager.Comment("reaching state \'S80\'");
                    int temp21 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker4)));
                    if ((temp21 == 0)) {
                        this.Manager.Comment("reaching state \'S88\'");
                        bool temp5;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp5);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp5);
                        this.Manager.Comment("reaching state \'S104\'");
                        int temp12 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker3)));
                        if ((temp12 == 0)) {
                            this.Manager.Comment("reaching state \'S120\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp6;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadWrite,True,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp6);
                            this.Manager.Comment("reaching state \'S152\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp6, "error of RopWriteStreamExtendedMethod, state S152");
                            this.Manager.Comment("reaching state \'S184\'");
                            bool temp7;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp7);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S216\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp7, "isPropertyValueChanged of RopCommitStreamMethod, state S216");
                            this.Manager.Comment("reaching state \'S248\'");
                            bool temp8;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp8);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S280\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp8, "isPropertyValueChanged of RopReleaseMethod, state S280");
                            this.Manager.Comment("reaching state \'S312\'");
                            goto label0;
                        }
                        if ((temp12 == 1)) {
                            this.Manager.Comment("reaching state \'S121\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp9;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadWrite,True,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp9);
                            this.Manager.Comment("reaching state \'S153\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out ecTooBig]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.ecTooBig, temp9, "error of RopWriteStreamExtendedMethod, state S153");
                            this.Manager.Comment("reaching state \'S185\'");
                            bool temp10;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp10);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S217\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp10, "isPropertyValueChanged of RopCommitStreamMethod, state S217");
                            this.Manager.Comment("reaching state \'S249\'");
                            bool temp11;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp11);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S281\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp11, "isPropertyValueChanged of RopReleaseMethod, state S281");
                            this.Manager.Comment("reaching state \'S313\'");
                            goto label0;
                        }
                        throw new InvalidOperationException("never reached");
                    label0:
;
                        goto label2;
                    }
                    if ((temp21 == 1)) {
                        this.Manager.Comment("reaching state \'S89\'");
                        bool temp13;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp13);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp13);
                        this.Manager.Comment("reaching state \'S105\'");
                        int temp20 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker5)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker6)));
                        if ((temp20 == 0)) {
                            this.Manager.Comment("reaching state \'S122\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp14;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadWrite,True,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp14);
                            this.Manager.Comment("reaching state \'S154\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out ecTooBig]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.ecTooBig, temp14, "error of RopWriteStreamExtendedMethod, state S154");
                            this.Manager.Comment("reaching state \'S186\'");
                            bool temp15;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp15);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S218\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp15, "isPropertyValueChanged of RopCommitStreamMethod, state S218");
                            this.Manager.Comment("reaching state \'S250\'");
                            bool temp16;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp16);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S282\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp16, "isPropertyValueChanged of RopReleaseMethod, state S282");
                            this.Manager.Comment("reaching state \'S314\'");
                            goto label1;
                        }
                        if ((temp20 == 1)) {
                            this.Manager.Comment("reaching state \'S123\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp17;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadWrite,True,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp17);
                            this.Manager.Comment("reaching state \'S155\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out ecTooBig]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.ecTooBig, temp17, "error of RopWriteStreamExtendedMethod, state S155");
                            this.Manager.Comment("reaching state \'S187\'");
                            bool temp18;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp18);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S219\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp18, "isPropertyValueChanged of RopCommitStreamMethod, state S219");
                            this.Manager.Comment("reaching state \'S251\'");
                            bool temp19;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp19);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S283\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp19, "isPropertyValueChanged of RopReleaseMethod, state S283");
                            this.Manager.Comment("reaching state \'S315\'");
                            goto label1;
                        }
                        throw new InvalidOperationException("never reached");
                    label1:
;
                        goto label2;
                    }
                    throw new InvalidOperationException("never reached");
                label2:
;
                    goto label6;
                }
                if ((temp40 == 1)) {
                    this.Manager.Comment("reaching state \'S73\'");
                    bool temp22;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp22);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp22);
                    this.Manager.Comment("reaching state \'S81\'");
                    int temp39 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker8)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker11)));
                    if ((temp39 == 0)) {
                        this.Manager.Comment("reaching state \'S90\'");
                        bool temp23;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp23);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp23);
                        this.Manager.Comment("reaching state \'S106\'");
                        int temp30 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker9)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker10)));
                        if ((temp30 == 0)) {
                            this.Manager.Comment("reaching state \'S124\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp24;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadWrite,True,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp24);
                            this.Manager.Comment("reaching state \'S156\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out StreamSizeError]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.StreamSizeError, temp24, "error of RopWriteStreamExtendedMethod, state S156");
                            this.Manager.Comment("reaching state \'S188\'");
                            bool temp25;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp25);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S220\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp25, "isPropertyValueChanged of RopCommitStreamMethod, state S220");
                            this.Manager.Comment("reaching state \'S252\'");
                            bool temp26;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp26);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S284\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp26, "isPropertyValueChanged of RopReleaseMethod, state S284");
                            this.Manager.Comment("reaching state \'S316\'");
                            goto label3;
                        }
                        if ((temp30 == 1)) {
                            this.Manager.Comment("reaching state \'S125\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp27;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadWrite,True,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp27);
                            this.Manager.Comment("reaching state \'S157\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out ecTooBig]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.ecTooBig, temp27, "error of RopWriteStreamExtendedMethod, state S157");
                            this.Manager.Comment("reaching state \'S189\'");
                            bool temp28;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp28);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S221\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp28, "isPropertyValueChanged of RopCommitStreamMethod, state S221");
                            this.Manager.Comment("reaching state \'S253\'");
                            bool temp29;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp29);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S285\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp29, "isPropertyValueChanged of RopReleaseMethod, state S285");
                            this.Manager.Comment("reaching state \'S317\'");
                            goto label3;
                        }
                        throw new InvalidOperationException("never reached");
                    label3:
;
                        goto label5;
                    }
                    if ((temp39 == 1)) {
                        this.Manager.Comment("reaching state \'S91\'");
                        bool temp31;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp31);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp31);
                        this.Manager.Comment("reaching state \'S107\'");
                        int temp38 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker12)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker13)));
                        if ((temp38 == 0)) {
                            this.Manager.Comment("reaching state \'S126\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp32;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadWrite,True,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp32);
                            this.Manager.Comment("reaching state \'S158\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out ecTooBig]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.ecTooBig, temp32, "error of RopWriteStreamExtendedMethod, state S158");
                            this.Manager.Comment("reaching state \'S190\'");
                            bool temp33;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp33);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S222\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp33, "isPropertyValueChanged of RopCommitStreamMethod, state S222");
                            this.Manager.Comment("reaching state \'S254\'");
                            bool temp34;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp34);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S286\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp34, "isPropertyValueChanged of RopReleaseMethod, state S286");
                            this.Manager.Comment("reaching state \'S318\'");
                            goto label4;
                        }
                        if ((temp38 == 1)) {
                            this.Manager.Comment("reaching state \'S127\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp35;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadWrite,True,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp35);
                            this.Manager.Comment("reaching state \'S159\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out ecTooBig]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.ecTooBig, temp35, "error of RopWriteStreamExtendedMethod, state S159");
                            this.Manager.Comment("reaching state \'S191\'");
                            bool temp36;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp36);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S223\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp36, "isPropertyValueChanged of RopCommitStreamMethod, state S223");
                            this.Manager.Comment("reaching state \'S255\'");
                            bool temp37;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp37);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S287\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp37, "isPropertyValueChanged of RopReleaseMethod, state S287");
                            this.Manager.Comment("reaching state \'S319\'");
                            goto label4;
                        }
                        throw new InvalidOperationException("never reached");
                    label4:
;
                        goto label5;
                    }
                    throw new InvalidOperationException("never reached");
                label5:
;
                    goto label6;
                }
                throw new InvalidOperationException("never reached");
            label6:
;
                goto label7;
            }
            if ((temp41 == 1)) {
                this.Manager.Comment("reaching state \'S13\'");
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S68");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S80");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S104");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S104");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S80");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S105");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S105");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S68");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S81");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S106");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S106");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S81");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S107");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S107");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite1() {
            this.Manager.BeginTest("MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite1");
            this.Manager.Comment("reaching state \'S10\'");
            bool temp42;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp42);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp42);
            this.Manager.Comment("reaching state \'S11\'");
            int temp45 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp45 == 0)) {
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S35\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S41\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S47\'");
                bool temp43;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp44;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadOnly,False,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), false, out temp43, out temp44);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S53\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out False,out NotFound]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp43, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S53");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotFound, temp44, "error of RopOpenStreamMethod, state S53");
                this.Manager.Comment("reaching state \'S59\'");
                goto label8;
            }
            if ((temp45 == 1)) {
                this.Manager.Comment("reaching state \'S23\'");
                goto label8;
            }
            throw new InvalidOperationException("never reached");
        label8:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2() {
            this.Manager.BeginTest("MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp46;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp46);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp46);
            this.Manager.Comment("reaching state \'S3\'");
            int temp87 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp87 == 0)) {
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S25\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S31\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S37\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S43\'");
                bool temp47;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp48;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadOnly,True,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), true, out temp47, out temp48);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S49\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp47, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S49");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp48, "error of RopOpenStreamMethod, state S49");
                this.Manager.Comment("reaching state \'S55\'");
                this.Manager.Comment("executing step \'call RopReadStreamMethod(True)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReadStreamMethod(true);
                this.Manager.Comment("reaching state \'S61\'");
                this.Manager.Comment("checking step \'return RopReadStreamMethod\'");
                this.Manager.Comment("reaching state \'S65\'");
                bool temp49;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86706,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86706, out temp49);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp49);
                this.Manager.Comment("reaching state \'S69\'");
                int temp86 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker7)));
                if ((temp86 == 0)) {
                    this.Manager.Comment("reaching state \'S74\'");
                    bool temp50;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp50);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp50);
                    this.Manager.Comment("reaching state \'S82\'");
                    int temp67 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker4)));
                    if ((temp67 == 0)) {
                        this.Manager.Comment("reaching state \'S92\'");
                        bool temp51;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp51);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp51);
                        this.Manager.Comment("reaching state \'S108\'");
                        int temp58 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker2)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker3)));
                        if ((temp58 == 0)) {
                            this.Manager.Comment("reaching state \'S128\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp52;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadOnly,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), false, out temp52);
                            this.Manager.Comment("reaching state \'S160\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out STG_E_ACCESSDENIED]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.STG_E_ACCESSDENIED, temp52, "error of RopWriteStreamExtendedMethod, state S160");
                            this.Manager.Comment("reaching state \'S192\'");
                            bool temp53;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadOnly,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), out temp53);
                            this.Manager.Comment("reaching state \'S224\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp53, "isPropertyValueChanged of RopCommitStreamMethod, state S224");
                            this.Manager.Comment("reaching state \'S256\'");
                            bool temp54;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp54);
                            this.Manager.Comment("reaching state \'S288\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp54, "isPropertyValueChanged of RopReleaseMethod, state S288");
                            this.Manager.Comment("reaching state \'S320\'");
                            goto label9;
                        }
                        if ((temp58 == 1)) {
                            this.Manager.Comment("reaching state \'S129\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp55;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadOnly,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), false, out temp55);
                            this.Manager.Comment("reaching state \'S161\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out STG_E_ACCESSDENIED]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.STG_E_ACCESSDENIED, temp55, "error of RopWriteStreamExtendedMethod, state S161");
                            this.Manager.Comment("reaching state \'S193\'");
                            bool temp56;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadOnly,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), out temp56);
                            this.Manager.Comment("reaching state \'S225\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp56, "isPropertyValueChanged of RopCommitStreamMethod, state S225");
                            this.Manager.Comment("reaching state \'S257\'");
                            bool temp57;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp57);
                            this.Manager.Comment("reaching state \'S289\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp57, "isPropertyValueChanged of RopReleaseMethod, state S289");
                            this.Manager.Comment("reaching state \'S321\'");
                            goto label9;
                        }
                        throw new InvalidOperationException("never reached");
                    label9:
;
                        goto label11;
                    }
                    if ((temp67 == 1)) {
                        this.Manager.Comment("reaching state \'S93\'");
                        bool temp59;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp59);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp59);
                        this.Manager.Comment("reaching state \'S109\'");
                        int temp66 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker5)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker6)));
                        if ((temp66 == 0)) {
                            this.Manager.Comment("reaching state \'S130\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp60;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadOnly,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), false, out temp60);
                            this.Manager.Comment("reaching state \'S162\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out STG_E_ACCESSDENIED]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.STG_E_ACCESSDENIED, temp60, "error of RopWriteStreamExtendedMethod, state S162");
                            this.Manager.Comment("reaching state \'S194\'");
                            bool temp61;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadOnly,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), out temp61);
                            this.Manager.Comment("reaching state \'S226\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp61, "isPropertyValueChanged of RopCommitStreamMethod, state S226");
                            this.Manager.Comment("reaching state \'S258\'");
                            bool temp62;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp62);
                            this.Manager.Comment("reaching state \'S290\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp62, "isPropertyValueChanged of RopReleaseMethod, state S290");
                            this.Manager.Comment("reaching state \'S322\'");
                            goto label10;
                        }
                        if ((temp66 == 1)) {
                            this.Manager.Comment("reaching state \'S131\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp63;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadOnly,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), false, out temp63);
                            this.Manager.Comment("reaching state \'S163\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out STG_E_ACCESSDENIED]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.STG_E_ACCESSDENIED, temp63, "error of RopWriteStreamExtendedMethod, state S163");
                            this.Manager.Comment("reaching state \'S195\'");
                            bool temp64;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadOnly,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), out temp64);
                            this.Manager.Comment("reaching state \'S227\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp64, "isPropertyValueChanged of RopCommitStreamMethod, state S227");
                            this.Manager.Comment("reaching state \'S259\'");
                            bool temp65;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp65);
                            this.Manager.Comment("reaching state \'S291\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp65, "isPropertyValueChanged of RopReleaseMethod, state S291");
                            this.Manager.Comment("reaching state \'S323\'");
                            goto label10;
                        }
                        throw new InvalidOperationException("never reached");
                    label10:
;
                        goto label11;
                    }
                    throw new InvalidOperationException("never reached");
                label11:
;
                    goto label15;
                }
                if ((temp86 == 1)) {
                    this.Manager.Comment("reaching state \'S75\'");
                    bool temp68;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp68);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp68);
                    this.Manager.Comment("reaching state \'S83\'");
                    int temp85 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker8)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker11)));
                    if ((temp85 == 0)) {
                        this.Manager.Comment("reaching state \'S94\'");
                        bool temp69;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp69);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp69);
                        this.Manager.Comment("reaching state \'S110\'");
                        int temp76 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker9)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker10)));
                        if ((temp76 == 0)) {
                            this.Manager.Comment("reaching state \'S132\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp70;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadOnly,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), false, out temp70);
                            this.Manager.Comment("reaching state \'S164\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out STG_E_ACCESSDENIED]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.STG_E_ACCESSDENIED, temp70, "error of RopWriteStreamExtendedMethod, state S164");
                            this.Manager.Comment("reaching state \'S196\'");
                            bool temp71;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadOnly,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), out temp71);
                            this.Manager.Comment("reaching state \'S228\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp71, "isPropertyValueChanged of RopCommitStreamMethod, state S228");
                            this.Manager.Comment("reaching state \'S260\'");
                            bool temp72;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp72);
                            this.Manager.Comment("reaching state \'S292\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp72, "isPropertyValueChanged of RopReleaseMethod, state S292");
                            this.Manager.Comment("reaching state \'S324\'");
                            goto label12;
                        }
                        if ((temp76 == 1)) {
                            this.Manager.Comment("reaching state \'S133\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp73;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadOnly,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), false, out temp73);
                            this.Manager.Comment("reaching state \'S165\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out STG_E_ACCESSDENIED]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.STG_E_ACCESSDENIED, temp73, "error of RopWriteStreamExtendedMethod, state S165");
                            this.Manager.Comment("reaching state \'S197\'");
                            bool temp74;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadOnly,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), out temp74);
                            this.Manager.Comment("reaching state \'S229\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp74, "isPropertyValueChanged of RopCommitStreamMethod, state S229");
                            this.Manager.Comment("reaching state \'S261\'");
                            bool temp75;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp75);
                            this.Manager.Comment("reaching state \'S293\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp75, "isPropertyValueChanged of RopReleaseMethod, state S293");
                            this.Manager.Comment("reaching state \'S325\'");
                            goto label12;
                        }
                        throw new InvalidOperationException("never reached");
                    label12:
;
                        goto label14;
                    }
                    if ((temp85 == 1)) {
                        this.Manager.Comment("reaching state \'S95\'");
                        bool temp77;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp77);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp77);
                        this.Manager.Comment("reaching state \'S111\'");
                        int temp84 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker12)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker13)));
                        if ((temp84 == 0)) {
                            this.Manager.Comment("reaching state \'S134\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp78;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadOnly,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), false, out temp78);
                            this.Manager.Comment("reaching state \'S166\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out STG_E_ACCESSDENIED]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.STG_E_ACCESSDENIED, temp78, "error of RopWriteStreamExtendedMethod, state S166");
                            this.Manager.Comment("reaching state \'S198\'");
                            bool temp79;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadOnly,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), out temp79);
                            this.Manager.Comment("reaching state \'S230\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp79, "isPropertyValueChanged of RopCommitStreamMethod, state S230");
                            this.Manager.Comment("reaching state \'S262\'");
                            bool temp80;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp80);
                            this.Manager.Comment("reaching state \'S294\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp80, "isPropertyValueChanged of RopReleaseMethod, state S294");
                            this.Manager.Comment("reaching state \'S326\'");
                            goto label13;
                        }
                        if ((temp84 == 1)) {
                            this.Manager.Comment("reaching state \'S135\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp81;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadOnly,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), false, out temp81);
                            this.Manager.Comment("reaching state \'S167\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out STG_E_ACCESSDENIED]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.STG_E_ACCESSDENIED, temp81, "error of RopWriteStreamExtendedMethod, state S167");
                            this.Manager.Comment("reaching state \'S199\'");
                            bool temp82;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadOnly,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), out temp82);
                            this.Manager.Comment("reaching state \'S231\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp82, "isPropertyValueChanged of RopCommitStreamMethod, state S231");
                            this.Manager.Comment("reaching state \'S263\'");
                            bool temp83;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp83);
                            this.Manager.Comment("reaching state \'S295\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp83, "isPropertyValueChanged of RopReleaseMethod, state S295");
                            this.Manager.Comment("reaching state \'S327\'");
                            goto label13;
                        }
                        throw new InvalidOperationException("never reached");
                    label13:
;
                        goto label14;
                    }
                    throw new InvalidOperationException("never reached");
                label14:
;
                    goto label15;
                }
                throw new InvalidOperationException("never reached");
            label15:
;
                goto label16;
            }
            if ((temp87 == 1)) {
                this.Manager.Comment("reaching state \'S15\'");
                goto label16;
            }
            throw new InvalidOperationException("never reached");
        label16:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S69");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S82");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S108");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S108");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S82");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S109");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S109");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S69");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S83");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S110");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S110");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S83");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S111");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S111");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite3() {
            this.Manager.BeginTest("MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite3");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp88;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp88);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp88);
            this.Manager.Comment("reaching state \'S5\'");
            int temp91 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite3CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite3CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp91 == 0)) {
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S44\'");
                bool temp89;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp90;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadOnly,False,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), false, out temp89, out temp90);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S50\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out False,out NotFound]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp89, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S50");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotFound, temp90, "error of RopOpenStreamMethod, state S50");
                this.Manager.Comment("reaching state \'S56\'");
                goto label17;
            }
            if ((temp91 == 1)) {
                this.Manager.Comment("reaching state \'S17\'");
                goto label17;
            }
            throw new InvalidOperationException("never reached");
        label17:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite3CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite3CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4() {
            this.Manager.BeginTest("MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4");
            this.Manager.Comment("reaching state \'S6\'");
            bool temp92;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp92);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp92);
            this.Manager.Comment("reaching state \'S7\'");
            int temp133 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp133 == 0)) {
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S33\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S39\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S45\'");
                bool temp93;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp94;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp93, out temp94);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S51\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp93, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S51");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp94, "error of RopOpenStreamMethod, state S51");
                this.Manager.Comment("reaching state \'S57\'");
                this.Manager.Comment("executing step \'call RopReadStreamMethod(True)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReadStreamMethod(true);
                this.Manager.Comment("reaching state \'S62\'");
                this.Manager.Comment("checking step \'return RopReadStreamMethod\'");
                this.Manager.Comment("reaching state \'S66\'");
                bool temp95;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86706,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86706, out temp95);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp95);
                this.Manager.Comment("reaching state \'S70\'");
                int temp132 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker7)));
                if ((temp132 == 0)) {
                    this.Manager.Comment("reaching state \'S76\'");
                    bool temp96;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp96);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp96);
                    this.Manager.Comment("reaching state \'S84\'");
                    int temp113 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker4)));
                    if ((temp113 == 0)) {
                        this.Manager.Comment("reaching state \'S96\'");
                        bool temp97;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp97);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp97);
                        this.Manager.Comment("reaching state \'S112\'");
                        int temp104 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker2)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker3)));
                        if ((temp104 == 0)) {
                            this.Manager.Comment("reaching state \'S136\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp98;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadWrite,True,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp98);
                            this.Manager.Comment("reaching state \'S168\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp98, "error of RopWriteStreamExtendedMethod, state S168");
                            this.Manager.Comment("reaching state \'S200\'");
                            bool temp99;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp99);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S232\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp99, "isPropertyValueChanged of RopCommitStreamMethod, state S232");
                            this.Manager.Comment("reaching state \'S264\'");
                            bool temp100;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp100);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S296\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp100, "isPropertyValueChanged of RopReleaseMethod, state S296");
                            this.Manager.Comment("reaching state \'S328\'");
                            goto label18;
                        }
                        if ((temp104 == 1)) {
                            this.Manager.Comment("reaching state \'S137\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp101;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadWrite,True,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp101);
                            this.Manager.Comment("reaching state \'S169\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out ecTooBig]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.ecTooBig, temp101, "error of RopWriteStreamExtendedMethod, state S169");
                            this.Manager.Comment("reaching state \'S201\'");
                            bool temp102;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp102);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S233\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp102, "isPropertyValueChanged of RopCommitStreamMethod, state S233");
                            this.Manager.Comment("reaching state \'S265\'");
                            bool temp103;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp103);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S297\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp103, "isPropertyValueChanged of RopReleaseMethod, state S297");
                            this.Manager.Comment("reaching state \'S329\'");
                            goto label18;
                        }
                        throw new InvalidOperationException("never reached");
                    label18:
;
                        goto label20;
                    }
                    if ((temp113 == 1)) {
                        this.Manager.Comment("reaching state \'S97\'");
                        bool temp105;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp105);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp105);
                        this.Manager.Comment("reaching state \'S113\'");
                        int temp112 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker5)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker6)));
                        if ((temp112 == 0)) {
                            this.Manager.Comment("reaching state \'S138\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp106;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadWrite,True,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp106);
                            this.Manager.Comment("reaching state \'S170\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out ecTooBig]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.ecTooBig, temp106, "error of RopWriteStreamExtendedMethod, state S170");
                            this.Manager.Comment("reaching state \'S202\'");
                            bool temp107;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp107);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S234\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp107, "isPropertyValueChanged of RopCommitStreamMethod, state S234");
                            this.Manager.Comment("reaching state \'S266\'");
                            bool temp108;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp108);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S298\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp108, "isPropertyValueChanged of RopReleaseMethod, state S298");
                            this.Manager.Comment("reaching state \'S330\'");
                            goto label19;
                        }
                        if ((temp112 == 1)) {
                            this.Manager.Comment("reaching state \'S139\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp109;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadWrite,True,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp109);
                            this.Manager.Comment("reaching state \'S171\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out ecTooBig]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.ecTooBig, temp109, "error of RopWriteStreamExtendedMethod, state S171");
                            this.Manager.Comment("reaching state \'S203\'");
                            bool temp110;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp110);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S235\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp110, "isPropertyValueChanged of RopCommitStreamMethod, state S235");
                            this.Manager.Comment("reaching state \'S267\'");
                            bool temp111;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp111);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S299\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp111, "isPropertyValueChanged of RopReleaseMethod, state S299");
                            this.Manager.Comment("reaching state \'S331\'");
                            goto label19;
                        }
                        throw new InvalidOperationException("never reached");
                    label19:
;
                        goto label20;
                    }
                    throw new InvalidOperationException("never reached");
                label20:
;
                    goto label24;
                }
                if ((temp132 == 1)) {
                    this.Manager.Comment("reaching state \'S77\'");
                    bool temp114;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp114);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp114);
                    this.Manager.Comment("reaching state \'S85\'");
                    int temp131 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker8)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker11)));
                    if ((temp131 == 0)) {
                        this.Manager.Comment("reaching state \'S98\'");
                        bool temp115;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp115);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp115);
                        this.Manager.Comment("reaching state \'S114\'");
                        int temp122 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker9)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker10)));
                        if ((temp122 == 0)) {
                            this.Manager.Comment("reaching state \'S140\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp116;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadWrite,True,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp116);
                            this.Manager.Comment("reaching state \'S172\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out StreamSizeError]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.StreamSizeError, temp116, "error of RopWriteStreamExtendedMethod, state S172");
                            this.Manager.Comment("reaching state \'S204\'");
                            bool temp117;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp117);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S236\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp117, "isPropertyValueChanged of RopCommitStreamMethod, state S236");
                            this.Manager.Comment("reaching state \'S268\'");
                            bool temp118;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp118);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S300\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp118, "isPropertyValueChanged of RopReleaseMethod, state S300");
                            this.Manager.Comment("reaching state \'S332\'");
                            goto label21;
                        }
                        if ((temp122 == 1)) {
                            this.Manager.Comment("reaching state \'S141\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp119;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadWrite,True,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp119);
                            this.Manager.Comment("reaching state \'S173\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out ecTooBig]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.ecTooBig, temp119, "error of RopWriteStreamExtendedMethod, state S173");
                            this.Manager.Comment("reaching state \'S205\'");
                            bool temp120;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp120);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S237\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp120, "isPropertyValueChanged of RopCommitStreamMethod, state S237");
                            this.Manager.Comment("reaching state \'S269\'");
                            bool temp121;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp121);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S301\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp121, "isPropertyValueChanged of RopReleaseMethod, state S301");
                            this.Manager.Comment("reaching state \'S333\'");
                            goto label21;
                        }
                        throw new InvalidOperationException("never reached");
                    label21:
;
                        goto label23;
                    }
                    if ((temp131 == 1)) {
                        this.Manager.Comment("reaching state \'S99\'");
                        bool temp123;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp123);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp123);
                        this.Manager.Comment("reaching state \'S115\'");
                        int temp130 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker12)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker13)));
                        if ((temp130 == 0)) {
                            this.Manager.Comment("reaching state \'S142\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp124;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadWrite,True,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp124);
                            this.Manager.Comment("reaching state \'S174\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out ecTooBig]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.ecTooBig, temp124, "error of RopWriteStreamExtendedMethod, state S174");
                            this.Manager.Comment("reaching state \'S206\'");
                            bool temp125;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp125);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S238\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp125, "isPropertyValueChanged of RopCommitStreamMethod, state S238");
                            this.Manager.Comment("reaching state \'S270\'");
                            bool temp126;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp126);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S302\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp126, "isPropertyValueChanged of RopReleaseMethod, state S302");
                            this.Manager.Comment("reaching state \'S334\'");
                            goto label22;
                        }
                        if ((temp130 == 1)) {
                            this.Manager.Comment("reaching state \'S143\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp127;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadWrite,True,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp127);
                            this.Manager.Comment("reaching state \'S175\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out ecTooBig]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.ecTooBig, temp127, "error of RopWriteStreamExtendedMethod, state S175");
                            this.Manager.Comment("reaching state \'S207\'");
                            bool temp128;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp128);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S239\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp128, "isPropertyValueChanged of RopCommitStreamMethod, state S239");
                            this.Manager.Comment("reaching state \'S271\'");
                            bool temp129;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp129);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S303\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp129, "isPropertyValueChanged of RopReleaseMethod, state S303");
                            this.Manager.Comment("reaching state \'S335\'");
                            goto label22;
                        }
                        throw new InvalidOperationException("never reached");
                    label22:
;
                        goto label23;
                    }
                    throw new InvalidOperationException("never reached");
                label23:
;
                    goto label24;
                }
                throw new InvalidOperationException("never reached");
            label24:
;
                goto label25;
            }
            if ((temp133 == 1)) {
                this.Manager.Comment("reaching state \'S19\'");
                goto label25;
            }
            throw new InvalidOperationException("never reached");
        label25:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S70");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S84");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S112");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S112");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S84");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S113");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S113");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S70");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S85");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S114");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S114");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S85");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S115");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S115");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite4CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5() {
            this.Manager.BeginTest("MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5");
            this.Manager.Comment("reaching state \'S8\'");
            bool temp134;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp134);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp134);
            this.Manager.Comment("reaching state \'S9\'");
            int temp175 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp175 == 0)) {
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S40\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S46\'");
                bool temp135;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp136;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadOnly,True,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), true, out temp135, out temp136);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S52\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp135, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S52");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp136, "error of RopOpenStreamMethod, state S52");
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("executing step \'call RopReadStreamMethod(True)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReadStreamMethod(true);
                this.Manager.Comment("reaching state \'S63\'");
                this.Manager.Comment("checking step \'return RopReadStreamMethod\'");
                this.Manager.Comment("reaching state \'S67\'");
                bool temp137;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86706,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86706, out temp137);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp137);
                this.Manager.Comment("reaching state \'S71\'");
                int temp174 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker7)));
                if ((temp174 == 0)) {
                    this.Manager.Comment("reaching state \'S78\'");
                    bool temp138;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp138);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp138);
                    this.Manager.Comment("reaching state \'S86\'");
                    int temp155 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker4)));
                    if ((temp155 == 0)) {
                        this.Manager.Comment("reaching state \'S100\'");
                        bool temp139;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp139);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp139);
                        this.Manager.Comment("reaching state \'S116\'");
                        int temp146 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker2)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker3)));
                        if ((temp146 == 0)) {
                            this.Manager.Comment("reaching state \'S144\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp140;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadOnly,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), false, out temp140);
                            this.Manager.Comment("reaching state \'S176\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out STG_E_ACCESSDENIED]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.STG_E_ACCESSDENIED, temp140, "error of RopWriteStreamExtendedMethod, state S176");
                            this.Manager.Comment("reaching state \'S208\'");
                            bool temp141;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadOnly,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), out temp141);
                            this.Manager.Comment("reaching state \'S240\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp141, "isPropertyValueChanged of RopCommitStreamMethod, state S240");
                            this.Manager.Comment("reaching state \'S272\'");
                            bool temp142;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp142);
                            this.Manager.Comment("reaching state \'S304\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp142, "isPropertyValueChanged of RopReleaseMethod, state S304");
                            this.Manager.Comment("reaching state \'S336\'");
                            goto label26;
                        }
                        if ((temp146 == 1)) {
                            this.Manager.Comment("reaching state \'S145\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp143;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadOnly,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), false, out temp143);
                            this.Manager.Comment("reaching state \'S177\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out STG_E_ACCESSDENIED]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.STG_E_ACCESSDENIED, temp143, "error of RopWriteStreamExtendedMethod, state S177");
                            this.Manager.Comment("reaching state \'S209\'");
                            bool temp144;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadOnly,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), out temp144);
                            this.Manager.Comment("reaching state \'S241\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp144, "isPropertyValueChanged of RopCommitStreamMethod, state S241");
                            this.Manager.Comment("reaching state \'S273\'");
                            bool temp145;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp145);
                            this.Manager.Comment("reaching state \'S305\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp145, "isPropertyValueChanged of RopReleaseMethod, state S305");
                            this.Manager.Comment("reaching state \'S337\'");
                            goto label26;
                        }
                        throw new InvalidOperationException("never reached");
                    label26:
;
                        goto label28;
                    }
                    if ((temp155 == 1)) {
                        this.Manager.Comment("reaching state \'S101\'");
                        bool temp147;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp147);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp147);
                        this.Manager.Comment("reaching state \'S117\'");
                        int temp154 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker5)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker6)));
                        if ((temp154 == 0)) {
                            this.Manager.Comment("reaching state \'S146\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp148;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadOnly,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), false, out temp148);
                            this.Manager.Comment("reaching state \'S178\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out STG_E_ACCESSDENIED]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.STG_E_ACCESSDENIED, temp148, "error of RopWriteStreamExtendedMethod, state S178");
                            this.Manager.Comment("reaching state \'S210\'");
                            bool temp149;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadOnly,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), out temp149);
                            this.Manager.Comment("reaching state \'S242\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp149, "isPropertyValueChanged of RopCommitStreamMethod, state S242");
                            this.Manager.Comment("reaching state \'S274\'");
                            bool temp150;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp150);
                            this.Manager.Comment("reaching state \'S306\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp150, "isPropertyValueChanged of RopReleaseMethod, state S306");
                            this.Manager.Comment("reaching state \'S338\'");
                            goto label27;
                        }
                        if ((temp154 == 1)) {
                            this.Manager.Comment("reaching state \'S147\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp151;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadOnly,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), false, out temp151);
                            this.Manager.Comment("reaching state \'S179\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out STG_E_ACCESSDENIED]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.STG_E_ACCESSDENIED, temp151, "error of RopWriteStreamExtendedMethod, state S179");
                            this.Manager.Comment("reaching state \'S211\'");
                            bool temp152;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadOnly,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), out temp152);
                            this.Manager.Comment("reaching state \'S243\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp152, "isPropertyValueChanged of RopCommitStreamMethod, state S243");
                            this.Manager.Comment("reaching state \'S275\'");
                            bool temp153;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp153);
                            this.Manager.Comment("reaching state \'S307\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp153, "isPropertyValueChanged of RopReleaseMethod, state S307");
                            this.Manager.Comment("reaching state \'S339\'");
                            goto label27;
                        }
                        throw new InvalidOperationException("never reached");
                    label27:
;
                        goto label28;
                    }
                    throw new InvalidOperationException("never reached");
                label28:
;
                    goto label32;
                }
                if ((temp174 == 1)) {
                    this.Manager.Comment("reaching state \'S79\'");
                    bool temp156;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp156);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp156);
                    this.Manager.Comment("reaching state \'S87\'");
                    int temp173 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker8)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker11)));
                    if ((temp173 == 0)) {
                        this.Manager.Comment("reaching state \'S102\'");
                        bool temp157;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp157);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp157);
                        this.Manager.Comment("reaching state \'S118\'");
                        int temp164 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker9)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker10)));
                        if ((temp164 == 0)) {
                            this.Manager.Comment("reaching state \'S148\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp158;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadOnly,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), false, out temp158);
                            this.Manager.Comment("reaching state \'S180\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out STG_E_ACCESSDENIED]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.STG_E_ACCESSDENIED, temp158, "error of RopWriteStreamExtendedMethod, state S180");
                            this.Manager.Comment("reaching state \'S212\'");
                            bool temp159;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadOnly,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), out temp159);
                            this.Manager.Comment("reaching state \'S244\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp159, "isPropertyValueChanged of RopCommitStreamMethod, state S244");
                            this.Manager.Comment("reaching state \'S276\'");
                            bool temp160;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp160);
                            this.Manager.Comment("reaching state \'S308\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp160, "isPropertyValueChanged of RopReleaseMethod, state S308");
                            this.Manager.Comment("reaching state \'S340\'");
                            goto label29;
                        }
                        if ((temp164 == 1)) {
                            this.Manager.Comment("reaching state \'S149\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp161;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadOnly,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), false, out temp161);
                            this.Manager.Comment("reaching state \'S181\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out STG_E_ACCESSDENIED]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.STG_E_ACCESSDENIED, temp161, "error of RopWriteStreamExtendedMethod, state S181");
                            this.Manager.Comment("reaching state \'S213\'");
                            bool temp162;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadOnly,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), out temp162);
                            this.Manager.Comment("reaching state \'S245\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp162, "isPropertyValueChanged of RopCommitStreamMethod, state S245");
                            this.Manager.Comment("reaching state \'S277\'");
                            bool temp163;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp163);
                            this.Manager.Comment("reaching state \'S309\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp163, "isPropertyValueChanged of RopReleaseMethod, state S309");
                            this.Manager.Comment("reaching state \'S341\'");
                            goto label29;
                        }
                        throw new InvalidOperationException("never reached");
                    label29:
;
                        goto label31;
                    }
                    if ((temp173 == 1)) {
                        this.Manager.Comment("reaching state \'S103\'");
                        bool temp165;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp165);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp165);
                        this.Manager.Comment("reaching state \'S119\'");
                        int temp172 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker12)), new ExpectedReturn(S04_StreamExtendedForErrorCodeTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker13)));
                        if ((temp172 == 0)) {
                            this.Manager.Comment("reaching state \'S150\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp166;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadOnly,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), false, out temp166);
                            this.Manager.Comment("reaching state \'S182\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out STG_E_ACCESSDENIED]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.STG_E_ACCESSDENIED, temp166, "error of RopWriteStreamExtendedMethod, state S182");
                            this.Manager.Comment("reaching state \'S214\'");
                            bool temp167;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadOnly,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), out temp167);
                            this.Manager.Comment("reaching state \'S246\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp167, "isPropertyValueChanged of RopCommitStreamMethod, state S246");
                            this.Manager.Comment("reaching state \'S278\'");
                            bool temp168;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp168);
                            this.Manager.Comment("reaching state \'S310\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp168, "isPropertyValueChanged of RopReleaseMethod, state S310");
                            this.Manager.Comment("reaching state \'S342\'");
                            goto label30;
                        }
                        if ((temp172 == 1)) {
                            this.Manager.Comment("reaching state \'S151\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp169;
                            this.Manager.Comment("executing step \'call RopWriteStreamExtendedMethod(ReadOnly,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamExtendedMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), false, out temp169);
                            this.Manager.Comment("reaching state \'S183\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamExtendedMethod/[out STG_E_ACCESSDENIED]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.STG_E_ACCESSDENIED, temp169, "error of RopWriteStreamExtendedMethod, state S183");
                            this.Manager.Comment("reaching state \'S215\'");
                            bool temp170;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadOnly,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), out temp170);
                            this.Manager.Comment("reaching state \'S247\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp170, "isPropertyValueChanged of RopCommitStreamMethod, state S247");
                            this.Manager.Comment("reaching state \'S279\'");
                            bool temp171;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp171);
                            this.Manager.Comment("reaching state \'S311\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp171, "isPropertyValueChanged of RopReleaseMethod, state S311");
                            this.Manager.Comment("reaching state \'S343\'");
                            goto label30;
                        }
                        throw new InvalidOperationException("never reached");
                    label30:
;
                        goto label31;
                    }
                    throw new InvalidOperationException("never reached");
                label31:
;
                    goto label32;
                }
                throw new InvalidOperationException("never reached");
            label32:
;
                goto label33;
            }
            if ((temp175 == 1)) {
                this.Manager.Comment("reaching state \'S21\'");
                goto label33;
            }
            throw new InvalidOperationException("never reached");
        label33:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S71");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S86");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S116");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S116");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S86");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S117");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S117");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S71");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S87");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S118");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S118");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S87");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S119");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S119");
        }
        
        private void MSOXCPRPT_S04_StreamExtendedForErrorCodeTable_TestSuite5CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        #endregion
    }
}
