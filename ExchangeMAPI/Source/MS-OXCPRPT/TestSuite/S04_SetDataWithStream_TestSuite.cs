//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCPRPT {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.6.100.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S04_SetDataWithStream_TestSuite : PtfTestClassBase {
        
        public S04_SetDataWithStream_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter IMS_OXCPRPTAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCPRPTAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_SetDataWithStream_TestSuite() {
            this.Manager.BeginTest("MSOXCPRPT_S04_SetDataWithStream_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp73 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp73 == 0)) {
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S40\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S50\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S60\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S70\'");
                bool temp1;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp2;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp1, out temp2);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S80\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S80");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp2, "error of RopOpenStreamMethod, state S80");
                this.Manager.Comment("reaching state \'S90\'");
                bool temp3;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86706,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86706, out temp3);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                this.Manager.Comment("reaching state \'S100\'");
                int temp72 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker15)));
                if ((temp72 == 0)) {
                    this.Manager.Comment("reaching state \'S110\'");
                    bool temp4;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp4);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp4);
                    this.Manager.Comment("reaching state \'S124\'");
                    int temp37 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker8)));
                    if ((temp37 == 0)) {
                        this.Manager.Comment("reaching state \'S138\'");
                        bool temp5;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp5);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp5);
                        this.Manager.Comment("reaching state \'S166\'");
                        int temp20 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker5)));
                        if ((temp20 == 0)) {
                            this.Manager.Comment("reaching state \'S194\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp6;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp6);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S250\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp6, "error of RopWriteStreamMethod, state S250");
                            this.Manager.Comment("reaching state \'S306\'");
                            bool temp7;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp7);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S386\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp7, "isPropertyValueChanged of RopCommitStreamMethod, state S386");
                            this.Manager.Comment("reaching state \'S466\'");
                            bool temp8;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp8);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S546\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp8, "isPropertyValueChanged of RopReleaseMethod, state S546");
                            this.Manager.Comment("reaching state \'S626\'");
                            bool temp9;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp10;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp9, out temp10);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S706\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp9, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S706");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp10, "error of RopOpenStreamMethod, state S706");
                            this.Manager.Comment("reaching state \'S786\'");
                            bool temp11;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp11);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp11);
                            this.Manager.Comment("reaching state \'S866\'");
                            int temp12 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker3)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker4)));
                            if ((temp12 == 0)) {
                                this.Manager.Comment("reaching state \'S946\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1058\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1170\'");
                                goto label0;
                            }
                            if ((temp12 == 1)) {
                                this.Manager.Comment("reaching state \'S947\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1059\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1171\'");
                                goto label0;
                            }
                            throw new InvalidOperationException("never reached");
                        label0:
;
                            goto label2;
                        }
                        if ((temp20 == 1)) {
                            this.Manager.Comment("reaching state \'S195\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp13;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp13);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S251\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp13, "error of RopWriteStreamMethod, state S251");
                            this.Manager.Comment("reaching state \'S307\'");
                            bool temp14;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp14);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S387\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp14, "isPropertyValueChanged of RopCommitStreamMethod, state S387");
                            this.Manager.Comment("reaching state \'S467\'");
                            bool temp15;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp15);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S547\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp15, "isPropertyValueChanged of RopReleaseMethod, state S547");
                            this.Manager.Comment("reaching state \'S627\'");
                            bool temp16;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp17;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp16, out temp17);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S707\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp16, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S707");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp17, "error of RopOpenStreamMethod, state S707");
                            this.Manager.Comment("reaching state \'S787\'");
                            bool temp18;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp18);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp18);
                            this.Manager.Comment("reaching state \'S867\'");
                            int temp19 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker6)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker7)));
                            if ((temp19 == 0)) {
                                this.Manager.Comment("reaching state \'S948\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1060\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1172\'");
                                goto label1;
                            }
                            if ((temp19 == 1)) {
                                this.Manager.Comment("reaching state \'S949\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1061\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1173\'");
                                goto label1;
                            }
                            throw new InvalidOperationException("never reached");
                        label1:
;
                            goto label2;
                        }
                        throw new InvalidOperationException("never reached");
                    label2:
;
                        goto label6;
                    }
                    if ((temp37 == 1)) {
                        this.Manager.Comment("reaching state \'S139\'");
                        bool temp21;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp21);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp21);
                        this.Manager.Comment("reaching state \'S167\'");
                        int temp36 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker9)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker12)));
                        if ((temp36 == 0)) {
                            this.Manager.Comment("reaching state \'S196\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp22;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp22);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S252\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp22, "error of RopWriteStreamMethod, state S252");
                            this.Manager.Comment("reaching state \'S308\'");
                            bool temp23;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp23);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S388\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp23, "isPropertyValueChanged of RopCommitStreamMethod, state S388");
                            this.Manager.Comment("reaching state \'S468\'");
                            bool temp24;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp24);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S548\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp24, "isPropertyValueChanged of RopReleaseMethod, state S548");
                            this.Manager.Comment("reaching state \'S628\'");
                            bool temp25;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp26;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp25, out temp26);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S708\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp25, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S708");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp26, "error of RopOpenStreamMethod, state S708");
                            this.Manager.Comment("reaching state \'S788\'");
                            bool temp27;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp27);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp27);
                            this.Manager.Comment("reaching state \'S868\'");
                            int temp28 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker10)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker11)));
                            if ((temp28 == 0)) {
                                this.Manager.Comment("reaching state \'S950\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1062\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1174\'");
                                goto label3;
                            }
                            if ((temp28 == 1)) {
                                this.Manager.Comment("reaching state \'S951\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1063\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1175\'");
                                goto label3;
                            }
                            throw new InvalidOperationException("never reached");
                        label3:
;
                            goto label5;
                        }
                        if ((temp36 == 1)) {
                            this.Manager.Comment("reaching state \'S197\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp29;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp29);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S253\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp29, "error of RopWriteStreamMethod, state S253");
                            this.Manager.Comment("reaching state \'S309\'");
                            bool temp30;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp30);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S389\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp30, "isPropertyValueChanged of RopCommitStreamMethod, state S389");
                            this.Manager.Comment("reaching state \'S469\'");
                            bool temp31;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp31);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S549\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp31, "isPropertyValueChanged of RopReleaseMethod, state S549");
                            this.Manager.Comment("reaching state \'S629\'");
                            bool temp32;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp33;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp32, out temp33);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S709\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp32, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S709");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp33, "error of RopOpenStreamMethod, state S709");
                            this.Manager.Comment("reaching state \'S789\'");
                            bool temp34;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp34);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp34);
                            this.Manager.Comment("reaching state \'S869\'");
                            int temp35 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker13)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker14)));
                            if ((temp35 == 0)) {
                                this.Manager.Comment("reaching state \'S952\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1064\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1176\'");
                                goto label4;
                            }
                            if ((temp35 == 1)) {
                                this.Manager.Comment("reaching state \'S953\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1065\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1177\'");
                                goto label4;
                            }
                            throw new InvalidOperationException("never reached");
                        label4:
;
                            goto label5;
                        }
                        throw new InvalidOperationException("never reached");
                    label5:
;
                        goto label6;
                    }
                    throw new InvalidOperationException("never reached");
                label6:
;
                    goto label14;
                }
                if ((temp72 == 1)) {
                    this.Manager.Comment("reaching state \'S111\'");
                    bool temp38;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp38);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp38);
                    this.Manager.Comment("reaching state \'S125\'");
                    int temp71 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker16)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker23)));
                    if ((temp71 == 0)) {
                        this.Manager.Comment("reaching state \'S140\'");
                        bool temp39;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp39);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp39);
                        this.Manager.Comment("reaching state \'S168\'");
                        int temp54 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker17)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker20)));
                        if ((temp54 == 0)) {
                            this.Manager.Comment("reaching state \'S198\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp40;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp40);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S254\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp40, "error of RopWriteStreamMethod, state S254");
                            this.Manager.Comment("reaching state \'S310\'");
                            bool temp41;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp41);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S390\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp41, "isPropertyValueChanged of RopCommitStreamMethod, state S390");
                            this.Manager.Comment("reaching state \'S470\'");
                            bool temp42;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp42);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S550\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp42, "isPropertyValueChanged of RopReleaseMethod, state S550");
                            this.Manager.Comment("reaching state \'S630\'");
                            bool temp43;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp44;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp43, out temp44);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S710\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp43, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S710");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp44, "error of RopOpenStreamMethod, state S710");
                            this.Manager.Comment("reaching state \'S790\'");
                            bool temp45;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp45);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp45);
                            this.Manager.Comment("reaching state \'S870\'");
                            int temp46 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker18)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker19)));
                            if ((temp46 == 0)) {
                                this.Manager.Comment("reaching state \'S954\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1066\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1178\'");
                                goto label7;
                            }
                            if ((temp46 == 1)) {
                                this.Manager.Comment("reaching state \'S955\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1067\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1179\'");
                                goto label7;
                            }
                            throw new InvalidOperationException("never reached");
                        label7:
;
                            goto label9;
                        }
                        if ((temp54 == 1)) {
                            this.Manager.Comment("reaching state \'S199\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp47;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp47);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S255\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp47, "error of RopWriteStreamMethod, state S255");
                            this.Manager.Comment("reaching state \'S311\'");
                            bool temp48;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp48);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S391\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp48, "isPropertyValueChanged of RopCommitStreamMethod, state S391");
                            this.Manager.Comment("reaching state \'S471\'");
                            bool temp49;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp49);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S551\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp49, "isPropertyValueChanged of RopReleaseMethod, state S551");
                            this.Manager.Comment("reaching state \'S631\'");
                            bool temp50;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp51;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp50, out temp51);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S711\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp50, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S711");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp51, "error of RopOpenStreamMethod, state S711");
                            this.Manager.Comment("reaching state \'S791\'");
                            bool temp52;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp52);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp52);
                            this.Manager.Comment("reaching state \'S871\'");
                            int temp53 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker21)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker22)));
                            if ((temp53 == 0)) {
                                this.Manager.Comment("reaching state \'S956\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1068\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1180\'");
                                goto label8;
                            }
                            if ((temp53 == 1)) {
                                this.Manager.Comment("reaching state \'S957\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1069\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1181\'");
                                goto label8;
                            }
                            throw new InvalidOperationException("never reached");
                        label8:
;
                            goto label9;
                        }
                        throw new InvalidOperationException("never reached");
                    label9:
;
                        goto label13;
                    }
                    if ((temp71 == 1)) {
                        this.Manager.Comment("reaching state \'S141\'");
                        bool temp55;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp55);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp55);
                        this.Manager.Comment("reaching state \'S169\'");
                        int temp70 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker24)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker27)));
                        if ((temp70 == 0)) {
                            this.Manager.Comment("reaching state \'S200\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp56;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp56);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S256\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp56, "error of RopWriteStreamMethod, state S256");
                            this.Manager.Comment("reaching state \'S312\'");
                            bool temp57;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp57);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S392\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp57, "isPropertyValueChanged of RopCommitStreamMethod, state S392");
                            this.Manager.Comment("reaching state \'S472\'");
                            bool temp58;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp58);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S552\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp58, "isPropertyValueChanged of RopReleaseMethod, state S552");
                            this.Manager.Comment("reaching state \'S632\'");
                            bool temp59;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp60;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp59, out temp60);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S712\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp59, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S712");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp60, "error of RopOpenStreamMethod, state S712");
                            this.Manager.Comment("reaching state \'S792\'");
                            bool temp61;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp61);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp61);
                            this.Manager.Comment("reaching state \'S872\'");
                            int temp62 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker25)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker26)));
                            if ((temp62 == 0)) {
                                this.Manager.Comment("reaching state \'S958\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1070\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1182\'");
                                goto label10;
                            }
                            if ((temp62 == 1)) {
                                this.Manager.Comment("reaching state \'S959\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1071\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1183\'");
                                goto label10;
                            }
                            throw new InvalidOperationException("never reached");
                        label10:
;
                            goto label12;
                        }
                        if ((temp70 == 1)) {
                            this.Manager.Comment("reaching state \'S201\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp63;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp63);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S257\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp63, "error of RopWriteStreamMethod, state S257");
                            this.Manager.Comment("reaching state \'S313\'");
                            bool temp64;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp64);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S393\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp64, "isPropertyValueChanged of RopCommitStreamMethod, state S393");
                            this.Manager.Comment("reaching state \'S473\'");
                            bool temp65;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp65);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S553\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp65, "isPropertyValueChanged of RopReleaseMethod, state S553");
                            this.Manager.Comment("reaching state \'S633\'");
                            bool temp66;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp67;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp66, out temp67);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S713\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp66, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S713");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp67, "error of RopOpenStreamMethod, state S713");
                            this.Manager.Comment("reaching state \'S793\'");
                            bool temp68;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp68);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp68);
                            this.Manager.Comment("reaching state \'S873\'");
                            int temp69 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker28)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker29)));
                            if ((temp69 == 0)) {
                                this.Manager.Comment("reaching state \'S960\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1072\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1184\'");
                                goto label11;
                            }
                            if ((temp69 == 1)) {
                                this.Manager.Comment("reaching state \'S961\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1073\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1185\'");
                                goto label11;
                            }
                            throw new InvalidOperationException("never reached");
                        label11:
;
                            goto label12;
                        }
                        throw new InvalidOperationException("never reached");
                    label12:
;
                        goto label13;
                    }
                    throw new InvalidOperationException("never reached");
                label13:
;
                    goto label14;
                }
                throw new InvalidOperationException("never reached");
            label14:
;
                goto label15;
            }
            if ((temp73 == 1)) {
                this.Manager.Comment("reaching state \'S21\'");
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S100");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S124");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S166");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S866");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S866");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S166");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S867");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S867");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S124");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S167");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S868");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S868");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S167");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S869");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S869");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S100");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S125");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S168");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S870");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S870");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S168");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S871");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S871");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S125");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S169");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S872");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S872");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S169");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S873");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S873");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_SetDataWithStream_TestSuite1() {
            this.Manager.BeginTest("MSOXCPRPT_S04_SetDataWithStream_TestSuite1");
            this.Manager.Comment("reaching state \'S10\'");
            bool temp74;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp74);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp74);
            this.Manager.Comment("reaching state \'S11\'");
            int temp150 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp150 == 0)) {
                this.Manager.Comment("reaching state \'S30\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S45\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S55\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S65\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S75\'");
                bool temp75;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp76;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp75, out temp76);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S85\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp75, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp76, "error of RopOpenStreamMethod, state S85");
                this.Manager.Comment("reaching state \'S95\'");
                bool temp77;
                bool temp78;
                bool temp79;
                this.Manager.Comment("executing step \'call RopSetStreamSizeMethod(True,out _,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopSetStreamSizeMethod(true, out temp77, out temp78, out temp79);
                this.Manager.Checkpoint("MS-OXCPRPT_R322");
                this.Manager.Checkpoint("MS-OXCPRPT_R32801");
                this.Manager.Checkpoint("MS-OXCPRPT_R57705");
                this.Manager.Checkpoint("MS-OXCPRPT_R57706");
                this.Manager.Comment("reaching state \'S105\'");
                this.Manager.Comment("checking step \'return RopSetStreamSizeMethod/[out True,out False,out True]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp77, "isExtendedValueZero of RopSetStreamSizeMethod, state S105");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp78, "isLost of RopSetStreamSizeMethod, state S105");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp79, "isIncrease of RopSetStreamSizeMethod, state S105");
                this.Manager.Comment("reaching state \'S117\'");
                bool temp80;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86706,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86706, out temp80);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp80);
                this.Manager.Comment("reaching state \'S131\'");
                int temp149 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker15)));
                if ((temp149 == 0)) {
                    this.Manager.Comment("reaching state \'S152\'");
                    bool temp81;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp81);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp81);
                    this.Manager.Comment("reaching state \'S180\'");
                    int temp114 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker8)));
                    if ((temp114 == 0)) {
                        this.Manager.Comment("reaching state \'S222\'");
                        bool temp82;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp82);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp82);
                        this.Manager.Comment("reaching state \'S278\'");
                        int temp97 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker2)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker5)));
                        if ((temp97 == 0)) {
                            this.Manager.Comment("reaching state \'S346\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp83;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp83);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S426\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp83, "error of RopWriteStreamMethod, state S426");
                            this.Manager.Comment("reaching state \'S506\'");
                            bool temp84;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp84);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S586\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp84, "isPropertyValueChanged of RopCommitStreamMethod, state S586");
                            this.Manager.Comment("reaching state \'S666\'");
                            bool temp85;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp85);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S746\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp85, "isPropertyValueChanged of RopReleaseMethod, state S746");
                            this.Manager.Comment("reaching state \'S826\'");
                            bool temp86;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp87;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp86, out temp87);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S906\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp86, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S906");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp87, "error of RopOpenStreamMethod, state S906");
                            this.Manager.Comment("reaching state \'S1002\'");
                            bool temp88;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp88);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp88);
                            this.Manager.Comment("reaching state \'S1114\'");
                            int temp89 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker3)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker4)));
                            if ((temp89 == 0)) {
                                this.Manager.Comment("reaching state \'S1250\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1378\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1482\'");
                                goto label16;
                            }
                            if ((temp89 == 1)) {
                                this.Manager.Comment("reaching state \'S1251\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1379\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1483\'");
                                goto label16;
                            }
                            throw new InvalidOperationException("never reached");
                        label16:
;
                            goto label18;
                        }
                        if ((temp97 == 1)) {
                            this.Manager.Comment("reaching state \'S347\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp90;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp90);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S427\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp90, "error of RopWriteStreamMethod, state S427");
                            this.Manager.Comment("reaching state \'S507\'");
                            bool temp91;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp91);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S587\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp91, "isPropertyValueChanged of RopCommitStreamMethod, state S587");
                            this.Manager.Comment("reaching state \'S667\'");
                            bool temp92;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp92);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S747\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp92, "isPropertyValueChanged of RopReleaseMethod, state S747");
                            this.Manager.Comment("reaching state \'S827\'");
                            bool temp93;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp94;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp93, out temp94);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S907\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp93, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S907");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp94, "error of RopOpenStreamMethod, state S907");
                            this.Manager.Comment("reaching state \'S1003\'");
                            bool temp95;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp95);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp95);
                            this.Manager.Comment("reaching state \'S1115\'");
                            int temp96 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker6)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker7)));
                            if ((temp96 == 0)) {
                                this.Manager.Comment("reaching state \'S1252\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1380\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1484\'");
                                goto label17;
                            }
                            if ((temp96 == 1)) {
                                this.Manager.Comment("reaching state \'S1253\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1381\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1485\'");
                                goto label17;
                            }
                            throw new InvalidOperationException("never reached");
                        label17:
;
                            goto label18;
                        }
                        throw new InvalidOperationException("never reached");
                    label18:
;
                        goto label22;
                    }
                    if ((temp114 == 1)) {
                        this.Manager.Comment("reaching state \'S223\'");
                        bool temp98;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp98);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp98);
                        this.Manager.Comment("reaching state \'S279\'");
                        int temp113 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker9)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker12)));
                        if ((temp113 == 0)) {
                            this.Manager.Comment("reaching state \'S348\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp99;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp99);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S428\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp99, "error of RopWriteStreamMethod, state S428");
                            this.Manager.Comment("reaching state \'S508\'");
                            bool temp100;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp100);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S588\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp100, "isPropertyValueChanged of RopCommitStreamMethod, state S588");
                            this.Manager.Comment("reaching state \'S668\'");
                            bool temp101;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp101);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S748\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp101, "isPropertyValueChanged of RopReleaseMethod, state S748");
                            this.Manager.Comment("reaching state \'S828\'");
                            bool temp102;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp103;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp102, out temp103);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S908\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp102, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S908");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp103, "error of RopOpenStreamMethod, state S908");
                            this.Manager.Comment("reaching state \'S1004\'");
                            bool temp104;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp104);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp104);
                            this.Manager.Comment("reaching state \'S1116\'");
                            int temp105 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker10)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker11)));
                            if ((temp105 == 0)) {
                                this.Manager.Comment("reaching state \'S1254\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1382\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1486\'");
                                goto label19;
                            }
                            if ((temp105 == 1)) {
                                this.Manager.Comment("reaching state \'S1255\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1383\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1487\'");
                                goto label19;
                            }
                            throw new InvalidOperationException("never reached");
                        label19:
;
                            goto label21;
                        }
                        if ((temp113 == 1)) {
                            this.Manager.Comment("reaching state \'S349\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp106;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp106);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S429\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp106, "error of RopWriteStreamMethod, state S429");
                            this.Manager.Comment("reaching state \'S509\'");
                            bool temp107;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp107);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S589\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp107, "isPropertyValueChanged of RopCommitStreamMethod, state S589");
                            this.Manager.Comment("reaching state \'S669\'");
                            bool temp108;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp108);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S749\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp108, "isPropertyValueChanged of RopReleaseMethod, state S749");
                            this.Manager.Comment("reaching state \'S829\'");
                            bool temp109;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp110;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp109, out temp110);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S909\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp109, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S909");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp110, "error of RopOpenStreamMethod, state S909");
                            this.Manager.Comment("reaching state \'S1005\'");
                            bool temp111;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp111);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp111);
                            this.Manager.Comment("reaching state \'S1117\'");
                            int temp112 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker13)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker14)));
                            if ((temp112 == 0)) {
                                this.Manager.Comment("reaching state \'S1256\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1384\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1488\'");
                                goto label20;
                            }
                            if ((temp112 == 1)) {
                                this.Manager.Comment("reaching state \'S1257\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1385\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1489\'");
                                goto label20;
                            }
                            throw new InvalidOperationException("never reached");
                        label20:
;
                            goto label21;
                        }
                        throw new InvalidOperationException("never reached");
                    label21:
;
                        goto label22;
                    }
                    throw new InvalidOperationException("never reached");
                label22:
;
                    goto label30;
                }
                if ((temp149 == 1)) {
                    this.Manager.Comment("reaching state \'S153\'");
                    bool temp115;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp115);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp115);
                    this.Manager.Comment("reaching state \'S181\'");
                    int temp148 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker16)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker23)));
                    if ((temp148 == 0)) {
                        this.Manager.Comment("reaching state \'S224\'");
                        bool temp116;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp116);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp116);
                        this.Manager.Comment("reaching state \'S280\'");
                        int temp131 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker17)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker20)));
                        if ((temp131 == 0)) {
                            this.Manager.Comment("reaching state \'S350\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp117;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp117);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S430\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp117, "error of RopWriteStreamMethod, state S430");
                            this.Manager.Comment("reaching state \'S510\'");
                            bool temp118;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp118);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S590\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp118, "isPropertyValueChanged of RopCommitStreamMethod, state S590");
                            this.Manager.Comment("reaching state \'S670\'");
                            bool temp119;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp119);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S750\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp119, "isPropertyValueChanged of RopReleaseMethod, state S750");
                            this.Manager.Comment("reaching state \'S830\'");
                            bool temp120;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp121;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp120, out temp121);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S910\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp120, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S910");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp121, "error of RopOpenStreamMethod, state S910");
                            this.Manager.Comment("reaching state \'S1006\'");
                            bool temp122;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp122);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp122);
                            this.Manager.Comment("reaching state \'S1118\'");
                            int temp123 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker18)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker19)));
                            if ((temp123 == 0)) {
                                this.Manager.Comment("reaching state \'S1258\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1386\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1490\'");
                                goto label23;
                            }
                            if ((temp123 == 1)) {
                                this.Manager.Comment("reaching state \'S1259\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1387\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1491\'");
                                goto label23;
                            }
                            throw new InvalidOperationException("never reached");
                        label23:
;
                            goto label25;
                        }
                        if ((temp131 == 1)) {
                            this.Manager.Comment("reaching state \'S351\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp124;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp124);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S431\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp124, "error of RopWriteStreamMethod, state S431");
                            this.Manager.Comment("reaching state \'S511\'");
                            bool temp125;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp125);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S591\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp125, "isPropertyValueChanged of RopCommitStreamMethod, state S591");
                            this.Manager.Comment("reaching state \'S671\'");
                            bool temp126;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp126);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S751\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp126, "isPropertyValueChanged of RopReleaseMethod, state S751");
                            this.Manager.Comment("reaching state \'S831\'");
                            bool temp127;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp128;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp127, out temp128);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S911\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp127, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S911");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp128, "error of RopOpenStreamMethod, state S911");
                            this.Manager.Comment("reaching state \'S1007\'");
                            bool temp129;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp129);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp129);
                            this.Manager.Comment("reaching state \'S1119\'");
                            int temp130 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker21)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker22)));
                            if ((temp130 == 0)) {
                                this.Manager.Comment("reaching state \'S1260\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1388\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1492\'");
                                goto label24;
                            }
                            if ((temp130 == 1)) {
                                this.Manager.Comment("reaching state \'S1261\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1389\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1493\'");
                                goto label24;
                            }
                            throw new InvalidOperationException("never reached");
                        label24:
;
                            goto label25;
                        }
                        throw new InvalidOperationException("never reached");
                    label25:
;
                        goto label29;
                    }
                    if ((temp148 == 1)) {
                        this.Manager.Comment("reaching state \'S225\'");
                        bool temp132;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp132);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp132);
                        this.Manager.Comment("reaching state \'S281\'");
                        int temp147 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker24)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker27)));
                        if ((temp147 == 0)) {
                            this.Manager.Comment("reaching state \'S352\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp133;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp133);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S432\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp133, "error of RopWriteStreamMethod, state S432");
                            this.Manager.Comment("reaching state \'S512\'");
                            bool temp134;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp134);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S592\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp134, "isPropertyValueChanged of RopCommitStreamMethod, state S592");
                            this.Manager.Comment("reaching state \'S672\'");
                            bool temp135;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp135);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S752\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp135, "isPropertyValueChanged of RopReleaseMethod, state S752");
                            this.Manager.Comment("reaching state \'S832\'");
                            bool temp136;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp137;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp136, out temp137);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S912\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp136, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S912");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp137, "error of RopOpenStreamMethod, state S912");
                            this.Manager.Comment("reaching state \'S1008\'");
                            bool temp138;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp138);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp138);
                            this.Manager.Comment("reaching state \'S1120\'");
                            int temp139 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker25)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker26)));
                            if ((temp139 == 0)) {
                                this.Manager.Comment("reaching state \'S1262\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1390\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1494\'");
                                goto label26;
                            }
                            if ((temp139 == 1)) {
                                this.Manager.Comment("reaching state \'S1263\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1391\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1495\'");
                                goto label26;
                            }
                            throw new InvalidOperationException("never reached");
                        label26:
;
                            goto label28;
                        }
                        if ((temp147 == 1)) {
                            this.Manager.Comment("reaching state \'S353\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp140;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp140);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S433\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp140, "error of RopWriteStreamMethod, state S433");
                            this.Manager.Comment("reaching state \'S513\'");
                            bool temp141;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp141);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S593\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp141, "isPropertyValueChanged of RopCommitStreamMethod, state S593");
                            this.Manager.Comment("reaching state \'S673\'");
                            bool temp142;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp142);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S753\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp142, "isPropertyValueChanged of RopReleaseMethod, state S753");
                            this.Manager.Comment("reaching state \'S833\'");
                            bool temp143;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp144;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp143, out temp144);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S913\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp143, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S913");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp144, "error of RopOpenStreamMethod, state S913");
                            this.Manager.Comment("reaching state \'S1009\'");
                            bool temp145;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp145);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp145);
                            this.Manager.Comment("reaching state \'S1121\'");
                            int temp146 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker28)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker29)));
                            if ((temp146 == 0)) {
                                this.Manager.Comment("reaching state \'S1264\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1392\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1496\'");
                                goto label27;
                            }
                            if ((temp146 == 1)) {
                                this.Manager.Comment("reaching state \'S1265\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1393\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1497\'");
                                goto label27;
                            }
                            throw new InvalidOperationException("never reached");
                        label27:
;
                            goto label28;
                        }
                        throw new InvalidOperationException("never reached");
                    label28:
;
                        goto label29;
                    }
                    throw new InvalidOperationException("never reached");
                label29:
;
                    goto label30;
                }
                throw new InvalidOperationException("never reached");
            label30:
;
                goto label31;
            }
            if ((temp150 == 1)) {
                this.Manager.Comment("reaching state \'S31\'");
                goto label31;
            }
            throw new InvalidOperationException("never reached");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S131");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S180");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S278");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1114");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1114");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S278");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1115");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1115");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S180");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S279");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1116");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1116");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S279");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1117");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1117");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S131");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S181");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S280");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1118");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1118");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S280");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1119");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1119");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S181");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S281");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1120");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1120");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S281");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1121");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1121");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_SetDataWithStream_TestSuite2() {
            this.Manager.BeginTest("MSOXCPRPT_S04_SetDataWithStream_TestSuite2");
            this.Manager.Comment("reaching state \'S12\'");
            bool temp151;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp151);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp151);
            this.Manager.Comment("reaching state \'S13\'");
            int temp235 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp235 == 0)) {
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S46\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S56\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S66\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S76\'");
                bool temp152;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp153;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp152, out temp153);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S86\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp152, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp153, "error of RopOpenStreamMethod, state S86");
                this.Manager.Comment("reaching state \'S96\'");
                bool temp154;
                bool temp155;
                bool temp156;
                this.Manager.Comment("executing step \'call RopSetStreamSizeMethod(False,out _,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopSetStreamSizeMethod(false, out temp154, out temp155, out temp156);
                this.Manager.Checkpoint("MS-OXCPRPT_R57707");
                this.Manager.Checkpoint("MS-OXCPRPT_R322");
                this.Manager.Checkpoint("MS-OXCPRPT_R32801");
                this.Manager.Checkpoint("MS-OXCPRPT_R57705");
                this.Manager.Comment("reaching state \'S106\'");
                this.Manager.Comment("checking step \'return RopSetStreamSizeMethod/[out False,out True,out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp154, "isExtendedValueZero of RopSetStreamSizeMethod, state S106");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp155, "isLost of RopSetStreamSizeMethod, state S106");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp156, "isIncrease of RopSetStreamSizeMethod, state S106");
                this.Manager.Comment("reaching state \'S118\'");
                bool temp157;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86706,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86706, out temp157);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp157);
                this.Manager.Comment("reaching state \'S132\'");
                int temp234 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker15)));
                if ((temp234 == 0)) {
                    this.Manager.Comment("reaching state \'S154\'");
                    bool temp158;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp158);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp158);
                    this.Manager.Comment("reaching state \'S182\'");
                    int temp195 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker8)));
                    if ((temp195 == 0)) {
                        this.Manager.Comment("reaching state \'S226\'");
                        bool temp159;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp159);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp159);
                        this.Manager.Comment("reaching state \'S282\'");
                        int temp176 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker2)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker5)));
                        if ((temp176 == 0)) {
                            this.Manager.Comment("reaching state \'S354\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp160;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp160);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S434\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp160, "error of RopWriteStreamMethod, state S434");
                            this.Manager.Comment("reaching state \'S514\'");
                            bool temp161;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp161);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S594\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp161, "isPropertyValueChanged of RopCommitStreamMethod, state S594");
                            this.Manager.Comment("reaching state \'S674\'");
                            bool temp162;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp162);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S754\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp162, "isPropertyValueChanged of RopReleaseMethod, state S754");
                            this.Manager.Comment("reaching state \'S834\'");
                            bool temp163;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp164;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp163, out temp164);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S914\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp163, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S914");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp164, "error of RopOpenStreamMethod, state S914");
                            this.Manager.Comment("reaching state \'S1010\'");
                            bool temp165;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp165);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp165);
                            this.Manager.Comment("reaching state \'S1122\'");
                            int temp167 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker3)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker4)));
                            if ((temp167 == 0)) {
                                this.Manager.Comment("reaching state \'S1266\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1394\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1498\'");
                                goto label32;
                            }
                            if ((temp167 == 1)) {
                                this.Manager.Comment("reaching state \'S1267\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp166;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp166);
                                this.Manager.Comment("reaching state \'S1395\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp166, "error of RopWriteAndCommitStreamMethod, state S1395");
                                this.Manager.Comment("reaching state \'S1499\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1546\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1562\'");
                                goto label32;
                            }
                            throw new InvalidOperationException("never reached");
                        label32:
;
                            goto label34;
                        }
                        if ((temp176 == 1)) {
                            this.Manager.Comment("reaching state \'S355\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp168;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp168);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S435\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp168, "error of RopWriteStreamMethod, state S435");
                            this.Manager.Comment("reaching state \'S515\'");
                            bool temp169;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp169);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S595\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp169, "isPropertyValueChanged of RopCommitStreamMethod, state S595");
                            this.Manager.Comment("reaching state \'S675\'");
                            bool temp170;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp170);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S755\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp170, "isPropertyValueChanged of RopReleaseMethod, state S755");
                            this.Manager.Comment("reaching state \'S835\'");
                            bool temp171;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp172;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp171, out temp172);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S915\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp171, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S915");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp172, "error of RopOpenStreamMethod, state S915");
                            this.Manager.Comment("reaching state \'S1011\'");
                            bool temp173;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp173);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp173);
                            this.Manager.Comment("reaching state \'S1123\'");
                            int temp175 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker6)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker7)));
                            if ((temp175 == 0)) {
                                this.Manager.Comment("reaching state \'S1268\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1396\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1500\'");
                                goto label33;
                            }
                            if ((temp175 == 1)) {
                                this.Manager.Comment("reaching state \'S1269\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp174;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp174);
                                this.Manager.Comment("reaching state \'S1397\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp174, "error of RopWriteAndCommitStreamMethod, state S1397");
                                this.Manager.Comment("reaching state \'S1501\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1547\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1563\'");
                                goto label33;
                            }
                            throw new InvalidOperationException("never reached");
                        label33:
;
                            goto label34;
                        }
                        throw new InvalidOperationException("never reached");
                    label34:
;
                        goto label38;
                    }
                    if ((temp195 == 1)) {
                        this.Manager.Comment("reaching state \'S227\'");
                        bool temp177;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp177);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp177);
                        this.Manager.Comment("reaching state \'S283\'");
                        int temp194 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker9)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker12)));
                        if ((temp194 == 0)) {
                            this.Manager.Comment("reaching state \'S356\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp178;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp178);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S436\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp178, "error of RopWriteStreamMethod, state S436");
                            this.Manager.Comment("reaching state \'S516\'");
                            bool temp179;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp179);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S596\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp179, "isPropertyValueChanged of RopCommitStreamMethod, state S596");
                            this.Manager.Comment("reaching state \'S676\'");
                            bool temp180;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp180);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S756\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp180, "isPropertyValueChanged of RopReleaseMethod, state S756");
                            this.Manager.Comment("reaching state \'S836\'");
                            bool temp181;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp182;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp181, out temp182);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S916\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp181, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S916");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp182, "error of RopOpenStreamMethod, state S916");
                            this.Manager.Comment("reaching state \'S1012\'");
                            bool temp183;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp183);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp183);
                            this.Manager.Comment("reaching state \'S1124\'");
                            int temp185 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker10)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker11)));
                            if ((temp185 == 0)) {
                                this.Manager.Comment("reaching state \'S1270\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1398\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1502\'");
                                goto label35;
                            }
                            if ((temp185 == 1)) {
                                this.Manager.Comment("reaching state \'S1271\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp184;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp184);
                                this.Manager.Comment("reaching state \'S1399\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp184, "error of RopWriteAndCommitStreamMethod, state S1399");
                                this.Manager.Comment("reaching state \'S1503\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1548\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1564\'");
                                goto label35;
                            }
                            throw new InvalidOperationException("never reached");
                        label35:
;
                            goto label37;
                        }
                        if ((temp194 == 1)) {
                            this.Manager.Comment("reaching state \'S357\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp186;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp186);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S437\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp186, "error of RopWriteStreamMethod, state S437");
                            this.Manager.Comment("reaching state \'S517\'");
                            bool temp187;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp187);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S597\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp187, "isPropertyValueChanged of RopCommitStreamMethod, state S597");
                            this.Manager.Comment("reaching state \'S677\'");
                            bool temp188;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp188);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S757\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp188, "isPropertyValueChanged of RopReleaseMethod, state S757");
                            this.Manager.Comment("reaching state \'S837\'");
                            bool temp189;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp190;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp189, out temp190);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S917\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp189, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S917");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp190, "error of RopOpenStreamMethod, state S917");
                            this.Manager.Comment("reaching state \'S1013\'");
                            bool temp191;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp191);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp191);
                            this.Manager.Comment("reaching state \'S1125\'");
                            int temp193 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker13)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker14)));
                            if ((temp193 == 0)) {
                                this.Manager.Comment("reaching state \'S1272\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1400\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1504\'");
                                goto label36;
                            }
                            if ((temp193 == 1)) {
                                this.Manager.Comment("reaching state \'S1273\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp192;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp192);
                                this.Manager.Comment("reaching state \'S1401\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp192, "error of RopWriteAndCommitStreamMethod, state S1401");
                                this.Manager.Comment("reaching state \'S1505\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1549\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1565\'");
                                goto label36;
                            }
                            throw new InvalidOperationException("never reached");
                        label36:
;
                            goto label37;
                        }
                        throw new InvalidOperationException("never reached");
                    label37:
;
                        goto label38;
                    }
                    throw new InvalidOperationException("never reached");
                label38:
;
                    goto label46;
                }
                if ((temp234 == 1)) {
                    this.Manager.Comment("reaching state \'S155\'");
                    bool temp196;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp196);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp196);
                    this.Manager.Comment("reaching state \'S183\'");
                    int temp233 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker16)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker23)));
                    if ((temp233 == 0)) {
                        this.Manager.Comment("reaching state \'S228\'");
                        bool temp197;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp197);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp197);
                        this.Manager.Comment("reaching state \'S284\'");
                        int temp214 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker17)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker20)));
                        if ((temp214 == 0)) {
                            this.Manager.Comment("reaching state \'S358\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp198;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp198);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S438\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp198, "error of RopWriteStreamMethod, state S438");
                            this.Manager.Comment("reaching state \'S518\'");
                            bool temp199;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp199);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S598\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp199, "isPropertyValueChanged of RopCommitStreamMethod, state S598");
                            this.Manager.Comment("reaching state \'S678\'");
                            bool temp200;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp200);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S758\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp200, "isPropertyValueChanged of RopReleaseMethod, state S758");
                            this.Manager.Comment("reaching state \'S838\'");
                            bool temp201;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp202;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp201, out temp202);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S918\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp201, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S918");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp202, "error of RopOpenStreamMethod, state S918");
                            this.Manager.Comment("reaching state \'S1014\'");
                            bool temp203;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp203);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp203);
                            this.Manager.Comment("reaching state \'S1126\'");
                            int temp205 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker18)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker19)));
                            if ((temp205 == 0)) {
                                this.Manager.Comment("reaching state \'S1274\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1402\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1506\'");
                                goto label39;
                            }
                            if ((temp205 == 1)) {
                                this.Manager.Comment("reaching state \'S1275\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp204;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp204);
                                this.Manager.Comment("reaching state \'S1403\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp204, "error of RopWriteAndCommitStreamMethod, state S1403");
                                this.Manager.Comment("reaching state \'S1507\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1550\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1566\'");
                                goto label39;
                            }
                            throw new InvalidOperationException("never reached");
                        label39:
;
                            goto label41;
                        }
                        if ((temp214 == 1)) {
                            this.Manager.Comment("reaching state \'S359\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp206;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp206);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S439\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp206, "error of RopWriteStreamMethod, state S439");
                            this.Manager.Comment("reaching state \'S519\'");
                            bool temp207;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp207);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S599\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp207, "isPropertyValueChanged of RopCommitStreamMethod, state S599");
                            this.Manager.Comment("reaching state \'S679\'");
                            bool temp208;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp208);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S759\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp208, "isPropertyValueChanged of RopReleaseMethod, state S759");
                            this.Manager.Comment("reaching state \'S839\'");
                            bool temp209;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp210;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp209, out temp210);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S919\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp209, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S919");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp210, "error of RopOpenStreamMethod, state S919");
                            this.Manager.Comment("reaching state \'S1015\'");
                            bool temp211;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp211);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp211);
                            this.Manager.Comment("reaching state \'S1127\'");
                            int temp213 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker21)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker22)));
                            if ((temp213 == 0)) {
                                this.Manager.Comment("reaching state \'S1276\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1404\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1508\'");
                                goto label40;
                            }
                            if ((temp213 == 1)) {
                                this.Manager.Comment("reaching state \'S1277\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp212;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp212);
                                this.Manager.Comment("reaching state \'S1405\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp212, "error of RopWriteAndCommitStreamMethod, state S1405");
                                this.Manager.Comment("reaching state \'S1509\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1551\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1567\'");
                                goto label40;
                            }
                            throw new InvalidOperationException("never reached");
                        label40:
;
                            goto label41;
                        }
                        throw new InvalidOperationException("never reached");
                    label41:
;
                        goto label45;
                    }
                    if ((temp233 == 1)) {
                        this.Manager.Comment("reaching state \'S229\'");
                        bool temp215;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp215);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp215);
                        this.Manager.Comment("reaching state \'S285\'");
                        int temp232 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker24)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker27)));
                        if ((temp232 == 0)) {
                            this.Manager.Comment("reaching state \'S360\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp216;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp216);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S440\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp216, "error of RopWriteStreamMethod, state S440");
                            this.Manager.Comment("reaching state \'S520\'");
                            bool temp217;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp217);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S600\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp217, "isPropertyValueChanged of RopCommitStreamMethod, state S600");
                            this.Manager.Comment("reaching state \'S680\'");
                            bool temp218;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp218);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S760\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp218, "isPropertyValueChanged of RopReleaseMethod, state S760");
                            this.Manager.Comment("reaching state \'S840\'");
                            bool temp219;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp220;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp219, out temp220);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S920\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp219, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S920");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp220, "error of RopOpenStreamMethod, state S920");
                            this.Manager.Comment("reaching state \'S1016\'");
                            bool temp221;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp221);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp221);
                            this.Manager.Comment("reaching state \'S1128\'");
                            int temp223 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker25)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker26)));
                            if ((temp223 == 0)) {
                                this.Manager.Comment("reaching state \'S1278\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1406\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1510\'");
                                goto label42;
                            }
                            if ((temp223 == 1)) {
                                this.Manager.Comment("reaching state \'S1279\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp222;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp222);
                                this.Manager.Comment("reaching state \'S1407\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp222, "error of RopWriteAndCommitStreamMethod, state S1407");
                                this.Manager.Comment("reaching state \'S1511\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1552\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1568\'");
                                goto label42;
                            }
                            throw new InvalidOperationException("never reached");
                        label42:
;
                            goto label44;
                        }
                        if ((temp232 == 1)) {
                            this.Manager.Comment("reaching state \'S361\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp224;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp224);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S441\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp224, "error of RopWriteStreamMethod, state S441");
                            this.Manager.Comment("reaching state \'S521\'");
                            bool temp225;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp225);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S601\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp225, "isPropertyValueChanged of RopCommitStreamMethod, state S601");
                            this.Manager.Comment("reaching state \'S681\'");
                            bool temp226;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp226);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S761\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp226, "isPropertyValueChanged of RopReleaseMethod, state S761");
                            this.Manager.Comment("reaching state \'S841\'");
                            bool temp227;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp228;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp227, out temp228);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S921\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp227, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S921");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp228, "error of RopOpenStreamMethod, state S921");
                            this.Manager.Comment("reaching state \'S1017\'");
                            bool temp229;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp229);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp229);
                            this.Manager.Comment("reaching state \'S1129\'");
                            int temp231 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker28)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker29)));
                            if ((temp231 == 0)) {
                                this.Manager.Comment("reaching state \'S1280\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1408\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1512\'");
                                goto label43;
                            }
                            if ((temp231 == 1)) {
                                this.Manager.Comment("reaching state \'S1281\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp230;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp230);
                                this.Manager.Comment("reaching state \'S1409\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp230, "error of RopWriteAndCommitStreamMethod, state S1409");
                                this.Manager.Comment("reaching state \'S1513\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1553\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1569\'");
                                goto label43;
                            }
                            throw new InvalidOperationException("never reached");
                        label43:
;
                            goto label44;
                        }
                        throw new InvalidOperationException("never reached");
                    label44:
;
                        goto label45;
                    }
                    throw new InvalidOperationException("never reached");
                label45:
;
                    goto label46;
                }
                throw new InvalidOperationException("never reached");
            label46:
;
                goto label47;
            }
            if ((temp235 == 1)) {
                this.Manager.Comment("reaching state \'S33\'");
                goto label47;
            }
            throw new InvalidOperationException("never reached");
        label47:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S13");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S132");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S182");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S282");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1122");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1122");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S282");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1123");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1123");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S182");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S283");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1124");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1124");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S283");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1125");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1125");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S132");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S183");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S284");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1126");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1126");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S284");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1127");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1127");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S183");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S285");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1128");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1128");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S285");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1129");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1129");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S13");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_SetDataWithStream_TestSuite3() {
            this.Manager.BeginTest("MSOXCPRPT_S04_SetDataWithStream_TestSuite3");
            this.Manager.Comment("reaching state \'S14\'");
            bool temp236;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp236);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp236);
            this.Manager.Comment("reaching state \'S15\'");
            int temp312 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp312 == 0)) {
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S47\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S57\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S67\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S77\'");
                bool temp237;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp238;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp237, out temp238);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S87\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp237, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp238, "error of RopOpenStreamMethod, state S87");
                this.Manager.Comment("reaching state \'S97\'");
                bool temp239;
                bool temp240;
                bool temp241;
                this.Manager.Comment("executing step \'call RopSetStreamSizeMethod(False,out _,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopSetStreamSizeMethod(false, out temp239, out temp240, out temp241);
                this.Manager.Checkpoint("MS-OXCPRPT_R57707");
                this.Manager.Checkpoint("MS-OXCPRPT_R322");
                this.Manager.Checkpoint("MS-OXCPRPT_R32801");
                this.Manager.Checkpoint("MS-OXCPRPT_R57705");
                this.Manager.Comment("reaching state \'S107\'");
                this.Manager.Comment("checking step \'return RopSetStreamSizeMethod/[out False,out True,out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp239, "isExtendedValueZero of RopSetStreamSizeMethod, state S107");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp240, "isLost of RopSetStreamSizeMethod, state S107");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp241, "isIncrease of RopSetStreamSizeMethod, state S107");
                this.Manager.Comment("reaching state \'S119\'");
                bool temp242;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86706,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86706, out temp242);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp242);
                this.Manager.Comment("reaching state \'S133\'");
                int temp311 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker15)));
                if ((temp311 == 0)) {
                    this.Manager.Comment("reaching state \'S156\'");
                    bool temp243;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp243);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp243);
                    this.Manager.Comment("reaching state \'S184\'");
                    int temp276 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker8)));
                    if ((temp276 == 0)) {
                        this.Manager.Comment("reaching state \'S230\'");
                        bool temp244;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp244);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp244);
                        this.Manager.Comment("reaching state \'S286\'");
                        int temp259 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker2)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker5)));
                        if ((temp259 == 0)) {
                            this.Manager.Comment("reaching state \'S362\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp245;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp245);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S442\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp245, "error of RopWriteStreamMethod, state S442");
                            this.Manager.Comment("reaching state \'S522\'");
                            bool temp246;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp246);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S602\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp246, "isPropertyValueChanged of RopCommitStreamMethod, state S602");
                            this.Manager.Comment("reaching state \'S682\'");
                            bool temp247;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp247);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S762\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp247, "isPropertyValueChanged of RopReleaseMethod, state S762");
                            this.Manager.Comment("reaching state \'S842\'");
                            bool temp248;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp249;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp248, out temp249);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S922\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp248, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S922");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp249, "error of RopOpenStreamMethod, state S922");
                            this.Manager.Comment("reaching state \'S1018\'");
                            bool temp250;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp250);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp250);
                            this.Manager.Comment("reaching state \'S1130\'");
                            int temp251 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker3)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker4)));
                            if ((temp251 == 0)) {
                                this.Manager.Comment("reaching state \'S1282\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1410\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1514\'");
                                goto label48;
                            }
                            if ((temp251 == 1)) {
                                this.Manager.Comment("reaching state \'S1283\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1411\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1515\'");
                                goto label48;
                            }
                            throw new InvalidOperationException("never reached");
                        label48:
;
                            goto label50;
                        }
                        if ((temp259 == 1)) {
                            this.Manager.Comment("reaching state \'S363\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp252;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp252);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S443\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp252, "error of RopWriteStreamMethod, state S443");
                            this.Manager.Comment("reaching state \'S523\'");
                            bool temp253;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp253);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S603\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp253, "isPropertyValueChanged of RopCommitStreamMethod, state S603");
                            this.Manager.Comment("reaching state \'S683\'");
                            bool temp254;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp254);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S763\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp254, "isPropertyValueChanged of RopReleaseMethod, state S763");
                            this.Manager.Comment("reaching state \'S843\'");
                            bool temp255;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp256;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp255, out temp256);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S923\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp255, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S923");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp256, "error of RopOpenStreamMethod, state S923");
                            this.Manager.Comment("reaching state \'S1019\'");
                            bool temp257;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp257);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp257);
                            this.Manager.Comment("reaching state \'S1131\'");
                            int temp258 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker6)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker7)));
                            if ((temp258 == 0)) {
                                this.Manager.Comment("reaching state \'S1284\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1412\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1516\'");
                                goto label49;
                            }
                            if ((temp258 == 1)) {
                                this.Manager.Comment("reaching state \'S1285\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1413\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1517\'");
                                goto label49;
                            }
                            throw new InvalidOperationException("never reached");
                        label49:
;
                            goto label50;
                        }
                        throw new InvalidOperationException("never reached");
                    label50:
;
                        goto label54;
                    }
                    if ((temp276 == 1)) {
                        this.Manager.Comment("reaching state \'S231\'");
                        bool temp260;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp260);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp260);
                        this.Manager.Comment("reaching state \'S287\'");
                        int temp275 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker9)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker12)));
                        if ((temp275 == 0)) {
                            this.Manager.Comment("reaching state \'S364\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp261;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp261);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S444\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp261, "error of RopWriteStreamMethod, state S444");
                            this.Manager.Comment("reaching state \'S524\'");
                            bool temp262;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp262);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S604\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp262, "isPropertyValueChanged of RopCommitStreamMethod, state S604");
                            this.Manager.Comment("reaching state \'S684\'");
                            bool temp263;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp263);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S764\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp263, "isPropertyValueChanged of RopReleaseMethod, state S764");
                            this.Manager.Comment("reaching state \'S844\'");
                            bool temp264;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp265;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp264, out temp265);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S924\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp264, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S924");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp265, "error of RopOpenStreamMethod, state S924");
                            this.Manager.Comment("reaching state \'S1020\'");
                            bool temp266;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp266);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp266);
                            this.Manager.Comment("reaching state \'S1132\'");
                            int temp267 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker10)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker11)));
                            if ((temp267 == 0)) {
                                this.Manager.Comment("reaching state \'S1286\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1414\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1518\'");
                                goto label51;
                            }
                            if ((temp267 == 1)) {
                                this.Manager.Comment("reaching state \'S1287\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1415\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1519\'");
                                goto label51;
                            }
                            throw new InvalidOperationException("never reached");
                        label51:
;
                            goto label53;
                        }
                        if ((temp275 == 1)) {
                            this.Manager.Comment("reaching state \'S365\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp268;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp268);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S445\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp268, "error of RopWriteStreamMethod, state S445");
                            this.Manager.Comment("reaching state \'S525\'");
                            bool temp269;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp269);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S605\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp269, "isPropertyValueChanged of RopCommitStreamMethod, state S605");
                            this.Manager.Comment("reaching state \'S685\'");
                            bool temp270;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp270);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S765\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp270, "isPropertyValueChanged of RopReleaseMethod, state S765");
                            this.Manager.Comment("reaching state \'S845\'");
                            bool temp271;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp272;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp271, out temp272);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S925\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp271, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S925");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp272, "error of RopOpenStreamMethod, state S925");
                            this.Manager.Comment("reaching state \'S1021\'");
                            bool temp273;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp273);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp273);
                            this.Manager.Comment("reaching state \'S1133\'");
                            int temp274 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker13)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker14)));
                            if ((temp274 == 0)) {
                                this.Manager.Comment("reaching state \'S1288\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1416\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1520\'");
                                goto label52;
                            }
                            if ((temp274 == 1)) {
                                this.Manager.Comment("reaching state \'S1289\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1417\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1521\'");
                                goto label52;
                            }
                            throw new InvalidOperationException("never reached");
                        label52:
;
                            goto label53;
                        }
                        throw new InvalidOperationException("never reached");
                    label53:
;
                        goto label54;
                    }
                    throw new InvalidOperationException("never reached");
                label54:
;
                    goto label62;
                }
                if ((temp311 == 1)) {
                    this.Manager.Comment("reaching state \'S157\'");
                    bool temp277;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp277);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp277);
                    this.Manager.Comment("reaching state \'S185\'");
                    int temp310 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker16)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker23)));
                    if ((temp310 == 0)) {
                        this.Manager.Comment("reaching state \'S232\'");
                        bool temp278;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp278);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp278);
                        this.Manager.Comment("reaching state \'S288\'");
                        int temp293 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker17)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker20)));
                        if ((temp293 == 0)) {
                            this.Manager.Comment("reaching state \'S366\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp279;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp279);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S446\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp279, "error of RopWriteStreamMethod, state S446");
                            this.Manager.Comment("reaching state \'S526\'");
                            bool temp280;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp280);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S606\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp280, "isPropertyValueChanged of RopCommitStreamMethod, state S606");
                            this.Manager.Comment("reaching state \'S686\'");
                            bool temp281;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp281);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S766\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp281, "isPropertyValueChanged of RopReleaseMethod, state S766");
                            this.Manager.Comment("reaching state \'S846\'");
                            bool temp282;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp283;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp282, out temp283);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S926\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp282, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S926");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp283, "error of RopOpenStreamMethod, state S926");
                            this.Manager.Comment("reaching state \'S1022\'");
                            bool temp284;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp284);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp284);
                            this.Manager.Comment("reaching state \'S1134\'");
                            int temp285 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker18)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker19)));
                            if ((temp285 == 0)) {
                                this.Manager.Comment("reaching state \'S1290\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1418\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1522\'");
                                goto label55;
                            }
                            if ((temp285 == 1)) {
                                this.Manager.Comment("reaching state \'S1291\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1419\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1523\'");
                                goto label55;
                            }
                            throw new InvalidOperationException("never reached");
                        label55:
;
                            goto label57;
                        }
                        if ((temp293 == 1)) {
                            this.Manager.Comment("reaching state \'S367\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp286;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp286);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S447\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp286, "error of RopWriteStreamMethod, state S447");
                            this.Manager.Comment("reaching state \'S527\'");
                            bool temp287;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp287);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S607\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp287, "isPropertyValueChanged of RopCommitStreamMethod, state S607");
                            this.Manager.Comment("reaching state \'S687\'");
                            bool temp288;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp288);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S767\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp288, "isPropertyValueChanged of RopReleaseMethod, state S767");
                            this.Manager.Comment("reaching state \'S847\'");
                            bool temp289;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp290;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp289, out temp290);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S927\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp289, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S927");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp290, "error of RopOpenStreamMethod, state S927");
                            this.Manager.Comment("reaching state \'S1023\'");
                            bool temp291;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp291);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp291);
                            this.Manager.Comment("reaching state \'S1135\'");
                            int temp292 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker21)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker22)));
                            if ((temp292 == 0)) {
                                this.Manager.Comment("reaching state \'S1292\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1420\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1524\'");
                                goto label56;
                            }
                            if ((temp292 == 1)) {
                                this.Manager.Comment("reaching state \'S1293\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1421\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1525\'");
                                goto label56;
                            }
                            throw new InvalidOperationException("never reached");
                        label56:
;
                            goto label57;
                        }
                        throw new InvalidOperationException("never reached");
                    label57:
;
                        goto label61;
                    }
                    if ((temp310 == 1)) {
                        this.Manager.Comment("reaching state \'S233\'");
                        bool temp294;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp294);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp294);
                        this.Manager.Comment("reaching state \'S289\'");
                        int temp309 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker24)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker27)));
                        if ((temp309 == 0)) {
                            this.Manager.Comment("reaching state \'S368\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp295;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp295);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S448\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp295, "error of RopWriteStreamMethod, state S448");
                            this.Manager.Comment("reaching state \'S528\'");
                            bool temp296;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp296);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S608\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp296, "isPropertyValueChanged of RopCommitStreamMethod, state S608");
                            this.Manager.Comment("reaching state \'S688\'");
                            bool temp297;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp297);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S768\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp297, "isPropertyValueChanged of RopReleaseMethod, state S768");
                            this.Manager.Comment("reaching state \'S848\'");
                            bool temp298;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp299;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp298, out temp299);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S928\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp298, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S928");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp299, "error of RopOpenStreamMethod, state S928");
                            this.Manager.Comment("reaching state \'S1024\'");
                            bool temp300;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp300);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp300);
                            this.Manager.Comment("reaching state \'S1136\'");
                            int temp301 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker25)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker26)));
                            if ((temp301 == 0)) {
                                this.Manager.Comment("reaching state \'S1294\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1422\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1526\'");
                                goto label58;
                            }
                            if ((temp301 == 1)) {
                                this.Manager.Comment("reaching state \'S1295\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1423\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1527\'");
                                goto label58;
                            }
                            throw new InvalidOperationException("never reached");
                        label58:
;
                            goto label60;
                        }
                        if ((temp309 == 1)) {
                            this.Manager.Comment("reaching state \'S369\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp302;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp302);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S449\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp302, "error of RopWriteStreamMethod, state S449");
                            this.Manager.Comment("reaching state \'S529\'");
                            bool temp303;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp303);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S609\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp303, "isPropertyValueChanged of RopCommitStreamMethod, state S609");
                            this.Manager.Comment("reaching state \'S689\'");
                            bool temp304;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp304);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S769\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp304, "isPropertyValueChanged of RopReleaseMethod, state S769");
                            this.Manager.Comment("reaching state \'S849\'");
                            bool temp305;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp306;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp305, out temp306);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S929\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp305, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S929");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp306, "error of RopOpenStreamMethod, state S929");
                            this.Manager.Comment("reaching state \'S1025\'");
                            bool temp307;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp307);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp307);
                            this.Manager.Comment("reaching state \'S1137\'");
                            int temp308 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker28)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker29)));
                            if ((temp308 == 0)) {
                                this.Manager.Comment("reaching state \'S1296\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1424\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1528\'");
                                goto label59;
                            }
                            if ((temp308 == 1)) {
                                this.Manager.Comment("reaching state \'S1297\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1425\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1529\'");
                                goto label59;
                            }
                            throw new InvalidOperationException("never reached");
                        label59:
;
                            goto label60;
                        }
                        throw new InvalidOperationException("never reached");
                    label60:
;
                        goto label61;
                    }
                    throw new InvalidOperationException("never reached");
                label61:
;
                    goto label62;
                }
                throw new InvalidOperationException("never reached");
            label62:
;
                goto label63;
            }
            if ((temp312 == 1)) {
                this.Manager.Comment("reaching state \'S35\'");
                goto label63;
            }
            throw new InvalidOperationException("never reached");
        label63:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S15");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S133");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S184");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S286");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1130");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1130");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S286");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1131");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1131");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S184");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S287");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1132");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1132");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S287");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1133");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1133");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S133");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S185");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S288");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1134");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1134");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S288");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1135");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1135");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S185");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S289");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1136");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1136");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S289");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1137");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1137");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S15");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_SetDataWithStream_TestSuite4() {
            this.Manager.BeginTest("MSOXCPRPT_S04_SetDataWithStream_TestSuite4");
            this.Manager.Comment("reaching state \'S16\'");
            bool temp313;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp313);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp313);
            this.Manager.Comment("reaching state \'S17\'");
            int temp394 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp394 == 0)) {
                this.Manager.Comment("reaching state \'S36\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S48\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S68\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S78\'");
                bool temp314;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp315;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp314, out temp315);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S88\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp314, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp315, "error of RopOpenStreamMethod, state S88");
                this.Manager.Comment("reaching state \'S98\'");
                bool temp316;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86706,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86706, out temp316);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp316);
                this.Manager.Comment("reaching state \'S108\'");
                int temp393 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker15)));
                if ((temp393 == 0)) {
                    this.Manager.Comment("reaching state \'S120\'");
                    bool temp317;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp317);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp317);
                    this.Manager.Comment("reaching state \'S134\'");
                    int temp354 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker8)));
                    if ((temp354 == 0)) {
                        this.Manager.Comment("reaching state \'S158\'");
                        bool temp318;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp318);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp318);
                        this.Manager.Comment("reaching state \'S186\'");
                        int temp335 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker2)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker5)));
                        if ((temp335 == 0)) {
                            this.Manager.Comment("reaching state \'S234\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp319;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp319);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S290\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp319, "error of RopWriteStreamMethod, state S290");
                            this.Manager.Comment("reaching state \'S370\'");
                            bool temp320;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp320);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Checkpoint("MS-OXCPRPT_R56405");
                            this.Manager.Comment("reaching state \'S450\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp320, "isPropertyValueChanged of RopCommitStreamMethod, state S450");
                            this.Manager.Comment("reaching state \'S530\'");
                            bool temp321;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp321);
                            this.Manager.Comment("reaching state \'S610\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp321, "isPropertyValueChanged of RopReleaseMethod, state S610");
                            this.Manager.Comment("reaching state \'S690\'");
                            bool temp322;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp323;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp322, out temp323);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S770\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp322, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S770");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp323, "error of RopOpenStreamMethod, state S770");
                            this.Manager.Comment("reaching state \'S850\'");
                            bool temp324;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp324);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp324);
                            this.Manager.Comment("reaching state \'S930\'");
                            int temp326 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker3)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker4)));
                            if ((temp326 == 0)) {
                                this.Manager.Comment("reaching state \'S1026\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1138\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1298\'");
                                goto label64;
                            }
                            if ((temp326 == 1)) {
                                this.Manager.Comment("reaching state \'S1027\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp325;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp325);
                                this.Manager.Comment("reaching state \'S1139\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp325, "error of RopWriteAndCommitStreamMethod, state S1139");
                                this.Manager.Comment("reaching state \'S1299\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1426\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1530\'");
                                goto label64;
                            }
                            throw new InvalidOperationException("never reached");
                        label64:
;
                            goto label66;
                        }
                        if ((temp335 == 1)) {
                            this.Manager.Comment("reaching state \'S235\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp327;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp327);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S291\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp327, "error of RopWriteStreamMethod, state S291");
                            this.Manager.Comment("reaching state \'S371\'");
                            bool temp328;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp328);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Checkpoint("MS-OXCPRPT_R56405");
                            this.Manager.Comment("reaching state \'S451\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp328, "isPropertyValueChanged of RopCommitStreamMethod, state S451");
                            this.Manager.Comment("reaching state \'S531\'");
                            bool temp329;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp329);
                            this.Manager.Comment("reaching state \'S611\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp329, "isPropertyValueChanged of RopReleaseMethod, state S611");
                            this.Manager.Comment("reaching state \'S691\'");
                            bool temp330;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp331;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp330, out temp331);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S771\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp330, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S771");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp331, "error of RopOpenStreamMethod, state S771");
                            this.Manager.Comment("reaching state \'S851\'");
                            bool temp332;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp332);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp332);
                            this.Manager.Comment("reaching state \'S931\'");
                            int temp334 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker6)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker7)));
                            if ((temp334 == 0)) {
                                this.Manager.Comment("reaching state \'S1028\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1140\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1300\'");
                                goto label65;
                            }
                            if ((temp334 == 1)) {
                                this.Manager.Comment("reaching state \'S1029\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp333;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp333);
                                this.Manager.Comment("reaching state \'S1141\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp333, "error of RopWriteAndCommitStreamMethod, state S1141");
                                this.Manager.Comment("reaching state \'S1301\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1427\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1531\'");
                                goto label65;
                            }
                            throw new InvalidOperationException("never reached");
                        label65:
;
                            goto label66;
                        }
                        throw new InvalidOperationException("never reached");
                    label66:
;
                        goto label70;
                    }
                    if ((temp354 == 1)) {
                        this.Manager.Comment("reaching state \'S159\'");
                        bool temp336;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp336);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp336);
                        this.Manager.Comment("reaching state \'S187\'");
                        int temp353 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker9)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker12)));
                        if ((temp353 == 0)) {
                            this.Manager.Comment("reaching state \'S236\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp337;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp337);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S292\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp337, "error of RopWriteStreamMethod, state S292");
                            this.Manager.Comment("reaching state \'S372\'");
                            bool temp338;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp338);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Checkpoint("MS-OXCPRPT_R56405");
                            this.Manager.Comment("reaching state \'S452\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp338, "isPropertyValueChanged of RopCommitStreamMethod, state S452");
                            this.Manager.Comment("reaching state \'S532\'");
                            bool temp339;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp339);
                            this.Manager.Comment("reaching state \'S612\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp339, "isPropertyValueChanged of RopReleaseMethod, state S612");
                            this.Manager.Comment("reaching state \'S692\'");
                            bool temp340;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp341;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp340, out temp341);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S772\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp340, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S772");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp341, "error of RopOpenStreamMethod, state S772");
                            this.Manager.Comment("reaching state \'S852\'");
                            bool temp342;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp342);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp342);
                            this.Manager.Comment("reaching state \'S932\'");
                            int temp344 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker10)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker11)));
                            if ((temp344 == 0)) {
                                this.Manager.Comment("reaching state \'S1030\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1142\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1302\'");
                                goto label67;
                            }
                            if ((temp344 == 1)) {
                                this.Manager.Comment("reaching state \'S1031\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp343;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp343);
                                this.Manager.Comment("reaching state \'S1143\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp343, "error of RopWriteAndCommitStreamMethod, state S1143");
                                this.Manager.Comment("reaching state \'S1303\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1428\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1532\'");
                                goto label67;
                            }
                            throw new InvalidOperationException("never reached");
                        label67:
;
                            goto label69;
                        }
                        if ((temp353 == 1)) {
                            this.Manager.Comment("reaching state \'S237\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp345;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp345);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S293\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp345, "error of RopWriteStreamMethod, state S293");
                            this.Manager.Comment("reaching state \'S373\'");
                            bool temp346;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp346);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Checkpoint("MS-OXCPRPT_R56405");
                            this.Manager.Comment("reaching state \'S453\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp346, "isPropertyValueChanged of RopCommitStreamMethod, state S453");
                            this.Manager.Comment("reaching state \'S533\'");
                            bool temp347;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp347);
                            this.Manager.Comment("reaching state \'S613\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp347, "isPropertyValueChanged of RopReleaseMethod, state S613");
                            this.Manager.Comment("reaching state \'S693\'");
                            bool temp348;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp349;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp348, out temp349);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S773\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp348, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S773");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp349, "error of RopOpenStreamMethod, state S773");
                            this.Manager.Comment("reaching state \'S853\'");
                            bool temp350;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp350);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp350);
                            this.Manager.Comment("reaching state \'S933\'");
                            int temp352 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker13)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker14)));
                            if ((temp352 == 0)) {
                                this.Manager.Comment("reaching state \'S1032\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1144\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1304\'");
                                goto label68;
                            }
                            if ((temp352 == 1)) {
                                this.Manager.Comment("reaching state \'S1033\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp351;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp351);
                                this.Manager.Comment("reaching state \'S1145\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp351, "error of RopWriteAndCommitStreamMethod, state S1145");
                                this.Manager.Comment("reaching state \'S1305\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1429\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1533\'");
                                goto label68;
                            }
                            throw new InvalidOperationException("never reached");
                        label68:
;
                            goto label69;
                        }
                        throw new InvalidOperationException("never reached");
                    label69:
;
                        goto label70;
                    }
                    throw new InvalidOperationException("never reached");
                label70:
;
                    goto label78;
                }
                if ((temp393 == 1)) {
                    this.Manager.Comment("reaching state \'S121\'");
                    bool temp355;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp355);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp355);
                    this.Manager.Comment("reaching state \'S135\'");
                    int temp392 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker16)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker23)));
                    if ((temp392 == 0)) {
                        this.Manager.Comment("reaching state \'S160\'");
                        bool temp356;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp356);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp356);
                        this.Manager.Comment("reaching state \'S188\'");
                        int temp373 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker17)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker20)));
                        if ((temp373 == 0)) {
                            this.Manager.Comment("reaching state \'S238\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp357;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp357);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S294\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp357, "error of RopWriteStreamMethod, state S294");
                            this.Manager.Comment("reaching state \'S374\'");
                            bool temp358;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp358);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Checkpoint("MS-OXCPRPT_R56405");
                            this.Manager.Comment("reaching state \'S454\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp358, "isPropertyValueChanged of RopCommitStreamMethod, state S454");
                            this.Manager.Comment("reaching state \'S534\'");
                            bool temp359;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp359);
                            this.Manager.Comment("reaching state \'S614\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp359, "isPropertyValueChanged of RopReleaseMethod, state S614");
                            this.Manager.Comment("reaching state \'S694\'");
                            bool temp360;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp361;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp360, out temp361);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S774\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp360, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S774");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp361, "error of RopOpenStreamMethod, state S774");
                            this.Manager.Comment("reaching state \'S854\'");
                            bool temp362;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp362);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp362);
                            this.Manager.Comment("reaching state \'S934\'");
                            int temp364 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker18)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker19)));
                            if ((temp364 == 0)) {
                                this.Manager.Comment("reaching state \'S1034\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1146\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1306\'");
                                goto label71;
                            }
                            if ((temp364 == 1)) {
                                this.Manager.Comment("reaching state \'S1035\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp363;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp363);
                                this.Manager.Comment("reaching state \'S1147\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp363, "error of RopWriteAndCommitStreamMethod, state S1147");
                                this.Manager.Comment("reaching state \'S1307\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1430\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1534\'");
                                goto label71;
                            }
                            throw new InvalidOperationException("never reached");
                        label71:
;
                            goto label73;
                        }
                        if ((temp373 == 1)) {
                            this.Manager.Comment("reaching state \'S239\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp365;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp365);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S295\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp365, "error of RopWriteStreamMethod, state S295");
                            this.Manager.Comment("reaching state \'S375\'");
                            bool temp366;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp366);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Checkpoint("MS-OXCPRPT_R56405");
                            this.Manager.Comment("reaching state \'S455\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp366, "isPropertyValueChanged of RopCommitStreamMethod, state S455");
                            this.Manager.Comment("reaching state \'S535\'");
                            bool temp367;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp367);
                            this.Manager.Comment("reaching state \'S615\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp367, "isPropertyValueChanged of RopReleaseMethod, state S615");
                            this.Manager.Comment("reaching state \'S695\'");
                            bool temp368;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp369;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp368, out temp369);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S775\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp368, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S775");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp369, "error of RopOpenStreamMethod, state S775");
                            this.Manager.Comment("reaching state \'S855\'");
                            bool temp370;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp370);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp370);
                            this.Manager.Comment("reaching state \'S935\'");
                            int temp372 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker21)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker22)));
                            if ((temp372 == 0)) {
                                this.Manager.Comment("reaching state \'S1036\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1148\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1308\'");
                                goto label72;
                            }
                            if ((temp372 == 1)) {
                                this.Manager.Comment("reaching state \'S1037\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp371;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp371);
                                this.Manager.Comment("reaching state \'S1149\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp371, "error of RopWriteAndCommitStreamMethod, state S1149");
                                this.Manager.Comment("reaching state \'S1309\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1431\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1535\'");
                                goto label72;
                            }
                            throw new InvalidOperationException("never reached");
                        label72:
;
                            goto label73;
                        }
                        throw new InvalidOperationException("never reached");
                    label73:
;
                        goto label77;
                    }
                    if ((temp392 == 1)) {
                        this.Manager.Comment("reaching state \'S161\'");
                        bool temp374;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp374);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp374);
                        this.Manager.Comment("reaching state \'S189\'");
                        int temp391 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker24)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker27)));
                        if ((temp391 == 0)) {
                            this.Manager.Comment("reaching state \'S240\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp375;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp375);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S296\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp375, "error of RopWriteStreamMethod, state S296");
                            this.Manager.Comment("reaching state \'S376\'");
                            bool temp376;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp376);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Checkpoint("MS-OXCPRPT_R56405");
                            this.Manager.Comment("reaching state \'S456\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp376, "isPropertyValueChanged of RopCommitStreamMethod, state S456");
                            this.Manager.Comment("reaching state \'S536\'");
                            bool temp377;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp377);
                            this.Manager.Comment("reaching state \'S616\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp377, "isPropertyValueChanged of RopReleaseMethod, state S616");
                            this.Manager.Comment("reaching state \'S696\'");
                            bool temp378;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp379;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp378, out temp379);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S776\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp378, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S776");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp379, "error of RopOpenStreamMethod, state S776");
                            this.Manager.Comment("reaching state \'S856\'");
                            bool temp380;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp380);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp380);
                            this.Manager.Comment("reaching state \'S936\'");
                            int temp382 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker25)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker26)));
                            if ((temp382 == 0)) {
                                this.Manager.Comment("reaching state \'S1038\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1150\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1310\'");
                                goto label74;
                            }
                            if ((temp382 == 1)) {
                                this.Manager.Comment("reaching state \'S1039\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp381;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp381);
                                this.Manager.Comment("reaching state \'S1151\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp381, "error of RopWriteAndCommitStreamMethod, state S1151");
                                this.Manager.Comment("reaching state \'S1311\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1432\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1536\'");
                                goto label74;
                            }
                            throw new InvalidOperationException("never reached");
                        label74:
;
                            goto label76;
                        }
                        if ((temp391 == 1)) {
                            this.Manager.Comment("reaching state \'S241\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp383;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp383);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S297\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp383, "error of RopWriteStreamMethod, state S297");
                            this.Manager.Comment("reaching state \'S377\'");
                            bool temp384;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp384);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Checkpoint("MS-OXCPRPT_R56405");
                            this.Manager.Comment("reaching state \'S457\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp384, "isPropertyValueChanged of RopCommitStreamMethod, state S457");
                            this.Manager.Comment("reaching state \'S537\'");
                            bool temp385;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp385);
                            this.Manager.Comment("reaching state \'S617\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp385, "isPropertyValueChanged of RopReleaseMethod, state S617");
                            this.Manager.Comment("reaching state \'S697\'");
                            bool temp386;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp387;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp386, out temp387);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S777\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp386, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S777");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp387, "error of RopOpenStreamMethod, state S777");
                            this.Manager.Comment("reaching state \'S857\'");
                            bool temp388;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp388);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp388);
                            this.Manager.Comment("reaching state \'S937\'");
                            int temp390 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker28)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker29)));
                            if ((temp390 == 0)) {
                                this.Manager.Comment("reaching state \'S1040\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1152\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1312\'");
                                goto label75;
                            }
                            if ((temp390 == 1)) {
                                this.Manager.Comment("reaching state \'S1041\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp389;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp389);
                                this.Manager.Comment("reaching state \'S1153\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp389, "error of RopWriteAndCommitStreamMethod, state S1153");
                                this.Manager.Comment("reaching state \'S1313\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1433\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1537\'");
                                goto label75;
                            }
                            throw new InvalidOperationException("never reached");
                        label75:
;
                            goto label76;
                        }
                        throw new InvalidOperationException("never reached");
                    label76:
;
                        goto label77;
                    }
                    throw new InvalidOperationException("never reached");
                label77:
;
                    goto label78;
                }
                throw new InvalidOperationException("never reached");
            label78:
;
                goto label79;
            }
            if ((temp394 == 1)) {
                this.Manager.Comment("reaching state \'S37\'");
                goto label79;
            }
            throw new InvalidOperationException("never reached");
        label79:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S17");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S108");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S134");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S186");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S930");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S930");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S186");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S931");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S931");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S134");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S187");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S932");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S932");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S187");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S933");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S933");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S108");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S135");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S188");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S934");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S934");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S188");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S935");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S935");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S135");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S189");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S936");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S936");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S189");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S937");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S937");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S17");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_SetDataWithStream_TestSuite5() {
            this.Manager.BeginTest("MSOXCPRPT_S04_SetDataWithStream_TestSuite5");
            this.Manager.Comment("reaching state \'S18\'");
            bool temp395;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp395);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp395);
            this.Manager.Comment("reaching state \'S19\'");
            int temp468 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp468 == 0)) {
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S49\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S69\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S79\'");
                bool temp396;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp397;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp396, out temp397);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S89\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp396, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp397, "error of RopOpenStreamMethod, state S89");
                this.Manager.Comment("reaching state \'S99\'");
                bool temp398;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86706,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86706, out temp398);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp398);
                this.Manager.Comment("reaching state \'S109\'");
                int temp467 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker15)));
                if ((temp467 == 0)) {
                    this.Manager.Comment("reaching state \'S122\'");
                    bool temp399;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp399);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp399);
                    this.Manager.Comment("reaching state \'S136\'");
                    int temp432 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker8)));
                    if ((temp432 == 0)) {
                        this.Manager.Comment("reaching state \'S162\'");
                        bool temp400;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp400);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp400);
                        this.Manager.Comment("reaching state \'S190\'");
                        int temp415 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker2)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker5)));
                        if ((temp415 == 0)) {
                            this.Manager.Comment("reaching state \'S242\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp401;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp401);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S298\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp401, "error of RopWriteStreamMethod, state S298");
                            this.Manager.Comment("reaching state \'S378\'");
                            bool temp402;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp402);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Checkpoint("MS-OXCPRPT_R56405");
                            this.Manager.Comment("reaching state \'S458\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp402, "isPropertyValueChanged of RopCommitStreamMethod, state S458");
                            this.Manager.Comment("reaching state \'S538\'");
                            bool temp403;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp403);
                            this.Manager.Comment("reaching state \'S618\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp403, "isPropertyValueChanged of RopReleaseMethod, state S618");
                            this.Manager.Comment("reaching state \'S698\'");
                            bool temp404;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp405;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp404, out temp405);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S778\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp404, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S778");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp405, "error of RopOpenStreamMethod, state S778");
                            this.Manager.Comment("reaching state \'S858\'");
                            bool temp406;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp406);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp406);
                            this.Manager.Comment("reaching state \'S938\'");
                            int temp407 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker3)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker4)));
                            if ((temp407 == 0)) {
                                this.Manager.Comment("reaching state \'S1042\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1154\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1314\'");
                                goto label80;
                            }
                            if ((temp407 == 1)) {
                                this.Manager.Comment("reaching state \'S1043\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1155\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1315\'");
                                goto label80;
                            }
                            throw new InvalidOperationException("never reached");
                        label80:
;
                            goto label82;
                        }
                        if ((temp415 == 1)) {
                            this.Manager.Comment("reaching state \'S243\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp408;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp408);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S299\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp408, "error of RopWriteStreamMethod, state S299");
                            this.Manager.Comment("reaching state \'S379\'");
                            bool temp409;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp409);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Checkpoint("MS-OXCPRPT_R56405");
                            this.Manager.Comment("reaching state \'S459\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp409, "isPropertyValueChanged of RopCommitStreamMethod, state S459");
                            this.Manager.Comment("reaching state \'S539\'");
                            bool temp410;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp410);
                            this.Manager.Comment("reaching state \'S619\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp410, "isPropertyValueChanged of RopReleaseMethod, state S619");
                            this.Manager.Comment("reaching state \'S699\'");
                            bool temp411;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp412;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp411, out temp412);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S779\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp411, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S779");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp412, "error of RopOpenStreamMethod, state S779");
                            this.Manager.Comment("reaching state \'S859\'");
                            bool temp413;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp413);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp413);
                            this.Manager.Comment("reaching state \'S939\'");
                            int temp414 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker6)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker7)));
                            if ((temp414 == 0)) {
                                this.Manager.Comment("reaching state \'S1044\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1156\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1316\'");
                                goto label81;
                            }
                            if ((temp414 == 1)) {
                                this.Manager.Comment("reaching state \'S1045\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1157\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1317\'");
                                goto label81;
                            }
                            throw new InvalidOperationException("never reached");
                        label81:
;
                            goto label82;
                        }
                        throw new InvalidOperationException("never reached");
                    label82:
;
                        goto label86;
                    }
                    if ((temp432 == 1)) {
                        this.Manager.Comment("reaching state \'S163\'");
                        bool temp416;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp416);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp416);
                        this.Manager.Comment("reaching state \'S191\'");
                        int temp431 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker9)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker12)));
                        if ((temp431 == 0)) {
                            this.Manager.Comment("reaching state \'S244\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp417;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp417);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S300\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp417, "error of RopWriteStreamMethod, state S300");
                            this.Manager.Comment("reaching state \'S380\'");
                            bool temp418;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp418);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Checkpoint("MS-OXCPRPT_R56405");
                            this.Manager.Comment("reaching state \'S460\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp418, "isPropertyValueChanged of RopCommitStreamMethod, state S460");
                            this.Manager.Comment("reaching state \'S540\'");
                            bool temp419;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp419);
                            this.Manager.Comment("reaching state \'S620\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp419, "isPropertyValueChanged of RopReleaseMethod, state S620");
                            this.Manager.Comment("reaching state \'S700\'");
                            bool temp420;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp421;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp420, out temp421);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S780\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp420, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S780");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp421, "error of RopOpenStreamMethod, state S780");
                            this.Manager.Comment("reaching state \'S860\'");
                            bool temp422;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp422);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp422);
                            this.Manager.Comment("reaching state \'S940\'");
                            int temp423 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker10)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker11)));
                            if ((temp423 == 0)) {
                                this.Manager.Comment("reaching state \'S1046\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1158\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1318\'");
                                goto label83;
                            }
                            if ((temp423 == 1)) {
                                this.Manager.Comment("reaching state \'S1047\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1159\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1319\'");
                                goto label83;
                            }
                            throw new InvalidOperationException("never reached");
                        label83:
;
                            goto label85;
                        }
                        if ((temp431 == 1)) {
                            this.Manager.Comment("reaching state \'S245\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp424;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp424);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S301\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp424, "error of RopWriteStreamMethod, state S301");
                            this.Manager.Comment("reaching state \'S381\'");
                            bool temp425;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp425);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Checkpoint("MS-OXCPRPT_R56405");
                            this.Manager.Comment("reaching state \'S461\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp425, "isPropertyValueChanged of RopCommitStreamMethod, state S461");
                            this.Manager.Comment("reaching state \'S541\'");
                            bool temp426;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp426);
                            this.Manager.Comment("reaching state \'S621\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp426, "isPropertyValueChanged of RopReleaseMethod, state S621");
                            this.Manager.Comment("reaching state \'S701\'");
                            bool temp427;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp428;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp427, out temp428);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S781\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp427, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S781");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp428, "error of RopOpenStreamMethod, state S781");
                            this.Manager.Comment("reaching state \'S861\'");
                            bool temp429;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp429);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp429);
                            this.Manager.Comment("reaching state \'S941\'");
                            int temp430 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker13)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker14)));
                            if ((temp430 == 0)) {
                                this.Manager.Comment("reaching state \'S1048\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1160\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1320\'");
                                goto label84;
                            }
                            if ((temp430 == 1)) {
                                this.Manager.Comment("reaching state \'S1049\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1161\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1321\'");
                                goto label84;
                            }
                            throw new InvalidOperationException("never reached");
                        label84:
;
                            goto label85;
                        }
                        throw new InvalidOperationException("never reached");
                    label85:
;
                        goto label86;
                    }
                    throw new InvalidOperationException("never reached");
                label86:
;
                    goto label94;
                }
                if ((temp467 == 1)) {
                    this.Manager.Comment("reaching state \'S123\'");
                    bool temp433;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp433);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp433);
                    this.Manager.Comment("reaching state \'S137\'");
                    int temp466 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker16)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker23)));
                    if ((temp466 == 0)) {
                        this.Manager.Comment("reaching state \'S164\'");
                        bool temp434;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp434);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp434);
                        this.Manager.Comment("reaching state \'S192\'");
                        int temp449 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker17)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker20)));
                        if ((temp449 == 0)) {
                            this.Manager.Comment("reaching state \'S246\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp435;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp435);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S302\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp435, "error of RopWriteStreamMethod, state S302");
                            this.Manager.Comment("reaching state \'S382\'");
                            bool temp436;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp436);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Checkpoint("MS-OXCPRPT_R56405");
                            this.Manager.Comment("reaching state \'S462\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp436, "isPropertyValueChanged of RopCommitStreamMethod, state S462");
                            this.Manager.Comment("reaching state \'S542\'");
                            bool temp437;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp437);
                            this.Manager.Comment("reaching state \'S622\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp437, "isPropertyValueChanged of RopReleaseMethod, state S622");
                            this.Manager.Comment("reaching state \'S702\'");
                            bool temp438;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp439;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp438, out temp439);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S782\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp438, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S782");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp439, "error of RopOpenStreamMethod, state S782");
                            this.Manager.Comment("reaching state \'S862\'");
                            bool temp440;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp440);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp440);
                            this.Manager.Comment("reaching state \'S942\'");
                            int temp441 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker18)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker19)));
                            if ((temp441 == 0)) {
                                this.Manager.Comment("reaching state \'S1050\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1162\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1322\'");
                                goto label87;
                            }
                            if ((temp441 == 1)) {
                                this.Manager.Comment("reaching state \'S1051\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1163\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1323\'");
                                goto label87;
                            }
                            throw new InvalidOperationException("never reached");
                        label87:
;
                            goto label89;
                        }
                        if ((temp449 == 1)) {
                            this.Manager.Comment("reaching state \'S247\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp442;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp442);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S303\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp442, "error of RopWriteStreamMethod, state S303");
                            this.Manager.Comment("reaching state \'S383\'");
                            bool temp443;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp443);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Checkpoint("MS-OXCPRPT_R56405");
                            this.Manager.Comment("reaching state \'S463\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp443, "isPropertyValueChanged of RopCommitStreamMethod, state S463");
                            this.Manager.Comment("reaching state \'S543\'");
                            bool temp444;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp444);
                            this.Manager.Comment("reaching state \'S623\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp444, "isPropertyValueChanged of RopReleaseMethod, state S623");
                            this.Manager.Comment("reaching state \'S703\'");
                            bool temp445;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp446;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp445, out temp446);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S783\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp445, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S783");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp446, "error of RopOpenStreamMethod, state S783");
                            this.Manager.Comment("reaching state \'S863\'");
                            bool temp447;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp447);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp447);
                            this.Manager.Comment("reaching state \'S943\'");
                            int temp448 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker21)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker22)));
                            if ((temp448 == 0)) {
                                this.Manager.Comment("reaching state \'S1052\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1164\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1324\'");
                                goto label88;
                            }
                            if ((temp448 == 1)) {
                                this.Manager.Comment("reaching state \'S1053\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1165\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1325\'");
                                goto label88;
                            }
                            throw new InvalidOperationException("never reached");
                        label88:
;
                            goto label89;
                        }
                        throw new InvalidOperationException("never reached");
                    label89:
;
                        goto label93;
                    }
                    if ((temp466 == 1)) {
                        this.Manager.Comment("reaching state \'S165\'");
                        bool temp450;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp450);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp450);
                        this.Manager.Comment("reaching state \'S193\'");
                        int temp465 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker24)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker27)));
                        if ((temp465 == 0)) {
                            this.Manager.Comment("reaching state \'S248\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp451;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp451);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S304\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp451, "error of RopWriteStreamMethod, state S304");
                            this.Manager.Comment("reaching state \'S384\'");
                            bool temp452;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp452);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Checkpoint("MS-OXCPRPT_R56405");
                            this.Manager.Comment("reaching state \'S464\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp452, "isPropertyValueChanged of RopCommitStreamMethod, state S464");
                            this.Manager.Comment("reaching state \'S544\'");
                            bool temp453;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp453);
                            this.Manager.Comment("reaching state \'S624\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp453, "isPropertyValueChanged of RopReleaseMethod, state S624");
                            this.Manager.Comment("reaching state \'S704\'");
                            bool temp454;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp455;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp454, out temp455);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S784\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp454, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S784");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp455, "error of RopOpenStreamMethod, state S784");
                            this.Manager.Comment("reaching state \'S864\'");
                            bool temp456;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp456);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp456);
                            this.Manager.Comment("reaching state \'S944\'");
                            int temp457 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker25)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker26)));
                            if ((temp457 == 0)) {
                                this.Manager.Comment("reaching state \'S1054\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1166\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1326\'");
                                goto label90;
                            }
                            if ((temp457 == 1)) {
                                this.Manager.Comment("reaching state \'S1055\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1167\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1327\'");
                                goto label90;
                            }
                            throw new InvalidOperationException("never reached");
                        label90:
;
                            goto label92;
                        }
                        if ((temp465 == 1)) {
                            this.Manager.Comment("reaching state \'S249\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp458;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp458);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S305\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp458, "error of RopWriteStreamMethod, state S305");
                            this.Manager.Comment("reaching state \'S385\'");
                            bool temp459;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp459);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Checkpoint("MS-OXCPRPT_R56405");
                            this.Manager.Comment("reaching state \'S465\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp459, "isPropertyValueChanged of RopCommitStreamMethod, state S465");
                            this.Manager.Comment("reaching state \'S545\'");
                            bool temp460;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp460);
                            this.Manager.Comment("reaching state \'S625\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp460, "isPropertyValueChanged of RopReleaseMethod, state S625");
                            this.Manager.Comment("reaching state \'S705\'");
                            bool temp461;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp462;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp461, out temp462);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S785\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp461, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S785");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp462, "error of RopOpenStreamMethod, state S785");
                            this.Manager.Comment("reaching state \'S865\'");
                            bool temp463;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp463);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp463);
                            this.Manager.Comment("reaching state \'S945\'");
                            int temp464 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker28)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker29)));
                            if ((temp464 == 0)) {
                                this.Manager.Comment("reaching state \'S1056\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1168\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1328\'");
                                goto label91;
                            }
                            if ((temp464 == 1)) {
                                this.Manager.Comment("reaching state \'S1057\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1169\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1329\'");
                                goto label91;
                            }
                            throw new InvalidOperationException("never reached");
                        label91:
;
                            goto label92;
                        }
                        throw new InvalidOperationException("never reached");
                    label92:
;
                        goto label93;
                    }
                    throw new InvalidOperationException("never reached");
                label93:
;
                    goto label94;
                }
                throw new InvalidOperationException("never reached");
            label94:
;
                goto label95;
            }
            if ((temp468 == 1)) {
                this.Manager.Comment("reaching state \'S39\'");
                goto label95;
            }
            throw new InvalidOperationException("never reached");
        label95:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S19");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S109");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S136");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S190");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S938");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S938");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S190");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S939");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S939");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S136");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S191");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S940");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S940");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S191");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S941");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S941");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S109");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S137");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S192");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S942");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S942");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S192");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S943");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S943");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S137");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S193");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S944");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S944");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S193");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S945");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S945");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S19");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_SetDataWithStream_TestSuite6() {
            this.Manager.BeginTest("MSOXCPRPT_S04_SetDataWithStream_TestSuite6");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp469;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp469);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp469);
            this.Manager.Comment("reaching state \'S3\'");
            int temp545 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp545 == 0)) {
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S41\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S51\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S61\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S71\'");
                bool temp470;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp471;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp470, out temp471);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S81\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp470, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S81");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp471, "error of RopOpenStreamMethod, state S81");
                this.Manager.Comment("reaching state \'S91\'");
                bool temp472;
                bool temp473;
                bool temp474;
                this.Manager.Comment("executing step \'call RopSetStreamSizeMethod(True,out _,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopSetStreamSizeMethod(true, out temp472, out temp473, out temp474);
                this.Manager.Checkpoint("MS-OXCPRPT_R322");
                this.Manager.Checkpoint("MS-OXCPRPT_R32801");
                this.Manager.Checkpoint("MS-OXCPRPT_R57705");
                this.Manager.Checkpoint("MS-OXCPRPT_R57706");
                this.Manager.Comment("reaching state \'S101\'");
                this.Manager.Comment("checking step \'return RopSetStreamSizeMethod/[out True,out False,out True]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp472, "isExtendedValueZero of RopSetStreamSizeMethod, state S101");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp473, "isLost of RopSetStreamSizeMethod, state S101");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp474, "isIncrease of RopSetStreamSizeMethod, state S101");
                this.Manager.Comment("reaching state \'S112\'");
                bool temp475;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86706,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86706, out temp475);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp475);
                this.Manager.Comment("reaching state \'S126\'");
                int temp544 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker15)));
                if ((temp544 == 0)) {
                    this.Manager.Comment("reaching state \'S142\'");
                    bool temp476;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp476);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp476);
                    this.Manager.Comment("reaching state \'S170\'");
                    int temp509 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker8)));
                    if ((temp509 == 0)) {
                        this.Manager.Comment("reaching state \'S202\'");
                        bool temp477;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp477);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp477);
                        this.Manager.Comment("reaching state \'S258\'");
                        int temp492 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker2)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker5)));
                        if ((temp492 == 0)) {
                            this.Manager.Comment("reaching state \'S314\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp478;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp478);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S394\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp478, "error of RopWriteStreamMethod, state S394");
                            this.Manager.Comment("reaching state \'S474\'");
                            bool temp479;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp479);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S554\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp479, "isPropertyValueChanged of RopCommitStreamMethod, state S554");
                            this.Manager.Comment("reaching state \'S634\'");
                            bool temp480;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp480);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S714\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp480, "isPropertyValueChanged of RopReleaseMethod, state S714");
                            this.Manager.Comment("reaching state \'S794\'");
                            bool temp481;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp482;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp481, out temp482);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S874\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp481, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S874");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp482, "error of RopOpenStreamMethod, state S874");
                            this.Manager.Comment("reaching state \'S962\'");
                            bool temp483;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp483);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp483);
                            this.Manager.Comment("reaching state \'S1074\'");
                            int temp484 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker3)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker4)));
                            if ((temp484 == 0)) {
                                this.Manager.Comment("reaching state \'S1186\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1330\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1434\'");
                                goto label96;
                            }
                            if ((temp484 == 1)) {
                                this.Manager.Comment("reaching state \'S1187\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1331\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1435\'");
                                goto label96;
                            }
                            throw new InvalidOperationException("never reached");
                        label96:
;
                            goto label98;
                        }
                        if ((temp492 == 1)) {
                            this.Manager.Comment("reaching state \'S315\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp485;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp485);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S395\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp485, "error of RopWriteStreamMethod, state S395");
                            this.Manager.Comment("reaching state \'S475\'");
                            bool temp486;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp486);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S555\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp486, "isPropertyValueChanged of RopCommitStreamMethod, state S555");
                            this.Manager.Comment("reaching state \'S635\'");
                            bool temp487;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp487);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S715\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp487, "isPropertyValueChanged of RopReleaseMethod, state S715");
                            this.Manager.Comment("reaching state \'S795\'");
                            bool temp488;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp489;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp488, out temp489);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S875\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp488, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S875");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp489, "error of RopOpenStreamMethod, state S875");
                            this.Manager.Comment("reaching state \'S963\'");
                            bool temp490;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp490);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp490);
                            this.Manager.Comment("reaching state \'S1075\'");
                            int temp491 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker6)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker7)));
                            if ((temp491 == 0)) {
                                this.Manager.Comment("reaching state \'S1188\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1332\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1436\'");
                                goto label97;
                            }
                            if ((temp491 == 1)) {
                                this.Manager.Comment("reaching state \'S1189\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1333\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1437\'");
                                goto label97;
                            }
                            throw new InvalidOperationException("never reached");
                        label97:
;
                            goto label98;
                        }
                        throw new InvalidOperationException("never reached");
                    label98:
;
                        goto label102;
                    }
                    if ((temp509 == 1)) {
                        this.Manager.Comment("reaching state \'S203\'");
                        bool temp493;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp493);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp493);
                        this.Manager.Comment("reaching state \'S259\'");
                        int temp508 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker9)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker12)));
                        if ((temp508 == 0)) {
                            this.Manager.Comment("reaching state \'S316\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp494;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp494);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S396\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp494, "error of RopWriteStreamMethod, state S396");
                            this.Manager.Comment("reaching state \'S476\'");
                            bool temp495;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp495);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S556\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp495, "isPropertyValueChanged of RopCommitStreamMethod, state S556");
                            this.Manager.Comment("reaching state \'S636\'");
                            bool temp496;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp496);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S716\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp496, "isPropertyValueChanged of RopReleaseMethod, state S716");
                            this.Manager.Comment("reaching state \'S796\'");
                            bool temp497;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp498;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp497, out temp498);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S876\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp497, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S876");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp498, "error of RopOpenStreamMethod, state S876");
                            this.Manager.Comment("reaching state \'S964\'");
                            bool temp499;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp499);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp499);
                            this.Manager.Comment("reaching state \'S1076\'");
                            int temp500 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker10)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker11)));
                            if ((temp500 == 0)) {
                                this.Manager.Comment("reaching state \'S1190\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1334\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1438\'");
                                goto label99;
                            }
                            if ((temp500 == 1)) {
                                this.Manager.Comment("reaching state \'S1191\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1335\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1439\'");
                                goto label99;
                            }
                            throw new InvalidOperationException("never reached");
                        label99:
;
                            goto label101;
                        }
                        if ((temp508 == 1)) {
                            this.Manager.Comment("reaching state \'S317\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp501;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp501);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S397\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp501, "error of RopWriteStreamMethod, state S397");
                            this.Manager.Comment("reaching state \'S477\'");
                            bool temp502;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp502);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S557\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp502, "isPropertyValueChanged of RopCommitStreamMethod, state S557");
                            this.Manager.Comment("reaching state \'S637\'");
                            bool temp503;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp503);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S717\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp503, "isPropertyValueChanged of RopReleaseMethod, state S717");
                            this.Manager.Comment("reaching state \'S797\'");
                            bool temp504;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp505;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp504, out temp505);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S877\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp504, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S877");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp505, "error of RopOpenStreamMethod, state S877");
                            this.Manager.Comment("reaching state \'S965\'");
                            bool temp506;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp506);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp506);
                            this.Manager.Comment("reaching state \'S1077\'");
                            int temp507 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker13)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker14)));
                            if ((temp507 == 0)) {
                                this.Manager.Comment("reaching state \'S1192\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1336\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1440\'");
                                goto label100;
                            }
                            if ((temp507 == 1)) {
                                this.Manager.Comment("reaching state \'S1193\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1337\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1441\'");
                                goto label100;
                            }
                            throw new InvalidOperationException("never reached");
                        label100:
;
                            goto label101;
                        }
                        throw new InvalidOperationException("never reached");
                    label101:
;
                        goto label102;
                    }
                    throw new InvalidOperationException("never reached");
                label102:
;
                    goto label110;
                }
                if ((temp544 == 1)) {
                    this.Manager.Comment("reaching state \'S143\'");
                    bool temp510;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp510);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp510);
                    this.Manager.Comment("reaching state \'S171\'");
                    int temp543 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker16)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker23)));
                    if ((temp543 == 0)) {
                        this.Manager.Comment("reaching state \'S204\'");
                        bool temp511;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp511);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp511);
                        this.Manager.Comment("reaching state \'S260\'");
                        int temp526 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker17)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker20)));
                        if ((temp526 == 0)) {
                            this.Manager.Comment("reaching state \'S318\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp512;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp512);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S398\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp512, "error of RopWriteStreamMethod, state S398");
                            this.Manager.Comment("reaching state \'S478\'");
                            bool temp513;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp513);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S558\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp513, "isPropertyValueChanged of RopCommitStreamMethod, state S558");
                            this.Manager.Comment("reaching state \'S638\'");
                            bool temp514;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp514);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S718\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp514, "isPropertyValueChanged of RopReleaseMethod, state S718");
                            this.Manager.Comment("reaching state \'S798\'");
                            bool temp515;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp516;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp515, out temp516);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S878\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp515, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S878");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp516, "error of RopOpenStreamMethod, state S878");
                            this.Manager.Comment("reaching state \'S966\'");
                            bool temp517;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp517);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp517);
                            this.Manager.Comment("reaching state \'S1078\'");
                            int temp518 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker18)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker19)));
                            if ((temp518 == 0)) {
                                this.Manager.Comment("reaching state \'S1194\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1338\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1442\'");
                                goto label103;
                            }
                            if ((temp518 == 1)) {
                                this.Manager.Comment("reaching state \'S1195\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1339\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1443\'");
                                goto label103;
                            }
                            throw new InvalidOperationException("never reached");
                        label103:
;
                            goto label105;
                        }
                        if ((temp526 == 1)) {
                            this.Manager.Comment("reaching state \'S319\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp519;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp519);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S399\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp519, "error of RopWriteStreamMethod, state S399");
                            this.Manager.Comment("reaching state \'S479\'");
                            bool temp520;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp520);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S559\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp520, "isPropertyValueChanged of RopCommitStreamMethod, state S559");
                            this.Manager.Comment("reaching state \'S639\'");
                            bool temp521;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp521);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S719\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp521, "isPropertyValueChanged of RopReleaseMethod, state S719");
                            this.Manager.Comment("reaching state \'S799\'");
                            bool temp522;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp523;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp522, out temp523);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S879\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp522, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S879");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp523, "error of RopOpenStreamMethod, state S879");
                            this.Manager.Comment("reaching state \'S967\'");
                            bool temp524;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp524);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp524);
                            this.Manager.Comment("reaching state \'S1079\'");
                            int temp525 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker21)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker22)));
                            if ((temp525 == 0)) {
                                this.Manager.Comment("reaching state \'S1196\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1340\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1444\'");
                                goto label104;
                            }
                            if ((temp525 == 1)) {
                                this.Manager.Comment("reaching state \'S1197\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1341\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1445\'");
                                goto label104;
                            }
                            throw new InvalidOperationException("never reached");
                        label104:
;
                            goto label105;
                        }
                        throw new InvalidOperationException("never reached");
                    label105:
;
                        goto label109;
                    }
                    if ((temp543 == 1)) {
                        this.Manager.Comment("reaching state \'S205\'");
                        bool temp527;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp527);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp527);
                        this.Manager.Comment("reaching state \'S261\'");
                        int temp542 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker24)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker27)));
                        if ((temp542 == 0)) {
                            this.Manager.Comment("reaching state \'S320\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp528;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp528);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S400\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp528, "error of RopWriteStreamMethod, state S400");
                            this.Manager.Comment("reaching state \'S480\'");
                            bool temp529;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp529);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S560\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp529, "isPropertyValueChanged of RopCommitStreamMethod, state S560");
                            this.Manager.Comment("reaching state \'S640\'");
                            bool temp530;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp530);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S720\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp530, "isPropertyValueChanged of RopReleaseMethod, state S720");
                            this.Manager.Comment("reaching state \'S800\'");
                            bool temp531;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp532;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp531, out temp532);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S880\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp531, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S880");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp532, "error of RopOpenStreamMethod, state S880");
                            this.Manager.Comment("reaching state \'S968\'");
                            bool temp533;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp533);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp533);
                            this.Manager.Comment("reaching state \'S1080\'");
                            int temp534 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker25)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker26)));
                            if ((temp534 == 0)) {
                                this.Manager.Comment("reaching state \'S1198\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1342\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1446\'");
                                goto label106;
                            }
                            if ((temp534 == 1)) {
                                this.Manager.Comment("reaching state \'S1199\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1343\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1447\'");
                                goto label106;
                            }
                            throw new InvalidOperationException("never reached");
                        label106:
;
                            goto label108;
                        }
                        if ((temp542 == 1)) {
                            this.Manager.Comment("reaching state \'S321\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp535;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp535);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S401\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp535, "error of RopWriteStreamMethod, state S401");
                            this.Manager.Comment("reaching state \'S481\'");
                            bool temp536;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp536);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S561\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp536, "isPropertyValueChanged of RopCommitStreamMethod, state S561");
                            this.Manager.Comment("reaching state \'S641\'");
                            bool temp537;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp537);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S721\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp537, "isPropertyValueChanged of RopReleaseMethod, state S721");
                            this.Manager.Comment("reaching state \'S801\'");
                            bool temp538;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp539;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp538, out temp539);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S881\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp538, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S881");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp539, "error of RopOpenStreamMethod, state S881");
                            this.Manager.Comment("reaching state \'S969\'");
                            bool temp540;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp540);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp540);
                            this.Manager.Comment("reaching state \'S1081\'");
                            int temp541 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker28)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker29)));
                            if ((temp541 == 0)) {
                                this.Manager.Comment("reaching state \'S1200\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1344\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1448\'");
                                goto label107;
                            }
                            if ((temp541 == 1)) {
                                this.Manager.Comment("reaching state \'S1201\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1345\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1449\'");
                                goto label107;
                            }
                            throw new InvalidOperationException("never reached");
                        label107:
;
                            goto label108;
                        }
                        throw new InvalidOperationException("never reached");
                    label108:
;
                        goto label109;
                    }
                    throw new InvalidOperationException("never reached");
                label109:
;
                    goto label110;
                }
                throw new InvalidOperationException("never reached");
            label110:
;
                goto label111;
            }
            if ((temp545 == 1)) {
                this.Manager.Comment("reaching state \'S23\'");
                goto label111;
            }
            throw new InvalidOperationException("never reached");
        label111:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S126");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S170");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S258");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1074");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1074");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S258");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1075");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1075");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S170");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S259");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1076");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1076");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S259");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1077");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1077");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S126");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S171");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S260");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1078");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1078");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S260");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1079");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1079");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S171");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S261");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1080");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1080");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S261");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1081");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1081");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite6CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_SetDataWithStream_TestSuite7() {
            this.Manager.BeginTest("MSOXCPRPT_S04_SetDataWithStream_TestSuite7");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp546;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp546);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp546);
            this.Manager.Comment("reaching state \'S5\'");
            int temp630 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp630 == 0)) {
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S42\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S52\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S62\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S72\'");
                bool temp547;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp548;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp547, out temp548);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S82\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp547, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp548, "error of RopOpenStreamMethod, state S82");
                this.Manager.Comment("reaching state \'S92\'");
                bool temp549;
                bool temp550;
                bool temp551;
                this.Manager.Comment("executing step \'call RopSetStreamSizeMethod(False,out _,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopSetStreamSizeMethod(false, out temp549, out temp550, out temp551);
                this.Manager.Checkpoint("MS-OXCPRPT_R57707");
                this.Manager.Checkpoint("MS-OXCPRPT_R322");
                this.Manager.Checkpoint("MS-OXCPRPT_R32801");
                this.Manager.Checkpoint("MS-OXCPRPT_R57705");
                this.Manager.Comment("reaching state \'S102\'");
                this.Manager.Comment("checking step \'return RopSetStreamSizeMethod/[out False,out True,out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp549, "isExtendedValueZero of RopSetStreamSizeMethod, state S102");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp550, "isLost of RopSetStreamSizeMethod, state S102");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp551, "isIncrease of RopSetStreamSizeMethod, state S102");
                this.Manager.Comment("reaching state \'S113\'");
                bool temp552;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86706,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86706, out temp552);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp552);
                this.Manager.Comment("reaching state \'S127\'");
                int temp629 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker15)));
                if ((temp629 == 0)) {
                    this.Manager.Comment("reaching state \'S144\'");
                    bool temp553;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp553);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp553);
                    this.Manager.Comment("reaching state \'S172\'");
                    int temp590 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker8)));
                    if ((temp590 == 0)) {
                        this.Manager.Comment("reaching state \'S206\'");
                        bool temp554;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp554);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp554);
                        this.Manager.Comment("reaching state \'S262\'");
                        int temp571 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker2)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker5)));
                        if ((temp571 == 0)) {
                            this.Manager.Comment("reaching state \'S322\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp555;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp555);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S402\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp555, "error of RopWriteStreamMethod, state S402");
                            this.Manager.Comment("reaching state \'S482\'");
                            bool temp556;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp556);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S562\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp556, "isPropertyValueChanged of RopCommitStreamMethod, state S562");
                            this.Manager.Comment("reaching state \'S642\'");
                            bool temp557;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp557);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S722\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp557, "isPropertyValueChanged of RopReleaseMethod, state S722");
                            this.Manager.Comment("reaching state \'S802\'");
                            bool temp558;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp559;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp558, out temp559);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S882\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp558, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S882");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp559, "error of RopOpenStreamMethod, state S882");
                            this.Manager.Comment("reaching state \'S970\'");
                            bool temp560;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp560);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp560);
                            this.Manager.Comment("reaching state \'S1082\'");
                            int temp562 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker3)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker4)));
                            if ((temp562 == 0)) {
                                this.Manager.Comment("reaching state \'S1202\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1346\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1450\'");
                                goto label112;
                            }
                            if ((temp562 == 1)) {
                                this.Manager.Comment("reaching state \'S1203\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp561;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp561);
                                this.Manager.Comment("reaching state \'S1347\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp561, "error of RopWriteAndCommitStreamMethod, state S1347");
                                this.Manager.Comment("reaching state \'S1451\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1538\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1554\'");
                                goto label112;
                            }
                            throw new InvalidOperationException("never reached");
                        label112:
;
                            goto label114;
                        }
                        if ((temp571 == 1)) {
                            this.Manager.Comment("reaching state \'S323\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp563;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp563);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S403\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp563, "error of RopWriteStreamMethod, state S403");
                            this.Manager.Comment("reaching state \'S483\'");
                            bool temp564;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp564);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S563\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp564, "isPropertyValueChanged of RopCommitStreamMethod, state S563");
                            this.Manager.Comment("reaching state \'S643\'");
                            bool temp565;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp565);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S723\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp565, "isPropertyValueChanged of RopReleaseMethod, state S723");
                            this.Manager.Comment("reaching state \'S803\'");
                            bool temp566;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp567;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp566, out temp567);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S883\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp566, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S883");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp567, "error of RopOpenStreamMethod, state S883");
                            this.Manager.Comment("reaching state \'S971\'");
                            bool temp568;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp568);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp568);
                            this.Manager.Comment("reaching state \'S1083\'");
                            int temp570 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker6)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker7)));
                            if ((temp570 == 0)) {
                                this.Manager.Comment("reaching state \'S1204\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1348\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1452\'");
                                goto label113;
                            }
                            if ((temp570 == 1)) {
                                this.Manager.Comment("reaching state \'S1205\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp569;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp569);
                                this.Manager.Comment("reaching state \'S1349\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp569, "error of RopWriteAndCommitStreamMethod, state S1349");
                                this.Manager.Comment("reaching state \'S1453\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1539\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1555\'");
                                goto label113;
                            }
                            throw new InvalidOperationException("never reached");
                        label113:
;
                            goto label114;
                        }
                        throw new InvalidOperationException("never reached");
                    label114:
;
                        goto label118;
                    }
                    if ((temp590 == 1)) {
                        this.Manager.Comment("reaching state \'S207\'");
                        bool temp572;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp572);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp572);
                        this.Manager.Comment("reaching state \'S263\'");
                        int temp589 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker9)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker12)));
                        if ((temp589 == 0)) {
                            this.Manager.Comment("reaching state \'S324\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp573;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp573);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S404\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp573, "error of RopWriteStreamMethod, state S404");
                            this.Manager.Comment("reaching state \'S484\'");
                            bool temp574;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp574);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S564\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp574, "isPropertyValueChanged of RopCommitStreamMethod, state S564");
                            this.Manager.Comment("reaching state \'S644\'");
                            bool temp575;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp575);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S724\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp575, "isPropertyValueChanged of RopReleaseMethod, state S724");
                            this.Manager.Comment("reaching state \'S804\'");
                            bool temp576;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp577;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp576, out temp577);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S884\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp576, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S884");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp577, "error of RopOpenStreamMethod, state S884");
                            this.Manager.Comment("reaching state \'S972\'");
                            bool temp578;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp578);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp578);
                            this.Manager.Comment("reaching state \'S1084\'");
                            int temp580 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker10)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker11)));
                            if ((temp580 == 0)) {
                                this.Manager.Comment("reaching state \'S1206\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1350\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1454\'");
                                goto label115;
                            }
                            if ((temp580 == 1)) {
                                this.Manager.Comment("reaching state \'S1207\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp579;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp579);
                                this.Manager.Comment("reaching state \'S1351\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp579, "error of RopWriteAndCommitStreamMethod, state S1351");
                                this.Manager.Comment("reaching state \'S1455\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1540\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1556\'");
                                goto label115;
                            }
                            throw new InvalidOperationException("never reached");
                        label115:
;
                            goto label117;
                        }
                        if ((temp589 == 1)) {
                            this.Manager.Comment("reaching state \'S325\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp581;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp581);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S405\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp581, "error of RopWriteStreamMethod, state S405");
                            this.Manager.Comment("reaching state \'S485\'");
                            bool temp582;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp582);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S565\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp582, "isPropertyValueChanged of RopCommitStreamMethod, state S565");
                            this.Manager.Comment("reaching state \'S645\'");
                            bool temp583;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp583);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S725\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp583, "isPropertyValueChanged of RopReleaseMethod, state S725");
                            this.Manager.Comment("reaching state \'S805\'");
                            bool temp584;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp585;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp584, out temp585);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S885\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp584, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S885");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp585, "error of RopOpenStreamMethod, state S885");
                            this.Manager.Comment("reaching state \'S973\'");
                            bool temp586;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp586);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp586);
                            this.Manager.Comment("reaching state \'S1085\'");
                            int temp588 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker13)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker14)));
                            if ((temp588 == 0)) {
                                this.Manager.Comment("reaching state \'S1208\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1352\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1456\'");
                                goto label116;
                            }
                            if ((temp588 == 1)) {
                                this.Manager.Comment("reaching state \'S1209\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp587;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp587);
                                this.Manager.Comment("reaching state \'S1353\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp587, "error of RopWriteAndCommitStreamMethod, state S1353");
                                this.Manager.Comment("reaching state \'S1457\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1541\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1557\'");
                                goto label116;
                            }
                            throw new InvalidOperationException("never reached");
                        label116:
;
                            goto label117;
                        }
                        throw new InvalidOperationException("never reached");
                    label117:
;
                        goto label118;
                    }
                    throw new InvalidOperationException("never reached");
                label118:
;
                    goto label126;
                }
                if ((temp629 == 1)) {
                    this.Manager.Comment("reaching state \'S145\'");
                    bool temp591;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp591);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp591);
                    this.Manager.Comment("reaching state \'S173\'");
                    int temp628 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker16)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker23)));
                    if ((temp628 == 0)) {
                        this.Manager.Comment("reaching state \'S208\'");
                        bool temp592;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp592);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp592);
                        this.Manager.Comment("reaching state \'S264\'");
                        int temp609 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker17)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker20)));
                        if ((temp609 == 0)) {
                            this.Manager.Comment("reaching state \'S326\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp593;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp593);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S406\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp593, "error of RopWriteStreamMethod, state S406");
                            this.Manager.Comment("reaching state \'S486\'");
                            bool temp594;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp594);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S566\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp594, "isPropertyValueChanged of RopCommitStreamMethod, state S566");
                            this.Manager.Comment("reaching state \'S646\'");
                            bool temp595;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp595);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S726\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp595, "isPropertyValueChanged of RopReleaseMethod, state S726");
                            this.Manager.Comment("reaching state \'S806\'");
                            bool temp596;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp597;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp596, out temp597);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S886\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp596, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S886");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp597, "error of RopOpenStreamMethod, state S886");
                            this.Manager.Comment("reaching state \'S974\'");
                            bool temp598;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp598);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp598);
                            this.Manager.Comment("reaching state \'S1086\'");
                            int temp600 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker18)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker19)));
                            if ((temp600 == 0)) {
                                this.Manager.Comment("reaching state \'S1210\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1354\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1458\'");
                                goto label119;
                            }
                            if ((temp600 == 1)) {
                                this.Manager.Comment("reaching state \'S1211\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp599;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp599);
                                this.Manager.Comment("reaching state \'S1355\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp599, "error of RopWriteAndCommitStreamMethod, state S1355");
                                this.Manager.Comment("reaching state \'S1459\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1542\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1558\'");
                                goto label119;
                            }
                            throw new InvalidOperationException("never reached");
                        label119:
;
                            goto label121;
                        }
                        if ((temp609 == 1)) {
                            this.Manager.Comment("reaching state \'S327\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp601;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp601);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S407\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp601, "error of RopWriteStreamMethod, state S407");
                            this.Manager.Comment("reaching state \'S487\'");
                            bool temp602;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp602);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S567\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp602, "isPropertyValueChanged of RopCommitStreamMethod, state S567");
                            this.Manager.Comment("reaching state \'S647\'");
                            bool temp603;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp603);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S727\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp603, "isPropertyValueChanged of RopReleaseMethod, state S727");
                            this.Manager.Comment("reaching state \'S807\'");
                            bool temp604;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp605;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp604, out temp605);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S887\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp604, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S887");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp605, "error of RopOpenStreamMethod, state S887");
                            this.Manager.Comment("reaching state \'S975\'");
                            bool temp606;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp606);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp606);
                            this.Manager.Comment("reaching state \'S1087\'");
                            int temp608 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker21)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker22)));
                            if ((temp608 == 0)) {
                                this.Manager.Comment("reaching state \'S1212\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1356\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1460\'");
                                goto label120;
                            }
                            if ((temp608 == 1)) {
                                this.Manager.Comment("reaching state \'S1213\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp607;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp607);
                                this.Manager.Comment("reaching state \'S1357\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp607, "error of RopWriteAndCommitStreamMethod, state S1357");
                                this.Manager.Comment("reaching state \'S1461\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1543\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1559\'");
                                goto label120;
                            }
                            throw new InvalidOperationException("never reached");
                        label120:
;
                            goto label121;
                        }
                        throw new InvalidOperationException("never reached");
                    label121:
;
                        goto label125;
                    }
                    if ((temp628 == 1)) {
                        this.Manager.Comment("reaching state \'S209\'");
                        bool temp610;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp610);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp610);
                        this.Manager.Comment("reaching state \'S265\'");
                        int temp627 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker24)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker27)));
                        if ((temp627 == 0)) {
                            this.Manager.Comment("reaching state \'S328\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp611;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp611);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S408\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp611, "error of RopWriteStreamMethod, state S408");
                            this.Manager.Comment("reaching state \'S488\'");
                            bool temp612;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp612);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S568\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp612, "isPropertyValueChanged of RopCommitStreamMethod, state S568");
                            this.Manager.Comment("reaching state \'S648\'");
                            bool temp613;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp613);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S728\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp613, "isPropertyValueChanged of RopReleaseMethod, state S728");
                            this.Manager.Comment("reaching state \'S808\'");
                            bool temp614;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp615;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp614, out temp615);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S888\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp614, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S888");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp615, "error of RopOpenStreamMethod, state S888");
                            this.Manager.Comment("reaching state \'S976\'");
                            bool temp616;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp616);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp616);
                            this.Manager.Comment("reaching state \'S1088\'");
                            int temp618 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker25)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker26)));
                            if ((temp618 == 0)) {
                                this.Manager.Comment("reaching state \'S1214\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1358\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1462\'");
                                goto label122;
                            }
                            if ((temp618 == 1)) {
                                this.Manager.Comment("reaching state \'S1215\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp617;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp617);
                                this.Manager.Comment("reaching state \'S1359\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp617, "error of RopWriteAndCommitStreamMethod, state S1359");
                                this.Manager.Comment("reaching state \'S1463\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1544\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1560\'");
                                goto label122;
                            }
                            throw new InvalidOperationException("never reached");
                        label122:
;
                            goto label124;
                        }
                        if ((temp627 == 1)) {
                            this.Manager.Comment("reaching state \'S329\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp619;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp619);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S409\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp619, "error of RopWriteStreamMethod, state S409");
                            this.Manager.Comment("reaching state \'S489\'");
                            bool temp620;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp620);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S569\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp620, "isPropertyValueChanged of RopCommitStreamMethod, state S569");
                            this.Manager.Comment("reaching state \'S649\'");
                            bool temp621;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp621);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S729\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp621, "isPropertyValueChanged of RopReleaseMethod, state S729");
                            this.Manager.Comment("reaching state \'S809\'");
                            bool temp622;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp623;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp622, out temp623);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S889\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp622, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S889");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp623, "error of RopOpenStreamMethod, state S889");
                            this.Manager.Comment("reaching state \'S977\'");
                            bool temp624;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp624);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp624);
                            this.Manager.Comment("reaching state \'S1089\'");
                            int temp626 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker28)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker29)));
                            if ((temp626 == 0)) {
                                this.Manager.Comment("reaching state \'S1216\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1360\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1464\'");
                                goto label123;
                            }
                            if ((temp626 == 1)) {
                                this.Manager.Comment("reaching state \'S1217\'");
                                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp625;
                                this.Manager.Comment("executing step \'call RopWriteAndCommitStreamMethod(out _)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopWriteAndCommitStreamMethod(out temp625);
                                this.Manager.Comment("reaching state \'S1361\'");
                                this.Manager.Comment("checking step \'return RopWriteAndCommitStreamMethod/[out None]\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp625, "error of RopWriteAndCommitStreamMethod, state S1361");
                                this.Manager.Comment("reaching state \'S1465\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1545\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1561\'");
                                goto label123;
                            }
                            throw new InvalidOperationException("never reached");
                        label123:
;
                            goto label124;
                        }
                        throw new InvalidOperationException("never reached");
                    label124:
;
                        goto label125;
                    }
                    throw new InvalidOperationException("never reached");
                label125:
;
                    goto label126;
                }
                throw new InvalidOperationException("never reached");
            label126:
;
                goto label127;
            }
            if ((temp630 == 1)) {
                this.Manager.Comment("reaching state \'S25\'");
                goto label127;
            }
            throw new InvalidOperationException("never reached");
        label127:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S127");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S172");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S262");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1082");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1082");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S262");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1083");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1083");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S172");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S263");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1084");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1084");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S263");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1085");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1085");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S127");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S173");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S264");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1086");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1086");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S264");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1087");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1087");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S173");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S265");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1088");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1088");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S265");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1089");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1089");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite7CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_SetDataWithStream_TestSuite8() {
            this.Manager.BeginTest("MSOXCPRPT_S04_SetDataWithStream_TestSuite8");
            this.Manager.Comment("reaching state \'S6\'");
            bool temp631;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp631);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp631);
            this.Manager.Comment("reaching state \'S7\'");
            int temp707 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp707 == 0)) {
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S43\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S53\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S63\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S73\'");
                bool temp632;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp633;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp632, out temp633);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S83\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp632, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp633, "error of RopOpenStreamMethod, state S83");
                this.Manager.Comment("reaching state \'S93\'");
                bool temp634;
                bool temp635;
                bool temp636;
                this.Manager.Comment("executing step \'call RopSetStreamSizeMethod(False,out _,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopSetStreamSizeMethod(false, out temp634, out temp635, out temp636);
                this.Manager.Checkpoint("MS-OXCPRPT_R57707");
                this.Manager.Checkpoint("MS-OXCPRPT_R322");
                this.Manager.Checkpoint("MS-OXCPRPT_R32801");
                this.Manager.Checkpoint("MS-OXCPRPT_R57705");
                this.Manager.Comment("reaching state \'S103\'");
                this.Manager.Comment("checking step \'return RopSetStreamSizeMethod/[out False,out True,out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp634, "isExtendedValueZero of RopSetStreamSizeMethod, state S103");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp635, "isLost of RopSetStreamSizeMethod, state S103");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp636, "isIncrease of RopSetStreamSizeMethod, state S103");
                this.Manager.Comment("reaching state \'S114\'");
                bool temp637;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86706,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86706, out temp637);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp637);
                this.Manager.Comment("reaching state \'S128\'");
                int temp706 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker15)));
                if ((temp706 == 0)) {
                    this.Manager.Comment("reaching state \'S146\'");
                    bool temp638;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp638);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp638);
                    this.Manager.Comment("reaching state \'S174\'");
                    int temp671 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker8)));
                    if ((temp671 == 0)) {
                        this.Manager.Comment("reaching state \'S210\'");
                        bool temp639;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp639);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp639);
                        this.Manager.Comment("reaching state \'S266\'");
                        int temp654 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker2)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker5)));
                        if ((temp654 == 0)) {
                            this.Manager.Comment("reaching state \'S330\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp640;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp640);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S410\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp640, "error of RopWriteStreamMethod, state S410");
                            this.Manager.Comment("reaching state \'S490\'");
                            bool temp641;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp641);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S570\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp641, "isPropertyValueChanged of RopCommitStreamMethod, state S570");
                            this.Manager.Comment("reaching state \'S650\'");
                            bool temp642;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp642);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S730\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp642, "isPropertyValueChanged of RopReleaseMethod, state S730");
                            this.Manager.Comment("reaching state \'S810\'");
                            bool temp643;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp644;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp643, out temp644);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S890\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp643, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S890");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp644, "error of RopOpenStreamMethod, state S890");
                            this.Manager.Comment("reaching state \'S978\'");
                            bool temp645;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp645);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp645);
                            this.Manager.Comment("reaching state \'S1090\'");
                            int temp646 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker3)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker4)));
                            if ((temp646 == 0)) {
                                this.Manager.Comment("reaching state \'S1218\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1362\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1466\'");
                                goto label128;
                            }
                            if ((temp646 == 1)) {
                                this.Manager.Comment("reaching state \'S1219\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1363\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1467\'");
                                goto label128;
                            }
                            throw new InvalidOperationException("never reached");
                        label128:
;
                            goto label130;
                        }
                        if ((temp654 == 1)) {
                            this.Manager.Comment("reaching state \'S331\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp647;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp647);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S411\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp647, "error of RopWriteStreamMethod, state S411");
                            this.Manager.Comment("reaching state \'S491\'");
                            bool temp648;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp648);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S571\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp648, "isPropertyValueChanged of RopCommitStreamMethod, state S571");
                            this.Manager.Comment("reaching state \'S651\'");
                            bool temp649;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp649);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S731\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp649, "isPropertyValueChanged of RopReleaseMethod, state S731");
                            this.Manager.Comment("reaching state \'S811\'");
                            bool temp650;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp651;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp650, out temp651);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S891\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp650, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S891");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp651, "error of RopOpenStreamMethod, state S891");
                            this.Manager.Comment("reaching state \'S979\'");
                            bool temp652;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp652);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp652);
                            this.Manager.Comment("reaching state \'S1091\'");
                            int temp653 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker6)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker7)));
                            if ((temp653 == 0)) {
                                this.Manager.Comment("reaching state \'S1220\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1364\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1468\'");
                                goto label129;
                            }
                            if ((temp653 == 1)) {
                                this.Manager.Comment("reaching state \'S1221\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1365\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1469\'");
                                goto label129;
                            }
                            throw new InvalidOperationException("never reached");
                        label129:
;
                            goto label130;
                        }
                        throw new InvalidOperationException("never reached");
                    label130:
;
                        goto label134;
                    }
                    if ((temp671 == 1)) {
                        this.Manager.Comment("reaching state \'S211\'");
                        bool temp655;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp655);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp655);
                        this.Manager.Comment("reaching state \'S267\'");
                        int temp670 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker9)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker12)));
                        if ((temp670 == 0)) {
                            this.Manager.Comment("reaching state \'S332\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp656;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp656);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S412\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp656, "error of RopWriteStreamMethod, state S412");
                            this.Manager.Comment("reaching state \'S492\'");
                            bool temp657;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp657);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S572\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp657, "isPropertyValueChanged of RopCommitStreamMethod, state S572");
                            this.Manager.Comment("reaching state \'S652\'");
                            bool temp658;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp658);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S732\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp658, "isPropertyValueChanged of RopReleaseMethod, state S732");
                            this.Manager.Comment("reaching state \'S812\'");
                            bool temp659;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp660;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp659, out temp660);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S892\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp659, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S892");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp660, "error of RopOpenStreamMethod, state S892");
                            this.Manager.Comment("reaching state \'S980\'");
                            bool temp661;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp661);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp661);
                            this.Manager.Comment("reaching state \'S1092\'");
                            int temp662 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker10)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker11)));
                            if ((temp662 == 0)) {
                                this.Manager.Comment("reaching state \'S1222\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1366\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1470\'");
                                goto label131;
                            }
                            if ((temp662 == 1)) {
                                this.Manager.Comment("reaching state \'S1223\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1367\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1471\'");
                                goto label131;
                            }
                            throw new InvalidOperationException("never reached");
                        label131:
;
                            goto label133;
                        }
                        if ((temp670 == 1)) {
                            this.Manager.Comment("reaching state \'S333\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp663;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp663);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S413\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp663, "error of RopWriteStreamMethod, state S413");
                            this.Manager.Comment("reaching state \'S493\'");
                            bool temp664;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp664);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S573\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp664, "isPropertyValueChanged of RopCommitStreamMethod, state S573");
                            this.Manager.Comment("reaching state \'S653\'");
                            bool temp665;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp665);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S733\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp665, "isPropertyValueChanged of RopReleaseMethod, state S733");
                            this.Manager.Comment("reaching state \'S813\'");
                            bool temp666;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp667;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp666, out temp667);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S893\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp666, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S893");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp667, "error of RopOpenStreamMethod, state S893");
                            this.Manager.Comment("reaching state \'S981\'");
                            bool temp668;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp668);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp668);
                            this.Manager.Comment("reaching state \'S1093\'");
                            int temp669 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker13)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker14)));
                            if ((temp669 == 0)) {
                                this.Manager.Comment("reaching state \'S1224\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1368\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1472\'");
                                goto label132;
                            }
                            if ((temp669 == 1)) {
                                this.Manager.Comment("reaching state \'S1225\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1369\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1473\'");
                                goto label132;
                            }
                            throw new InvalidOperationException("never reached");
                        label132:
;
                            goto label133;
                        }
                        throw new InvalidOperationException("never reached");
                    label133:
;
                        goto label134;
                    }
                    throw new InvalidOperationException("never reached");
                label134:
;
                    goto label142;
                }
                if ((temp706 == 1)) {
                    this.Manager.Comment("reaching state \'S147\'");
                    bool temp672;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp672);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp672);
                    this.Manager.Comment("reaching state \'S175\'");
                    int temp705 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker16)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker23)));
                    if ((temp705 == 0)) {
                        this.Manager.Comment("reaching state \'S212\'");
                        bool temp673;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp673);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp673);
                        this.Manager.Comment("reaching state \'S268\'");
                        int temp688 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker17)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker20)));
                        if ((temp688 == 0)) {
                            this.Manager.Comment("reaching state \'S334\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp674;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp674);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S414\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp674, "error of RopWriteStreamMethod, state S414");
                            this.Manager.Comment("reaching state \'S494\'");
                            bool temp675;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp675);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S574\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp675, "isPropertyValueChanged of RopCommitStreamMethod, state S574");
                            this.Manager.Comment("reaching state \'S654\'");
                            bool temp676;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp676);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S734\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp676, "isPropertyValueChanged of RopReleaseMethod, state S734");
                            this.Manager.Comment("reaching state \'S814\'");
                            bool temp677;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp678;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp677, out temp678);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S894\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp677, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S894");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp678, "error of RopOpenStreamMethod, state S894");
                            this.Manager.Comment("reaching state \'S982\'");
                            bool temp679;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp679);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp679);
                            this.Manager.Comment("reaching state \'S1094\'");
                            int temp680 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker18)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker19)));
                            if ((temp680 == 0)) {
                                this.Manager.Comment("reaching state \'S1226\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1370\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1474\'");
                                goto label135;
                            }
                            if ((temp680 == 1)) {
                                this.Manager.Comment("reaching state \'S1227\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1371\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1475\'");
                                goto label135;
                            }
                            throw new InvalidOperationException("never reached");
                        label135:
;
                            goto label137;
                        }
                        if ((temp688 == 1)) {
                            this.Manager.Comment("reaching state \'S335\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp681;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp681);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S415\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp681, "error of RopWriteStreamMethod, state S415");
                            this.Manager.Comment("reaching state \'S495\'");
                            bool temp682;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp682);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S575\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp682, "isPropertyValueChanged of RopCommitStreamMethod, state S575");
                            this.Manager.Comment("reaching state \'S655\'");
                            bool temp683;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp683);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S735\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp683, "isPropertyValueChanged of RopReleaseMethod, state S735");
                            this.Manager.Comment("reaching state \'S815\'");
                            bool temp684;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp685;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp684, out temp685);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S895\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp684, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S895");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp685, "error of RopOpenStreamMethod, state S895");
                            this.Manager.Comment("reaching state \'S983\'");
                            bool temp686;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp686);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp686);
                            this.Manager.Comment("reaching state \'S1095\'");
                            int temp687 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker21)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker22)));
                            if ((temp687 == 0)) {
                                this.Manager.Comment("reaching state \'S1228\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1372\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1476\'");
                                goto label136;
                            }
                            if ((temp687 == 1)) {
                                this.Manager.Comment("reaching state \'S1229\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1373\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1477\'");
                                goto label136;
                            }
                            throw new InvalidOperationException("never reached");
                        label136:
;
                            goto label137;
                        }
                        throw new InvalidOperationException("never reached");
                    label137:
;
                        goto label141;
                    }
                    if ((temp705 == 1)) {
                        this.Manager.Comment("reaching state \'S213\'");
                        bool temp689;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp689);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp689);
                        this.Manager.Comment("reaching state \'S269\'");
                        int temp704 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker24)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker27)));
                        if ((temp704 == 0)) {
                            this.Manager.Comment("reaching state \'S336\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp690;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp690);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S416\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp690, "error of RopWriteStreamMethod, state S416");
                            this.Manager.Comment("reaching state \'S496\'");
                            bool temp691;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp691);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S576\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp691, "isPropertyValueChanged of RopCommitStreamMethod, state S576");
                            this.Manager.Comment("reaching state \'S656\'");
                            bool temp692;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp692);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S736\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp692, "isPropertyValueChanged of RopReleaseMethod, state S736");
                            this.Manager.Comment("reaching state \'S816\'");
                            bool temp693;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp694;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp693, out temp694);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S896\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp693, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S896");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp694, "error of RopOpenStreamMethod, state S896");
                            this.Manager.Comment("reaching state \'S984\'");
                            bool temp695;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp695);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp695);
                            this.Manager.Comment("reaching state \'S1096\'");
                            int temp696 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker25)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker26)));
                            if ((temp696 == 0)) {
                                this.Manager.Comment("reaching state \'S1230\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1374\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1478\'");
                                goto label138;
                            }
                            if ((temp696 == 1)) {
                                this.Manager.Comment("reaching state \'S1231\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1375\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1479\'");
                                goto label138;
                            }
                            throw new InvalidOperationException("never reached");
                        label138:
;
                            goto label140;
                        }
                        if ((temp704 == 1)) {
                            this.Manager.Comment("reaching state \'S337\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp697;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp697);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S417\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp697, "error of RopWriteStreamMethod, state S417");
                            this.Manager.Comment("reaching state \'S497\'");
                            bool temp698;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp698);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S577\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp698, "isPropertyValueChanged of RopCommitStreamMethod, state S577");
                            this.Manager.Comment("reaching state \'S657\'");
                            bool temp699;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp699);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56404");
                            this.Manager.Comment("reaching state \'S737\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp699, "isPropertyValueChanged of RopReleaseMethod, state S737");
                            this.Manager.Comment("reaching state \'S817\'");
                            bool temp700;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp701;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp700, out temp701);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S897\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp700, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S897");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp701, "error of RopOpenStreamMethod, state S897");
                            this.Manager.Comment("reaching state \'S985\'");
                            bool temp702;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp702);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp702);
                            this.Manager.Comment("reaching state \'S1097\'");
                            int temp703 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker28)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker29)));
                            if ((temp703 == 0)) {
                                this.Manager.Comment("reaching state \'S1232\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1376\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1480\'");
                                goto label139;
                            }
                            if ((temp703 == 1)) {
                                this.Manager.Comment("reaching state \'S1233\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1377\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1481\'");
                                goto label139;
                            }
                            throw new InvalidOperationException("never reached");
                        label139:
;
                            goto label140;
                        }
                        throw new InvalidOperationException("never reached");
                    label140:
;
                        goto label141;
                    }
                    throw new InvalidOperationException("never reached");
                label141:
;
                    goto label142;
                }
                throw new InvalidOperationException("never reached");
            label142:
;
                goto label143;
            }
            if ((temp707 == 1)) {
                this.Manager.Comment("reaching state \'S27\'");
                goto label143;
            }
            throw new InvalidOperationException("never reached");
        label143:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S128");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S174");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S266");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1090");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1090");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S266");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1091");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1091");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S174");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S267");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1092");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1092");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S267");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1093");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1093");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S128");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S175");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S268");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1094");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1094");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S268");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1095");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1095");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S175");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S269");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1096");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1096");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S269");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S1097");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S1097");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite8CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_SetDataWithStream_TestSuite9() {
            this.Manager.BeginTest("MSOXCPRPT_S04_SetDataWithStream_TestSuite9");
            this.Manager.Comment("reaching state \'S8\'");
            bool temp708;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp708);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp708);
            this.Manager.Comment("reaching state \'S9\'");
            int temp781 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp781 == 0)) {
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S44\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S54\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S64\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S74\'");
                bool temp709;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp710;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp709, out temp710);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S84\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp709, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp710, "error of RopOpenStreamMethod, state S84");
                this.Manager.Comment("reaching state \'S94\'");
                bool temp711;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86706,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86706, out temp711);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp711);
                this.Manager.Comment("reaching state \'S104\'");
                int temp780 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker15)));
                if ((temp780 == 0)) {
                    this.Manager.Comment("reaching state \'S115\'");
                    bool temp712;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp712);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp712);
                    this.Manager.Comment("reaching state \'S129\'");
                    int temp745 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker8)));
                    if ((temp745 == 0)) {
                        this.Manager.Comment("reaching state \'S148\'");
                        bool temp713;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp713);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp713);
                        this.Manager.Comment("reaching state \'S176\'");
                        int temp728 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker2)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker5)));
                        if ((temp728 == 0)) {
                            this.Manager.Comment("reaching state \'S214\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp714;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp714);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S270\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp714, "error of RopWriteStreamMethod, state S270");
                            this.Manager.Comment("reaching state \'S338\'");
                            bool temp715;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp715);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S418\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp715, "isPropertyValueChanged of RopCommitStreamMethod, state S418");
                            this.Manager.Comment("reaching state \'S498\'");
                            bool temp716;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp716);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S578\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp716, "isPropertyValueChanged of RopReleaseMethod, state S578");
                            this.Manager.Comment("reaching state \'S658\'");
                            bool temp717;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp718;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp717, out temp718);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S738\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp717, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S738");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp718, "error of RopOpenStreamMethod, state S738");
                            this.Manager.Comment("reaching state \'S818\'");
                            bool temp719;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp719);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp719);
                            this.Manager.Comment("reaching state \'S898\'");
                            int temp720 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker3)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker4)));
                            if ((temp720 == 0)) {
                                this.Manager.Comment("reaching state \'S986\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1098\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1234\'");
                                goto label144;
                            }
                            if ((temp720 == 1)) {
                                this.Manager.Comment("reaching state \'S987\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1099\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1235\'");
                                goto label144;
                            }
                            throw new InvalidOperationException("never reached");
                        label144:
;
                            goto label146;
                        }
                        if ((temp728 == 1)) {
                            this.Manager.Comment("reaching state \'S215\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp721;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp721);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S271\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp721, "error of RopWriteStreamMethod, state S271");
                            this.Manager.Comment("reaching state \'S339\'");
                            bool temp722;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp722);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S419\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp722, "isPropertyValueChanged of RopCommitStreamMethod, state S419");
                            this.Manager.Comment("reaching state \'S499\'");
                            bool temp723;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp723);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S579\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp723, "isPropertyValueChanged of RopReleaseMethod, state S579");
                            this.Manager.Comment("reaching state \'S659\'");
                            bool temp724;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp725;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp724, out temp725);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S739\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp724, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S739");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp725, "error of RopOpenStreamMethod, state S739");
                            this.Manager.Comment("reaching state \'S819\'");
                            bool temp726;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp726);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp726);
                            this.Manager.Comment("reaching state \'S899\'");
                            int temp727 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker6)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker7)));
                            if ((temp727 == 0)) {
                                this.Manager.Comment("reaching state \'S988\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1100\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1236\'");
                                goto label145;
                            }
                            if ((temp727 == 1)) {
                                this.Manager.Comment("reaching state \'S989\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1101\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1237\'");
                                goto label145;
                            }
                            throw new InvalidOperationException("never reached");
                        label145:
;
                            goto label146;
                        }
                        throw new InvalidOperationException("never reached");
                    label146:
;
                        goto label150;
                    }
                    if ((temp745 == 1)) {
                        this.Manager.Comment("reaching state \'S149\'");
                        bool temp729;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp729);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp729);
                        this.Manager.Comment("reaching state \'S177\'");
                        int temp744 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker9)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker12)));
                        if ((temp744 == 0)) {
                            this.Manager.Comment("reaching state \'S216\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp730;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp730);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S272\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp730, "error of RopWriteStreamMethod, state S272");
                            this.Manager.Comment("reaching state \'S340\'");
                            bool temp731;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp731);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S420\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp731, "isPropertyValueChanged of RopCommitStreamMethod, state S420");
                            this.Manager.Comment("reaching state \'S500\'");
                            bool temp732;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp732);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S580\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp732, "isPropertyValueChanged of RopReleaseMethod, state S580");
                            this.Manager.Comment("reaching state \'S660\'");
                            bool temp733;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp734;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp733, out temp734);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S740\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp733, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S740");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp734, "error of RopOpenStreamMethod, state S740");
                            this.Manager.Comment("reaching state \'S820\'");
                            bool temp735;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp735);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp735);
                            this.Manager.Comment("reaching state \'S900\'");
                            int temp736 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker10)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker11)));
                            if ((temp736 == 0)) {
                                this.Manager.Comment("reaching state \'S990\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1102\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1238\'");
                                goto label147;
                            }
                            if ((temp736 == 1)) {
                                this.Manager.Comment("reaching state \'S991\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1103\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1239\'");
                                goto label147;
                            }
                            throw new InvalidOperationException("never reached");
                        label147:
;
                            goto label149;
                        }
                        if ((temp744 == 1)) {
                            this.Manager.Comment("reaching state \'S217\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp737;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp737);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S273\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp737, "error of RopWriteStreamMethod, state S273");
                            this.Manager.Comment("reaching state \'S341\'");
                            bool temp738;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp738);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S421\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp738, "isPropertyValueChanged of RopCommitStreamMethod, state S421");
                            this.Manager.Comment("reaching state \'S501\'");
                            bool temp739;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp739);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S581\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp739, "isPropertyValueChanged of RopReleaseMethod, state S581");
                            this.Manager.Comment("reaching state \'S661\'");
                            bool temp740;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp741;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp740, out temp741);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S741\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp740, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S741");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp741, "error of RopOpenStreamMethod, state S741");
                            this.Manager.Comment("reaching state \'S821\'");
                            bool temp742;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp742);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp742);
                            this.Manager.Comment("reaching state \'S901\'");
                            int temp743 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker13)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker14)));
                            if ((temp743 == 0)) {
                                this.Manager.Comment("reaching state \'S992\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1104\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1240\'");
                                goto label148;
                            }
                            if ((temp743 == 1)) {
                                this.Manager.Comment("reaching state \'S993\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1105\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1241\'");
                                goto label148;
                            }
                            throw new InvalidOperationException("never reached");
                        label148:
;
                            goto label149;
                        }
                        throw new InvalidOperationException("never reached");
                    label149:
;
                        goto label150;
                    }
                    throw new InvalidOperationException("never reached");
                label150:
;
                    goto label158;
                }
                if ((temp780 == 1)) {
                    this.Manager.Comment("reaching state \'S116\'");
                    bool temp746;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(55707,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(55707, out temp746);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp746);
                    this.Manager.Comment("reaching state \'S130\'");
                    int temp779 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker16)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker23)));
                    if ((temp779 == 0)) {
                        this.Manager.Comment("reaching state \'S150\'");
                        bool temp747;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp747);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp747);
                        this.Manager.Comment("reaching state \'S178\'");
                        int temp762 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker17)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker20)));
                        if ((temp762 == 0)) {
                            this.Manager.Comment("reaching state \'S218\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp748;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp748);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S274\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp748, "error of RopWriteStreamMethod, state S274");
                            this.Manager.Comment("reaching state \'S342\'");
                            bool temp749;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp749);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S422\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp749, "isPropertyValueChanged of RopCommitStreamMethod, state S422");
                            this.Manager.Comment("reaching state \'S502\'");
                            bool temp750;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp750);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S582\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp750, "isPropertyValueChanged of RopReleaseMethod, state S582");
                            this.Manager.Comment("reaching state \'S662\'");
                            bool temp751;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp752;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp751, out temp752);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S742\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp751, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S742");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp752, "error of RopOpenStreamMethod, state S742");
                            this.Manager.Comment("reaching state \'S822\'");
                            bool temp753;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp753);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp753);
                            this.Manager.Comment("reaching state \'S902\'");
                            int temp754 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker18)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker19)));
                            if ((temp754 == 0)) {
                                this.Manager.Comment("reaching state \'S994\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1106\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1242\'");
                                goto label151;
                            }
                            if ((temp754 == 1)) {
                                this.Manager.Comment("reaching state \'S995\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1107\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1243\'");
                                goto label151;
                            }
                            throw new InvalidOperationException("never reached");
                        label151:
;
                            goto label153;
                        }
                        if ((temp762 == 1)) {
                            this.Manager.Comment("reaching state \'S219\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp755;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp755);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S275\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp755, "error of RopWriteStreamMethod, state S275");
                            this.Manager.Comment("reaching state \'S343\'");
                            bool temp756;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp756);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S423\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp756, "isPropertyValueChanged of RopCommitStreamMethod, state S423");
                            this.Manager.Comment("reaching state \'S503\'");
                            bool temp757;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp757);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S583\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp757, "isPropertyValueChanged of RopReleaseMethod, state S583");
                            this.Manager.Comment("reaching state \'S663\'");
                            bool temp758;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp759;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp758, out temp759);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S743\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp758, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S743");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp759, "error of RopOpenStreamMethod, state S743");
                            this.Manager.Comment("reaching state \'S823\'");
                            bool temp760;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp760);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp760);
                            this.Manager.Comment("reaching state \'S903\'");
                            int temp761 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker21)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker22)));
                            if ((temp761 == 0)) {
                                this.Manager.Comment("reaching state \'S996\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1108\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1244\'");
                                goto label152;
                            }
                            if ((temp761 == 1)) {
                                this.Manager.Comment("reaching state \'S997\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1109\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1245\'");
                                goto label152;
                            }
                            throw new InvalidOperationException("never reached");
                        label152:
;
                            goto label153;
                        }
                        throw new InvalidOperationException("never reached");
                    label153:
;
                        goto label157;
                    }
                    if ((temp779 == 1)) {
                        this.Manager.Comment("reaching state \'S151\'");
                        bool temp763;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(90102,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(90102, out temp763);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp763);
                        this.Manager.Comment("reaching state \'S179\'");
                        int temp778 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker24)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker27)));
                        if ((temp778 == 0)) {
                            this.Manager.Comment("reaching state \'S220\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp764;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp764);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S276\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp764, "error of RopWriteStreamMethod, state S276");
                            this.Manager.Comment("reaching state \'S344\'");
                            bool temp765;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp765);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S424\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp765, "isPropertyValueChanged of RopCommitStreamMethod, state S424");
                            this.Manager.Comment("reaching state \'S504\'");
                            bool temp766;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp766);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S584\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp766, "isPropertyValueChanged of RopReleaseMethod, state S584");
                            this.Manager.Comment("reaching state \'S664\'");
                            bool temp767;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp768;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp767, out temp768);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S744\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp767, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S744");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp768, "error of RopOpenStreamMethod, state S744");
                            this.Manager.Comment("reaching state \'S824\'");
                            bool temp769;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp769);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp769);
                            this.Manager.Comment("reaching state \'S904\'");
                            int temp770 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker25)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker26)));
                            if ((temp770 == 0)) {
                                this.Manager.Comment("reaching state \'S998\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1110\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1246\'");
                                goto label154;
                            }
                            if ((temp770 == 1)) {
                                this.Manager.Comment("reaching state \'S999\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1111\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1247\'");
                                goto label154;
                            }
                            throw new InvalidOperationException("never reached");
                        label154:
;
                            goto label156;
                        }
                        if ((temp778 == 1)) {
                            this.Manager.Comment("reaching state \'S221\'");
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp771;
                            this.Manager.Comment("executing step \'call RopWriteStreamMethod(ReadWrite,False,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopWriteStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), false, out temp771);
                            this.Manager.Checkpoint("MS-OXCPRPT_R269");
                            this.Manager.Comment("reaching state \'S277\'");
                            this.Manager.Comment("checking step \'return RopWriteStreamMethod/[out None]\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp771, "error of RopWriteStreamMethod, state S277");
                            this.Manager.Comment("reaching state \'S345\'");
                            bool temp772;
                            this.Manager.Comment("executing step \'call RopCommitStreamMethod(ReadWrite,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCommitStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), out temp772);
                            this.Manager.Checkpoint("MS-OXCPRPT_R305");
                            this.Manager.Comment("reaching state \'S425\'");
                            this.Manager.Comment("checking step \'return RopCommitStreamMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp772, "isPropertyValueChanged of RopCommitStreamMethod, state S425");
                            this.Manager.Comment("reaching state \'S505\'");
                            bool temp773;
                            this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp773);
                            this.Manager.Checkpoint("MS-OXCPRPT_R56403");
                            this.Manager.Comment("reaching state \'S585\'");
                            this.Manager.Comment("checking step \'return RopReleaseMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp773, "isPropertyValueChanged of RopReleaseMethod, state S585");
                            this.Manager.Comment("reaching state \'S665\'");
                            bool temp774;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp775;
                            this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                                    "");
                            this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp774, out temp775);
                            this.Manager.Checkpoint("MS-OXCPRPT_R885");
                            this.Manager.Comment("reaching state \'S745\'");
                            this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp774, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S745");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp775, "error of RopOpenStreamMethod, state S745");
                            this.Manager.Comment("reaching state \'S825\'");
                            bool temp776;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(752,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(752, out temp776);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp776);
                            this.Manager.Comment("reaching state \'S905\'");
                            int temp777 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker28)), new ExpectedReturn(S04_SetDataWithStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker29)));
                            if ((temp777 == 0)) {
                                this.Manager.Comment("reaching state \'S1000\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1112\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1248\'");
                                goto label155;
                            }
                            if ((temp777 == 1)) {
                                this.Manager.Comment("reaching state \'S1001\'");
                                this.Manager.Comment("executing step \'call RopReleaseMethodNoVerify(FirstObject)\'");
                                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethodNoVerify(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                                this.Manager.Comment("reaching state \'S1113\'");
                                this.Manager.Comment("checking step \'return RopReleaseMethodNoVerify\'");
                                this.Manager.Comment("reaching state \'S1249\'");
                                goto label155;
                            }
                            throw new InvalidOperationException("never reached");
                        label155:
;
                            goto label156;
                        }
                        throw new InvalidOperationException("never reached");
                    label156:
;
                        goto label157;
                    }
                    throw new InvalidOperationException("never reached");
                label157:
;
                    goto label158;
                }
                throw new InvalidOperationException("never reached");
            label158:
;
                goto label159;
            }
            if ((temp781 == 1)) {
                this.Manager.Comment("reaching state \'S29\'");
                goto label159;
            }
            throw new InvalidOperationException("never reached");
        label159:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S104");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S129");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S176");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S898");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S898");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S176");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S899");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S899");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S129");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S177");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S900");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S900");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S177");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S901");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S901");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S104");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S130");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S178");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S902");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S902");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S178");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S903");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S903");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S130");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S179");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S904");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S904");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S179");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S905");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S905");
        }
        
        private void MSOXCPRPT_S04_SetDataWithStream_TestSuite9CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        #endregion
    }
}