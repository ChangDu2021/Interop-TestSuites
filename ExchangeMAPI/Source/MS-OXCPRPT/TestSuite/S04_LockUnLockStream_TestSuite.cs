//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCPRPT {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.6.100.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S04_LockUnlockStream_TestSuite : PtfTestClassBase {
        
        public S04_LockUnlockStream_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter IMS_OXCPRPTAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCPRPTAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_LockUnlockStream_TestSuite() {
            this.Manager.BeginTest("MSOXCPRPT_S04_LockUnlockStream_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp13 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp13 == 0)) {
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S30\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S36\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S42\'");
                bool temp1;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp2;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp1, out temp2);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S48\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S48");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp2, "error of RopOpenStreamMethod, state S48");
                this.Manager.Comment("reaching state \'S54\'");
                bool temp3;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(750,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(750, out temp3);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                this.Manager.Comment("reaching state \'S60\'");
                int temp12 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuiteCheckRequirementEnabledChecker3)));
                if ((temp12 == 0)) {
                    this.Manager.Comment("reaching state \'S66\'");
                    bool temp4;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(751,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(751, out temp4);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp4);
                    this.Manager.Comment("reaching state \'S78\'");
                    int temp7 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuiteCheckRequirementEnabledChecker2)));
                    if ((temp7 == 0)) {
                        this.Manager.Comment("reaching state \'S90\'");
                        bool temp5;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp5);
                        this.Manager.Comment("reaching state \'S114\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp5, "isPropertyValueChanged of RopReleaseMethod, state S114");
                        this.Manager.Comment("reaching state \'S138\'");
                        goto label0;
                    }
                    if ((temp7 == 1)) {
                        this.Manager.Comment("reaching state \'S91\'");
                        bool temp6;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp6);
                        this.Manager.Comment("reaching state \'S115\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp6, "isPropertyValueChanged of RopReleaseMethod, state S115");
                        this.Manager.Comment("reaching state \'S139\'");
                        goto label0;
                    }
                    throw new InvalidOperationException("never reached");
                label0:
;
                    goto label2;
                }
                if ((temp12 == 1)) {
                    this.Manager.Comment("reaching state \'S67\'");
                    bool temp8;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(751,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(751, out temp8);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp8);
                    this.Manager.Comment("reaching state \'S79\'");
                    int temp11 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuiteCheckRequirementEnabledChecker4)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuiteCheckRequirementEnabledChecker5)));
                    if ((temp11 == 0)) {
                        this.Manager.Comment("reaching state \'S92\'");
                        bool temp9;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp9);
                        this.Manager.Comment("reaching state \'S116\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp9, "isPropertyValueChanged of RopReleaseMethod, state S116");
                        this.Manager.Comment("reaching state \'S140\'");
                        goto label1;
                    }
                    if ((temp11 == 1)) {
                        this.Manager.Comment("reaching state \'S93\'");
                        bool temp10;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp10);
                        this.Manager.Comment("reaching state \'S117\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp10, "isPropertyValueChanged of RopReleaseMethod, state S117");
                        this.Manager.Comment("reaching state \'S141\'");
                        goto label1;
                    }
                    throw new InvalidOperationException("never reached");
                label1:
;
                    goto label2;
                }
                throw new InvalidOperationException("never reached");
            label2:
;
                goto label3;
            }
            if ((temp13 == 1)) {
                this.Manager.Comment("reaching state \'S13\'");
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S60");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S78");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S78");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S60");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S79");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S79");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_LockUnlockStream_TestSuite1() {
            this.Manager.BeginTest("MSOXCPRPT_S04_LockUnlockStream_TestSuite1");
            this.Manager.Comment("reaching state \'S10\'");
            bool temp14;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp14);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp14);
            this.Manager.Comment("reaching state \'S11\'");
            int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp29 == 0)) {
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S35\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S41\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S47\'");
                bool temp15;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp16;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp15, out temp16);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S53\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp15, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S53");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp16, "error of RopOpenStreamMethod, state S53");
                this.Manager.Comment("reaching state \'S59\'");
                bool temp17;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(750,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(750, out temp17);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp17);
                this.Manager.Comment("reaching state \'S65\'");
                int temp28 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite1CheckRequirementEnabledChecker)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite1CheckRequirementEnabledChecker3)));
                if ((temp28 == 0)) {
                    this.Manager.Comment("reaching state \'S76\'");
                    bool temp18;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(751,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(751, out temp18);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp18);
                    this.Manager.Comment("reaching state \'S88\'");
                    int temp21 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite1CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite1CheckRequirementEnabledChecker2)));
                    if ((temp21 == 0)) {
                        this.Manager.Comment("reaching state \'S110\'");
                        bool temp19;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp19);
                        this.Manager.Comment("reaching state \'S134\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp19, "isPropertyValueChanged of RopReleaseMethod, state S134");
                        this.Manager.Comment("reaching state \'S158\'");
                        goto label4;
                    }
                    if ((temp21 == 1)) {
                        this.Manager.Comment("reaching state \'S111\'");
                        bool temp20;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp20);
                        this.Manager.Comment("reaching state \'S135\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp20, "isPropertyValueChanged of RopReleaseMethod, state S135");
                        this.Manager.Comment("reaching state \'S159\'");
                        goto label4;
                    }
                    throw new InvalidOperationException("never reached");
                label4:
;
                    goto label6;
                }
                if ((temp28 == 1)) {
                    this.Manager.Comment("reaching state \'S77\'");
                    bool temp22;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(751,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(751, out temp22);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp22);
                    this.Manager.Comment("reaching state \'S89\'");
                    int temp27 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite1CheckRequirementEnabledChecker4)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite1CheckRequirementEnabledChecker5)));
                    if ((temp27 == 0)) {
                        this.Manager.Comment("reaching state \'S112\'");
                        Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp23;
                        this.Manager.Comment("executing step \'call RopLockRegionStreamMethod(WithExpiredLock,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopLockRegionStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.PreStateBeforeLock)(0)), out temp23);
                        this.Manager.Checkpoint("MS-OXCPRPT_R610");
                        this.Manager.Comment("reaching state \'S136\'");
                        this.Manager.Comment("checking step \'return RopLockRegionStreamMethod/[out None]\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp23, "error of RopLockRegionStreamMethod, state S136");
                        this.Manager.Comment("reaching state \'S160\'");
                        bool temp24;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp24);
                        this.Manager.Comment("reaching state \'S170\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp24, "isPropertyValueChanged of RopReleaseMethod, state S170");
                        this.Manager.Comment("reaching state \'S180\'");
                        goto label5;
                    }
                    if ((temp27 == 1)) {
                        this.Manager.Comment("reaching state \'S113\'");
                        Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp25;
                        this.Manager.Comment("executing step \'call RopLockRegionStreamMethod(WithExpiredLock,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopLockRegionStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.PreStateBeforeLock)(0)), out temp25);
                        this.Manager.Checkpoint("MS-OXCPRPT_R610");
                        this.Manager.Comment("reaching state \'S137\'");
                        this.Manager.Comment("checking step \'return RopLockRegionStreamMethod/[out None]\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp25, "error of RopLockRegionStreamMethod, state S137");
                        this.Manager.Comment("reaching state \'S161\'");
                        this.Manager.Comment("executing step \'call RopUnlockRegionStreamMethod(False)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopUnlockRegionStreamMethod(false);
                        this.Manager.Comment("reaching state \'S171\'");
                        this.Manager.Comment("checking step \'return RopUnlockRegionStreamMethod\'");
                        this.Manager.Comment("reaching state \'S181\'");
                        bool temp26;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp26);
                        this.Manager.Comment("reaching state \'S183\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp26, "isPropertyValueChanged of RopReleaseMethod, state S183");
                        this.Manager.Comment("reaching state \'S185\'");
                        goto label5;
                    }
                    throw new InvalidOperationException("never reached");
                label5:
;
                    goto label6;
                }
                throw new InvalidOperationException("never reached");
            label6:
;
                goto label7;
            }
            if ((temp29 == 1)) {
                this.Manager.Comment("reaching state \'S23\'");
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite1CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S65");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite1CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S88");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite1CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S88");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite1CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S65");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite1CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S89");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite1CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S89");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_LockUnlockStream_TestSuite2() {
            this.Manager.BeginTest("MSOXCPRPT_S04_LockUnlockStream_TestSuite2");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp30;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp30);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp30);
            this.Manager.Comment("reaching state \'S3\'");
            int temp45 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp45 == 0)) {
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S25\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S31\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S37\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S43\'");
                bool temp31;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp32;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp31, out temp32);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S49\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp31, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S49");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp32, "error of RopOpenStreamMethod, state S49");
                this.Manager.Comment("reaching state \'S55\'");
                bool temp33;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(750,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(750, out temp33);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp33);
                this.Manager.Comment("reaching state \'S61\'");
                int temp44 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite2CheckRequirementEnabledChecker)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite2CheckRequirementEnabledChecker3)));
                if ((temp44 == 0)) {
                    this.Manager.Comment("reaching state \'S68\'");
                    bool temp34;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(751,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(751, out temp34);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp34);
                    this.Manager.Comment("reaching state \'S80\'");
                    int temp37 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite2CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite2CheckRequirementEnabledChecker2)));
                    if ((temp37 == 0)) {
                        this.Manager.Comment("reaching state \'S94\'");
                        bool temp35;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp35);
                        this.Manager.Comment("reaching state \'S118\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp35, "isPropertyValueChanged of RopReleaseMethod, state S118");
                        this.Manager.Comment("reaching state \'S142\'");
                        goto label8;
                    }
                    if ((temp37 == 1)) {
                        this.Manager.Comment("reaching state \'S95\'");
                        bool temp36;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp36);
                        this.Manager.Comment("reaching state \'S119\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp36, "isPropertyValueChanged of RopReleaseMethod, state S119");
                        this.Manager.Comment("reaching state \'S143\'");
                        goto label8;
                    }
                    throw new InvalidOperationException("never reached");
                label8:
;
                    goto label10;
                }
                if ((temp44 == 1)) {
                    this.Manager.Comment("reaching state \'S69\'");
                    bool temp38;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(751,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(751, out temp38);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp38);
                    this.Manager.Comment("reaching state \'S81\'");
                    int temp43 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite2CheckRequirementEnabledChecker4)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite2CheckRequirementEnabledChecker5)));
                    if ((temp43 == 0)) {
                        this.Manager.Comment("reaching state \'S96\'");
                        Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp39;
                        this.Manager.Comment("executing step \'call RopLockRegionStreamMethod(Normal,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopLockRegionStreamMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.PreStateBeforeLock.Normal, out temp39);
                        this.Manager.Checkpoint("MS-OXCPRPT_R610");
                        this.Manager.Comment("reaching state \'S120\'");
                        this.Manager.Comment("checking step \'return RopLockRegionStreamMethod/[out None]\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp39, "error of RopLockRegionStreamMethod, state S120");
                        this.Manager.Comment("reaching state \'S144\'");
                        bool temp40;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp40);
                        this.Manager.Comment("reaching state \'S162\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp40, "isPropertyValueChanged of RopReleaseMethod, state S162");
                        this.Manager.Comment("reaching state \'S172\'");
                        goto label9;
                    }
                    if ((temp43 == 1)) {
                        this.Manager.Comment("reaching state \'S97\'");
                        Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp41;
                        this.Manager.Comment("executing step \'call RopLockRegionStreamMethod(Normal,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopLockRegionStreamMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.PreStateBeforeLock.Normal, out temp41);
                        this.Manager.Checkpoint("MS-OXCPRPT_R610");
                        this.Manager.Comment("reaching state \'S121\'");
                        this.Manager.Comment("checking step \'return RopLockRegionStreamMethod/[out None]\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp41, "error of RopLockRegionStreamMethod, state S121");
                        this.Manager.Comment("reaching state \'S145\'");
                        bool temp42;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp42);
                        this.Manager.Comment("reaching state \'S163\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp42, "isPropertyValueChanged of RopReleaseMethod, state S163");
                        this.Manager.Comment("reaching state \'S173\'");
                        goto label9;
                    }
                    throw new InvalidOperationException("never reached");
                label9:
;
                    goto label10;
                }
                throw new InvalidOperationException("never reached");
            label10:
;
                goto label11;
            }
            if ((temp45 == 1)) {
                this.Manager.Comment("reaching state \'S15\'");
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite2CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S61");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite2CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S80");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite2CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S80");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite2CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S61");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite2CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S81");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite2CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S81");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_LockUnlockStream_TestSuite3() {
            this.Manager.BeginTest("MSOXCPRPT_S04_LockUnlockStream_TestSuite3");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp46;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp46);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp46);
            this.Manager.Comment("reaching state \'S5\'");
            int temp61 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp61 == 0)) {
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S44\'");
                bool temp47;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp48;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp47, out temp48);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S50\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp47, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S50");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp48, "error of RopOpenStreamMethod, state S50");
                this.Manager.Comment("reaching state \'S56\'");
                bool temp49;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(750,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(750, out temp49);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp49);
                this.Manager.Comment("reaching state \'S62\'");
                int temp60 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite3CheckRequirementEnabledChecker)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite3CheckRequirementEnabledChecker3)));
                if ((temp60 == 0)) {
                    this.Manager.Comment("reaching state \'S70\'");
                    bool temp50;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(751,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(751, out temp50);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp50);
                    this.Manager.Comment("reaching state \'S82\'");
                    int temp53 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite3CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite3CheckRequirementEnabledChecker2)));
                    if ((temp53 == 0)) {
                        this.Manager.Comment("reaching state \'S98\'");
                        bool temp51;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp51);
                        this.Manager.Comment("reaching state \'S122\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp51, "isPropertyValueChanged of RopReleaseMethod, state S122");
                        this.Manager.Comment("reaching state \'S146\'");
                        goto label12;
                    }
                    if ((temp53 == 1)) {
                        this.Manager.Comment("reaching state \'S99\'");
                        bool temp52;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp52);
                        this.Manager.Comment("reaching state \'S123\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp52, "isPropertyValueChanged of RopReleaseMethod, state S123");
                        this.Manager.Comment("reaching state \'S147\'");
                        goto label12;
                    }
                    throw new InvalidOperationException("never reached");
                label12:
;
                    goto label14;
                }
                if ((temp60 == 1)) {
                    this.Manager.Comment("reaching state \'S71\'");
                    bool temp54;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(751,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(751, out temp54);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp54);
                    this.Manager.Comment("reaching state \'S83\'");
                    int temp59 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite3CheckRequirementEnabledChecker4)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite3CheckRequirementEnabledChecker5)));
                    if ((temp59 == 0)) {
                        this.Manager.Comment("reaching state \'S100\'");
                        Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp55;
                        this.Manager.Comment("executing step \'call RopLockRegionStreamMethod(PreLockNotExpired,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopLockRegionStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.PreStateBeforeLock)(1)), out temp55);
                        this.Manager.Comment("reaching state \'S124\'");
                        this.Manager.Comment("checking step \'return RopLockRegionStreamMethod/[out None]\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp55, "error of RopLockRegionStreamMethod, state S124");
                        this.Manager.Comment("reaching state \'S148\'");
                        bool temp56;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp56);
                        this.Manager.Comment("reaching state \'S164\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp56, "isPropertyValueChanged of RopReleaseMethod, state S164");
                        this.Manager.Comment("reaching state \'S174\'");
                        goto label13;
                    }
                    if ((temp59 == 1)) {
                        this.Manager.Comment("reaching state \'S101\'");
                        Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp57;
                        this.Manager.Comment("executing step \'call RopLockRegionStreamMethod(PreLockNotExpired,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopLockRegionStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.PreStateBeforeLock)(1)), out temp57);
                        this.Manager.Comment("reaching state \'S125\'");
                        this.Manager.Comment("checking step \'return RopLockRegionStreamMethod/[out None]\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp57, "error of RopLockRegionStreamMethod, state S125");
                        this.Manager.Comment("reaching state \'S149\'");
                        bool temp58;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp58);
                        this.Manager.Comment("reaching state \'S165\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp58, "isPropertyValueChanged of RopReleaseMethod, state S165");
                        this.Manager.Comment("reaching state \'S175\'");
                        goto label13;
                    }
                    throw new InvalidOperationException("never reached");
                label13:
;
                    goto label14;
                }
                throw new InvalidOperationException("never reached");
            label14:
;
                goto label15;
            }
            if ((temp61 == 1)) {
                this.Manager.Comment("reaching state \'S17\'");
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite3CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S62");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite3CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S82");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite3CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S82");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite3CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S62");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite3CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S83");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite3CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S83");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_LockUnlockStream_TestSuite4() {
            this.Manager.BeginTest("MSOXCPRPT_S04_LockUnlockStream_TestSuite4");
            this.Manager.Comment("reaching state \'S6\'");
            bool temp62;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp62);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp62);
            this.Manager.Comment("reaching state \'S7\'");
            int temp77 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp77 == 0)) {
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S33\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S39\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S45\'");
                bool temp63;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp64;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp63, out temp64);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S51\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp63, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S51");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp64, "error of RopOpenStreamMethod, state S51");
                this.Manager.Comment("reaching state \'S57\'");
                bool temp65;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(750,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(750, out temp65);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp65);
                this.Manager.Comment("reaching state \'S63\'");
                int temp76 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite4CheckRequirementEnabledChecker)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite4CheckRequirementEnabledChecker3)));
                if ((temp76 == 0)) {
                    this.Manager.Comment("reaching state \'S72\'");
                    bool temp66;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(751,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(751, out temp66);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp66);
                    this.Manager.Comment("reaching state \'S84\'");
                    int temp69 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite4CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite4CheckRequirementEnabledChecker2)));
                    if ((temp69 == 0)) {
                        this.Manager.Comment("reaching state \'S102\'");
                        bool temp67;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp67);
                        this.Manager.Comment("reaching state \'S126\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp67, "isPropertyValueChanged of RopReleaseMethod, state S126");
                        this.Manager.Comment("reaching state \'S150\'");
                        goto label16;
                    }
                    if ((temp69 == 1)) {
                        this.Manager.Comment("reaching state \'S103\'");
                        bool temp68;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp68);
                        this.Manager.Comment("reaching state \'S127\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp68, "isPropertyValueChanged of RopReleaseMethod, state S127");
                        this.Manager.Comment("reaching state \'S151\'");
                        goto label16;
                    }
                    throw new InvalidOperationException("never reached");
                label16:
;
                    goto label18;
                }
                if ((temp76 == 1)) {
                    this.Manager.Comment("reaching state \'S73\'");
                    bool temp70;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(751,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(751, out temp70);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp70);
                    this.Manager.Comment("reaching state \'S85\'");
                    int temp75 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite4CheckRequirementEnabledChecker4)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite4CheckRequirementEnabledChecker5)));
                    if ((temp75 == 0)) {
                        this.Manager.Comment("reaching state \'S104\'");
                        Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp71;
                        this.Manager.Comment("executing step \'call RopLockRegionStreamMethod(WithExpiredLock,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopLockRegionStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.PreStateBeforeLock)(0)), out temp71);
                        this.Manager.Checkpoint("MS-OXCPRPT_R610");
                        this.Manager.Comment("reaching state \'S128\'");
                        this.Manager.Comment("checking step \'return RopLockRegionStreamMethod/[out None]\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp71, "error of RopLockRegionStreamMethod, state S128");
                        this.Manager.Comment("reaching state \'S152\'");
                        bool temp72;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp72);
                        this.Manager.Comment("reaching state \'S166\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp72, "isPropertyValueChanged of RopReleaseMethod, state S166");
                        this.Manager.Comment("reaching state \'S176\'");
                        goto label17;
                    }
                    if ((temp75 == 1)) {
                        this.Manager.Comment("reaching state \'S105\'");
                        Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp73;
                        this.Manager.Comment("executing step \'call RopLockRegionStreamMethod(WithExpiredLock,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopLockRegionStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.PreStateBeforeLock)(0)), out temp73);
                        this.Manager.Checkpoint("MS-OXCPRPT_R610");
                        this.Manager.Comment("reaching state \'S129\'");
                        this.Manager.Comment("checking step \'return RopLockRegionStreamMethod/[out None]\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp73, "error of RopLockRegionStreamMethod, state S129");
                        this.Manager.Comment("reaching state \'S153\'");
                        bool temp74;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp74);
                        this.Manager.Comment("reaching state \'S167\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp74, "isPropertyValueChanged of RopReleaseMethod, state S167");
                        this.Manager.Comment("reaching state \'S177\'");
                        goto label17;
                    }
                    throw new InvalidOperationException("never reached");
                label17:
;
                    goto label18;
                }
                throw new InvalidOperationException("never reached");
            label18:
;
                goto label19;
            }
            if ((temp77 == 1)) {
                this.Manager.Comment("reaching state \'S19\'");
                goto label19;
            }
            throw new InvalidOperationException("never reached");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite4CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S63");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite4CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S84");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite4CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S84");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite4CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S63");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite4CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S85");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite4CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S85");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S04_LockUnlockStream_TestSuite5() {
            this.Manager.BeginTest("MSOXCPRPT_S04_LockUnlockStream_TestSuite5");
            this.Manager.Comment("reaching state \'S8\'");
            bool temp78;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp78);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp78);
            this.Manager.Comment("reaching state \'S9\'");
            int temp93 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp93 == 0)) {
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S40\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S46\'");
                bool temp79;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp80;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadWrite,True,out _,out _)\'" +
                        "");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(1)), true, out temp79, out temp80);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S52\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp79, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S52");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp80, "error of RopOpenStreamMethod, state S52");
                this.Manager.Comment("reaching state \'S58\'");
                bool temp81;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(750,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(750, out temp81);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp81);
                this.Manager.Comment("reaching state \'S64\'");
                int temp92 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite5CheckRequirementEnabledChecker)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite5CheckRequirementEnabledChecker3)));
                if ((temp92 == 0)) {
                    this.Manager.Comment("reaching state \'S74\'");
                    bool temp82;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(751,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(751, out temp82);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp82);
                    this.Manager.Comment("reaching state \'S86\'");
                    int temp85 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite5CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite5CheckRequirementEnabledChecker2)));
                    if ((temp85 == 0)) {
                        this.Manager.Comment("reaching state \'S106\'");
                        bool temp83;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp83);
                        this.Manager.Comment("reaching state \'S130\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp83, "isPropertyValueChanged of RopReleaseMethod, state S130");
                        this.Manager.Comment("reaching state \'S154\'");
                        goto label20;
                    }
                    if ((temp85 == 1)) {
                        this.Manager.Comment("reaching state \'S107\'");
                        bool temp84;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp84);
                        this.Manager.Comment("reaching state \'S131\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp84, "isPropertyValueChanged of RopReleaseMethod, state S131");
                        this.Manager.Comment("reaching state \'S155\'");
                        goto label20;
                    }
                    throw new InvalidOperationException("never reached");
                label20:
;
                    goto label22;
                }
                if ((temp92 == 1)) {
                    this.Manager.Comment("reaching state \'S75\'");
                    bool temp86;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(751,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(751, out temp86);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp86);
                    this.Manager.Comment("reaching state \'S87\'");
                    int temp91 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite5CheckRequirementEnabledChecker4)), new ExpectedReturn(S04_LockUnlockStream_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S04_LockUnlockStream_TestSuite5CheckRequirementEnabledChecker5)));
                    if ((temp91 == 0)) {
                        this.Manager.Comment("reaching state \'S108\'");
                        Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp87;
                        this.Manager.Comment("executing step \'call RopLockRegionStreamMethod(WithExpiredLock,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopLockRegionStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.PreStateBeforeLock)(0)), out temp87);
                        this.Manager.Checkpoint("MS-OXCPRPT_R610");
                        this.Manager.Comment("reaching state \'S132\'");
                        this.Manager.Comment("checking step \'return RopLockRegionStreamMethod/[out None]\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp87, "error of RopLockRegionStreamMethod, state S132");
                        this.Manager.Comment("reaching state \'S156\'");
                        bool temp88;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp88);
                        this.Manager.Comment("reaching state \'S168\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp88, "isPropertyValueChanged of RopReleaseMethod, state S168");
                        this.Manager.Comment("reaching state \'S178\'");
                        goto label21;
                    }
                    if ((temp91 == 1)) {
                        this.Manager.Comment("reaching state \'S109\'");
                        Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp89;
                        this.Manager.Comment("executing step \'call RopLockRegionStreamMethod(WithExpiredLock,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopLockRegionStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.PreStateBeforeLock)(0)), out temp89);
                        this.Manager.Checkpoint("MS-OXCPRPT_R610");
                        this.Manager.Comment("reaching state \'S133\'");
                        this.Manager.Comment("checking step \'return RopLockRegionStreamMethod/[out None]\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp89, "error of RopLockRegionStreamMethod, state S133");
                        this.Manager.Comment("reaching state \'S157\'");
                        this.Manager.Comment("executing step \'call RopUnlockRegionStreamMethod(True)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopUnlockRegionStreamMethod(true);
                        this.Manager.Comment("reaching state \'S169\'");
                        this.Manager.Comment("checking step \'return RopUnlockRegionStreamMethod\'");
                        this.Manager.Comment("reaching state \'S179\'");
                        bool temp90;
                        this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp90);
                        this.Manager.Comment("reaching state \'S182\'");
                        this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp90, "isPropertyValueChanged of RopReleaseMethod, state S182");
                        this.Manager.Comment("reaching state \'S184\'");
                        goto label21;
                    }
                    throw new InvalidOperationException("never reached");
                label21:
;
                    goto label22;
                }
                throw new InvalidOperationException("never reached");
            label22:
;
                goto label23;
            }
            if ((temp93 == 1)) {
                this.Manager.Comment("reaching state \'S21\'");
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite5CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S64");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite5CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S86");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite5CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S86");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite5CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S64");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite5CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S87");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite5CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S87");
        }
        
        private void MSOXCPRPT_S04_LockUnlockStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        #endregion
    }
}