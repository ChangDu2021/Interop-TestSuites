//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCPRPT {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.6.100.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S05_RopCopyPropertiesSuccessSynchronously_TestSuite : PtfTestClassBase {
        
        public S05_RopCopyPropertiesSuccessSynchronously_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void RopCopyPropertiesMethodDelegate1(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase RopCopyPropertiesMethodInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "RopCopyPropertiesMethod", typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags), typeof(bool), typeof(bool), typeof(bool).MakeByRefType(), typeof(bool).MakeByRefType(), typeof(bool).MakeByRefType(), typeof(bool).MakeByRefType(), typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter IMS_OXCPRPTAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCPRPTAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp69 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp69 == 0)) {
                this.Manager.Comment("reaching state \'S30\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S60\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S75\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S90\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S105\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S120\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S135\'");
                bool temp1;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86701,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86701, out temp1);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1);
                this.Manager.Comment("reaching state \'S150\'");
                int temp68 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker7)));
                if ((temp68 == 0)) {
                    this.Manager.Comment("reaching state \'S165\'");
                    bool temp2;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp2);
                    this.Manager.Comment("reaching state \'S195\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp2, "enabled of CheckRequirementEnabled, state S195");
                    this.Manager.Comment("reaching state \'S225\'");
                    bool temp3;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp3);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                    this.Manager.Comment("reaching state \'S255\'");
                    int temp34 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker4)));
                    if ((temp34 == 0)) {
                        this.Manager.Comment("reaching state \'S285\'");
                        bool temp4;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp4);
                        this.Manager.Comment("reaching state \'S345\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp4, "enabled of CheckRequirementEnabled, state S345");
                        this.Manager.Comment("reaching state \'S405\'");
                        bool temp5;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp5);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp5);
                        this.Manager.Comment("reaching state \'S465\'");
                        int temp18 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker3)));
                        if ((temp18 == 0)) {
                            this.Manager.Comment("reaching state \'S525\'");
                            bool temp6;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp6);
                            this.Manager.Comment("reaching state \'S645\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp6, "enabled of CheckRequirementEnabled, state S645");
                            this.Manager.Comment("reaching state \'S765\'");
                            bool temp7;
                            bool temp8;
                            bool temp9;
                            bool temp10;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp11;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp7, out temp8, out temp9, out temp10, out temp11);
                            this.Manager.Comment("reaching state \'S885\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                                    "lse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp7, "isPropertiesDeleted of RopCopyPropertiesMethod, state S885");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp8, "isChangedInDB of RopCopyPropertiesMethod, state S885");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp9, "isOverwriteDestination of RopCopyPropertiesMethod, state S885");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp10, "isReturnedRopProgress of RopCopyPropertiesMethod, state S885");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp11, "error of RopCopyPropertiesMethod, state S885");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R503");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R503");
                            this.Manager.Comment("reaching state \'S1005\'");
                            goto label0;
                        }
                        if ((temp18 == 1)) {
                            this.Manager.Comment("reaching state \'S526\'");
                            bool temp12;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp12);
                            this.Manager.Comment("reaching state \'S646\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp12, "enabled of CheckRequirementEnabled, state S646");
                            this.Manager.Comment("reaching state \'S766\'");
                            bool temp13;
                            bool temp14;
                            bool temp15;
                            bool temp16;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp17;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp13, out temp14, out temp15, out temp16, out temp17);
                            this.Manager.Comment("reaching state \'S886\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                                    "lse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp13, "isPropertiesDeleted of RopCopyPropertiesMethod, state S886");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp14, "isChangedInDB of RopCopyPropertiesMethod, state S886");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp15, "isOverwriteDestination of RopCopyPropertiesMethod, state S886");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp16, "isReturnedRopProgress of RopCopyPropertiesMethod, state S886");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp17, "error of RopCopyPropertiesMethod, state S886");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R503");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R503");
                            this.Manager.Comment("reaching state \'S1006\'");
                            goto label0;
                        }
                        throw new InvalidOperationException("never reached");
                    label0:
;
                        goto label2;
                    }
                    if ((temp34 == 1)) {
                        this.Manager.Comment("reaching state \'S286\'");
                        bool temp19;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp19);
                        this.Manager.Comment("reaching state \'S346\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp19, "enabled of CheckRequirementEnabled, state S346");
                        this.Manager.Comment("reaching state \'S406\'");
                        bool temp20;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp20);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp20);
                        this.Manager.Comment("reaching state \'S466\'");
                        int temp33 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker6)));
                        if ((temp33 == 0)) {
                            this.Manager.Comment("reaching state \'S527\'");
                            bool temp21;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp21);
                            this.Manager.Comment("reaching state \'S647\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp21, "enabled of CheckRequirementEnabled, state S647");
                            this.Manager.Comment("reaching state \'S767\'");
                            bool temp22;
                            bool temp23;
                            bool temp24;
                            bool temp25;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp26;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp22, out temp23, out temp24, out temp25, out temp26);
                            this.Manager.Comment("reaching state \'S887\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                                    "lse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp22, "isPropertiesDeleted of RopCopyPropertiesMethod, state S887");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp23, "isChangedInDB of RopCopyPropertiesMethod, state S887");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp24, "isOverwriteDestination of RopCopyPropertiesMethod, state S887");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp25, "isReturnedRopProgress of RopCopyPropertiesMethod, state S887");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp26, "error of RopCopyPropertiesMethod, state S887");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R503");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R503");
                            this.Manager.Comment("reaching state \'S1007\'");
                            goto label1;
                        }
                        if ((temp33 == 1)) {
                            this.Manager.Comment("reaching state \'S528\'");
                            bool temp27;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp27);
                            this.Manager.Comment("reaching state \'S648\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp27, "enabled of CheckRequirementEnabled, state S648");
                            this.Manager.Comment("reaching state \'S768\'");
                            bool temp28;
                            bool temp29;
                            bool temp30;
                            bool temp31;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp32;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp28, out temp29, out temp30, out temp31, out temp32);
                            this.Manager.Comment("reaching state \'S888\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                                    "lse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp28, "isPropertiesDeleted of RopCopyPropertiesMethod, state S888");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp29, "isChangedInDB of RopCopyPropertiesMethod, state S888");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp30, "isOverwriteDestination of RopCopyPropertiesMethod, state S888");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp31, "isReturnedRopProgress of RopCopyPropertiesMethod, state S888");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp32, "error of RopCopyPropertiesMethod, state S888");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R503");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R503");
                            this.Manager.Comment("reaching state \'S1008\'");
                            goto label1;
                        }
                        throw new InvalidOperationException("never reached");
                    label1:
;
                        goto label2;
                    }
                    throw new InvalidOperationException("never reached");
                label2:
;
                    goto label6;
                }
                if ((temp68 == 1)) {
                    this.Manager.Comment("reaching state \'S166\'");
                    bool temp35;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp35);
                    this.Manager.Comment("reaching state \'S196\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp35, "enabled of CheckRequirementEnabled, state S196");
                    this.Manager.Comment("reaching state \'S226\'");
                    bool temp36;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp36);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp36);
                    this.Manager.Comment("reaching state \'S256\'");
                    int temp67 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker11)));
                    if ((temp67 == 0)) {
                        this.Manager.Comment("reaching state \'S287\'");
                        bool temp37;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp37);
                        this.Manager.Comment("reaching state \'S347\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp37, "enabled of CheckRequirementEnabled, state S347");
                        this.Manager.Comment("reaching state \'S407\'");
                        bool temp38;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp38);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp38);
                        this.Manager.Comment("reaching state \'S467\'");
                        int temp51 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker10)));
                        if ((temp51 == 0)) {
                            this.Manager.Comment("reaching state \'S529\'");
                            bool temp39;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp39);
                            this.Manager.Comment("reaching state \'S649\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp39, "enabled of CheckRequirementEnabled, state S649");
                            this.Manager.Comment("reaching state \'S769\'");
                            bool temp40;
                            bool temp41;
                            bool temp42;
                            bool temp43;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp44;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp40, out temp41, out temp42, out temp43, out temp44);
                            this.Manager.Comment("reaching state \'S889\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                                    "lse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp40, "isPropertiesDeleted of RopCopyPropertiesMethod, state S889");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp41, "isChangedInDB of RopCopyPropertiesMethod, state S889");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp42, "isOverwriteDestination of RopCopyPropertiesMethod, state S889");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp43, "isReturnedRopProgress of RopCopyPropertiesMethod, state S889");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp44, "error of RopCopyPropertiesMethod, state S889");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R503");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R503");
                            this.Manager.Comment("reaching state \'S1009\'");
                            goto label3;
                        }
                        if ((temp51 == 1)) {
                            this.Manager.Comment("reaching state \'S530\'");
                            bool temp45;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp45);
                            this.Manager.Comment("reaching state \'S650\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp45, "enabled of CheckRequirementEnabled, state S650");
                            this.Manager.Comment("reaching state \'S770\'");
                            bool temp46;
                            bool temp47;
                            bool temp48;
                            bool temp49;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp50;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp46, out temp47, out temp48, out temp49, out temp50);
                            this.Manager.Comment("reaching state \'S890\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                                    "lse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp46, "isPropertiesDeleted of RopCopyPropertiesMethod, state S890");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp47, "isChangedInDB of RopCopyPropertiesMethod, state S890");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp48, "isOverwriteDestination of RopCopyPropertiesMethod, state S890");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp49, "isReturnedRopProgress of RopCopyPropertiesMethod, state S890");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp50, "error of RopCopyPropertiesMethod, state S890");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R503");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R503");
                            this.Manager.Comment("reaching state \'S1010\'");
                            goto label3;
                        }
                        throw new InvalidOperationException("never reached");
                    label3:
;
                        goto label5;
                    }
                    if ((temp67 == 1)) {
                        this.Manager.Comment("reaching state \'S288\'");
                        bool temp52;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp52);
                        this.Manager.Comment("reaching state \'S348\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp52, "enabled of CheckRequirementEnabled, state S348");
                        this.Manager.Comment("reaching state \'S408\'");
                        bool temp53;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp53);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp53);
                        this.Manager.Comment("reaching state \'S468\'");
                        int temp66 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker13)));
                        if ((temp66 == 0)) {
                            this.Manager.Comment("reaching state \'S531\'");
                            bool temp54;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp54);
                            this.Manager.Comment("reaching state \'S651\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp54, "enabled of CheckRequirementEnabled, state S651");
                            this.Manager.Comment("reaching state \'S771\'");
                            bool temp55;
                            bool temp56;
                            bool temp57;
                            bool temp58;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp59;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp55, out temp56, out temp57, out temp58, out temp59);
                            this.Manager.Comment("reaching state \'S891\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                                    "lse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp55, "isPropertiesDeleted of RopCopyPropertiesMethod, state S891");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp56, "isChangedInDB of RopCopyPropertiesMethod, state S891");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp57, "isOverwriteDestination of RopCopyPropertiesMethod, state S891");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp58, "isReturnedRopProgress of RopCopyPropertiesMethod, state S891");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp59, "error of RopCopyPropertiesMethod, state S891");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R503");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R503");
                            this.Manager.Comment("reaching state \'S1011\'");
                            goto label4;
                        }
                        if ((temp66 == 1)) {
                            this.Manager.Comment("reaching state \'S532\'");
                            bool temp60;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp60);
                            this.Manager.Comment("reaching state \'S652\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp60, "enabled of CheckRequirementEnabled, state S652");
                            this.Manager.Comment("reaching state \'S772\'");
                            bool temp61;
                            bool temp62;
                            bool temp63;
                            bool temp64;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp65;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp61, out temp62, out temp63, out temp64, out temp65);
                            this.Manager.Comment("reaching state \'S892\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                                    "lse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp61, "isPropertiesDeleted of RopCopyPropertiesMethod, state S892");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp62, "isChangedInDB of RopCopyPropertiesMethod, state S892");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp63, "isOverwriteDestination of RopCopyPropertiesMethod, state S892");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp64, "isReturnedRopProgress of RopCopyPropertiesMethod, state S892");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp65, "error of RopCopyPropertiesMethod, state S892");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R503");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R503");
                            this.Manager.Comment("reaching state \'S1012\'");
                            goto label4;
                        }
                        throw new InvalidOperationException("never reached");
                    label4:
;
                        goto label5;
                    }
                    throw new InvalidOperationException("never reached");
                label5:
;
                    goto label6;
                }
                throw new InvalidOperationException("never reached");
            label6:
;
                goto label7;
            }
            if ((temp69 == 1)) {
                this.Manager.Comment("reaching state \'S31\'");
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S150");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S255");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S465");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S465");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S255");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S466");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S466");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S150");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S256");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S467");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S467");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S256");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S468");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S468");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1");
            this.Manager.Comment("reaching state \'S10\'");
            bool temp70;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp70);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp70);
            this.Manager.Comment("reaching state \'S11\'");
            int temp155 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp155 == 0)) {
                this.Manager.Comment("reaching state \'S40\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S65\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S80\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S95\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S110\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S125\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S140\'");
                bool temp71;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86701,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86701, out temp71);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp71);
                this.Manager.Comment("reaching state \'S155\'");
                int temp154 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker7)));
                if ((temp154 == 0)) {
                    this.Manager.Comment("reaching state \'S175\'");
                    bool temp72;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp72);
                    this.Manager.Comment("reaching state \'S205\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp72, "enabled of CheckRequirementEnabled, state S205");
                    this.Manager.Comment("reaching state \'S235\'");
                    bool temp73;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp73);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp73);
                    this.Manager.Comment("reaching state \'S265\'");
                    int temp112 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker4)));
                    if ((temp112 == 0)) {
                        this.Manager.Comment("reaching state \'S305\'");
                        bool temp74;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp74);
                        this.Manager.Comment("reaching state \'S365\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp74, "enabled of CheckRequirementEnabled, state S365");
                        this.Manager.Comment("reaching state \'S425\'");
                        bool temp75;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp75);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp75);
                        this.Manager.Comment("reaching state \'S485\'");
                        int temp92 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker3)));
                        if ((temp92 == 0)) {
                            this.Manager.Comment("reaching state \'S565\'");
                            bool temp76;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp76);
                            this.Manager.Comment("reaching state \'S685\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp76, "enabled of CheckRequirementEnabled, state S685");
                            this.Manager.Comment("reaching state \'S805\'");
                            bool temp77;
                            bool temp78;
                            bool temp79;
                            bool temp80;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp81;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp77, out temp78, out temp79, out temp80, out temp81);
                            this.Manager.Comment("reaching state \'S925\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                                    "alse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp77, "isPropertiesDeleted of RopCopyPropertiesMethod, state S925");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp78, "isChangedInDB of RopCopyPropertiesMethod, state S925");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp79, "isOverwriteDestination of RopCopyPropertiesMethod, state S925");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp80, "isReturnedRopProgress of RopCopyPropertiesMethod, state S925");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp81, "error of RopCopyPropertiesMethod, state S925");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1045\'");
                            bool temp82;
                            this.Manager.Comment("executing step \'call RopSaveChangesAttachmentMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesAttachmentMethod(out temp82);
                            this.Manager.Comment("reaching state \'S1125\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesAttachmentMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp82, "isChangedInDB of RopSaveChangesAttachmentMethod, state S1125");
                            this.Manager.Comment("reaching state \'S1141\'");
                            bool temp83;
                            this.Manager.Comment("executing step \'call RopSaveChangesMessageMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesMessageMethod(out temp83);
                            this.Manager.Checkpoint("MS-OXCPRPT_R848");
                            this.Manager.Comment("reaching state \'S1157\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesMessageMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp83, "isChangedInDB of RopSaveChangesMessageMethod, state S1157");
                            this.Manager.Comment("reaching state \'S1165\'");
                            goto label8;
                        }
                        if ((temp92 == 1)) {
                            this.Manager.Comment("reaching state \'S566\'");
                            bool temp84;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp84);
                            this.Manager.Comment("reaching state \'S686\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp84, "enabled of CheckRequirementEnabled, state S686");
                            this.Manager.Comment("reaching state \'S806\'");
                            bool temp85;
                            bool temp86;
                            bool temp87;
                            bool temp88;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp89;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp85, out temp86, out temp87, out temp88, out temp89);
                            this.Manager.Comment("reaching state \'S926\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                                    "alse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp85, "isPropertiesDeleted of RopCopyPropertiesMethod, state S926");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp86, "isChangedInDB of RopCopyPropertiesMethod, state S926");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp87, "isOverwriteDestination of RopCopyPropertiesMethod, state S926");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp88, "isReturnedRopProgress of RopCopyPropertiesMethod, state S926");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp89, "error of RopCopyPropertiesMethod, state S926");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1046\'");
                            bool temp90;
                            this.Manager.Comment("executing step \'call RopSaveChangesAttachmentMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesAttachmentMethod(out temp90);
                            this.Manager.Comment("reaching state \'S1126\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesAttachmentMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp90, "isChangedInDB of RopSaveChangesAttachmentMethod, state S1126");
                            this.Manager.Comment("reaching state \'S1142\'");
                            bool temp91;
                            this.Manager.Comment("executing step \'call RopSaveChangesMessageMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesMessageMethod(out temp91);
                            this.Manager.Checkpoint("MS-OXCPRPT_R848");
                            this.Manager.Comment("reaching state \'S1158\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesMessageMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp91, "isChangedInDB of RopSaveChangesMessageMethod, state S1158");
                            this.Manager.Comment("reaching state \'S1166\'");
                            goto label8;
                        }
                        throw new InvalidOperationException("never reached");
                    label8:
;
                        goto label10;
                    }
                    if ((temp112 == 1)) {
                        this.Manager.Comment("reaching state \'S306\'");
                        bool temp93;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp93);
                        this.Manager.Comment("reaching state \'S366\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp93, "enabled of CheckRequirementEnabled, state S366");
                        this.Manager.Comment("reaching state \'S426\'");
                        bool temp94;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp94);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp94);
                        this.Manager.Comment("reaching state \'S486\'");
                        int temp111 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker6)));
                        if ((temp111 == 0)) {
                            this.Manager.Comment("reaching state \'S567\'");
                            bool temp95;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp95);
                            this.Manager.Comment("reaching state \'S687\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp95, "enabled of CheckRequirementEnabled, state S687");
                            this.Manager.Comment("reaching state \'S807\'");
                            bool temp96;
                            bool temp97;
                            bool temp98;
                            bool temp99;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp100;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp96, out temp97, out temp98, out temp99, out temp100);
                            this.Manager.Comment("reaching state \'S927\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                                    "alse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp96, "isPropertiesDeleted of RopCopyPropertiesMethod, state S927");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp97, "isChangedInDB of RopCopyPropertiesMethod, state S927");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp98, "isOverwriteDestination of RopCopyPropertiesMethod, state S927");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp99, "isReturnedRopProgress of RopCopyPropertiesMethod, state S927");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp100, "error of RopCopyPropertiesMethod, state S927");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1047\'");
                            bool temp101;
                            this.Manager.Comment("executing step \'call RopSaveChangesAttachmentMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesAttachmentMethod(out temp101);
                            this.Manager.Comment("reaching state \'S1127\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesAttachmentMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp101, "isChangedInDB of RopSaveChangesAttachmentMethod, state S1127");
                            this.Manager.Comment("reaching state \'S1143\'");
                            bool temp102;
                            this.Manager.Comment("executing step \'call RopSaveChangesMessageMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesMessageMethod(out temp102);
                            this.Manager.Checkpoint("MS-OXCPRPT_R848");
                            this.Manager.Comment("reaching state \'S1159\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesMessageMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp102, "isChangedInDB of RopSaveChangesMessageMethod, state S1159");
                            this.Manager.Comment("reaching state \'S1167\'");
                            goto label9;
                        }
                        if ((temp111 == 1)) {
                            this.Manager.Comment("reaching state \'S568\'");
                            bool temp103;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp103);
                            this.Manager.Comment("reaching state \'S688\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp103, "enabled of CheckRequirementEnabled, state S688");
                            this.Manager.Comment("reaching state \'S808\'");
                            bool temp104;
                            bool temp105;
                            bool temp106;
                            bool temp107;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp108;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp104, out temp105, out temp106, out temp107, out temp108);
                            this.Manager.Comment("reaching state \'S928\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                                    "alse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp104, "isPropertiesDeleted of RopCopyPropertiesMethod, state S928");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp105, "isChangedInDB of RopCopyPropertiesMethod, state S928");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp106, "isOverwriteDestination of RopCopyPropertiesMethod, state S928");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp107, "isReturnedRopProgress of RopCopyPropertiesMethod, state S928");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp108, "error of RopCopyPropertiesMethod, state S928");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1048\'");
                            bool temp109;
                            this.Manager.Comment("executing step \'call RopSaveChangesAttachmentMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesAttachmentMethod(out temp109);
                            this.Manager.Comment("reaching state \'S1128\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesAttachmentMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp109, "isChangedInDB of RopSaveChangesAttachmentMethod, state S1128");
                            this.Manager.Comment("reaching state \'S1144\'");
                            bool temp110;
                            this.Manager.Comment("executing step \'call RopSaveChangesMessageMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesMessageMethod(out temp110);
                            this.Manager.Checkpoint("MS-OXCPRPT_R848");
                            this.Manager.Comment("reaching state \'S1160\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesMessageMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp110, "isChangedInDB of RopSaveChangesMessageMethod, state S1160");
                            this.Manager.Comment("reaching state \'S1168\'");
                            goto label9;
                        }
                        throw new InvalidOperationException("never reached");
                    label9:
;
                        goto label10;
                    }
                    throw new InvalidOperationException("never reached");
                label10:
;
                    goto label14;
                }
                if ((temp154 == 1)) {
                    this.Manager.Comment("reaching state \'S176\'");
                    bool temp113;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp113);
                    this.Manager.Comment("reaching state \'S206\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp113, "enabled of CheckRequirementEnabled, state S206");
                    this.Manager.Comment("reaching state \'S236\'");
                    bool temp114;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp114);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp114);
                    this.Manager.Comment("reaching state \'S266\'");
                    int temp153 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker11)));
                    if ((temp153 == 0)) {
                        this.Manager.Comment("reaching state \'S307\'");
                        bool temp115;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp115);
                        this.Manager.Comment("reaching state \'S367\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp115, "enabled of CheckRequirementEnabled, state S367");
                        this.Manager.Comment("reaching state \'S427\'");
                        bool temp116;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp116);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp116);
                        this.Manager.Comment("reaching state \'S487\'");
                        int temp133 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker10)));
                        if ((temp133 == 0)) {
                            this.Manager.Comment("reaching state \'S569\'");
                            bool temp117;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp117);
                            this.Manager.Comment("reaching state \'S689\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp117, "enabled of CheckRequirementEnabled, state S689");
                            this.Manager.Comment("reaching state \'S809\'");
                            bool temp118;
                            bool temp119;
                            bool temp120;
                            bool temp121;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp122;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp118, out temp119, out temp120, out temp121, out temp122);
                            this.Manager.Comment("reaching state \'S929\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                                    "alse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp118, "isPropertiesDeleted of RopCopyPropertiesMethod, state S929");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp119, "isChangedInDB of RopCopyPropertiesMethod, state S929");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp120, "isOverwriteDestination of RopCopyPropertiesMethod, state S929");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp121, "isReturnedRopProgress of RopCopyPropertiesMethod, state S929");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp122, "error of RopCopyPropertiesMethod, state S929");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1049\'");
                            bool temp123;
                            this.Manager.Comment("executing step \'call RopSaveChangesAttachmentMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesAttachmentMethod(out temp123);
                            this.Manager.Comment("reaching state \'S1129\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesAttachmentMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp123, "isChangedInDB of RopSaveChangesAttachmentMethod, state S1129");
                            this.Manager.Comment("reaching state \'S1145\'");
                            bool temp124;
                            this.Manager.Comment("executing step \'call RopSaveChangesMessageMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesMessageMethod(out temp124);
                            this.Manager.Checkpoint("MS-OXCPRPT_R848");
                            this.Manager.Comment("reaching state \'S1161\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesMessageMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp124, "isChangedInDB of RopSaveChangesMessageMethod, state S1161");
                            this.Manager.Comment("reaching state \'S1169\'");
                            goto label11;
                        }
                        if ((temp133 == 1)) {
                            this.Manager.Comment("reaching state \'S570\'");
                            bool temp125;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp125);
                            this.Manager.Comment("reaching state \'S690\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp125, "enabled of CheckRequirementEnabled, state S690");
                            this.Manager.Comment("reaching state \'S810\'");
                            bool temp126;
                            bool temp127;
                            bool temp128;
                            bool temp129;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp130;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp126, out temp127, out temp128, out temp129, out temp130);
                            this.Manager.Comment("reaching state \'S930\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                                    "alse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp126, "isPropertiesDeleted of RopCopyPropertiesMethod, state S930");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp127, "isChangedInDB of RopCopyPropertiesMethod, state S930");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp128, "isOverwriteDestination of RopCopyPropertiesMethod, state S930");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp129, "isReturnedRopProgress of RopCopyPropertiesMethod, state S930");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp130, "error of RopCopyPropertiesMethod, state S930");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1050\'");
                            bool temp131;
                            this.Manager.Comment("executing step \'call RopSaveChangesAttachmentMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesAttachmentMethod(out temp131);
                            this.Manager.Comment("reaching state \'S1130\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesAttachmentMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp131, "isChangedInDB of RopSaveChangesAttachmentMethod, state S1130");
                            this.Manager.Comment("reaching state \'S1146\'");
                            bool temp132;
                            this.Manager.Comment("executing step \'call RopSaveChangesMessageMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesMessageMethod(out temp132);
                            this.Manager.Checkpoint("MS-OXCPRPT_R848");
                            this.Manager.Comment("reaching state \'S1162\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesMessageMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp132, "isChangedInDB of RopSaveChangesMessageMethod, state S1162");
                            this.Manager.Comment("reaching state \'S1170\'");
                            goto label11;
                        }
                        throw new InvalidOperationException("never reached");
                    label11:
;
                        goto label13;
                    }
                    if ((temp153 == 1)) {
                        this.Manager.Comment("reaching state \'S308\'");
                        bool temp134;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp134);
                        this.Manager.Comment("reaching state \'S368\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp134, "enabled of CheckRequirementEnabled, state S368");
                        this.Manager.Comment("reaching state \'S428\'");
                        bool temp135;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp135);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp135);
                        this.Manager.Comment("reaching state \'S488\'");
                        int temp152 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker13)));
                        if ((temp152 == 0)) {
                            this.Manager.Comment("reaching state \'S571\'");
                            bool temp136;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp136);
                            this.Manager.Comment("reaching state \'S691\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp136, "enabled of CheckRequirementEnabled, state S691");
                            this.Manager.Comment("reaching state \'S811\'");
                            bool temp137;
                            bool temp138;
                            bool temp139;
                            bool temp140;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp141;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp137, out temp138, out temp139, out temp140, out temp141);
                            this.Manager.Comment("reaching state \'S931\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                                    "alse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp137, "isPropertiesDeleted of RopCopyPropertiesMethod, state S931");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp138, "isChangedInDB of RopCopyPropertiesMethod, state S931");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp139, "isOverwriteDestination of RopCopyPropertiesMethod, state S931");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp140, "isReturnedRopProgress of RopCopyPropertiesMethod, state S931");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp141, "error of RopCopyPropertiesMethod, state S931");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1051\'");
                            bool temp142;
                            this.Manager.Comment("executing step \'call RopSaveChangesAttachmentMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesAttachmentMethod(out temp142);
                            this.Manager.Comment("reaching state \'S1131\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesAttachmentMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp142, "isChangedInDB of RopSaveChangesAttachmentMethod, state S1131");
                            this.Manager.Comment("reaching state \'S1147\'");
                            bool temp143;
                            this.Manager.Comment("executing step \'call RopSaveChangesMessageMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesMessageMethod(out temp143);
                            this.Manager.Checkpoint("MS-OXCPRPT_R848");
                            this.Manager.Comment("reaching state \'S1163\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesMessageMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp143, "isChangedInDB of RopSaveChangesMessageMethod, state S1163");
                            this.Manager.Comment("reaching state \'S1171\'");
                            goto label12;
                        }
                        if ((temp152 == 1)) {
                            this.Manager.Comment("reaching state \'S572\'");
                            bool temp144;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp144);
                            this.Manager.Comment("reaching state \'S692\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp144, "enabled of CheckRequirementEnabled, state S692");
                            this.Manager.Comment("reaching state \'S812\'");
                            bool temp145;
                            bool temp146;
                            bool temp147;
                            bool temp148;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp149;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp145, out temp146, out temp147, out temp148, out temp149);
                            this.Manager.Comment("reaching state \'S932\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                                    "alse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp145, "isPropertiesDeleted of RopCopyPropertiesMethod, state S932");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp146, "isChangedInDB of RopCopyPropertiesMethod, state S932");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp147, "isOverwriteDestination of RopCopyPropertiesMethod, state S932");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp148, "isReturnedRopProgress of RopCopyPropertiesMethod, state S932");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp149, "error of RopCopyPropertiesMethod, state S932");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1052\'");
                            bool temp150;
                            this.Manager.Comment("executing step \'call RopSaveChangesAttachmentMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesAttachmentMethod(out temp150);
                            this.Manager.Comment("reaching state \'S1132\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesAttachmentMethod/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp150, "isChangedInDB of RopSaveChangesAttachmentMethod, state S1132");
                            this.Manager.Comment("reaching state \'S1148\'");
                            bool temp151;
                            this.Manager.Comment("executing step \'call RopSaveChangesMessageMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesMessageMethod(out temp151);
                            this.Manager.Checkpoint("MS-OXCPRPT_R848");
                            this.Manager.Comment("reaching state \'S1164\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesMessageMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp151, "isChangedInDB of RopSaveChangesMessageMethod, state S1164");
                            this.Manager.Comment("reaching state \'S1172\'");
                            goto label12;
                        }
                        throw new InvalidOperationException("never reached");
                    label12:
;
                        goto label13;
                    }
                    throw new InvalidOperationException("never reached");
                label13:
;
                    goto label14;
                }
                throw new InvalidOperationException("never reached");
            label14:
;
                goto label15;
            }
            if ((temp155 == 1)) {
                this.Manager.Comment("reaching state \'S41\'");
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S155");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S265");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S485");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S485");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S265");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S486");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S486");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S155");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S266");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S487");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S487");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S266");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S488");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S488");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2");
            this.Manager.Comment("reaching state \'S12\'");
            bool temp156;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp156);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp156);
            this.Manager.Comment("reaching state \'S13\'");
            int temp225 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp225 == 0)) {
                this.Manager.Comment("reaching state \'S42\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S66\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S81\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S96\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S111\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S126\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S141\'");
                bool temp157;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86701,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86701, out temp157);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp157);
                this.Manager.Comment("reaching state \'S156\'");
                int temp224 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker7)));
                if ((temp224 == 0)) {
                    this.Manager.Comment("reaching state \'S177\'");
                    bool temp158;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp158);
                    this.Manager.Comment("reaching state \'S207\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp158, "enabled of CheckRequirementEnabled, state S207");
                    this.Manager.Comment("reaching state \'S237\'");
                    bool temp159;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp159);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp159);
                    this.Manager.Comment("reaching state \'S267\'");
                    int temp190 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker4)));
                    if ((temp190 == 0)) {
                        this.Manager.Comment("reaching state \'S309\'");
                        bool temp160;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp160);
                        this.Manager.Comment("reaching state \'S369\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp160, "enabled of CheckRequirementEnabled, state S369");
                        this.Manager.Comment("reaching state \'S429\'");
                        bool temp161;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp161);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp161);
                        this.Manager.Comment("reaching state \'S489\'");
                        int temp174 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker3)));
                        if ((temp174 == 0)) {
                            this.Manager.Comment("reaching state \'S573\'");
                            bool temp162;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp162);
                            this.Manager.Comment("reaching state \'S693\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp162, "enabled of CheckRequirementEnabled, state S693");
                            this.Manager.Comment("reaching state \'S813\'");
                            bool temp163;
                            bool temp164;
                            bool temp165;
                            bool temp166;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp167;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp163, out temp164, out temp165, out temp166, out temp167);
                            this.Manager.Comment("reaching state \'S933\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp163, "isPropertiesDeleted of RopCopyPropertiesMethod, state S933");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp164, "isChangedInDB of RopCopyPropertiesMethod, state S933");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp165, "isOverwriteDestination of RopCopyPropertiesMethod, state S933");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp166, "isReturnedRopProgress of RopCopyPropertiesMethod, state S933");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp167, "error of RopCopyPropertiesMethod, state S933");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1053\'");
                            goto label16;
                        }
                        if ((temp174 == 1)) {
                            this.Manager.Comment("reaching state \'S574\'");
                            bool temp168;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp168);
                            this.Manager.Comment("reaching state \'S694\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp168, "enabled of CheckRequirementEnabled, state S694");
                            this.Manager.Comment("reaching state \'S814\'");
                            bool temp169;
                            bool temp170;
                            bool temp171;
                            bool temp172;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp173;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp169, out temp170, out temp171, out temp172, out temp173);
                            this.Manager.Comment("reaching state \'S934\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp169, "isPropertiesDeleted of RopCopyPropertiesMethod, state S934");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp170, "isChangedInDB of RopCopyPropertiesMethod, state S934");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp171, "isOverwriteDestination of RopCopyPropertiesMethod, state S934");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp172, "isReturnedRopProgress of RopCopyPropertiesMethod, state S934");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp173, "error of RopCopyPropertiesMethod, state S934");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1054\'");
                            goto label16;
                        }
                        throw new InvalidOperationException("never reached");
                    label16:
;
                        goto label18;
                    }
                    if ((temp190 == 1)) {
                        this.Manager.Comment("reaching state \'S310\'");
                        bool temp175;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp175);
                        this.Manager.Comment("reaching state \'S370\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp175, "enabled of CheckRequirementEnabled, state S370");
                        this.Manager.Comment("reaching state \'S430\'");
                        bool temp176;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp176);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp176);
                        this.Manager.Comment("reaching state \'S490\'");
                        int temp189 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker6)));
                        if ((temp189 == 0)) {
                            this.Manager.Comment("reaching state \'S575\'");
                            bool temp177;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp177);
                            this.Manager.Comment("reaching state \'S695\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp177, "enabled of CheckRequirementEnabled, state S695");
                            this.Manager.Comment("reaching state \'S815\'");
                            bool temp178;
                            bool temp179;
                            bool temp180;
                            bool temp181;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp182;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp178, out temp179, out temp180, out temp181, out temp182);
                            this.Manager.Comment("reaching state \'S935\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp178, "isPropertiesDeleted of RopCopyPropertiesMethod, state S935");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp179, "isChangedInDB of RopCopyPropertiesMethod, state S935");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp180, "isOverwriteDestination of RopCopyPropertiesMethod, state S935");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp181, "isReturnedRopProgress of RopCopyPropertiesMethod, state S935");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp182, "error of RopCopyPropertiesMethod, state S935");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1055\'");
                            goto label17;
                        }
                        if ((temp189 == 1)) {
                            this.Manager.Comment("reaching state \'S576\'");
                            bool temp183;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp183);
                            this.Manager.Comment("reaching state \'S696\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp183, "enabled of CheckRequirementEnabled, state S696");
                            this.Manager.Comment("reaching state \'S816\'");
                            bool temp184;
                            bool temp185;
                            bool temp186;
                            bool temp187;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp188;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp184, out temp185, out temp186, out temp187, out temp188);
                            this.Manager.Comment("reaching state \'S936\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp184, "isPropertiesDeleted of RopCopyPropertiesMethod, state S936");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp185, "isChangedInDB of RopCopyPropertiesMethod, state S936");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp186, "isOverwriteDestination of RopCopyPropertiesMethod, state S936");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp187, "isReturnedRopProgress of RopCopyPropertiesMethod, state S936");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp188, "error of RopCopyPropertiesMethod, state S936");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1056\'");
                            goto label17;
                        }
                        throw new InvalidOperationException("never reached");
                    label17:
;
                        goto label18;
                    }
                    throw new InvalidOperationException("never reached");
                label18:
;
                    goto label22;
                }
                if ((temp224 == 1)) {
                    this.Manager.Comment("reaching state \'S178\'");
                    bool temp191;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp191);
                    this.Manager.Comment("reaching state \'S208\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp191, "enabled of CheckRequirementEnabled, state S208");
                    this.Manager.Comment("reaching state \'S238\'");
                    bool temp192;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp192);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp192);
                    this.Manager.Comment("reaching state \'S268\'");
                    int temp223 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker11)));
                    if ((temp223 == 0)) {
                        this.Manager.Comment("reaching state \'S311\'");
                        bool temp193;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp193);
                        this.Manager.Comment("reaching state \'S371\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp193, "enabled of CheckRequirementEnabled, state S371");
                        this.Manager.Comment("reaching state \'S431\'");
                        bool temp194;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp194);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp194);
                        this.Manager.Comment("reaching state \'S491\'");
                        int temp207 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker10)));
                        if ((temp207 == 0)) {
                            this.Manager.Comment("reaching state \'S577\'");
                            bool temp195;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp195);
                            this.Manager.Comment("reaching state \'S697\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp195, "enabled of CheckRequirementEnabled, state S697");
                            this.Manager.Comment("reaching state \'S817\'");
                            bool temp196;
                            bool temp197;
                            bool temp198;
                            bool temp199;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp200;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp196, out temp197, out temp198, out temp199, out temp200);
                            this.Manager.Comment("reaching state \'S937\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp196, "isPropertiesDeleted of RopCopyPropertiesMethod, state S937");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp197, "isChangedInDB of RopCopyPropertiesMethod, state S937");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp198, "isOverwriteDestination of RopCopyPropertiesMethod, state S937");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp199, "isReturnedRopProgress of RopCopyPropertiesMethod, state S937");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp200, "error of RopCopyPropertiesMethod, state S937");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1057\'");
                            goto label19;
                        }
                        if ((temp207 == 1)) {
                            this.Manager.Comment("reaching state \'S578\'");
                            bool temp201;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp201);
                            this.Manager.Comment("reaching state \'S698\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp201, "enabled of CheckRequirementEnabled, state S698");
                            this.Manager.Comment("reaching state \'S818\'");
                            bool temp202;
                            bool temp203;
                            bool temp204;
                            bool temp205;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp206;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp202, out temp203, out temp204, out temp205, out temp206);
                            this.Manager.Comment("reaching state \'S938\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp202, "isPropertiesDeleted of RopCopyPropertiesMethod, state S938");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp203, "isChangedInDB of RopCopyPropertiesMethod, state S938");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp204, "isOverwriteDestination of RopCopyPropertiesMethod, state S938");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp205, "isReturnedRopProgress of RopCopyPropertiesMethod, state S938");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp206, "error of RopCopyPropertiesMethod, state S938");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1058\'");
                            goto label19;
                        }
                        throw new InvalidOperationException("never reached");
                    label19:
;
                        goto label21;
                    }
                    if ((temp223 == 1)) {
                        this.Manager.Comment("reaching state \'S312\'");
                        bool temp208;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp208);
                        this.Manager.Comment("reaching state \'S372\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp208, "enabled of CheckRequirementEnabled, state S372");
                        this.Manager.Comment("reaching state \'S432\'");
                        bool temp209;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp209);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp209);
                        this.Manager.Comment("reaching state \'S492\'");
                        int temp222 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker13)));
                        if ((temp222 == 0)) {
                            this.Manager.Comment("reaching state \'S579\'");
                            bool temp210;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp210);
                            this.Manager.Comment("reaching state \'S699\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp210, "enabled of CheckRequirementEnabled, state S699");
                            this.Manager.Comment("reaching state \'S819\'");
                            bool temp211;
                            bool temp212;
                            bool temp213;
                            bool temp214;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp215;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp211, out temp212, out temp213, out temp214, out temp215);
                            this.Manager.Comment("reaching state \'S939\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp211, "isPropertiesDeleted of RopCopyPropertiesMethod, state S939");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp212, "isChangedInDB of RopCopyPropertiesMethod, state S939");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp213, "isOverwriteDestination of RopCopyPropertiesMethod, state S939");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp214, "isReturnedRopProgress of RopCopyPropertiesMethod, state S939");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp215, "error of RopCopyPropertiesMethod, state S939");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1059\'");
                            goto label20;
                        }
                        if ((temp222 == 1)) {
                            this.Manager.Comment("reaching state \'S580\'");
                            bool temp216;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp216);
                            this.Manager.Comment("reaching state \'S700\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp216, "enabled of CheckRequirementEnabled, state S700");
                            this.Manager.Comment("reaching state \'S820\'");
                            bool temp217;
                            bool temp218;
                            bool temp219;
                            bool temp220;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp221;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp217, out temp218, out temp219, out temp220, out temp221);
                            this.Manager.Comment("reaching state \'S940\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp217, "isPropertiesDeleted of RopCopyPropertiesMethod, state S940");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp218, "isChangedInDB of RopCopyPropertiesMethod, state S940");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp219, "isOverwriteDestination of RopCopyPropertiesMethod, state S940");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp220, "isReturnedRopProgress of RopCopyPropertiesMethod, state S940");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp221, "error of RopCopyPropertiesMethod, state S940");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1060\'");
                            goto label20;
                        }
                        throw new InvalidOperationException("never reached");
                    label20:
;
                        goto label21;
                    }
                    throw new InvalidOperationException("never reached");
                label21:
;
                    goto label22;
                }
                throw new InvalidOperationException("never reached");
            label22:
;
                goto label23;
            }
            if ((temp225 == 1)) {
                this.Manager.Comment("reaching state \'S43\'");
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S13");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S156");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S267");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S489");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S489");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S267");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S490");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S490");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S156");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S268");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S491");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S491");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S268");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S492");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S492");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S13");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3");
            this.Manager.Comment("reaching state \'S14\'");
            bool temp226;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp226);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp226);
            this.Manager.Comment("reaching state \'S15\'");
            int temp303 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp303 == 0)) {
                this.Manager.Comment("reaching state \'S44\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S67\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S82\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S97\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S112\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S127\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S142\'");
                bool temp227;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86701,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86701, out temp227);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp227);
                this.Manager.Comment("reaching state \'S157\'");
                int temp302 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker7)));
                if ((temp302 == 0)) {
                    this.Manager.Comment("reaching state \'S179\'");
                    bool temp228;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp228);
                    this.Manager.Comment("reaching state \'S209\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp228, "enabled of CheckRequirementEnabled, state S209");
                    this.Manager.Comment("reaching state \'S239\'");
                    bool temp229;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp229);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp229);
                    this.Manager.Comment("reaching state \'S269\'");
                    int temp264 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker4)));
                    if ((temp264 == 0)) {
                        this.Manager.Comment("reaching state \'S313\'");
                        bool temp230;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp230);
                        this.Manager.Comment("reaching state \'S373\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp230, "enabled of CheckRequirementEnabled, state S373");
                        this.Manager.Comment("reaching state \'S433\'");
                        bool temp231;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp231);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp231);
                        this.Manager.Comment("reaching state \'S493\'");
                        int temp246 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker3)));
                        if ((temp246 == 0)) {
                            this.Manager.Comment("reaching state \'S581\'");
                            bool temp232;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp232);
                            this.Manager.Comment("reaching state \'S701\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp232, "enabled of CheckRequirementEnabled, state S701");
                            this.Manager.Comment("reaching state \'S821\'");
                            bool temp233;
                            bool temp234;
                            bool temp235;
                            bool temp236;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp237;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp233, out temp234, out temp235, out temp236, out temp237);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp233, temp234, temp235, temp236, temp237);
                            this.Manager.Comment("reaching state \'S941\'");
                            int temp238 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker3)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker4)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker6)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker7)));
                            if ((temp238 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1061();
                                goto label24;
                            }
                            if ((temp238 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1061();
                                goto label24;
                            }
                            if ((temp238 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1061();
                                goto label24;
                            }
                            if ((temp238 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1061();
                                goto label24;
                            }
                            if ((temp238 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1061();
                                goto label24;
                            }
                            if ((temp238 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1061();
                                goto label24;
                            }
                            if ((temp238 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1061();
                                goto label24;
                            }
                            if ((temp238 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1061();
                                goto label24;
                            }
                            throw new InvalidOperationException("never reached");
                        label24:
;
                            goto label26;
                        }
                        if ((temp246 == 1)) {
                            this.Manager.Comment("reaching state \'S582\'");
                            bool temp239;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp239);
                            this.Manager.Comment("reaching state \'S702\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp239, "enabled of CheckRequirementEnabled, state S702");
                            this.Manager.Comment("reaching state \'S822\'");
                            bool temp240;
                            bool temp241;
                            bool temp242;
                            bool temp243;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp244;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp240, out temp241, out temp242, out temp243, out temp244);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp240, temp241, temp242, temp243, temp244);
                            this.Manager.Comment("reaching state \'S942\'");
                            int temp245 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker10)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker11)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker13)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker14)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker15)));
                            if ((temp245 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1062();
                                goto label25;
                            }
                            if ((temp245 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1062();
                                goto label25;
                            }
                            if ((temp245 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1062();
                                goto label25;
                            }
                            if ((temp245 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1062();
                                goto label25;
                            }
                            if ((temp245 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1062();
                                goto label25;
                            }
                            if ((temp245 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1062();
                                goto label25;
                            }
                            if ((temp245 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1062();
                                goto label25;
                            }
                            if ((temp245 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1062();
                                goto label25;
                            }
                            throw new InvalidOperationException("never reached");
                        label25:
;
                            goto label26;
                        }
                        throw new InvalidOperationException("never reached");
                    label26:
;
                        goto label30;
                    }
                    if ((temp264 == 1)) {
                        this.Manager.Comment("reaching state \'S314\'");
                        bool temp247;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp247);
                        this.Manager.Comment("reaching state \'S374\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp247, "enabled of CheckRequirementEnabled, state S374");
                        this.Manager.Comment("reaching state \'S434\'");
                        bool temp248;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp248);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp248);
                        this.Manager.Comment("reaching state \'S494\'");
                        int temp263 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker6)));
                        if ((temp263 == 0)) {
                            this.Manager.Comment("reaching state \'S583\'");
                            bool temp249;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp249);
                            this.Manager.Comment("reaching state \'S703\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp249, "enabled of CheckRequirementEnabled, state S703");
                            this.Manager.Comment("reaching state \'S823\'");
                            bool temp250;
                            bool temp251;
                            bool temp252;
                            bool temp253;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp254;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp250, out temp251, out temp252, out temp253, out temp254);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp250, temp251, temp252, temp253, temp254);
                            this.Manager.Comment("reaching state \'S943\'");
                            int temp255 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker16)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker17)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker18)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker19)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker20)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker21)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker22)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker23)));
                            if ((temp255 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1063();
                                goto label27;
                            }
                            if ((temp255 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1063();
                                goto label27;
                            }
                            if ((temp255 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1063();
                                goto label27;
                            }
                            if ((temp255 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1063();
                                goto label27;
                            }
                            if ((temp255 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1063();
                                goto label27;
                            }
                            if ((temp255 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1063();
                                goto label27;
                            }
                            if ((temp255 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1063();
                                goto label27;
                            }
                            if ((temp255 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1063();
                                goto label27;
                            }
                            throw new InvalidOperationException("never reached");
                        label27:
;
                            goto label29;
                        }
                        if ((temp263 == 1)) {
                            this.Manager.Comment("reaching state \'S584\'");
                            bool temp256;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp256);
                            this.Manager.Comment("reaching state \'S704\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp256, "enabled of CheckRequirementEnabled, state S704");
                            this.Manager.Comment("reaching state \'S824\'");
                            bool temp257;
                            bool temp258;
                            bool temp259;
                            bool temp260;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp261;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp257, out temp258, out temp259, out temp260, out temp261);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp257, temp258, temp259, temp260, temp261);
                            this.Manager.Comment("reaching state \'S944\'");
                            int temp262 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker24)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker25)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker26)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker27)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker28)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker29)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker30)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker31)));
                            if ((temp262 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1064();
                                goto label28;
                            }
                            if ((temp262 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1064();
                                goto label28;
                            }
                            if ((temp262 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1064();
                                goto label28;
                            }
                            if ((temp262 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1064();
                                goto label28;
                            }
                            if ((temp262 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1064();
                                goto label28;
                            }
                            if ((temp262 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1064();
                                goto label28;
                            }
                            if ((temp262 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1064();
                                goto label28;
                            }
                            if ((temp262 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1064();
                                goto label28;
                            }
                            throw new InvalidOperationException("never reached");
                        label28:
;
                            goto label29;
                        }
                        throw new InvalidOperationException("never reached");
                    label29:
;
                        goto label30;
                    }
                    throw new InvalidOperationException("never reached");
                label30:
;
                    goto label38;
                }
                if ((temp302 == 1)) {
                    this.Manager.Comment("reaching state \'S180\'");
                    bool temp265;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp265);
                    this.Manager.Comment("reaching state \'S210\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp265, "enabled of CheckRequirementEnabled, state S210");
                    this.Manager.Comment("reaching state \'S240\'");
                    bool temp266;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp266);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp266);
                    this.Manager.Comment("reaching state \'S270\'");
                    int temp301 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker11)));
                    if ((temp301 == 0)) {
                        this.Manager.Comment("reaching state \'S315\'");
                        bool temp267;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp267);
                        this.Manager.Comment("reaching state \'S375\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp267, "enabled of CheckRequirementEnabled, state S375");
                        this.Manager.Comment("reaching state \'S435\'");
                        bool temp268;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp268);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp268);
                        this.Manager.Comment("reaching state \'S495\'");
                        int temp283 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker10)));
                        if ((temp283 == 0)) {
                            this.Manager.Comment("reaching state \'S585\'");
                            bool temp269;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp269);
                            this.Manager.Comment("reaching state \'S705\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp269, "enabled of CheckRequirementEnabled, state S705");
                            this.Manager.Comment("reaching state \'S825\'");
                            bool temp270;
                            bool temp271;
                            bool temp272;
                            bool temp273;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp274;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp270, out temp271, out temp272, out temp273, out temp274);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp270, temp271, temp272, temp273, temp274);
                            this.Manager.Comment("reaching state \'S945\'");
                            int temp275 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker32)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker33)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker34)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker35)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker36)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker37)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker38)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker39)));
                            if ((temp275 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1065();
                                goto label31;
                            }
                            if ((temp275 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1065();
                                goto label31;
                            }
                            if ((temp275 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1065();
                                goto label31;
                            }
                            if ((temp275 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1065();
                                goto label31;
                            }
                            if ((temp275 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1065();
                                goto label31;
                            }
                            if ((temp275 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1065();
                                goto label31;
                            }
                            if ((temp275 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1065();
                                goto label31;
                            }
                            if ((temp275 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1065();
                                goto label31;
                            }
                            throw new InvalidOperationException("never reached");
                        label31:
;
                            goto label33;
                        }
                        if ((temp283 == 1)) {
                            this.Manager.Comment("reaching state \'S586\'");
                            bool temp276;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp276);
                            this.Manager.Comment("reaching state \'S706\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp276, "enabled of CheckRequirementEnabled, state S706");
                            this.Manager.Comment("reaching state \'S826\'");
                            bool temp277;
                            bool temp278;
                            bool temp279;
                            bool temp280;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp281;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp277, out temp278, out temp279, out temp280, out temp281);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp277, temp278, temp279, temp280, temp281);
                            this.Manager.Comment("reaching state \'S946\'");
                            int temp282 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker40)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker41)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker42)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker43)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker44)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker45)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker46)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker47)));
                            if ((temp282 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1066();
                                goto label32;
                            }
                            if ((temp282 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1066();
                                goto label32;
                            }
                            if ((temp282 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1066();
                                goto label32;
                            }
                            if ((temp282 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1066();
                                goto label32;
                            }
                            if ((temp282 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1066();
                                goto label32;
                            }
                            if ((temp282 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1066();
                                goto label32;
                            }
                            if ((temp282 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1066();
                                goto label32;
                            }
                            if ((temp282 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1066();
                                goto label32;
                            }
                            throw new InvalidOperationException("never reached");
                        label32:
;
                            goto label33;
                        }
                        throw new InvalidOperationException("never reached");
                    label33:
;
                        goto label37;
                    }
                    if ((temp301 == 1)) {
                        this.Manager.Comment("reaching state \'S316\'");
                        bool temp284;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp284);
                        this.Manager.Comment("reaching state \'S376\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp284, "enabled of CheckRequirementEnabled, state S376");
                        this.Manager.Comment("reaching state \'S436\'");
                        bool temp285;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp285);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp285);
                        this.Manager.Comment("reaching state \'S496\'");
                        int temp300 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker13)));
                        if ((temp300 == 0)) {
                            this.Manager.Comment("reaching state \'S587\'");
                            bool temp286;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp286);
                            this.Manager.Comment("reaching state \'S707\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp286, "enabled of CheckRequirementEnabled, state S707");
                            this.Manager.Comment("reaching state \'S827\'");
                            bool temp287;
                            bool temp288;
                            bool temp289;
                            bool temp290;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp291;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp287, out temp288, out temp289, out temp290, out temp291);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp287, temp288, temp289, temp290, temp291);
                            this.Manager.Comment("reaching state \'S947\'");
                            int temp292 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker48)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker49)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker50)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker51)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker52)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker53)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker54)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker55)));
                            if ((temp292 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1067();
                                goto label34;
                            }
                            if ((temp292 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1067();
                                goto label34;
                            }
                            if ((temp292 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1067();
                                goto label34;
                            }
                            if ((temp292 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1067();
                                goto label34;
                            }
                            if ((temp292 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1067();
                                goto label34;
                            }
                            if ((temp292 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1067();
                                goto label34;
                            }
                            if ((temp292 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1067();
                                goto label34;
                            }
                            if ((temp292 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1067();
                                goto label34;
                            }
                            throw new InvalidOperationException("never reached");
                        label34:
;
                            goto label36;
                        }
                        if ((temp300 == 1)) {
                            this.Manager.Comment("reaching state \'S588\'");
                            bool temp293;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp293);
                            this.Manager.Comment("reaching state \'S708\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp293, "enabled of CheckRequirementEnabled, state S708");
                            this.Manager.Comment("reaching state \'S828\'");
                            bool temp294;
                            bool temp295;
                            bool temp296;
                            bool temp297;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp298;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp294, out temp295, out temp296, out temp297, out temp298);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp294, temp295, temp296, temp297, temp298);
                            this.Manager.Comment("reaching state \'S948\'");
                            int temp299 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker56)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker57)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker58)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker59)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker60)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker61)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker62)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker63)));
                            if ((temp299 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1068();
                                goto label35;
                            }
                            if ((temp299 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1068();
                                goto label35;
                            }
                            if ((temp299 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1068();
                                goto label35;
                            }
                            if ((temp299 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1068();
                                goto label35;
                            }
                            if ((temp299 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1068();
                                goto label35;
                            }
                            if ((temp299 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1068();
                                goto label35;
                            }
                            if ((temp299 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1068();
                                goto label35;
                            }
                            if ((temp299 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1068();
                                goto label35;
                            }
                            throw new InvalidOperationException("never reached");
                        label35:
;
                            goto label36;
                        }
                        throw new InvalidOperationException("never reached");
                    label36:
;
                        goto label37;
                    }
                    throw new InvalidOperationException("never reached");
                label37:
;
                    goto label38;
                }
                throw new InvalidOperationException("never reached");
            label38:
;
                goto label39;
            }
            if ((temp303 == 1)) {
                this.Manager.Comment("reaching state \'S45\'");
                goto label39;
            }
            throw new InvalidOperationException("never reached");
        label39:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S15");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S157");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S269");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S493");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S941");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1061() {
            this.Manager.Comment("reaching state \'S1061\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker1(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S941");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker2(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S941");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker3(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S941");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker4(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S941");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker5(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S941");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker6(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S941");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker7(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S941");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S941");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S493");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker8(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S942");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1062() {
            this.Manager.Comment("reaching state \'S1062\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker9(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S942");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker10(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S942");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker11(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S942");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker12(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S942");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker13(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S942");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker14(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S942");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker15(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S942");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S942");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S269");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S494");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker16(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S943");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1063() {
            this.Manager.Comment("reaching state \'S1063\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker17(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S943");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker18(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S943");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker19(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S943");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker20(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S943");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker21(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S943");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker22(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S943");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker23(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S943");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S943");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S494");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker24(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S944");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1064() {
            this.Manager.Comment("reaching state \'S1064\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker25(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S944");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker26(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S944");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker27(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S944");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker28(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S944");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker29(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S944");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker30(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S944");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker31(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S944");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S944");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S157");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S270");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S495");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker32(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S945");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1065() {
            this.Manager.Comment("reaching state \'S1065\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker33(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S945");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker34(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S945");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker35(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S945");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker36(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S945");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker37(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S945");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker38(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S945");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker39(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S945");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S945");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S495");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker40(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S946");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1066() {
            this.Manager.Comment("reaching state \'S1066\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker41(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S946");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker42(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S946");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker43(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S946");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker44(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S946");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker45(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S946");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker46(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S946");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker47(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S946");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S946");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S270");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S496");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker48(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S947");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1067() {
            this.Manager.Comment("reaching state \'S1067\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker49(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S947");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker50(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S947");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker51(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S947");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker52(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S947");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker53(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S947");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker54(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S947");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker55(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S947");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S947");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S496");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker56(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S948");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1068() {
            this.Manager.Comment("reaching state \'S1068\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker57(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S948");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker58(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S948");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker59(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S948");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker60(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S948");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker61(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S948");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker62(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S948");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3RopCopyPropertiesMethodChecker63(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S948");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S948");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite3CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S15");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4");
            this.Manager.Comment("reaching state \'S16\'");
            bool temp304;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp304);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp304);
            this.Manager.Comment("reaching state \'S17\'");
            int temp381 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp381 == 0)) {
                this.Manager.Comment("reaching state \'S46\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S68\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S83\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S98\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S113\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S143\'");
                bool temp305;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86701,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86701, out temp305);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp305);
                this.Manager.Comment("reaching state \'S158\'");
                int temp380 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker7)));
                if ((temp380 == 0)) {
                    this.Manager.Comment("reaching state \'S181\'");
                    bool temp306;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp306);
                    this.Manager.Comment("reaching state \'S211\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp306, "enabled of CheckRequirementEnabled, state S211");
                    this.Manager.Comment("reaching state \'S241\'");
                    bool temp307;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp307);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp307);
                    this.Manager.Comment("reaching state \'S271\'");
                    int temp342 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker4)));
                    if ((temp342 == 0)) {
                        this.Manager.Comment("reaching state \'S317\'");
                        bool temp308;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp308);
                        this.Manager.Comment("reaching state \'S377\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp308, "enabled of CheckRequirementEnabled, state S377");
                        this.Manager.Comment("reaching state \'S437\'");
                        bool temp309;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp309);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp309);
                        this.Manager.Comment("reaching state \'S497\'");
                        int temp324 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker3)));
                        if ((temp324 == 0)) {
                            this.Manager.Comment("reaching state \'S589\'");
                            bool temp310;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp310);
                            this.Manager.Comment("reaching state \'S709\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp310, "enabled of CheckRequirementEnabled, state S709");
                            this.Manager.Comment("reaching state \'S829\'");
                            bool temp311;
                            bool temp312;
                            bool temp313;
                            bool temp314;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp315;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp311, out temp312, out temp313, out temp314, out temp315);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp311, temp312, temp313, temp314, temp315);
                            this.Manager.Comment("reaching state \'S949\'");
                            int temp316 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker1)));
                            if ((temp316 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1069();
                                goto label40;
                            }
                            if ((temp316 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1069();
                                goto label40;
                            }
                            throw new InvalidOperationException("never reached");
                        label40:
;
                            goto label42;
                        }
                        if ((temp324 == 1)) {
                            this.Manager.Comment("reaching state \'S590\'");
                            bool temp317;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp317);
                            this.Manager.Comment("reaching state \'S710\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp317, "enabled of CheckRequirementEnabled, state S710");
                            this.Manager.Comment("reaching state \'S830\'");
                            bool temp318;
                            bool temp319;
                            bool temp320;
                            bool temp321;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp322;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp318, out temp319, out temp320, out temp321, out temp322);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp318, temp319, temp320, temp321, temp322);
                            this.Manager.Comment("reaching state \'S950\'");
                            int temp323 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker3)));
                            if ((temp323 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1070();
                                goto label41;
                            }
                            if ((temp323 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1070();
                                goto label41;
                            }
                            throw new InvalidOperationException("never reached");
                        label41:
;
                            goto label42;
                        }
                        throw new InvalidOperationException("never reached");
                    label42:
;
                        goto label46;
                    }
                    if ((temp342 == 1)) {
                        this.Manager.Comment("reaching state \'S318\'");
                        bool temp325;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp325);
                        this.Manager.Comment("reaching state \'S378\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp325, "enabled of CheckRequirementEnabled, state S378");
                        this.Manager.Comment("reaching state \'S438\'");
                        bool temp326;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp326);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp326);
                        this.Manager.Comment("reaching state \'S498\'");
                        int temp341 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker6)));
                        if ((temp341 == 0)) {
                            this.Manager.Comment("reaching state \'S591\'");
                            bool temp327;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp327);
                            this.Manager.Comment("reaching state \'S711\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp327, "enabled of CheckRequirementEnabled, state S711");
                            this.Manager.Comment("reaching state \'S831\'");
                            bool temp328;
                            bool temp329;
                            bool temp330;
                            bool temp331;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp332;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp328, out temp329, out temp330, out temp331, out temp332);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp328, temp329, temp330, temp331, temp332);
                            this.Manager.Comment("reaching state \'S951\'");
                            int temp333 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker4)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker5)));
                            if ((temp333 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1071();
                                goto label43;
                            }
                            if ((temp333 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1071();
                                goto label43;
                            }
                            throw new InvalidOperationException("never reached");
                        label43:
;
                            goto label45;
                        }
                        if ((temp341 == 1)) {
                            this.Manager.Comment("reaching state \'S592\'");
                            bool temp334;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp334);
                            this.Manager.Comment("reaching state \'S712\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp334, "enabled of CheckRequirementEnabled, state S712");
                            this.Manager.Comment("reaching state \'S832\'");
                            bool temp335;
                            bool temp336;
                            bool temp337;
                            bool temp338;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp339;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp335, out temp336, out temp337, out temp338, out temp339);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp335, temp336, temp337, temp338, temp339);
                            this.Manager.Comment("reaching state \'S952\'");
                            int temp340 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker6)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker7)));
                            if ((temp340 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1072();
                                goto label44;
                            }
                            if ((temp340 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1072();
                                goto label44;
                            }
                            throw new InvalidOperationException("never reached");
                        label44:
;
                            goto label45;
                        }
                        throw new InvalidOperationException("never reached");
                    label45:
;
                        goto label46;
                    }
                    throw new InvalidOperationException("never reached");
                label46:
;
                    goto label54;
                }
                if ((temp380 == 1)) {
                    this.Manager.Comment("reaching state \'S182\'");
                    bool temp343;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp343);
                    this.Manager.Comment("reaching state \'S212\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp343, "enabled of CheckRequirementEnabled, state S212");
                    this.Manager.Comment("reaching state \'S242\'");
                    bool temp344;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp344);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp344);
                    this.Manager.Comment("reaching state \'S272\'");
                    int temp379 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker11)));
                    if ((temp379 == 0)) {
                        this.Manager.Comment("reaching state \'S319\'");
                        bool temp345;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp345);
                        this.Manager.Comment("reaching state \'S379\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp345, "enabled of CheckRequirementEnabled, state S379");
                        this.Manager.Comment("reaching state \'S439\'");
                        bool temp346;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp346);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp346);
                        this.Manager.Comment("reaching state \'S499\'");
                        int temp361 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker10)));
                        if ((temp361 == 0)) {
                            this.Manager.Comment("reaching state \'S593\'");
                            bool temp347;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp347);
                            this.Manager.Comment("reaching state \'S713\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp347, "enabled of CheckRequirementEnabled, state S713");
                            this.Manager.Comment("reaching state \'S833\'");
                            bool temp348;
                            bool temp349;
                            bool temp350;
                            bool temp351;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp352;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp348, out temp349, out temp350, out temp351, out temp352);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp348, temp349, temp350, temp351, temp352);
                            this.Manager.Comment("reaching state \'S953\'");
                            int temp353 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker9)));
                            if ((temp353 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1073();
                                goto label47;
                            }
                            if ((temp353 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1073();
                                goto label47;
                            }
                            throw new InvalidOperationException("never reached");
                        label47:
;
                            goto label49;
                        }
                        if ((temp361 == 1)) {
                            this.Manager.Comment("reaching state \'S594\'");
                            bool temp354;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp354);
                            this.Manager.Comment("reaching state \'S714\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp354, "enabled of CheckRequirementEnabled, state S714");
                            this.Manager.Comment("reaching state \'S834\'");
                            bool temp355;
                            bool temp356;
                            bool temp357;
                            bool temp358;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp359;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp355, out temp356, out temp357, out temp358, out temp359);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp355, temp356, temp357, temp358, temp359);
                            this.Manager.Comment("reaching state \'S954\'");
                            int temp360 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker10)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker11)));
                            if ((temp360 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1074();
                                goto label48;
                            }
                            if ((temp360 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1074();
                                goto label48;
                            }
                            throw new InvalidOperationException("never reached");
                        label48:
;
                            goto label49;
                        }
                        throw new InvalidOperationException("never reached");
                    label49:
;
                        goto label53;
                    }
                    if ((temp379 == 1)) {
                        this.Manager.Comment("reaching state \'S320\'");
                        bool temp362;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp362);
                        this.Manager.Comment("reaching state \'S380\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp362, "enabled of CheckRequirementEnabled, state S380");
                        this.Manager.Comment("reaching state \'S440\'");
                        bool temp363;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp363);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp363);
                        this.Manager.Comment("reaching state \'S500\'");
                        int temp378 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker13)));
                        if ((temp378 == 0)) {
                            this.Manager.Comment("reaching state \'S595\'");
                            bool temp364;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp364);
                            this.Manager.Comment("reaching state \'S715\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp364, "enabled of CheckRequirementEnabled, state S715");
                            this.Manager.Comment("reaching state \'S835\'");
                            bool temp365;
                            bool temp366;
                            bool temp367;
                            bool temp368;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp369;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp365, out temp366, out temp367, out temp368, out temp369);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp365, temp366, temp367, temp368, temp369);
                            this.Manager.Comment("reaching state \'S955\'");
                            int temp370 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker13)));
                            if ((temp370 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1075();
                                goto label50;
                            }
                            if ((temp370 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1075();
                                goto label50;
                            }
                            throw new InvalidOperationException("never reached");
                        label50:
;
                            goto label52;
                        }
                        if ((temp378 == 1)) {
                            this.Manager.Comment("reaching state \'S596\'");
                            bool temp371;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp371);
                            this.Manager.Comment("reaching state \'S716\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp371, "enabled of CheckRequirementEnabled, state S716");
                            this.Manager.Comment("reaching state \'S836\'");
                            bool temp372;
                            bool temp373;
                            bool temp374;
                            bool temp375;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp376;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp372, out temp373, out temp374, out temp375, out temp376);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp372, temp373, temp374, temp375, temp376);
                            this.Manager.Comment("reaching state \'S956\'");
                            int temp377 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker14)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker15)));
                            if ((temp377 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1076();
                                goto label51;
                            }
                            if ((temp377 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1076();
                                goto label51;
                            }
                            throw new InvalidOperationException("never reached");
                        label51:
;
                            goto label52;
                        }
                        throw new InvalidOperationException("never reached");
                    label52:
;
                        goto label53;
                    }
                    throw new InvalidOperationException("never reached");
                label53:
;
                    goto label54;
                }
                throw new InvalidOperationException("never reached");
            label54:
;
                goto label55;
            }
            if ((temp381 == 1)) {
                this.Manager.Comment("reaching state \'S47\'");
                goto label55;
            }
            throw new InvalidOperationException("never reached");
        label55:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S17");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S158");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S271");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S497");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S949");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S949");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S949");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S949");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S949");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R5010" +
                        "1");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R50101");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1069() {
            this.Manager.Comment("reaching state \'S1069\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker1(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S949");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S949");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S949");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S949");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S949");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R5010" +
                        "1");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R50101");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S497");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker2(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S950");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S950");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S950");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S950");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S950");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R5010" +
                        "1");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R50101");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1070() {
            this.Manager.Comment("reaching state \'S1070\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker3(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S950");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S950");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S950");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S950");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S950");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R5010" +
                        "1");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R50101");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S271");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S498");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker4(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S951");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S951");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S951");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S951");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S951");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R8670" +
                        "4, MS-OXCPRPT_R159");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R86704");
            this.Manager.Checkpoint("MS-OXCPRPT_R159");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1071() {
            this.Manager.Comment("reaching state \'S1071\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker5(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S951");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S951");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S951");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S951");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S951");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R8670" +
                        "4, MS-OXCPRPT_R159");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R86704");
            this.Manager.Checkpoint("MS-OXCPRPT_R159");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S498");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker6(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S952");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S952");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S952");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S952");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S952");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R8670" +
                        "4, MS-OXCPRPT_R159");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R86704");
            this.Manager.Checkpoint("MS-OXCPRPT_R159");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1072() {
            this.Manager.Comment("reaching state \'S1072\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker7(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S952");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S952");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S952");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S952");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S952");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R8670" +
                        "4, MS-OXCPRPT_R159");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R86704");
            this.Manager.Checkpoint("MS-OXCPRPT_R159");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S158");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S272");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S499");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker8(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S953");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S953");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S953");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S953");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S953");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R5010" +
                        "1");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R50101");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1073() {
            this.Manager.Comment("reaching state \'S1073\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker9(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S953");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S953");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S953");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S953");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S953");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R5010" +
                        "1");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R50101");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S499");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker10(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S954");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S954");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S954");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S954");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S954");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R5010" +
                        "1");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R50101");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1074() {
            this.Manager.Comment("reaching state \'S1074\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker11(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S954");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S954");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S954");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S954");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S954");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R5010" +
                        "1");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R50101");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S272");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S500");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker12(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S955");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S955");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S955");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S955");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S955");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R8670" +
                        "4, MS-OXCPRPT_R159");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R86704");
            this.Manager.Checkpoint("MS-OXCPRPT_R159");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1075() {
            this.Manager.Comment("reaching state \'S1075\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker13(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S955");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S955");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S955");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S955");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S955");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R8670" +
                        "4, MS-OXCPRPT_R159");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R86704");
            this.Manager.Checkpoint("MS-OXCPRPT_R159");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S500");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker14(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S956");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S956");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S956");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S956");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S956");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R8670" +
                        "4, MS-OXCPRPT_R159");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R86704");
            this.Manager.Checkpoint("MS-OXCPRPT_R159");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1076() {
            this.Manager.Comment("reaching state \'S1076\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4RopCopyPropertiesMethodChecker15(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S956");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S956");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S956");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S956");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S956");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R8670" +
                        "4, MS-OXCPRPT_R159");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R86704");
            this.Manager.Checkpoint("MS-OXCPRPT_R159");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite4CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S17");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5");
            this.Manager.Comment("reaching state \'S18\'");
            bool temp382;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp382);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp382);
            this.Manager.Comment("reaching state \'S19\'");
            int temp455 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp455 == 0)) {
                this.Manager.Comment("reaching state \'S48\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S69\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S84\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S99\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S114\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S129\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S144\'");
                bool temp383;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86701,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86701, out temp383);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp383);
                this.Manager.Comment("reaching state \'S159\'");
                int temp454 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker7)));
                if ((temp454 == 0)) {
                    this.Manager.Comment("reaching state \'S183\'");
                    bool temp384;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp384);
                    this.Manager.Comment("reaching state \'S213\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp384, "enabled of CheckRequirementEnabled, state S213");
                    this.Manager.Comment("reaching state \'S243\'");
                    bool temp385;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp385);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp385);
                    this.Manager.Comment("reaching state \'S273\'");
                    int temp418 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker4)));
                    if ((temp418 == 0)) {
                        this.Manager.Comment("reaching state \'S321\'");
                        bool temp386;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp386);
                        this.Manager.Comment("reaching state \'S381\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp386, "enabled of CheckRequirementEnabled, state S381");
                        this.Manager.Comment("reaching state \'S441\'");
                        bool temp387;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp387);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp387);
                        this.Manager.Comment("reaching state \'S501\'");
                        int temp401 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker3)));
                        if ((temp401 == 0)) {
                            this.Manager.Comment("reaching state \'S597\'");
                            bool temp388;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp388);
                            this.Manager.Comment("reaching state \'S717\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp388, "enabled of CheckRequirementEnabled, state S717");
                            this.Manager.Comment("reaching state \'S837\'");
                            bool temp389;
                            bool temp390;
                            bool temp391;
                            bool temp392;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp393;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp389, out temp390, out temp391, out temp392, out temp393);
                            this.Manager.Comment("reaching state \'S957\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out InvalidParameter]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp389, "isPropertiesDeleted of RopCopyPropertiesMethod, state S957");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp390, "isChangedInDB of RopCopyPropertiesMethod, state S957");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp391, "isOverwriteDestination of RopCopyPropertiesMethod, state S957");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp392, "isReturnedRopProgress of RopCopyPropertiesMethod, state S957");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, temp393, "error of RopCopyPropertiesMethod, state S957");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R88001");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R88001");
                            this.Manager.Comment("reaching state \'S1077\'");
                            goto label57;
                        }
                        if ((temp401 == 1)) {
                            this.Manager.Comment("reaching state \'S598\'");
                            bool temp394;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp394);
                            this.Manager.Comment("reaching state \'S718\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp394, "enabled of CheckRequirementEnabled, state S718");
                            this.Manager.Comment("reaching state \'S838\'");
                            bool temp395;
                            bool temp396;
                            bool temp397;
                            bool temp398;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp399;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp395, out temp396, out temp397, out temp398, out temp399);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp395, temp396, temp397, temp398, temp399);
                            this.Manager.Comment("reaching state \'S958\'");
                            int temp400 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker3)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker4)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker6)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker7)));
                            if ((temp400 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1078();
                                goto label56;
                            }
                            if ((temp400 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1078();
                                goto label56;
                            }
                            if ((temp400 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1078();
                                goto label56;
                            }
                            if ((temp400 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1078();
                                goto label56;
                            }
                            if ((temp400 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1078();
                                goto label56;
                            }
                            if ((temp400 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1078();
                                goto label56;
                            }
                            if ((temp400 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1078();
                                goto label56;
                            }
                            if ((temp400 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1078();
                                goto label56;
                            }
                            throw new InvalidOperationException("never reached");
                        label56:
;
                            goto label57;
                        }
                        throw new InvalidOperationException("never reached");
                    label57:
;
                        goto label60;
                    }
                    if ((temp418 == 1)) {
                        this.Manager.Comment("reaching state \'S322\'");
                        bool temp402;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp402);
                        this.Manager.Comment("reaching state \'S382\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp402, "enabled of CheckRequirementEnabled, state S382");
                        this.Manager.Comment("reaching state \'S442\'");
                        bool temp403;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp403);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp403);
                        this.Manager.Comment("reaching state \'S502\'");
                        int temp417 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker6)));
                        if ((temp417 == 0)) {
                            this.Manager.Comment("reaching state \'S599\'");
                            bool temp404;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp404);
                            this.Manager.Comment("reaching state \'S719\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp404, "enabled of CheckRequirementEnabled, state S719");
                            this.Manager.Comment("reaching state \'S839\'");
                            bool temp405;
                            bool temp406;
                            bool temp407;
                            bool temp408;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp409;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp405, out temp406, out temp407, out temp408, out temp409);
                            this.Manager.Comment("reaching state \'S959\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out InvalidParameter]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp405, "isPropertiesDeleted of RopCopyPropertiesMethod, state S959");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp406, "isChangedInDB of RopCopyPropertiesMethod, state S959");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp407, "isOverwriteDestination of RopCopyPropertiesMethod, state S959");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp408, "isReturnedRopProgress of RopCopyPropertiesMethod, state S959");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, temp409, "error of RopCopyPropertiesMethod, state S959");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R88001");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R88001");
                            this.Manager.Comment("reaching state \'S1079\'");
                            goto label59;
                        }
                        if ((temp417 == 1)) {
                            this.Manager.Comment("reaching state \'S600\'");
                            bool temp410;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp410);
                            this.Manager.Comment("reaching state \'S720\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp410, "enabled of CheckRequirementEnabled, state S720");
                            this.Manager.Comment("reaching state \'S840\'");
                            bool temp411;
                            bool temp412;
                            bool temp413;
                            bool temp414;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp415;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp411, out temp412, out temp413, out temp414, out temp415);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp411, temp412, temp413, temp414, temp415);
                            this.Manager.Comment("reaching state \'S960\'");
                            int temp416 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker10)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker11)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker13)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker14)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker15)));
                            if ((temp416 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1080();
                                goto label58;
                            }
                            if ((temp416 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1080();
                                goto label58;
                            }
                            if ((temp416 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1080();
                                goto label58;
                            }
                            if ((temp416 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1080();
                                goto label58;
                            }
                            if ((temp416 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1080();
                                goto label58;
                            }
                            if ((temp416 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1080();
                                goto label58;
                            }
                            if ((temp416 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1080();
                                goto label58;
                            }
                            if ((temp416 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1080();
                                goto label58;
                            }
                            throw new InvalidOperationException("never reached");
                        label58:
;
                            goto label59;
                        }
                        throw new InvalidOperationException("never reached");
                    label59:
;
                        goto label60;
                    }
                    throw new InvalidOperationException("never reached");
                label60:
;
                    goto label66;
                }
                if ((temp454 == 1)) {
                    this.Manager.Comment("reaching state \'S184\'");
                    bool temp419;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp419);
                    this.Manager.Comment("reaching state \'S214\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp419, "enabled of CheckRequirementEnabled, state S214");
                    this.Manager.Comment("reaching state \'S244\'");
                    bool temp420;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp420);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp420);
                    this.Manager.Comment("reaching state \'S274\'");
                    int temp453 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker11)));
                    if ((temp453 == 0)) {
                        this.Manager.Comment("reaching state \'S323\'");
                        bool temp421;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp421);
                        this.Manager.Comment("reaching state \'S383\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp421, "enabled of CheckRequirementEnabled, state S383");
                        this.Manager.Comment("reaching state \'S443\'");
                        bool temp422;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp422);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp422);
                        this.Manager.Comment("reaching state \'S503\'");
                        int temp436 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker10)));
                        if ((temp436 == 0)) {
                            this.Manager.Comment("reaching state \'S601\'");
                            bool temp423;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp423);
                            this.Manager.Comment("reaching state \'S721\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp423, "enabled of CheckRequirementEnabled, state S721");
                            this.Manager.Comment("reaching state \'S841\'");
                            bool temp424;
                            bool temp425;
                            bool temp426;
                            bool temp427;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp428;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp424, out temp425, out temp426, out temp427, out temp428);
                            this.Manager.Comment("reaching state \'S961\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out InvalidParameter]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp424, "isPropertiesDeleted of RopCopyPropertiesMethod, state S961");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp425, "isChangedInDB of RopCopyPropertiesMethod, state S961");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp426, "isOverwriteDestination of RopCopyPropertiesMethod, state S961");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp427, "isReturnedRopProgress of RopCopyPropertiesMethod, state S961");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, temp428, "error of RopCopyPropertiesMethod, state S961");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R88001");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R88001");
                            this.Manager.Comment("reaching state \'S1081\'");
                            goto label62;
                        }
                        if ((temp436 == 1)) {
                            this.Manager.Comment("reaching state \'S602\'");
                            bool temp429;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp429);
                            this.Manager.Comment("reaching state \'S722\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp429, "enabled of CheckRequirementEnabled, state S722");
                            this.Manager.Comment("reaching state \'S842\'");
                            bool temp430;
                            bool temp431;
                            bool temp432;
                            bool temp433;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp434;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp430, out temp431, out temp432, out temp433, out temp434);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp430, temp431, temp432, temp433, temp434);
                            this.Manager.Comment("reaching state \'S962\'");
                            int temp435 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker16)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker17)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker18)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker19)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker20)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker21)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker22)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker23)));
                            if ((temp435 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1082();
                                goto label61;
                            }
                            if ((temp435 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1082();
                                goto label61;
                            }
                            if ((temp435 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1082();
                                goto label61;
                            }
                            if ((temp435 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1082();
                                goto label61;
                            }
                            if ((temp435 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1082();
                                goto label61;
                            }
                            if ((temp435 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1082();
                                goto label61;
                            }
                            if ((temp435 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1082();
                                goto label61;
                            }
                            if ((temp435 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1082();
                                goto label61;
                            }
                            throw new InvalidOperationException("never reached");
                        label61:
;
                            goto label62;
                        }
                        throw new InvalidOperationException("never reached");
                    label62:
;
                        goto label65;
                    }
                    if ((temp453 == 1)) {
                        this.Manager.Comment("reaching state \'S324\'");
                        bool temp437;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp437);
                        this.Manager.Comment("reaching state \'S384\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp437, "enabled of CheckRequirementEnabled, state S384");
                        this.Manager.Comment("reaching state \'S444\'");
                        bool temp438;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp438);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp438);
                        this.Manager.Comment("reaching state \'S504\'");
                        int temp452 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker13)));
                        if ((temp452 == 0)) {
                            this.Manager.Comment("reaching state \'S603\'");
                            bool temp439;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp439);
                            this.Manager.Comment("reaching state \'S723\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp439, "enabled of CheckRequirementEnabled, state S723");
                            this.Manager.Comment("reaching state \'S843\'");
                            bool temp440;
                            bool temp441;
                            bool temp442;
                            bool temp443;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp444;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp440, out temp441, out temp442, out temp443, out temp444);
                            this.Manager.Comment("reaching state \'S963\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out InvalidParameter]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp440, "isPropertiesDeleted of RopCopyPropertiesMethod, state S963");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp441, "isChangedInDB of RopCopyPropertiesMethod, state S963");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp442, "isOverwriteDestination of RopCopyPropertiesMethod, state S963");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp443, "isReturnedRopProgress of RopCopyPropertiesMethod, state S963");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, temp444, "error of RopCopyPropertiesMethod, state S963");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R88001");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R88001");
                            this.Manager.Comment("reaching state \'S1083\'");
                            goto label64;
                        }
                        if ((temp452 == 1)) {
                            this.Manager.Comment("reaching state \'S604\'");
                            bool temp445;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp445);
                            this.Manager.Comment("reaching state \'S724\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp445, "enabled of CheckRequirementEnabled, state S724");
                            this.Manager.Comment("reaching state \'S844\'");
                            bool temp446;
                            bool temp447;
                            bool temp448;
                            bool temp449;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp450;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp446, out temp447, out temp448, out temp449, out temp450);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp446, temp447, temp448, temp449, temp450);
                            this.Manager.Comment("reaching state \'S964\'");
                            int temp451 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker24)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker25)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker26)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker27)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker28)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker29)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker30)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker31)));
                            if ((temp451 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1084();
                                goto label63;
                            }
                            if ((temp451 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1084();
                                goto label63;
                            }
                            if ((temp451 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1084();
                                goto label63;
                            }
                            if ((temp451 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1084();
                                goto label63;
                            }
                            if ((temp451 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1084();
                                goto label63;
                            }
                            if ((temp451 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1084();
                                goto label63;
                            }
                            if ((temp451 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1084();
                                goto label63;
                            }
                            if ((temp451 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1084();
                                goto label63;
                            }
                            throw new InvalidOperationException("never reached");
                        label63:
;
                            goto label64;
                        }
                        throw new InvalidOperationException("never reached");
                    label64:
;
                        goto label65;
                    }
                    throw new InvalidOperationException("never reached");
                label65:
;
                    goto label66;
                }
                throw new InvalidOperationException("never reached");
            label66:
;
                goto label67;
            }
            if ((temp455 == 1)) {
                this.Manager.Comment("reaching state \'S49\'");
                goto label67;
            }
            throw new InvalidOperationException("never reached");
        label67:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S19");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S159");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S273");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S501");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S501");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S958");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1078() {
            this.Manager.Comment("reaching state \'S1078\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker1(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S958");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker2(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S958");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker3(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S958");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker4(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S958");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker5(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S958");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker6(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S958");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker7(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S958");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S958");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S273");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S502");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S502");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker8(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S960");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1080() {
            this.Manager.Comment("reaching state \'S1080\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker9(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S960");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker10(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S960");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker11(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S960");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker12(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S960");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker13(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S960");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker14(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S960");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker15(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S960");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S960");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S159");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S274");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S503");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S503");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker16(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S962");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1082() {
            this.Manager.Comment("reaching state \'S1082\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker17(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S962");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker18(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S962");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker19(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S962");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker20(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S962");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker21(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S962");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker22(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S962");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker23(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S962");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S962");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S274");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S504");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S504");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker24(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S964");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1084() {
            this.Manager.Comment("reaching state \'S1084\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker25(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S964");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker26(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S964");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker27(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S964");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker28(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S964");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker29(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S964");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker30(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S964");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5RopCopyPropertiesMethodChecker31(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S964");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S964");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite5CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S19");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp456;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp456);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp456);
            this.Manager.Comment("reaching state \'S3\'");
            int temp525 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp525 == 0)) {
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S61\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S76\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S91\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S106\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S121\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S136\'");
                bool temp457;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86701,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86701, out temp457);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp457);
                this.Manager.Comment("reaching state \'S151\'");
                int temp524 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker7)));
                if ((temp524 == 0)) {
                    this.Manager.Comment("reaching state \'S167\'");
                    bool temp458;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp458);
                    this.Manager.Comment("reaching state \'S197\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp458, "enabled of CheckRequirementEnabled, state S197");
                    this.Manager.Comment("reaching state \'S227\'");
                    bool temp459;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp459);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp459);
                    this.Manager.Comment("reaching state \'S257\'");
                    int temp490 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker4)));
                    if ((temp490 == 0)) {
                        this.Manager.Comment("reaching state \'S289\'");
                        bool temp460;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp460);
                        this.Manager.Comment("reaching state \'S349\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp460, "enabled of CheckRequirementEnabled, state S349");
                        this.Manager.Comment("reaching state \'S409\'");
                        bool temp461;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp461);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp461);
                        this.Manager.Comment("reaching state \'S469\'");
                        int temp474 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker3)));
                        if ((temp474 == 0)) {
                            this.Manager.Comment("reaching state \'S533\'");
                            bool temp462;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp462);
                            this.Manager.Comment("reaching state \'S653\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp462, "enabled of CheckRequirementEnabled, state S653");
                            this.Manager.Comment("reaching state \'S773\'");
                            bool temp463;
                            bool temp464;
                            bool temp465;
                            bool temp466;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp467;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp463, out temp464, out temp465, out temp466, out temp467);
                            this.Manager.Comment("reaching state \'S893\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp463, "isPropertiesDeleted of RopCopyPropertiesMethod, state S893");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp464, "isChangedInDB of RopCopyPropertiesMethod, state S893");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp465, "isOverwriteDestination of RopCopyPropertiesMethod, state S893");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp466, "isReturnedRopProgress of RopCopyPropertiesMethod, state S893");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp467, "error of RopCopyPropertiesMethod, state S893");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1013\'");
                            goto label68;
                        }
                        if ((temp474 == 1)) {
                            this.Manager.Comment("reaching state \'S534\'");
                            bool temp468;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp468);
                            this.Manager.Comment("reaching state \'S654\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp468, "enabled of CheckRequirementEnabled, state S654");
                            this.Manager.Comment("reaching state \'S774\'");
                            bool temp469;
                            bool temp470;
                            bool temp471;
                            bool temp472;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp473;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp469, out temp470, out temp471, out temp472, out temp473);
                            this.Manager.Comment("reaching state \'S894\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp469, "isPropertiesDeleted of RopCopyPropertiesMethod, state S894");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp470, "isChangedInDB of RopCopyPropertiesMethod, state S894");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp471, "isOverwriteDestination of RopCopyPropertiesMethod, state S894");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp472, "isReturnedRopProgress of RopCopyPropertiesMethod, state S894");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp473, "error of RopCopyPropertiesMethod, state S894");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1014\'");
                            goto label68;
                        }
                        throw new InvalidOperationException("never reached");
                    label68:
;
                        goto label70;
                    }
                    if ((temp490 == 1)) {
                        this.Manager.Comment("reaching state \'S290\'");
                        bool temp475;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp475);
                        this.Manager.Comment("reaching state \'S350\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp475, "enabled of CheckRequirementEnabled, state S350");
                        this.Manager.Comment("reaching state \'S410\'");
                        bool temp476;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp476);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp476);
                        this.Manager.Comment("reaching state \'S470\'");
                        int temp489 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker6)));
                        if ((temp489 == 0)) {
                            this.Manager.Comment("reaching state \'S535\'");
                            bool temp477;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp477);
                            this.Manager.Comment("reaching state \'S655\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp477, "enabled of CheckRequirementEnabled, state S655");
                            this.Manager.Comment("reaching state \'S775\'");
                            bool temp478;
                            bool temp479;
                            bool temp480;
                            bool temp481;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp482;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp478, out temp479, out temp480, out temp481, out temp482);
                            this.Manager.Comment("reaching state \'S895\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp478, "isPropertiesDeleted of RopCopyPropertiesMethod, state S895");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp479, "isChangedInDB of RopCopyPropertiesMethod, state S895");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp480, "isOverwriteDestination of RopCopyPropertiesMethod, state S895");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp481, "isReturnedRopProgress of RopCopyPropertiesMethod, state S895");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp482, "error of RopCopyPropertiesMethod, state S895");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1015\'");
                            goto label69;
                        }
                        if ((temp489 == 1)) {
                            this.Manager.Comment("reaching state \'S536\'");
                            bool temp483;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp483);
                            this.Manager.Comment("reaching state \'S656\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp483, "enabled of CheckRequirementEnabled, state S656");
                            this.Manager.Comment("reaching state \'S776\'");
                            bool temp484;
                            bool temp485;
                            bool temp486;
                            bool temp487;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp488;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp484, out temp485, out temp486, out temp487, out temp488);
                            this.Manager.Comment("reaching state \'S896\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp484, "isPropertiesDeleted of RopCopyPropertiesMethod, state S896");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp485, "isChangedInDB of RopCopyPropertiesMethod, state S896");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp486, "isOverwriteDestination of RopCopyPropertiesMethod, state S896");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp487, "isReturnedRopProgress of RopCopyPropertiesMethod, state S896");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp488, "error of RopCopyPropertiesMethod, state S896");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1016\'");
                            goto label69;
                        }
                        throw new InvalidOperationException("never reached");
                    label69:
;
                        goto label70;
                    }
                    throw new InvalidOperationException("never reached");
                label70:
;
                    goto label74;
                }
                if ((temp524 == 1)) {
                    this.Manager.Comment("reaching state \'S168\'");
                    bool temp491;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp491);
                    this.Manager.Comment("reaching state \'S198\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp491, "enabled of CheckRequirementEnabled, state S198");
                    this.Manager.Comment("reaching state \'S228\'");
                    bool temp492;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp492);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp492);
                    this.Manager.Comment("reaching state \'S258\'");
                    int temp523 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker11)));
                    if ((temp523 == 0)) {
                        this.Manager.Comment("reaching state \'S291\'");
                        bool temp493;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp493);
                        this.Manager.Comment("reaching state \'S351\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp493, "enabled of CheckRequirementEnabled, state S351");
                        this.Manager.Comment("reaching state \'S411\'");
                        bool temp494;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp494);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp494);
                        this.Manager.Comment("reaching state \'S471\'");
                        int temp507 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker10)));
                        if ((temp507 == 0)) {
                            this.Manager.Comment("reaching state \'S537\'");
                            bool temp495;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp495);
                            this.Manager.Comment("reaching state \'S657\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp495, "enabled of CheckRequirementEnabled, state S657");
                            this.Manager.Comment("reaching state \'S777\'");
                            bool temp496;
                            bool temp497;
                            bool temp498;
                            bool temp499;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp500;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp496, out temp497, out temp498, out temp499, out temp500);
                            this.Manager.Comment("reaching state \'S897\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp496, "isPropertiesDeleted of RopCopyPropertiesMethod, state S897");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp497, "isChangedInDB of RopCopyPropertiesMethod, state S897");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp498, "isOverwriteDestination of RopCopyPropertiesMethod, state S897");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp499, "isReturnedRopProgress of RopCopyPropertiesMethod, state S897");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp500, "error of RopCopyPropertiesMethod, state S897");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1017\'");
                            goto label71;
                        }
                        if ((temp507 == 1)) {
                            this.Manager.Comment("reaching state \'S538\'");
                            bool temp501;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp501);
                            this.Manager.Comment("reaching state \'S658\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp501, "enabled of CheckRequirementEnabled, state S658");
                            this.Manager.Comment("reaching state \'S778\'");
                            bool temp502;
                            bool temp503;
                            bool temp504;
                            bool temp505;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp506;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp502, out temp503, out temp504, out temp505, out temp506);
                            this.Manager.Comment("reaching state \'S898\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp502, "isPropertiesDeleted of RopCopyPropertiesMethod, state S898");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp503, "isChangedInDB of RopCopyPropertiesMethod, state S898");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp504, "isOverwriteDestination of RopCopyPropertiesMethod, state S898");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp505, "isReturnedRopProgress of RopCopyPropertiesMethod, state S898");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp506, "error of RopCopyPropertiesMethod, state S898");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1018\'");
                            goto label71;
                        }
                        throw new InvalidOperationException("never reached");
                    label71:
;
                        goto label73;
                    }
                    if ((temp523 == 1)) {
                        this.Manager.Comment("reaching state \'S292\'");
                        bool temp508;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp508);
                        this.Manager.Comment("reaching state \'S352\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp508, "enabled of CheckRequirementEnabled, state S352");
                        this.Manager.Comment("reaching state \'S412\'");
                        bool temp509;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp509);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp509);
                        this.Manager.Comment("reaching state \'S472\'");
                        int temp522 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker13)));
                        if ((temp522 == 0)) {
                            this.Manager.Comment("reaching state \'S539\'");
                            bool temp510;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp510);
                            this.Manager.Comment("reaching state \'S659\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp510, "enabled of CheckRequirementEnabled, state S659");
                            this.Manager.Comment("reaching state \'S779\'");
                            bool temp511;
                            bool temp512;
                            bool temp513;
                            bool temp514;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp515;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp511, out temp512, out temp513, out temp514, out temp515);
                            this.Manager.Comment("reaching state \'S899\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp511, "isPropertiesDeleted of RopCopyPropertiesMethod, state S899");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp512, "isChangedInDB of RopCopyPropertiesMethod, state S899");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp513, "isOverwriteDestination of RopCopyPropertiesMethod, state S899");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp514, "isReturnedRopProgress of RopCopyPropertiesMethod, state S899");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp515, "error of RopCopyPropertiesMethod, state S899");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1019\'");
                            goto label72;
                        }
                        if ((temp522 == 1)) {
                            this.Manager.Comment("reaching state \'S540\'");
                            bool temp516;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp516);
                            this.Manager.Comment("reaching state \'S660\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp516, "enabled of CheckRequirementEnabled, state S660");
                            this.Manager.Comment("reaching state \'S780\'");
                            bool temp517;
                            bool temp518;
                            bool temp519;
                            bool temp520;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp521;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp517, out temp518, out temp519, out temp520, out temp521);
                            this.Manager.Comment("reaching state \'S900\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp517, "isPropertiesDeleted of RopCopyPropertiesMethod, state S900");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp518, "isChangedInDB of RopCopyPropertiesMethod, state S900");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp519, "isOverwriteDestination of RopCopyPropertiesMethod, state S900");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp520, "isReturnedRopProgress of RopCopyPropertiesMethod, state S900");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp521, "error of RopCopyPropertiesMethod, state S900");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1020\'");
                            goto label72;
                        }
                        throw new InvalidOperationException("never reached");
                    label72:
;
                        goto label73;
                    }
                    throw new InvalidOperationException("never reached");
                label73:
;
                    goto label74;
                }
                throw new InvalidOperationException("never reached");
            label74:
;
                goto label75;
            }
            if ((temp525 == 1)) {
                this.Manager.Comment("reaching state \'S33\'");
                goto label75;
            }
            throw new InvalidOperationException("never reached");
        label75:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S151");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S257");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S469");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S469");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S257");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S470");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S470");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S151");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S258");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S471");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S471");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S258");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S472");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S472");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite6CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7");
            this.Manager.Comment("reaching state \'S20\'");
            bool temp526;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp526);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp526);
            this.Manager.Comment("reaching state \'S21\'");
            int temp603 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp603 == 0)) {
                this.Manager.Comment("reaching state \'S50\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S70\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S85\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S100\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S115\'");
                this.Manager.Comment("executing step \'call GetObject(Message,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S130\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S145\'");
                bool temp527;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86701,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86701, out temp527);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp527);
                this.Manager.Comment("reaching state \'S160\'");
                int temp602 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker7)));
                if ((temp602 == 0)) {
                    this.Manager.Comment("reaching state \'S185\'");
                    bool temp528;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp528);
                    this.Manager.Comment("reaching state \'S215\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp528, "enabled of CheckRequirementEnabled, state S215");
                    this.Manager.Comment("reaching state \'S245\'");
                    bool temp529;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp529);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp529);
                    this.Manager.Comment("reaching state \'S275\'");
                    int temp564 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker4)));
                    if ((temp564 == 0)) {
                        this.Manager.Comment("reaching state \'S325\'");
                        bool temp530;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp530);
                        this.Manager.Comment("reaching state \'S385\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp530, "enabled of CheckRequirementEnabled, state S385");
                        this.Manager.Comment("reaching state \'S445\'");
                        bool temp531;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp531);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp531);
                        this.Manager.Comment("reaching state \'S505\'");
                        int temp546 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker3)));
                        if ((temp546 == 0)) {
                            this.Manager.Comment("reaching state \'S605\'");
                            bool temp532;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp532);
                            this.Manager.Comment("reaching state \'S725\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp532, "enabled of CheckRequirementEnabled, state S725");
                            this.Manager.Comment("reaching state \'S845\'");
                            bool temp533;
                            bool temp534;
                            bool temp535;
                            bool temp536;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp537;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp533, out temp534, out temp535, out temp536, out temp537);
                            this.Manager.Comment("reaching state \'S965\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                                    "alse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp533, "isPropertiesDeleted of RopCopyPropertiesMethod, state S965");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp534, "isChangedInDB of RopCopyPropertiesMethod, state S965");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp535, "isOverwriteDestination of RopCopyPropertiesMethod, state S965");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp536, "isReturnedRopProgress of RopCopyPropertiesMethod, state S965");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp537, "error of RopCopyPropertiesMethod, state S965");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1085\'");
                            bool temp538;
                            this.Manager.Comment("executing step \'call RopSaveChangesMessageMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesMessageMethod(out temp538);
                            this.Manager.Checkpoint("MS-OXCPRPT_R849");
                            this.Manager.Comment("reaching state \'S1133\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesMessageMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp538, "isChangedInDB of RopSaveChangesMessageMethod, state S1133");
                            this.Manager.Comment("reaching state \'S1149\'");
                            goto label76;
                        }
                        if ((temp546 == 1)) {
                            this.Manager.Comment("reaching state \'S606\'");
                            bool temp539;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp539);
                            this.Manager.Comment("reaching state \'S726\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp539, "enabled of CheckRequirementEnabled, state S726");
                            this.Manager.Comment("reaching state \'S846\'");
                            bool temp540;
                            bool temp541;
                            bool temp542;
                            bool temp543;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp544;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp540, out temp541, out temp542, out temp543, out temp544);
                            this.Manager.Comment("reaching state \'S966\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                                    "alse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp540, "isPropertiesDeleted of RopCopyPropertiesMethod, state S966");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp541, "isChangedInDB of RopCopyPropertiesMethod, state S966");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp542, "isOverwriteDestination of RopCopyPropertiesMethod, state S966");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp543, "isReturnedRopProgress of RopCopyPropertiesMethod, state S966");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp544, "error of RopCopyPropertiesMethod, state S966");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1086\'");
                            bool temp545;
                            this.Manager.Comment("executing step \'call RopSaveChangesMessageMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesMessageMethod(out temp545);
                            this.Manager.Checkpoint("MS-OXCPRPT_R849");
                            this.Manager.Comment("reaching state \'S1134\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesMessageMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp545, "isChangedInDB of RopSaveChangesMessageMethod, state S1134");
                            this.Manager.Comment("reaching state \'S1150\'");
                            goto label76;
                        }
                        throw new InvalidOperationException("never reached");
                    label76:
;
                        goto label78;
                    }
                    if ((temp564 == 1)) {
                        this.Manager.Comment("reaching state \'S326\'");
                        bool temp547;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp547);
                        this.Manager.Comment("reaching state \'S386\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp547, "enabled of CheckRequirementEnabled, state S386");
                        this.Manager.Comment("reaching state \'S446\'");
                        bool temp548;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp548);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp548);
                        this.Manager.Comment("reaching state \'S506\'");
                        int temp563 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker6)));
                        if ((temp563 == 0)) {
                            this.Manager.Comment("reaching state \'S607\'");
                            bool temp549;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp549);
                            this.Manager.Comment("reaching state \'S727\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp549, "enabled of CheckRequirementEnabled, state S727");
                            this.Manager.Comment("reaching state \'S847\'");
                            bool temp550;
                            bool temp551;
                            bool temp552;
                            bool temp553;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp554;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp550, out temp551, out temp552, out temp553, out temp554);
                            this.Manager.Comment("reaching state \'S967\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                                    "alse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp550, "isPropertiesDeleted of RopCopyPropertiesMethod, state S967");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp551, "isChangedInDB of RopCopyPropertiesMethod, state S967");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp552, "isOverwriteDestination of RopCopyPropertiesMethod, state S967");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp553, "isReturnedRopProgress of RopCopyPropertiesMethod, state S967");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp554, "error of RopCopyPropertiesMethod, state S967");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1087\'");
                            bool temp555;
                            this.Manager.Comment("executing step \'call RopSaveChangesMessageMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesMessageMethod(out temp555);
                            this.Manager.Checkpoint("MS-OXCPRPT_R849");
                            this.Manager.Comment("reaching state \'S1135\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesMessageMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp555, "isChangedInDB of RopSaveChangesMessageMethod, state S1135");
                            this.Manager.Comment("reaching state \'S1151\'");
                            goto label77;
                        }
                        if ((temp563 == 1)) {
                            this.Manager.Comment("reaching state \'S608\'");
                            bool temp556;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp556);
                            this.Manager.Comment("reaching state \'S728\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp556, "enabled of CheckRequirementEnabled, state S728");
                            this.Manager.Comment("reaching state \'S848\'");
                            bool temp557;
                            bool temp558;
                            bool temp559;
                            bool temp560;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp561;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp557, out temp558, out temp559, out temp560, out temp561);
                            this.Manager.Comment("reaching state \'S968\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                                    "alse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp557, "isPropertiesDeleted of RopCopyPropertiesMethod, state S968");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp558, "isChangedInDB of RopCopyPropertiesMethod, state S968");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp559, "isOverwriteDestination of RopCopyPropertiesMethod, state S968");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp560, "isReturnedRopProgress of RopCopyPropertiesMethod, state S968");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp561, "error of RopCopyPropertiesMethod, state S968");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1088\'");
                            bool temp562;
                            this.Manager.Comment("executing step \'call RopSaveChangesMessageMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesMessageMethod(out temp562);
                            this.Manager.Checkpoint("MS-OXCPRPT_R849");
                            this.Manager.Comment("reaching state \'S1136\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesMessageMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp562, "isChangedInDB of RopSaveChangesMessageMethod, state S1136");
                            this.Manager.Comment("reaching state \'S1152\'");
                            goto label77;
                        }
                        throw new InvalidOperationException("never reached");
                    label77:
;
                        goto label78;
                    }
                    throw new InvalidOperationException("never reached");
                label78:
;
                    goto label82;
                }
                if ((temp602 == 1)) {
                    this.Manager.Comment("reaching state \'S186\'");
                    bool temp565;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp565);
                    this.Manager.Comment("reaching state \'S216\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp565, "enabled of CheckRequirementEnabled, state S216");
                    this.Manager.Comment("reaching state \'S246\'");
                    bool temp566;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp566);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp566);
                    this.Manager.Comment("reaching state \'S276\'");
                    int temp601 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker11)));
                    if ((temp601 == 0)) {
                        this.Manager.Comment("reaching state \'S327\'");
                        bool temp567;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp567);
                        this.Manager.Comment("reaching state \'S387\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp567, "enabled of CheckRequirementEnabled, state S387");
                        this.Manager.Comment("reaching state \'S447\'");
                        bool temp568;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp568);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp568);
                        this.Manager.Comment("reaching state \'S507\'");
                        int temp583 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker10)));
                        if ((temp583 == 0)) {
                            this.Manager.Comment("reaching state \'S609\'");
                            bool temp569;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp569);
                            this.Manager.Comment("reaching state \'S729\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp569, "enabled of CheckRequirementEnabled, state S729");
                            this.Manager.Comment("reaching state \'S849\'");
                            bool temp570;
                            bool temp571;
                            bool temp572;
                            bool temp573;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp574;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp570, out temp571, out temp572, out temp573, out temp574);
                            this.Manager.Comment("reaching state \'S969\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                                    "alse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp570, "isPropertiesDeleted of RopCopyPropertiesMethod, state S969");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp571, "isChangedInDB of RopCopyPropertiesMethod, state S969");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp572, "isOverwriteDestination of RopCopyPropertiesMethod, state S969");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp573, "isReturnedRopProgress of RopCopyPropertiesMethod, state S969");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp574, "error of RopCopyPropertiesMethod, state S969");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1089\'");
                            bool temp575;
                            this.Manager.Comment("executing step \'call RopSaveChangesMessageMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesMessageMethod(out temp575);
                            this.Manager.Checkpoint("MS-OXCPRPT_R849");
                            this.Manager.Comment("reaching state \'S1137\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesMessageMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp575, "isChangedInDB of RopSaveChangesMessageMethod, state S1137");
                            this.Manager.Comment("reaching state \'S1153\'");
                            goto label79;
                        }
                        if ((temp583 == 1)) {
                            this.Manager.Comment("reaching state \'S610\'");
                            bool temp576;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp576);
                            this.Manager.Comment("reaching state \'S730\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp576, "enabled of CheckRequirementEnabled, state S730");
                            this.Manager.Comment("reaching state \'S850\'");
                            bool temp577;
                            bool temp578;
                            bool temp579;
                            bool temp580;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp581;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp577, out temp578, out temp579, out temp580, out temp581);
                            this.Manager.Comment("reaching state \'S970\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                                    "alse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp577, "isPropertiesDeleted of RopCopyPropertiesMethod, state S970");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp578, "isChangedInDB of RopCopyPropertiesMethod, state S970");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp579, "isOverwriteDestination of RopCopyPropertiesMethod, state S970");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp580, "isReturnedRopProgress of RopCopyPropertiesMethod, state S970");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp581, "error of RopCopyPropertiesMethod, state S970");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1090\'");
                            bool temp582;
                            this.Manager.Comment("executing step \'call RopSaveChangesMessageMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesMessageMethod(out temp582);
                            this.Manager.Checkpoint("MS-OXCPRPT_R849");
                            this.Manager.Comment("reaching state \'S1138\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesMessageMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp582, "isChangedInDB of RopSaveChangesMessageMethod, state S1138");
                            this.Manager.Comment("reaching state \'S1154\'");
                            goto label79;
                        }
                        throw new InvalidOperationException("never reached");
                    label79:
;
                        goto label81;
                    }
                    if ((temp601 == 1)) {
                        this.Manager.Comment("reaching state \'S328\'");
                        bool temp584;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp584);
                        this.Manager.Comment("reaching state \'S388\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp584, "enabled of CheckRequirementEnabled, state S388");
                        this.Manager.Comment("reaching state \'S448\'");
                        bool temp585;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp585);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp585);
                        this.Manager.Comment("reaching state \'S508\'");
                        int temp600 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker13)));
                        if ((temp600 == 0)) {
                            this.Manager.Comment("reaching state \'S611\'");
                            bool temp586;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp586);
                            this.Manager.Comment("reaching state \'S731\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp586, "enabled of CheckRequirementEnabled, state S731");
                            this.Manager.Comment("reaching state \'S851\'");
                            bool temp587;
                            bool temp588;
                            bool temp589;
                            bool temp590;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp591;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp587, out temp588, out temp589, out temp590, out temp591);
                            this.Manager.Comment("reaching state \'S971\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                                    "alse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp587, "isPropertiesDeleted of RopCopyPropertiesMethod, state S971");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp588, "isChangedInDB of RopCopyPropertiesMethod, state S971");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp589, "isOverwriteDestination of RopCopyPropertiesMethod, state S971");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp590, "isReturnedRopProgress of RopCopyPropertiesMethod, state S971");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp591, "error of RopCopyPropertiesMethod, state S971");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1091\'");
                            bool temp592;
                            this.Manager.Comment("executing step \'call RopSaveChangesMessageMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesMessageMethod(out temp592);
                            this.Manager.Checkpoint("MS-OXCPRPT_R849");
                            this.Manager.Comment("reaching state \'S1139\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesMessageMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp592, "isChangedInDB of RopSaveChangesMessageMethod, state S1139");
                            this.Manager.Comment("reaching state \'S1155\'");
                            goto label80;
                        }
                        if ((temp600 == 1)) {
                            this.Manager.Comment("reaching state \'S612\'");
                            bool temp593;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp593);
                            this.Manager.Comment("reaching state \'S732\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp593, "enabled of CheckRequirementEnabled, state S732");
                            this.Manager.Comment("reaching state \'S852\'");
                            bool temp594;
                            bool temp595;
                            bool temp596;
                            bool temp597;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp598;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(None,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(0)), true, true, out temp594, out temp595, out temp596, out temp597, out temp598);
                            this.Manager.Comment("reaching state \'S972\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                                    "alse,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp594, "isPropertiesDeleted of RopCopyPropertiesMethod, state S972");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp595, "isChangedInDB of RopCopyPropertiesMethod, state S972");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp596, "isOverwriteDestination of RopCopyPropertiesMethod, state S972");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp597, "isReturnedRopProgress of RopCopyPropertiesMethod, state S972");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp598, "error of RopCopyPropertiesMethod, state S972");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1092\'");
                            bool temp599;
                            this.Manager.Comment("executing step \'call RopSaveChangesMessageMethod(out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopSaveChangesMessageMethod(out temp599);
                            this.Manager.Checkpoint("MS-OXCPRPT_R849");
                            this.Manager.Comment("reaching state \'S1140\'");
                            this.Manager.Comment("checking step \'return RopSaveChangesMessageMethod/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp599, "isChangedInDB of RopSaveChangesMessageMethod, state S1140");
                            this.Manager.Comment("reaching state \'S1156\'");
                            goto label80;
                        }
                        throw new InvalidOperationException("never reached");
                    label80:
;
                        goto label81;
                    }
                    throw new InvalidOperationException("never reached");
                label81:
;
                    goto label82;
                }
                throw new InvalidOperationException("never reached");
            label82:
;
                goto label83;
            }
            if ((temp603 == 1)) {
                this.Manager.Comment("reaching state \'S51\'");
                goto label83;
            }
            throw new InvalidOperationException("never reached");
        label83:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S21");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S160");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S275");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S505");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S505");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S275");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S506");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S506");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S160");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S276");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S507");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S507");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S276");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S508");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S508");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite7CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S21");
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8");
            this.Manager.Comment("reaching state \'S22\'");
            bool temp604;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp604);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp604);
            this.Manager.Comment("reaching state \'S23\'");
            int temp673 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp673 == 0)) {
                this.Manager.Comment("reaching state \'S52\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S71\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S86\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S101\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment("executing step \'call GetObject(Message,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S131\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S146\'");
                bool temp605;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86701,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86701, out temp605);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp605);
                this.Manager.Comment("reaching state \'S161\'");
                int temp672 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker7)));
                if ((temp672 == 0)) {
                    this.Manager.Comment("reaching state \'S187\'");
                    bool temp606;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp606);
                    this.Manager.Comment("reaching state \'S217\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp606, "enabled of CheckRequirementEnabled, state S217");
                    this.Manager.Comment("reaching state \'S247\'");
                    bool temp607;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp607);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp607);
                    this.Manager.Comment("reaching state \'S277\'");
                    int temp638 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker4)));
                    if ((temp638 == 0)) {
                        this.Manager.Comment("reaching state \'S329\'");
                        bool temp608;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp608);
                        this.Manager.Comment("reaching state \'S389\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp608, "enabled of CheckRequirementEnabled, state S389");
                        this.Manager.Comment("reaching state \'S449\'");
                        bool temp609;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp609);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp609);
                        this.Manager.Comment("reaching state \'S509\'");
                        int temp622 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker3)));
                        if ((temp622 == 0)) {
                            this.Manager.Comment("reaching state \'S613\'");
                            bool temp610;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp610);
                            this.Manager.Comment("reaching state \'S733\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp610, "enabled of CheckRequirementEnabled, state S733");
                            this.Manager.Comment("reaching state \'S853\'");
                            bool temp611;
                            bool temp612;
                            bool temp613;
                            bool temp614;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp615;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp611, out temp612, out temp613, out temp614, out temp615);
                            this.Manager.Comment("reaching state \'S973\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp611, "isPropertiesDeleted of RopCopyPropertiesMethod, state S973");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp612, "isChangedInDB of RopCopyPropertiesMethod, state S973");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp613, "isOverwriteDestination of RopCopyPropertiesMethod, state S973");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp614, "isReturnedRopProgress of RopCopyPropertiesMethod, state S973");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp615, "error of RopCopyPropertiesMethod, state S973");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1093\'");
                            goto label84;
                        }
                        if ((temp622 == 1)) {
                            this.Manager.Comment("reaching state \'S614\'");
                            bool temp616;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp616);
                            this.Manager.Comment("reaching state \'S734\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp616, "enabled of CheckRequirementEnabled, state S734");
                            this.Manager.Comment("reaching state \'S854\'");
                            bool temp617;
                            bool temp618;
                            bool temp619;
                            bool temp620;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp621;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp617, out temp618, out temp619, out temp620, out temp621);
                            this.Manager.Comment("reaching state \'S974\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp617, "isPropertiesDeleted of RopCopyPropertiesMethod, state S974");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp618, "isChangedInDB of RopCopyPropertiesMethod, state S974");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp619, "isOverwriteDestination of RopCopyPropertiesMethod, state S974");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp620, "isReturnedRopProgress of RopCopyPropertiesMethod, state S974");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp621, "error of RopCopyPropertiesMethod, state S974");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1094\'");
                            goto label84;
                        }
                        throw new InvalidOperationException("never reached");
                    label84:
;
                        goto label86;
                    }
                    if ((temp638 == 1)) {
                        this.Manager.Comment("reaching state \'S330\'");
                        bool temp623;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp623);
                        this.Manager.Comment("reaching state \'S390\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp623, "enabled of CheckRequirementEnabled, state S390");
                        this.Manager.Comment("reaching state \'S450\'");
                        bool temp624;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp624);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp624);
                        this.Manager.Comment("reaching state \'S510\'");
                        int temp637 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker6)));
                        if ((temp637 == 0)) {
                            this.Manager.Comment("reaching state \'S615\'");
                            bool temp625;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp625);
                            this.Manager.Comment("reaching state \'S735\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp625, "enabled of CheckRequirementEnabled, state S735");
                            this.Manager.Comment("reaching state \'S855\'");
                            bool temp626;
                            bool temp627;
                            bool temp628;
                            bool temp629;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp630;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp626, out temp627, out temp628, out temp629, out temp630);
                            this.Manager.Comment("reaching state \'S975\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp626, "isPropertiesDeleted of RopCopyPropertiesMethod, state S975");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp627, "isChangedInDB of RopCopyPropertiesMethod, state S975");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp628, "isOverwriteDestination of RopCopyPropertiesMethod, state S975");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp629, "isReturnedRopProgress of RopCopyPropertiesMethod, state S975");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp630, "error of RopCopyPropertiesMethod, state S975");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1095\'");
                            goto label85;
                        }
                        if ((temp637 == 1)) {
                            this.Manager.Comment("reaching state \'S616\'");
                            bool temp631;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp631);
                            this.Manager.Comment("reaching state \'S736\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp631, "enabled of CheckRequirementEnabled, state S736");
                            this.Manager.Comment("reaching state \'S856\'");
                            bool temp632;
                            bool temp633;
                            bool temp634;
                            bool temp635;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp636;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp632, out temp633, out temp634, out temp635, out temp636);
                            this.Manager.Comment("reaching state \'S976\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp632, "isPropertiesDeleted of RopCopyPropertiesMethod, state S976");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp633, "isChangedInDB of RopCopyPropertiesMethod, state S976");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp634, "isOverwriteDestination of RopCopyPropertiesMethod, state S976");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp635, "isReturnedRopProgress of RopCopyPropertiesMethod, state S976");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp636, "error of RopCopyPropertiesMethod, state S976");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1096\'");
                            goto label85;
                        }
                        throw new InvalidOperationException("never reached");
                    label85:
;
                        goto label86;
                    }
                    throw new InvalidOperationException("never reached");
                label86:
;
                    goto label90;
                }
                if ((temp672 == 1)) {
                    this.Manager.Comment("reaching state \'S188\'");
                    bool temp639;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp639);
                    this.Manager.Comment("reaching state \'S218\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp639, "enabled of CheckRequirementEnabled, state S218");
                    this.Manager.Comment("reaching state \'S248\'");
                    bool temp640;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp640);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp640);
                    this.Manager.Comment("reaching state \'S278\'");
                    int temp671 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker11)));
                    if ((temp671 == 0)) {
                        this.Manager.Comment("reaching state \'S331\'");
                        bool temp641;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp641);
                        this.Manager.Comment("reaching state \'S391\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp641, "enabled of CheckRequirementEnabled, state S391");
                        this.Manager.Comment("reaching state \'S451\'");
                        bool temp642;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp642);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp642);
                        this.Manager.Comment("reaching state \'S511\'");
                        int temp655 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker10)));
                        if ((temp655 == 0)) {
                            this.Manager.Comment("reaching state \'S617\'");
                            bool temp643;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp643);
                            this.Manager.Comment("reaching state \'S737\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp643, "enabled of CheckRequirementEnabled, state S737");
                            this.Manager.Comment("reaching state \'S857\'");
                            bool temp644;
                            bool temp645;
                            bool temp646;
                            bool temp647;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp648;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp644, out temp645, out temp646, out temp647, out temp648);
                            this.Manager.Comment("reaching state \'S977\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp644, "isPropertiesDeleted of RopCopyPropertiesMethod, state S977");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp645, "isChangedInDB of RopCopyPropertiesMethod, state S977");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp646, "isOverwriteDestination of RopCopyPropertiesMethod, state S977");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp647, "isReturnedRopProgress of RopCopyPropertiesMethod, state S977");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp648, "error of RopCopyPropertiesMethod, state S977");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1097\'");
                            goto label87;
                        }
                        if ((temp655 == 1)) {
                            this.Manager.Comment("reaching state \'S618\'");
                            bool temp649;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp649);
                            this.Manager.Comment("reaching state \'S738\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp649, "enabled of CheckRequirementEnabled, state S738");
                            this.Manager.Comment("reaching state \'S858\'");
                            bool temp650;
                            bool temp651;
                            bool temp652;
                            bool temp653;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp654;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp650, out temp651, out temp652, out temp653, out temp654);
                            this.Manager.Comment("reaching state \'S978\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp650, "isPropertiesDeleted of RopCopyPropertiesMethod, state S978");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp651, "isChangedInDB of RopCopyPropertiesMethod, state S978");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp652, "isOverwriteDestination of RopCopyPropertiesMethod, state S978");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp653, "isReturnedRopProgress of RopCopyPropertiesMethod, state S978");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp654, "error of RopCopyPropertiesMethod, state S978");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1098\'");
                            goto label87;
                        }
                        throw new InvalidOperationException("never reached");
                    label87:
;
                        goto label89;
                    }
                    if ((temp671 == 1)) {
                        this.Manager.Comment("reaching state \'S332\'");
                        bool temp656;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp656);
                        this.Manager.Comment("reaching state \'S392\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp656, "enabled of CheckRequirementEnabled, state S392");
                        this.Manager.Comment("reaching state \'S452\'");
                        bool temp657;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp657);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp657);
                        this.Manager.Comment("reaching state \'S512\'");
                        int temp670 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker13)));
                        if ((temp670 == 0)) {
                            this.Manager.Comment("reaching state \'S619\'");
                            bool temp658;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp658);
                            this.Manager.Comment("reaching state \'S739\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp658, "enabled of CheckRequirementEnabled, state S739");
                            this.Manager.Comment("reaching state \'S859\'");
                            bool temp659;
                            bool temp660;
                            bool temp661;
                            bool temp662;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp663;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp659, out temp660, out temp661, out temp662, out temp663);
                            this.Manager.Comment("reaching state \'S979\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp659, "isPropertiesDeleted of RopCopyPropertiesMethod, state S979");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp660, "isChangedInDB of RopCopyPropertiesMethod, state S979");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp661, "isOverwriteDestination of RopCopyPropertiesMethod, state S979");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp662, "isReturnedRopProgress of RopCopyPropertiesMethod, state S979");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp663, "error of RopCopyPropertiesMethod, state S979");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1099\'");
                            goto label88;
                        }
                        if ((temp670 == 1)) {
                            this.Manager.Comment("reaching state \'S620\'");
                            bool temp664;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp664);
                            this.Manager.Comment("reaching state \'S740\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp664, "enabled of CheckRequirementEnabled, state S740");
                            this.Manager.Comment("reaching state \'S860\'");
                            bool temp665;
                            bool temp666;
                            bool temp667;
                            bool temp668;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp669;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWrite,True,True,out _,out _,ou" +
                                    "t _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWrite, true, true, out temp665, out temp666, out temp667, out temp668, out temp669);
                            this.Manager.Comment("reaching state \'S980\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out None]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp665, "isPropertiesDeleted of RopCopyPropertiesMethod, state S980");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp666, "isChangedInDB of RopCopyPropertiesMethod, state S980");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp667, "isOverwriteDestination of RopCopyPropertiesMethod, state S980");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp668, "isReturnedRopProgress of RopCopyPropertiesMethod, state S980");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp669, "error of RopCopyPropertiesMethod, state S980");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R146, MS-OXCPRPT_R264," +
                                        " MS-OXCPRPT_R879, MS-OXCPRPT_R15901");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R146");
                            this.Manager.Checkpoint("MS-OXCPRPT_R264");
                            this.Manager.Checkpoint("MS-OXCPRPT_R879");
                            this.Manager.Checkpoint("MS-OXCPRPT_R15901");
                            this.Manager.Comment("reaching state \'S1100\'");
                            goto label88;
                        }
                        throw new InvalidOperationException("never reached");
                    label88:
;
                        goto label89;
                    }
                    throw new InvalidOperationException("never reached");
                label89:
;
                    goto label90;
                }
                throw new InvalidOperationException("never reached");
            label90:
;
                goto label91;
            }
            if ((temp673 == 1)) {
                this.Manager.Comment("reaching state \'S53\'");
                goto label91;
            }
            throw new InvalidOperationException("never reached");
        label91:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S23");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S161");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S277");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S509");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S509");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S277");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S510");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S510");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S161");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S278");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S511");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S511");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S278");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S512");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S512");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite8CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S23");
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9");
            this.Manager.Comment("reaching state \'S24\'");
            bool temp674;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp674);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp674);
            this.Manager.Comment("reaching state \'S25\'");
            int temp751 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp751 == 0)) {
                this.Manager.Comment("reaching state \'S54\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S72\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S87\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S102\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S117\'");
                this.Manager.Comment("executing step \'call GetObject(Message,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S132\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S147\'");
                bool temp675;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86701,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86701, out temp675);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp675);
                this.Manager.Comment("reaching state \'S162\'");
                int temp750 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker7)));
                if ((temp750 == 0)) {
                    this.Manager.Comment("reaching state \'S189\'");
                    bool temp676;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp676);
                    this.Manager.Comment("reaching state \'S219\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp676, "enabled of CheckRequirementEnabled, state S219");
                    this.Manager.Comment("reaching state \'S249\'");
                    bool temp677;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp677);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp677);
                    this.Manager.Comment("reaching state \'S279\'");
                    int temp712 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker4)));
                    if ((temp712 == 0)) {
                        this.Manager.Comment("reaching state \'S333\'");
                        bool temp678;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp678);
                        this.Manager.Comment("reaching state \'S393\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp678, "enabled of CheckRequirementEnabled, state S393");
                        this.Manager.Comment("reaching state \'S453\'");
                        bool temp679;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp679);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp679);
                        this.Manager.Comment("reaching state \'S513\'");
                        int temp694 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker3)));
                        if ((temp694 == 0)) {
                            this.Manager.Comment("reaching state \'S621\'");
                            bool temp680;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp680);
                            this.Manager.Comment("reaching state \'S741\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp680, "enabled of CheckRequirementEnabled, state S741");
                            this.Manager.Comment("reaching state \'S861\'");
                            bool temp681;
                            bool temp682;
                            bool temp683;
                            bool temp684;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp685;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp681, out temp682, out temp683, out temp684, out temp685);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp681, temp682, temp683, temp684, temp685);
                            this.Manager.Comment("reaching state \'S981\'");
                            int temp686 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker3)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker4)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker6)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker7)));
                            if ((temp686 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1101();
                                goto label92;
                            }
                            if ((temp686 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1101();
                                goto label92;
                            }
                            if ((temp686 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1101();
                                goto label92;
                            }
                            if ((temp686 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1101();
                                goto label92;
                            }
                            if ((temp686 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1101();
                                goto label92;
                            }
                            if ((temp686 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1101();
                                goto label92;
                            }
                            if ((temp686 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1101();
                                goto label92;
                            }
                            if ((temp686 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1101();
                                goto label92;
                            }
                            throw new InvalidOperationException("never reached");
                        label92:
;
                            goto label94;
                        }
                        if ((temp694 == 1)) {
                            this.Manager.Comment("reaching state \'S622\'");
                            bool temp687;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp687);
                            this.Manager.Comment("reaching state \'S742\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp687, "enabled of CheckRequirementEnabled, state S742");
                            this.Manager.Comment("reaching state \'S862\'");
                            bool temp688;
                            bool temp689;
                            bool temp690;
                            bool temp691;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp692;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp688, out temp689, out temp690, out temp691, out temp692);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp688, temp689, temp690, temp691, temp692);
                            this.Manager.Comment("reaching state \'S982\'");
                            int temp693 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker10)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker11)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker13)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker14)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker15)));
                            if ((temp693 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1102();
                                goto label93;
                            }
                            if ((temp693 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1102();
                                goto label93;
                            }
                            if ((temp693 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1102();
                                goto label93;
                            }
                            if ((temp693 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1102();
                                goto label93;
                            }
                            if ((temp693 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1102();
                                goto label93;
                            }
                            if ((temp693 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1102();
                                goto label93;
                            }
                            if ((temp693 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1102();
                                goto label93;
                            }
                            if ((temp693 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1102();
                                goto label93;
                            }
                            throw new InvalidOperationException("never reached");
                        label93:
;
                            goto label94;
                        }
                        throw new InvalidOperationException("never reached");
                    label94:
;
                        goto label98;
                    }
                    if ((temp712 == 1)) {
                        this.Manager.Comment("reaching state \'S334\'");
                        bool temp695;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp695);
                        this.Manager.Comment("reaching state \'S394\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp695, "enabled of CheckRequirementEnabled, state S394");
                        this.Manager.Comment("reaching state \'S454\'");
                        bool temp696;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp696);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp696);
                        this.Manager.Comment("reaching state \'S514\'");
                        int temp711 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker6)));
                        if ((temp711 == 0)) {
                            this.Manager.Comment("reaching state \'S623\'");
                            bool temp697;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp697);
                            this.Manager.Comment("reaching state \'S743\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp697, "enabled of CheckRequirementEnabled, state S743");
                            this.Manager.Comment("reaching state \'S863\'");
                            bool temp698;
                            bool temp699;
                            bool temp700;
                            bool temp701;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp702;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp698, out temp699, out temp700, out temp701, out temp702);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp698, temp699, temp700, temp701, temp702);
                            this.Manager.Comment("reaching state \'S983\'");
                            int temp703 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker16)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker17)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker18)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker19)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker20)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker21)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker22)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker23)));
                            if ((temp703 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1103();
                                goto label95;
                            }
                            if ((temp703 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1103();
                                goto label95;
                            }
                            if ((temp703 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1103();
                                goto label95;
                            }
                            if ((temp703 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1103();
                                goto label95;
                            }
                            if ((temp703 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1103();
                                goto label95;
                            }
                            if ((temp703 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1103();
                                goto label95;
                            }
                            if ((temp703 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1103();
                                goto label95;
                            }
                            if ((temp703 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1103();
                                goto label95;
                            }
                            throw new InvalidOperationException("never reached");
                        label95:
;
                            goto label97;
                        }
                        if ((temp711 == 1)) {
                            this.Manager.Comment("reaching state \'S624\'");
                            bool temp704;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp704);
                            this.Manager.Comment("reaching state \'S744\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp704, "enabled of CheckRequirementEnabled, state S744");
                            this.Manager.Comment("reaching state \'S864\'");
                            bool temp705;
                            bool temp706;
                            bool temp707;
                            bool temp708;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp709;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp705, out temp706, out temp707, out temp708, out temp709);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp705, temp706, temp707, temp708, temp709);
                            this.Manager.Comment("reaching state \'S984\'");
                            int temp710 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker24)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker25)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker26)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker27)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker28)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker29)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker30)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker31)));
                            if ((temp710 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1104();
                                goto label96;
                            }
                            if ((temp710 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1104();
                                goto label96;
                            }
                            if ((temp710 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1104();
                                goto label96;
                            }
                            if ((temp710 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1104();
                                goto label96;
                            }
                            if ((temp710 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1104();
                                goto label96;
                            }
                            if ((temp710 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1104();
                                goto label96;
                            }
                            if ((temp710 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1104();
                                goto label96;
                            }
                            if ((temp710 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1104();
                                goto label96;
                            }
                            throw new InvalidOperationException("never reached");
                        label96:
;
                            goto label97;
                        }
                        throw new InvalidOperationException("never reached");
                    label97:
;
                        goto label98;
                    }
                    throw new InvalidOperationException("never reached");
                label98:
;
                    goto label106;
                }
                if ((temp750 == 1)) {
                    this.Manager.Comment("reaching state \'S190\'");
                    bool temp713;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp713);
                    this.Manager.Comment("reaching state \'S220\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp713, "enabled of CheckRequirementEnabled, state S220");
                    this.Manager.Comment("reaching state \'S250\'");
                    bool temp714;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp714);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp714);
                    this.Manager.Comment("reaching state \'S280\'");
                    int temp749 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker11)));
                    if ((temp749 == 0)) {
                        this.Manager.Comment("reaching state \'S335\'");
                        bool temp715;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp715);
                        this.Manager.Comment("reaching state \'S395\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp715, "enabled of CheckRequirementEnabled, state S395");
                        this.Manager.Comment("reaching state \'S455\'");
                        bool temp716;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp716);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp716);
                        this.Manager.Comment("reaching state \'S515\'");
                        int temp731 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker10)));
                        if ((temp731 == 0)) {
                            this.Manager.Comment("reaching state \'S625\'");
                            bool temp717;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp717);
                            this.Manager.Comment("reaching state \'S745\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp717, "enabled of CheckRequirementEnabled, state S745");
                            this.Manager.Comment("reaching state \'S865\'");
                            bool temp718;
                            bool temp719;
                            bool temp720;
                            bool temp721;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp722;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp718, out temp719, out temp720, out temp721, out temp722);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp718, temp719, temp720, temp721, temp722);
                            this.Manager.Comment("reaching state \'S985\'");
                            int temp723 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker32)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker33)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker34)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker35)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker36)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker37)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker38)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker39)));
                            if ((temp723 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1105();
                                goto label99;
                            }
                            if ((temp723 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1105();
                                goto label99;
                            }
                            if ((temp723 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1105();
                                goto label99;
                            }
                            if ((temp723 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1105();
                                goto label99;
                            }
                            if ((temp723 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1105();
                                goto label99;
                            }
                            if ((temp723 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1105();
                                goto label99;
                            }
                            if ((temp723 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1105();
                                goto label99;
                            }
                            if ((temp723 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1105();
                                goto label99;
                            }
                            throw new InvalidOperationException("never reached");
                        label99:
;
                            goto label101;
                        }
                        if ((temp731 == 1)) {
                            this.Manager.Comment("reaching state \'S626\'");
                            bool temp724;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp724);
                            this.Manager.Comment("reaching state \'S746\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp724, "enabled of CheckRequirementEnabled, state S746");
                            this.Manager.Comment("reaching state \'S866\'");
                            bool temp725;
                            bool temp726;
                            bool temp727;
                            bool temp728;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp729;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp725, out temp726, out temp727, out temp728, out temp729);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp725, temp726, temp727, temp728, temp729);
                            this.Manager.Comment("reaching state \'S986\'");
                            int temp730 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker40)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker41)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker42)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker43)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker44)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker45)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker46)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker47)));
                            if ((temp730 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1106();
                                goto label100;
                            }
                            if ((temp730 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1106();
                                goto label100;
                            }
                            if ((temp730 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1106();
                                goto label100;
                            }
                            if ((temp730 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1106();
                                goto label100;
                            }
                            if ((temp730 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1106();
                                goto label100;
                            }
                            if ((temp730 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1106();
                                goto label100;
                            }
                            if ((temp730 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1106();
                                goto label100;
                            }
                            if ((temp730 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1106();
                                goto label100;
                            }
                            throw new InvalidOperationException("never reached");
                        label100:
;
                            goto label101;
                        }
                        throw new InvalidOperationException("never reached");
                    label101:
;
                        goto label105;
                    }
                    if ((temp749 == 1)) {
                        this.Manager.Comment("reaching state \'S336\'");
                        bool temp732;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp732);
                        this.Manager.Comment("reaching state \'S396\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp732, "enabled of CheckRequirementEnabled, state S396");
                        this.Manager.Comment("reaching state \'S456\'");
                        bool temp733;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp733);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp733);
                        this.Manager.Comment("reaching state \'S516\'");
                        int temp748 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker13)));
                        if ((temp748 == 0)) {
                            this.Manager.Comment("reaching state \'S627\'");
                            bool temp734;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp734);
                            this.Manager.Comment("reaching state \'S747\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp734, "enabled of CheckRequirementEnabled, state S747");
                            this.Manager.Comment("reaching state \'S867\'");
                            bool temp735;
                            bool temp736;
                            bool temp737;
                            bool temp738;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp739;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp735, out temp736, out temp737, out temp738, out temp739);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp735, temp736, temp737, temp738, temp739);
                            this.Manager.Comment("reaching state \'S987\'");
                            int temp740 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker48)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker49)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker50)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker51)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker52)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker53)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker54)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker55)));
                            if ((temp740 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1107();
                                goto label102;
                            }
                            if ((temp740 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1107();
                                goto label102;
                            }
                            if ((temp740 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1107();
                                goto label102;
                            }
                            if ((temp740 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1107();
                                goto label102;
                            }
                            if ((temp740 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1107();
                                goto label102;
                            }
                            if ((temp740 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1107();
                                goto label102;
                            }
                            if ((temp740 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1107();
                                goto label102;
                            }
                            if ((temp740 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1107();
                                goto label102;
                            }
                            throw new InvalidOperationException("never reached");
                        label102:
;
                            goto label104;
                        }
                        if ((temp748 == 1)) {
                            this.Manager.Comment("reaching state \'S628\'");
                            bool temp741;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp741);
                            this.Manager.Comment("reaching state \'S748\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp741, "enabled of CheckRequirementEnabled, state S748");
                            this.Manager.Comment("reaching state \'S868\'");
                            bool temp742;
                            bool temp743;
                            bool temp744;
                            bool temp745;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp746;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp742, out temp743, out temp744, out temp745, out temp746);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp742, temp743, temp744, temp745, temp746);
                            this.Manager.Comment("reaching state \'S988\'");
                            int temp747 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker56)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker57)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker58)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker59)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker60)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker61)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker62)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker63)));
                            if ((temp747 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1108();
                                goto label103;
                            }
                            if ((temp747 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1108();
                                goto label103;
                            }
                            if ((temp747 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1108();
                                goto label103;
                            }
                            if ((temp747 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1108();
                                goto label103;
                            }
                            if ((temp747 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1108();
                                goto label103;
                            }
                            if ((temp747 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1108();
                                goto label103;
                            }
                            if ((temp747 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1108();
                                goto label103;
                            }
                            if ((temp747 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1108();
                                goto label103;
                            }
                            throw new InvalidOperationException("never reached");
                        label103:
;
                            goto label104;
                        }
                        throw new InvalidOperationException("never reached");
                    label104:
;
                        goto label105;
                    }
                    throw new InvalidOperationException("never reached");
                label105:
;
                    goto label106;
                }
                throw new InvalidOperationException("never reached");
            label106:
;
                goto label107;
            }
            if ((temp751 == 1)) {
                this.Manager.Comment("reaching state \'S55\'");
                goto label107;
            }
            throw new InvalidOperationException("never reached");
        label107:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S25");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S162");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S279");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S513");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S981");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1101() {
            this.Manager.Comment("reaching state \'S1101\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker1(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S981");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker2(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S981");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker3(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S981");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker4(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S981");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker5(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S981");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker6(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S981");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker7(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S981");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S981");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S513");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker8(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S982");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1102() {
            this.Manager.Comment("reaching state \'S1102\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker9(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S982");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker10(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S982");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker11(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S982");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker12(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S982");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker13(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S982");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker14(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S982");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker15(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S982");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S982");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S279");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S514");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker16(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S983");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1103() {
            this.Manager.Comment("reaching state \'S1103\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker17(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S983");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker18(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S983");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker19(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S983");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker20(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S983");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker21(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S983");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker22(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S983");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker23(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S983");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S983");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S514");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker24(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S984");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1104() {
            this.Manager.Comment("reaching state \'S1104\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker25(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S984");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker26(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S984");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker27(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S984");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker28(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S984");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker29(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S984");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker30(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S984");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker31(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S984");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S984");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S162");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S280");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S515");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker32(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S985");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1105() {
            this.Manager.Comment("reaching state \'S1105\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker33(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S985");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker34(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S985");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker35(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S985");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker36(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S985");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker37(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S985");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker38(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S985");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker39(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S985");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S985");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S515");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker40(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S986");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1106() {
            this.Manager.Comment("reaching state \'S1106\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker41(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S986");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker42(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S986");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker43(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S986");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker44(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S986");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker45(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S986");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker46(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S986");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker47(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S986");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S986");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S280");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S516");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker48(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S987");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1107() {
            this.Manager.Comment("reaching state \'S1107\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker49(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S987");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker50(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S987");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker51(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S987");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker52(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S987");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker53(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S987");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker54(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S987");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker55(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S987");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S987");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S516");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker56(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S988");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1108() {
            this.Manager.Comment("reaching state \'S1108\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker57(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S988");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker58(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S988");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker59(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S988");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker60(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S988");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker61(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S988");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker62(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S988");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9RopCopyPropertiesMethodChecker63(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S988");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S988");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite9CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S25");
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10");
            this.Manager.Comment("reaching state \'S26\'");
            bool temp752;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp752);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp752);
            this.Manager.Comment("reaching state \'S27\'");
            int temp829 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp829 == 0)) {
                this.Manager.Comment("reaching state \'S56\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S73\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S88\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S103\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S118\'");
                this.Manager.Comment("executing step \'call GetObject(Message,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S133\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S148\'");
                bool temp753;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86701,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86701, out temp753);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp753);
                this.Manager.Comment("reaching state \'S163\'");
                int temp828 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker7)));
                if ((temp828 == 0)) {
                    this.Manager.Comment("reaching state \'S191\'");
                    bool temp754;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp754);
                    this.Manager.Comment("reaching state \'S221\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp754, "enabled of CheckRequirementEnabled, state S221");
                    this.Manager.Comment("reaching state \'S251\'");
                    bool temp755;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp755);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp755);
                    this.Manager.Comment("reaching state \'S281\'");
                    int temp790 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker4)));
                    if ((temp790 == 0)) {
                        this.Manager.Comment("reaching state \'S337\'");
                        bool temp756;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp756);
                        this.Manager.Comment("reaching state \'S397\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp756, "enabled of CheckRequirementEnabled, state S397");
                        this.Manager.Comment("reaching state \'S457\'");
                        bool temp757;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp757);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp757);
                        this.Manager.Comment("reaching state \'S517\'");
                        int temp772 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker3)));
                        if ((temp772 == 0)) {
                            this.Manager.Comment("reaching state \'S629\'");
                            bool temp758;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp758);
                            this.Manager.Comment("reaching state \'S749\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp758, "enabled of CheckRequirementEnabled, state S749");
                            this.Manager.Comment("reaching state \'S869\'");
                            bool temp759;
                            bool temp760;
                            bool temp761;
                            bool temp762;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp763;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp759, out temp760, out temp761, out temp762, out temp763);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp759, temp760, temp761, temp762, temp763);
                            this.Manager.Comment("reaching state \'S989\'");
                            int temp764 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker1)));
                            if ((temp764 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1109();
                                goto label108;
                            }
                            if ((temp764 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1109();
                                goto label108;
                            }
                            throw new InvalidOperationException("never reached");
                        label108:
;
                            goto label110;
                        }
                        if ((temp772 == 1)) {
                            this.Manager.Comment("reaching state \'S630\'");
                            bool temp765;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp765);
                            this.Manager.Comment("reaching state \'S750\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp765, "enabled of CheckRequirementEnabled, state S750");
                            this.Manager.Comment("reaching state \'S870\'");
                            bool temp766;
                            bool temp767;
                            bool temp768;
                            bool temp769;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp770;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp766, out temp767, out temp768, out temp769, out temp770);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp766, temp767, temp768, temp769, temp770);
                            this.Manager.Comment("reaching state \'S990\'");
                            int temp771 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker3)));
                            if ((temp771 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1110();
                                goto label109;
                            }
                            if ((temp771 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1110();
                                goto label109;
                            }
                            throw new InvalidOperationException("never reached");
                        label109:
;
                            goto label110;
                        }
                        throw new InvalidOperationException("never reached");
                    label110:
;
                        goto label114;
                    }
                    if ((temp790 == 1)) {
                        this.Manager.Comment("reaching state \'S338\'");
                        bool temp773;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp773);
                        this.Manager.Comment("reaching state \'S398\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp773, "enabled of CheckRequirementEnabled, state S398");
                        this.Manager.Comment("reaching state \'S458\'");
                        bool temp774;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp774);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp774);
                        this.Manager.Comment("reaching state \'S518\'");
                        int temp789 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker6)));
                        if ((temp789 == 0)) {
                            this.Manager.Comment("reaching state \'S631\'");
                            bool temp775;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp775);
                            this.Manager.Comment("reaching state \'S751\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp775, "enabled of CheckRequirementEnabled, state S751");
                            this.Manager.Comment("reaching state \'S871\'");
                            bool temp776;
                            bool temp777;
                            bool temp778;
                            bool temp779;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp780;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp776, out temp777, out temp778, out temp779, out temp780);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp776, temp777, temp778, temp779, temp780);
                            this.Manager.Comment("reaching state \'S991\'");
                            int temp781 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker4)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker5)));
                            if ((temp781 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1111();
                                goto label111;
                            }
                            if ((temp781 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1111();
                                goto label111;
                            }
                            throw new InvalidOperationException("never reached");
                        label111:
;
                            goto label113;
                        }
                        if ((temp789 == 1)) {
                            this.Manager.Comment("reaching state \'S632\'");
                            bool temp782;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp782);
                            this.Manager.Comment("reaching state \'S752\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp782, "enabled of CheckRequirementEnabled, state S752");
                            this.Manager.Comment("reaching state \'S872\'");
                            bool temp783;
                            bool temp784;
                            bool temp785;
                            bool temp786;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp787;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp783, out temp784, out temp785, out temp786, out temp787);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp783, temp784, temp785, temp786, temp787);
                            this.Manager.Comment("reaching state \'S992\'");
                            int temp788 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker6)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker7)));
                            if ((temp788 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1112();
                                goto label112;
                            }
                            if ((temp788 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1112();
                                goto label112;
                            }
                            throw new InvalidOperationException("never reached");
                        label112:
;
                            goto label113;
                        }
                        throw new InvalidOperationException("never reached");
                    label113:
;
                        goto label114;
                    }
                    throw new InvalidOperationException("never reached");
                label114:
;
                    goto label122;
                }
                if ((temp828 == 1)) {
                    this.Manager.Comment("reaching state \'S192\'");
                    bool temp791;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp791);
                    this.Manager.Comment("reaching state \'S222\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp791, "enabled of CheckRequirementEnabled, state S222");
                    this.Manager.Comment("reaching state \'S252\'");
                    bool temp792;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp792);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp792);
                    this.Manager.Comment("reaching state \'S282\'");
                    int temp827 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker11)));
                    if ((temp827 == 0)) {
                        this.Manager.Comment("reaching state \'S339\'");
                        bool temp793;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp793);
                        this.Manager.Comment("reaching state \'S399\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp793, "enabled of CheckRequirementEnabled, state S399");
                        this.Manager.Comment("reaching state \'S459\'");
                        bool temp794;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp794);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp794);
                        this.Manager.Comment("reaching state \'S519\'");
                        int temp809 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker10)));
                        if ((temp809 == 0)) {
                            this.Manager.Comment("reaching state \'S633\'");
                            bool temp795;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp795);
                            this.Manager.Comment("reaching state \'S753\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp795, "enabled of CheckRequirementEnabled, state S753");
                            this.Manager.Comment("reaching state \'S873\'");
                            bool temp796;
                            bool temp797;
                            bool temp798;
                            bool temp799;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp800;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp796, out temp797, out temp798, out temp799, out temp800);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp796, temp797, temp798, temp799, temp800);
                            this.Manager.Comment("reaching state \'S993\'");
                            int temp801 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker9)));
                            if ((temp801 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1113();
                                goto label115;
                            }
                            if ((temp801 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1113();
                                goto label115;
                            }
                            throw new InvalidOperationException("never reached");
                        label115:
;
                            goto label117;
                        }
                        if ((temp809 == 1)) {
                            this.Manager.Comment("reaching state \'S634\'");
                            bool temp802;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp802);
                            this.Manager.Comment("reaching state \'S754\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp802, "enabled of CheckRequirementEnabled, state S754");
                            this.Manager.Comment("reaching state \'S874\'");
                            bool temp803;
                            bool temp804;
                            bool temp805;
                            bool temp806;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp807;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp803, out temp804, out temp805, out temp806, out temp807);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp803, temp804, temp805, temp806, temp807);
                            this.Manager.Comment("reaching state \'S994\'");
                            int temp808 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker10)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker11)));
                            if ((temp808 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1114();
                                goto label116;
                            }
                            if ((temp808 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1114();
                                goto label116;
                            }
                            throw new InvalidOperationException("never reached");
                        label116:
;
                            goto label117;
                        }
                        throw new InvalidOperationException("never reached");
                    label117:
;
                        goto label121;
                    }
                    if ((temp827 == 1)) {
                        this.Manager.Comment("reaching state \'S340\'");
                        bool temp810;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp810);
                        this.Manager.Comment("reaching state \'S400\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp810, "enabled of CheckRequirementEnabled, state S400");
                        this.Manager.Comment("reaching state \'S460\'");
                        bool temp811;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp811);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp811);
                        this.Manager.Comment("reaching state \'S520\'");
                        int temp826 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker13)));
                        if ((temp826 == 0)) {
                            this.Manager.Comment("reaching state \'S635\'");
                            bool temp812;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp812);
                            this.Manager.Comment("reaching state \'S755\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp812, "enabled of CheckRequirementEnabled, state S755");
                            this.Manager.Comment("reaching state \'S875\'");
                            bool temp813;
                            bool temp814;
                            bool temp815;
                            bool temp816;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp817;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp813, out temp814, out temp815, out temp816, out temp817);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp813, temp814, temp815, temp816, temp817);
                            this.Manager.Comment("reaching state \'S995\'");
                            int temp818 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker13)));
                            if ((temp818 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1115();
                                goto label118;
                            }
                            if ((temp818 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1115();
                                goto label118;
                            }
                            throw new InvalidOperationException("never reached");
                        label118:
;
                            goto label120;
                        }
                        if ((temp826 == 1)) {
                            this.Manager.Comment("reaching state \'S636\'");
                            bool temp819;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp819);
                            this.Manager.Comment("reaching state \'S756\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp819, "enabled of CheckRequirementEnabled, state S756");
                            this.Manager.Comment("reaching state \'S876\'");
                            bool temp820;
                            bool temp821;
                            bool temp822;
                            bool temp823;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp824;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp820, out temp821, out temp822, out temp823, out temp824);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp820, temp821, temp822, temp823, temp824);
                            this.Manager.Comment("reaching state \'S996\'");
                            int temp825 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker14)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker15)));
                            if ((temp825 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1116();
                                goto label119;
                            }
                            if ((temp825 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1116();
                                goto label119;
                            }
                            throw new InvalidOperationException("never reached");
                        label119:
;
                            goto label120;
                        }
                        throw new InvalidOperationException("never reached");
                    label120:
;
                        goto label121;
                    }
                    throw new InvalidOperationException("never reached");
                label121:
;
                    goto label122;
                }
                throw new InvalidOperationException("never reached");
            label122:
;
                goto label123;
            }
            if ((temp829 == 1)) {
                this.Manager.Comment("reaching state \'S57\'");
                goto label123;
            }
            throw new InvalidOperationException("never reached");
        label123:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S27");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S163");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S281");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S517");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S989");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S989");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S989");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S989");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S989");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R5010" +
                        "1");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R50101");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1109() {
            this.Manager.Comment("reaching state \'S1109\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker1(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S989");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S989");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S989");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S989");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S989");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R5010" +
                        "1");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R50101");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S517");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker2(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S990");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S990");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S990");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S990");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S990");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R5010" +
                        "1");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R50101");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1110() {
            this.Manager.Comment("reaching state \'S1110\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker3(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S990");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S990");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S990");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S990");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S990");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R5010" +
                        "1");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R50101");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S281");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S518");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker4(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S991");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S991");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S991");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S991");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S991");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R8670" +
                        "4, MS-OXCPRPT_R159");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R86704");
            this.Manager.Checkpoint("MS-OXCPRPT_R159");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1111() {
            this.Manager.Comment("reaching state \'S1111\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker5(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S991");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S991");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S991");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S991");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S991");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R8670" +
                        "4, MS-OXCPRPT_R159");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R86704");
            this.Manager.Checkpoint("MS-OXCPRPT_R159");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S518");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker6(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S992");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S992");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S992");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S992");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S992");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R8670" +
                        "4, MS-OXCPRPT_R159");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R86704");
            this.Manager.Checkpoint("MS-OXCPRPT_R159");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1112() {
            this.Manager.Comment("reaching state \'S1112\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker7(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S992");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S992");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S992");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S992");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S992");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R8670" +
                        "4, MS-OXCPRPT_R159");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R86704");
            this.Manager.Checkpoint("MS-OXCPRPT_R159");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S163");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S282");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S519");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker8(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S993");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S993");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S993");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S993");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S993");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R5010" +
                        "1");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R50101");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1113() {
            this.Manager.Comment("reaching state \'S1113\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker9(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S993");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S993");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S993");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S993");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S993");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R5010" +
                        "1");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R50101");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S519");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker10(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S994");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S994");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S994");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S994");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S994");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R5010" +
                        "1");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R50101");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1114() {
            this.Manager.Comment("reaching state \'S1114\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker11(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S994");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S994");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S994");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S994");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S994");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R5010" +
                        "1");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R50101");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S282");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S520");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker12(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S995");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S995");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S995");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S995");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S995");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R8670" +
                        "4, MS-OXCPRPT_R159");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R86704");
            this.Manager.Checkpoint("MS-OXCPRPT_R159");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1115() {
            this.Manager.Comment("reaching state \'S1115\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker13(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S995");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S995");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S995");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S995");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S995");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R8670" +
                        "4, MS-OXCPRPT_R159");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R86704");
            this.Manager.Checkpoint("MS-OXCPRPT_R159");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S520");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker14(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S996");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S996");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S996");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S996");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S996");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R8670" +
                        "4, MS-OXCPRPT_R159");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R86704");
            this.Manager.Checkpoint("MS-OXCPRPT_R159");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1116() {
            this.Manager.Comment("reaching state \'S1116\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10RopCopyPropertiesMethodChecker15(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S996");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S996");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S996");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S996");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S996");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R265, MS-OXCPRPT_R8670" +
                        "4, MS-OXCPRPT_R159");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R265");
            this.Manager.Checkpoint("MS-OXCPRPT_R86704");
            this.Manager.Checkpoint("MS-OXCPRPT_R159");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite10CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S27");
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11");
            this.Manager.Comment("reaching state \'S28\'");
            bool temp830;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp830);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp830);
            this.Manager.Comment("reaching state \'S29\'");
            int temp903 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp903 == 0)) {
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S74\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S89\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S104\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S119\'");
                this.Manager.Comment("executing step \'call GetObject(Message,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S134\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S149\'");
                bool temp831;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86701,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86701, out temp831);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp831);
                this.Manager.Comment("reaching state \'S164\'");
                int temp902 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker7)));
                if ((temp902 == 0)) {
                    this.Manager.Comment("reaching state \'S193\'");
                    bool temp832;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp832);
                    this.Manager.Comment("reaching state \'S223\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp832, "enabled of CheckRequirementEnabled, state S223");
                    this.Manager.Comment("reaching state \'S253\'");
                    bool temp833;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp833);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp833);
                    this.Manager.Comment("reaching state \'S283\'");
                    int temp866 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker4)));
                    if ((temp866 == 0)) {
                        this.Manager.Comment("reaching state \'S341\'");
                        bool temp834;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp834);
                        this.Manager.Comment("reaching state \'S401\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp834, "enabled of CheckRequirementEnabled, state S401");
                        this.Manager.Comment("reaching state \'S461\'");
                        bool temp835;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp835);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp835);
                        this.Manager.Comment("reaching state \'S521\'");
                        int temp849 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker3)));
                        if ((temp849 == 0)) {
                            this.Manager.Comment("reaching state \'S637\'");
                            bool temp836;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp836);
                            this.Manager.Comment("reaching state \'S757\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp836, "enabled of CheckRequirementEnabled, state S757");
                            this.Manager.Comment("reaching state \'S877\'");
                            bool temp837;
                            bool temp838;
                            bool temp839;
                            bool temp840;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp841;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp837, out temp838, out temp839, out temp840, out temp841);
                            this.Manager.Comment("reaching state \'S997\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out InvalidParameter]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp837, "isPropertiesDeleted of RopCopyPropertiesMethod, state S997");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp838, "isChangedInDB of RopCopyPropertiesMethod, state S997");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp839, "isOverwriteDestination of RopCopyPropertiesMethod, state S997");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp840, "isReturnedRopProgress of RopCopyPropertiesMethod, state S997");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, temp841, "error of RopCopyPropertiesMethod, state S997");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R88001");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R88001");
                            this.Manager.Comment("reaching state \'S1117\'");
                            goto label125;
                        }
                        if ((temp849 == 1)) {
                            this.Manager.Comment("reaching state \'S638\'");
                            bool temp842;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp842);
                            this.Manager.Comment("reaching state \'S758\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp842, "enabled of CheckRequirementEnabled, state S758");
                            this.Manager.Comment("reaching state \'S878\'");
                            bool temp843;
                            bool temp844;
                            bool temp845;
                            bool temp846;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp847;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp843, out temp844, out temp845, out temp846, out temp847);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp843, temp844, temp845, temp846, temp847);
                            this.Manager.Comment("reaching state \'S998\'");
                            int temp848 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker3)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker4)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker6)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker7)));
                            if ((temp848 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1118();
                                goto label124;
                            }
                            if ((temp848 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1118();
                                goto label124;
                            }
                            if ((temp848 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1118();
                                goto label124;
                            }
                            if ((temp848 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1118();
                                goto label124;
                            }
                            if ((temp848 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1118();
                                goto label124;
                            }
                            if ((temp848 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1118();
                                goto label124;
                            }
                            if ((temp848 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1118();
                                goto label124;
                            }
                            if ((temp848 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1118();
                                goto label124;
                            }
                            throw new InvalidOperationException("never reached");
                        label124:
;
                            goto label125;
                        }
                        throw new InvalidOperationException("never reached");
                    label125:
;
                        goto label128;
                    }
                    if ((temp866 == 1)) {
                        this.Manager.Comment("reaching state \'S342\'");
                        bool temp850;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp850);
                        this.Manager.Comment("reaching state \'S402\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp850, "enabled of CheckRequirementEnabled, state S402");
                        this.Manager.Comment("reaching state \'S462\'");
                        bool temp851;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp851);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp851);
                        this.Manager.Comment("reaching state \'S522\'");
                        int temp865 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker6)));
                        if ((temp865 == 0)) {
                            this.Manager.Comment("reaching state \'S639\'");
                            bool temp852;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp852);
                            this.Manager.Comment("reaching state \'S759\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp852, "enabled of CheckRequirementEnabled, state S759");
                            this.Manager.Comment("reaching state \'S879\'");
                            bool temp853;
                            bool temp854;
                            bool temp855;
                            bool temp856;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp857;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp853, out temp854, out temp855, out temp856, out temp857);
                            this.Manager.Comment("reaching state \'S999\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out InvalidParameter]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp853, "isPropertiesDeleted of RopCopyPropertiesMethod, state S999");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp854, "isChangedInDB of RopCopyPropertiesMethod, state S999");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp855, "isOverwriteDestination of RopCopyPropertiesMethod, state S999");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp856, "isReturnedRopProgress of RopCopyPropertiesMethod, state S999");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, temp857, "error of RopCopyPropertiesMethod, state S999");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R88001");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R88001");
                            this.Manager.Comment("reaching state \'S1119\'");
                            goto label127;
                        }
                        if ((temp865 == 1)) {
                            this.Manager.Comment("reaching state \'S640\'");
                            bool temp858;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp858);
                            this.Manager.Comment("reaching state \'S760\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp858, "enabled of CheckRequirementEnabled, state S760");
                            this.Manager.Comment("reaching state \'S880\'");
                            bool temp859;
                            bool temp860;
                            bool temp861;
                            bool temp862;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp863;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp859, out temp860, out temp861, out temp862, out temp863);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp859, temp860, temp861, temp862, temp863);
                            this.Manager.Comment("reaching state \'S1000\'");
                            int temp864 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker10)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker11)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker13)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker14)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker15)));
                            if ((temp864 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1120();
                                goto label126;
                            }
                            if ((temp864 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1120();
                                goto label126;
                            }
                            if ((temp864 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1120();
                                goto label126;
                            }
                            if ((temp864 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1120();
                                goto label126;
                            }
                            if ((temp864 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1120();
                                goto label126;
                            }
                            if ((temp864 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1120();
                                goto label126;
                            }
                            if ((temp864 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1120();
                                goto label126;
                            }
                            if ((temp864 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1120();
                                goto label126;
                            }
                            throw new InvalidOperationException("never reached");
                        label126:
;
                            goto label127;
                        }
                        throw new InvalidOperationException("never reached");
                    label127:
;
                        goto label128;
                    }
                    throw new InvalidOperationException("never reached");
                label128:
;
                    goto label134;
                }
                if ((temp902 == 1)) {
                    this.Manager.Comment("reaching state \'S194\'");
                    bool temp867;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp867);
                    this.Manager.Comment("reaching state \'S224\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp867, "enabled of CheckRequirementEnabled, state S224");
                    this.Manager.Comment("reaching state \'S254\'");
                    bool temp868;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp868);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp868);
                    this.Manager.Comment("reaching state \'S284\'");
                    int temp901 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker11)));
                    if ((temp901 == 0)) {
                        this.Manager.Comment("reaching state \'S343\'");
                        bool temp869;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp869);
                        this.Manager.Comment("reaching state \'S403\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp869, "enabled of CheckRequirementEnabled, state S403");
                        this.Manager.Comment("reaching state \'S463\'");
                        bool temp870;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp870);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp870);
                        this.Manager.Comment("reaching state \'S523\'");
                        int temp884 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker10)));
                        if ((temp884 == 0)) {
                            this.Manager.Comment("reaching state \'S641\'");
                            bool temp871;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp871);
                            this.Manager.Comment("reaching state \'S761\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp871, "enabled of CheckRequirementEnabled, state S761");
                            this.Manager.Comment("reaching state \'S881\'");
                            bool temp872;
                            bool temp873;
                            bool temp874;
                            bool temp875;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp876;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp872, out temp873, out temp874, out temp875, out temp876);
                            this.Manager.Comment("reaching state \'S1001\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out InvalidParameter]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp872, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1001");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp873, "isChangedInDB of RopCopyPropertiesMethod, state S1001");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp874, "isOverwriteDestination of RopCopyPropertiesMethod, state S1001");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp875, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1001");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, temp876, "error of RopCopyPropertiesMethod, state S1001");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R88001");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R88001");
                            this.Manager.Comment("reaching state \'S1121\'");
                            goto label130;
                        }
                        if ((temp884 == 1)) {
                            this.Manager.Comment("reaching state \'S642\'");
                            bool temp877;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp877);
                            this.Manager.Comment("reaching state \'S762\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp877, "enabled of CheckRequirementEnabled, state S762");
                            this.Manager.Comment("reaching state \'S882\'");
                            bool temp878;
                            bool temp879;
                            bool temp880;
                            bool temp881;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp882;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp878, out temp879, out temp880, out temp881, out temp882);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp878, temp879, temp880, temp881, temp882);
                            this.Manager.Comment("reaching state \'S1002\'");
                            int temp883 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker16)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker17)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker18)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker19)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker20)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker21)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker22)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker23)));
                            if ((temp883 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1122();
                                goto label129;
                            }
                            if ((temp883 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1122();
                                goto label129;
                            }
                            if ((temp883 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1122();
                                goto label129;
                            }
                            if ((temp883 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1122();
                                goto label129;
                            }
                            if ((temp883 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1122();
                                goto label129;
                            }
                            if ((temp883 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1122();
                                goto label129;
                            }
                            if ((temp883 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1122();
                                goto label129;
                            }
                            if ((temp883 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1122();
                                goto label129;
                            }
                            throw new InvalidOperationException("never reached");
                        label129:
;
                            goto label130;
                        }
                        throw new InvalidOperationException("never reached");
                    label130:
;
                        goto label133;
                    }
                    if ((temp901 == 1)) {
                        this.Manager.Comment("reaching state \'S344\'");
                        bool temp885;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp885);
                        this.Manager.Comment("reaching state \'S404\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp885, "enabled of CheckRequirementEnabled, state S404");
                        this.Manager.Comment("reaching state \'S464\'");
                        bool temp886;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp886);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp886);
                        this.Manager.Comment("reaching state \'S524\'");
                        int temp900 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker13)));
                        if ((temp900 == 0)) {
                            this.Manager.Comment("reaching state \'S643\'");
                            bool temp887;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp887);
                            this.Manager.Comment("reaching state \'S763\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp887, "enabled of CheckRequirementEnabled, state S763");
                            this.Manager.Comment("reaching state \'S883\'");
                            bool temp888;
                            bool temp889;
                            bool temp890;
                            bool temp891;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp892;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp888, out temp889, out temp890, out temp891, out temp892);
                            this.Manager.Comment("reaching state \'S1003\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out InvalidParameter]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp888, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1003");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp889, "isChangedInDB of RopCopyPropertiesMethod, state S1003");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp890, "isOverwriteDestination of RopCopyPropertiesMethod, state S1003");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp891, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1003");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, temp892, "error of RopCopyPropertiesMethod, state S1003");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R88001");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R88001");
                            this.Manager.Comment("reaching state \'S1123\'");
                            goto label132;
                        }
                        if ((temp900 == 1)) {
                            this.Manager.Comment("reaching state \'S644\'");
                            bool temp893;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp893);
                            this.Manager.Comment("reaching state \'S764\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp893, "enabled of CheckRequirementEnabled, state S764");
                            this.Manager.Comment("reaching state \'S884\'");
                            bool temp894;
                            bool temp895;
                            bool temp896;
                            bool temp897;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp898;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp894, out temp895, out temp896, out temp897, out temp898);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp894, temp895, temp896, temp897, temp898);
                            this.Manager.Comment("reaching state \'S1004\'");
                            int temp899 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker24)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker25)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker26)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker27)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker28)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker29)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker30)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker31)));
                            if ((temp899 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1124();
                                goto label131;
                            }
                            if ((temp899 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1124();
                                goto label131;
                            }
                            if ((temp899 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1124();
                                goto label131;
                            }
                            if ((temp899 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1124();
                                goto label131;
                            }
                            if ((temp899 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1124();
                                goto label131;
                            }
                            if ((temp899 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1124();
                                goto label131;
                            }
                            if ((temp899 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1124();
                                goto label131;
                            }
                            if ((temp899 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1124();
                                goto label131;
                            }
                            throw new InvalidOperationException("never reached");
                        label131:
;
                            goto label132;
                        }
                        throw new InvalidOperationException("never reached");
                    label132:
;
                        goto label133;
                    }
                    throw new InvalidOperationException("never reached");
                label133:
;
                    goto label134;
                }
                throw new InvalidOperationException("never reached");
            label134:
;
                goto label135;
            }
            if ((temp903 == 1)) {
                this.Manager.Comment("reaching state \'S59\'");
                goto label135;
            }
            throw new InvalidOperationException("never reached");
        label135:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S29");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S164");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S283");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S521");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S521");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S998");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1118() {
            this.Manager.Comment("reaching state \'S1118\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker1(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S998");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker2(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S998");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker3(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S998");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker4(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S998");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker5(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S998");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker6(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S998");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker7(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S998");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S998");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S283");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S522");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S522");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker8(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1000");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1120() {
            this.Manager.Comment("reaching state \'S1120\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker9(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1000");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker10(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1000");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker11(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1000");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker12(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1000");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker13(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1000");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker14(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1000");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker15(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1000");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1000");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S164");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S284");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S523");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S523");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker16(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1002");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1122() {
            this.Manager.Comment("reaching state \'S1122\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker17(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1002");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker18(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1002");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker19(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1002");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker20(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1002");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker21(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1002");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker22(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1002");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker23(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1002");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1002");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S284");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S524");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S524");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker24(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1004");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1124() {
            this.Manager.Comment("reaching state \'S1124\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker25(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1004");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker26(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1004");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker27(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1004");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker28(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1004");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker29(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1004");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker30(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1004");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11RopCopyPropertiesMethodChecker31(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S1004");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S1004");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R86705");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
            this.Manager.Checkpoint("MS-OXCPRPT_R86705");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite11CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S29");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp904;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp904);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp904);
            this.Manager.Comment("reaching state \'S5\'");
            int temp981 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp981 == 0)) {
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S62\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S77\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S92\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S107\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S122\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S137\'");
                bool temp905;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86701,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86701, out temp905);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp905);
                this.Manager.Comment("reaching state \'S152\'");
                int temp980 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker7)));
                if ((temp980 == 0)) {
                    this.Manager.Comment("reaching state \'S169\'");
                    bool temp906;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp906);
                    this.Manager.Comment("reaching state \'S199\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp906, "enabled of CheckRequirementEnabled, state S199");
                    this.Manager.Comment("reaching state \'S229\'");
                    bool temp907;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp907);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp907);
                    this.Manager.Comment("reaching state \'S259\'");
                    int temp942 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker4)));
                    if ((temp942 == 0)) {
                        this.Manager.Comment("reaching state \'S293\'");
                        bool temp908;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp908);
                        this.Manager.Comment("reaching state \'S353\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp908, "enabled of CheckRequirementEnabled, state S353");
                        this.Manager.Comment("reaching state \'S413\'");
                        bool temp909;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp909);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp909);
                        this.Manager.Comment("reaching state \'S473\'");
                        int temp924 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker3)));
                        if ((temp924 == 0)) {
                            this.Manager.Comment("reaching state \'S541\'");
                            bool temp910;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp910);
                            this.Manager.Comment("reaching state \'S661\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp910, "enabled of CheckRequirementEnabled, state S661");
                            this.Manager.Comment("reaching state \'S781\'");
                            bool temp911;
                            bool temp912;
                            bool temp913;
                            bool temp914;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp915;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp911, out temp912, out temp913, out temp914, out temp915);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp911, temp912, temp913, temp914, temp915);
                            this.Manager.Comment("reaching state \'S901\'");
                            int temp916 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker3)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker4)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker6)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker7)));
                            if ((temp916 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1021();
                                goto label136;
                            }
                            if ((temp916 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1021();
                                goto label136;
                            }
                            if ((temp916 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1021();
                                goto label136;
                            }
                            if ((temp916 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1021();
                                goto label136;
                            }
                            if ((temp916 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1021();
                                goto label136;
                            }
                            if ((temp916 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1021();
                                goto label136;
                            }
                            if ((temp916 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1021();
                                goto label136;
                            }
                            if ((temp916 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1021();
                                goto label136;
                            }
                            throw new InvalidOperationException("never reached");
                        label136:
;
                            goto label138;
                        }
                        if ((temp924 == 1)) {
                            this.Manager.Comment("reaching state \'S542\'");
                            bool temp917;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp917);
                            this.Manager.Comment("reaching state \'S662\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp917, "enabled of CheckRequirementEnabled, state S662");
                            this.Manager.Comment("reaching state \'S782\'");
                            bool temp918;
                            bool temp919;
                            bool temp920;
                            bool temp921;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp922;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp918, out temp919, out temp920, out temp921, out temp922);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp918, temp919, temp920, temp921, temp922);
                            this.Manager.Comment("reaching state \'S902\'");
                            int temp923 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker10)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker11)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker13)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker14)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker15)));
                            if ((temp923 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1022();
                                goto label137;
                            }
                            if ((temp923 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1022();
                                goto label137;
                            }
                            if ((temp923 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1022();
                                goto label137;
                            }
                            if ((temp923 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1022();
                                goto label137;
                            }
                            if ((temp923 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1022();
                                goto label137;
                            }
                            if ((temp923 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1022();
                                goto label137;
                            }
                            if ((temp923 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1022();
                                goto label137;
                            }
                            if ((temp923 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1022();
                                goto label137;
                            }
                            throw new InvalidOperationException("never reached");
                        label137:
;
                            goto label138;
                        }
                        throw new InvalidOperationException("never reached");
                    label138:
;
                        goto label142;
                    }
                    if ((temp942 == 1)) {
                        this.Manager.Comment("reaching state \'S294\'");
                        bool temp925;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp925);
                        this.Manager.Comment("reaching state \'S354\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp925, "enabled of CheckRequirementEnabled, state S354");
                        this.Manager.Comment("reaching state \'S414\'");
                        bool temp926;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp926);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp926);
                        this.Manager.Comment("reaching state \'S474\'");
                        int temp941 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker6)));
                        if ((temp941 == 0)) {
                            this.Manager.Comment("reaching state \'S543\'");
                            bool temp927;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp927);
                            this.Manager.Comment("reaching state \'S663\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp927, "enabled of CheckRequirementEnabled, state S663");
                            this.Manager.Comment("reaching state \'S783\'");
                            bool temp928;
                            bool temp929;
                            bool temp930;
                            bool temp931;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp932;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp928, out temp929, out temp930, out temp931, out temp932);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp928, temp929, temp930, temp931, temp932);
                            this.Manager.Comment("reaching state \'S903\'");
                            int temp933 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker16)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker17)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker18)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker19)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker20)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker21)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker22)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker23)));
                            if ((temp933 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1023();
                                goto label139;
                            }
                            if ((temp933 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1023();
                                goto label139;
                            }
                            if ((temp933 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1023();
                                goto label139;
                            }
                            if ((temp933 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1023();
                                goto label139;
                            }
                            if ((temp933 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1023();
                                goto label139;
                            }
                            if ((temp933 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1023();
                                goto label139;
                            }
                            if ((temp933 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1023();
                                goto label139;
                            }
                            if ((temp933 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1023();
                                goto label139;
                            }
                            throw new InvalidOperationException("never reached");
                        label139:
;
                            goto label141;
                        }
                        if ((temp941 == 1)) {
                            this.Manager.Comment("reaching state \'S544\'");
                            bool temp934;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp934);
                            this.Manager.Comment("reaching state \'S664\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp934, "enabled of CheckRequirementEnabled, state S664");
                            this.Manager.Comment("reaching state \'S784\'");
                            bool temp935;
                            bool temp936;
                            bool temp937;
                            bool temp938;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp939;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp935, out temp936, out temp937, out temp938, out temp939);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp935, temp936, temp937, temp938, temp939);
                            this.Manager.Comment("reaching state \'S904\'");
                            int temp940 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker24)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker25)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker26)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker27)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker28)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker29)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker30)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker31)));
                            if ((temp940 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1024();
                                goto label140;
                            }
                            if ((temp940 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1024();
                                goto label140;
                            }
                            if ((temp940 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1024();
                                goto label140;
                            }
                            if ((temp940 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1024();
                                goto label140;
                            }
                            if ((temp940 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1024();
                                goto label140;
                            }
                            if ((temp940 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1024();
                                goto label140;
                            }
                            if ((temp940 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1024();
                                goto label140;
                            }
                            if ((temp940 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1024();
                                goto label140;
                            }
                            throw new InvalidOperationException("never reached");
                        label140:
;
                            goto label141;
                        }
                        throw new InvalidOperationException("never reached");
                    label141:
;
                        goto label142;
                    }
                    throw new InvalidOperationException("never reached");
                label142:
;
                    goto label150;
                }
                if ((temp980 == 1)) {
                    this.Manager.Comment("reaching state \'S170\'");
                    bool temp943;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp943);
                    this.Manager.Comment("reaching state \'S200\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp943, "enabled of CheckRequirementEnabled, state S200");
                    this.Manager.Comment("reaching state \'S230\'");
                    bool temp944;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp944);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp944);
                    this.Manager.Comment("reaching state \'S260\'");
                    int temp979 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker11)));
                    if ((temp979 == 0)) {
                        this.Manager.Comment("reaching state \'S295\'");
                        bool temp945;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp945);
                        this.Manager.Comment("reaching state \'S355\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp945, "enabled of CheckRequirementEnabled, state S355");
                        this.Manager.Comment("reaching state \'S415\'");
                        bool temp946;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp946);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp946);
                        this.Manager.Comment("reaching state \'S475\'");
                        int temp961 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker10)));
                        if ((temp961 == 0)) {
                            this.Manager.Comment("reaching state \'S545\'");
                            bool temp947;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp947);
                            this.Manager.Comment("reaching state \'S665\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp947, "enabled of CheckRequirementEnabled, state S665");
                            this.Manager.Comment("reaching state \'S785\'");
                            bool temp948;
                            bool temp949;
                            bool temp950;
                            bool temp951;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp952;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp948, out temp949, out temp950, out temp951, out temp952);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp948, temp949, temp950, temp951, temp952);
                            this.Manager.Comment("reaching state \'S905\'");
                            int temp953 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker32)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker33)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker34)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker35)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker36)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker37)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker38)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker39)));
                            if ((temp953 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1025();
                                goto label143;
                            }
                            if ((temp953 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1025();
                                goto label143;
                            }
                            if ((temp953 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1025();
                                goto label143;
                            }
                            if ((temp953 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1025();
                                goto label143;
                            }
                            if ((temp953 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1025();
                                goto label143;
                            }
                            if ((temp953 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1025();
                                goto label143;
                            }
                            if ((temp953 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1025();
                                goto label143;
                            }
                            if ((temp953 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1025();
                                goto label143;
                            }
                            throw new InvalidOperationException("never reached");
                        label143:
;
                            goto label145;
                        }
                        if ((temp961 == 1)) {
                            this.Manager.Comment("reaching state \'S546\'");
                            bool temp954;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp954);
                            this.Manager.Comment("reaching state \'S666\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp954, "enabled of CheckRequirementEnabled, state S666");
                            this.Manager.Comment("reaching state \'S786\'");
                            bool temp955;
                            bool temp956;
                            bool temp957;
                            bool temp958;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp959;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp955, out temp956, out temp957, out temp958, out temp959);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp955, temp956, temp957, temp958, temp959);
                            this.Manager.Comment("reaching state \'S906\'");
                            int temp960 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker40)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker41)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker42)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker43)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker44)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker45)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker46)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker47)));
                            if ((temp960 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1026();
                                goto label144;
                            }
                            if ((temp960 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1026();
                                goto label144;
                            }
                            if ((temp960 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1026();
                                goto label144;
                            }
                            if ((temp960 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1026();
                                goto label144;
                            }
                            if ((temp960 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1026();
                                goto label144;
                            }
                            if ((temp960 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1026();
                                goto label144;
                            }
                            if ((temp960 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1026();
                                goto label144;
                            }
                            if ((temp960 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1026();
                                goto label144;
                            }
                            throw new InvalidOperationException("never reached");
                        label144:
;
                            goto label145;
                        }
                        throw new InvalidOperationException("never reached");
                    label145:
;
                        goto label149;
                    }
                    if ((temp979 == 1)) {
                        this.Manager.Comment("reaching state \'S296\'");
                        bool temp962;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp962);
                        this.Manager.Comment("reaching state \'S356\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp962, "enabled of CheckRequirementEnabled, state S356");
                        this.Manager.Comment("reaching state \'S416\'");
                        bool temp963;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp963);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp963);
                        this.Manager.Comment("reaching state \'S476\'");
                        int temp978 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker13)));
                        if ((temp978 == 0)) {
                            this.Manager.Comment("reaching state \'S547\'");
                            bool temp964;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp964);
                            this.Manager.Comment("reaching state \'S667\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp964, "enabled of CheckRequirementEnabled, state S667");
                            this.Manager.Comment("reaching state \'S787\'");
                            bool temp965;
                            bool temp966;
                            bool temp967;
                            bool temp968;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp969;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp965, out temp966, out temp967, out temp968, out temp969);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp965, temp966, temp967, temp968, temp969);
                            this.Manager.Comment("reaching state \'S907\'");
                            int temp970 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker48)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker49)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker50)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker51)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker52)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker53)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker54)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker55)));
                            if ((temp970 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1027();
                                goto label146;
                            }
                            if ((temp970 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1027();
                                goto label146;
                            }
                            if ((temp970 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1027();
                                goto label146;
                            }
                            if ((temp970 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1027();
                                goto label146;
                            }
                            if ((temp970 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1027();
                                goto label146;
                            }
                            if ((temp970 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1027();
                                goto label146;
                            }
                            if ((temp970 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1027();
                                goto label146;
                            }
                            if ((temp970 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1027();
                                goto label146;
                            }
                            throw new InvalidOperationException("never reached");
                        label146:
;
                            goto label148;
                        }
                        if ((temp978 == 1)) {
                            this.Manager.Comment("reaching state \'S548\'");
                            bool temp971;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp971);
                            this.Manager.Comment("reaching state \'S668\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp971, "enabled of CheckRequirementEnabled, state S668");
                            this.Manager.Comment("reaching state \'S788\'");
                            bool temp972;
                            bool temp973;
                            bool temp974;
                            bool temp975;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp976;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(NoOverWriteAndDestPropNull,True,True" +
                                    ",out _,out _,out _,out _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.NoOverWriteAndDestPropNull, true, true, out temp972, out temp973, out temp974, out temp975, out temp976);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp972, temp973, temp974, temp975, temp976);
                            this.Manager.Comment("reaching state \'S908\'");
                            int temp977 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker56)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker57)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker58)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker59)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker60)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker61)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker62)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker63)));
                            if ((temp977 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1028();
                                goto label147;
                            }
                            if ((temp977 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1028();
                                goto label147;
                            }
                            if ((temp977 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1028();
                                goto label147;
                            }
                            if ((temp977 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1028();
                                goto label147;
                            }
                            if ((temp977 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1028();
                                goto label147;
                            }
                            if ((temp977 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1028();
                                goto label147;
                            }
                            if ((temp977 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1028();
                                goto label147;
                            }
                            if ((temp977 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1028();
                                goto label147;
                            }
                            throw new InvalidOperationException("never reached");
                        label147:
;
                            goto label148;
                        }
                        throw new InvalidOperationException("never reached");
                    label148:
;
                        goto label149;
                    }
                    throw new InvalidOperationException("never reached");
                label149:
;
                    goto label150;
                }
                throw new InvalidOperationException("never reached");
            label150:
;
                goto label151;
            }
            if ((temp981 == 1)) {
                this.Manager.Comment("reaching state \'S35\'");
                goto label151;
            }
            throw new InvalidOperationException("never reached");
        label151:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S152");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S259");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S473");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S901");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1021() {
            this.Manager.Comment("reaching state \'S1021\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker1(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S901");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker2(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S901");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker3(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S901");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker4(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S901");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker5(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S901");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker6(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S901");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker7(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S901");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S901");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S473");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker8(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S902");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1022() {
            this.Manager.Comment("reaching state \'S1022\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker9(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S902");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker10(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S902");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker11(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S902");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker12(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S902");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker13(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S902");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker14(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S902");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker15(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S902");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S902");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S259");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S474");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker16(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S903");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1023() {
            this.Manager.Comment("reaching state \'S1023\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker17(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S903");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker18(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S903");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker19(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S903");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker20(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S903");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker21(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S903");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker22(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S903");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker23(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S903");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S903");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S474");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker24(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S904");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1024() {
            this.Manager.Comment("reaching state \'S1024\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker25(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S904");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker26(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S904");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker27(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S904");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker28(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S904");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker29(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S904");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker30(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S904");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker31(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S904");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S904");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S152");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S260");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S475");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker32(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S905");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1025() {
            this.Manager.Comment("reaching state \'S1025\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker33(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S905");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker34(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S905");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker35(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S905");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker36(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S905");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker37(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S905");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker38(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S905");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker39(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S905");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S905");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S475");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker40(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S906");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1026() {
            this.Manager.Comment("reaching state \'S1026\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker41(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S906");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker42(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S906");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker43(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S906");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker44(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S906");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker45(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S906");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker46(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S906");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker47(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S906");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S906");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S260");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S476");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker48(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S907");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1027() {
            this.Manager.Comment("reaching state \'S1027\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker49(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S907");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker50(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S907");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker51(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S907");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker52(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S907");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker53(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S907");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker54(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S907");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker55(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S907");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S907");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S476");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker56(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S908");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1028() {
            this.Manager.Comment("reaching state \'S1028\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker57(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S908");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker58(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S908");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker59(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S908");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker60(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S908");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker61(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S908");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker62(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S908");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12RopCopyPropertiesMethodChecker63(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S908");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S908");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite12CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13");
            this.Manager.Comment("reaching state \'S6\'");
            bool temp982;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp982);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp982);
            this.Manager.Comment("reaching state \'S7\'");
            int temp1059 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp1059 == 0)) {
                this.Manager.Comment("reaching state \'S36\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S63\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S78\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S93\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S108\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S123\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S138\'");
                bool temp983;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86701,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86701, out temp983);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp983);
                this.Manager.Comment("reaching state \'S153\'");
                int temp1058 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker7)));
                if ((temp1058 == 0)) {
                    this.Manager.Comment("reaching state \'S171\'");
                    bool temp984;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp984);
                    this.Manager.Comment("reaching state \'S201\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp984, "enabled of CheckRequirementEnabled, state S201");
                    this.Manager.Comment("reaching state \'S231\'");
                    bool temp985;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp985);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp985);
                    this.Manager.Comment("reaching state \'S261\'");
                    int temp1020 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker4)));
                    if ((temp1020 == 0)) {
                        this.Manager.Comment("reaching state \'S297\'");
                        bool temp986;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp986);
                        this.Manager.Comment("reaching state \'S357\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp986, "enabled of CheckRequirementEnabled, state S357");
                        this.Manager.Comment("reaching state \'S417\'");
                        bool temp987;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp987);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp987);
                        this.Manager.Comment("reaching state \'S477\'");
                        int temp1002 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker3)));
                        if ((temp1002 == 0)) {
                            this.Manager.Comment("reaching state \'S549\'");
                            bool temp988;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp988);
                            this.Manager.Comment("reaching state \'S669\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp988, "enabled of CheckRequirementEnabled, state S669");
                            this.Manager.Comment("reaching state \'S789\'");
                            bool temp989;
                            bool temp990;
                            bool temp991;
                            bool temp992;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp993;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp989, out temp990, out temp991, out temp992, out temp993);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp989, temp990, temp991, temp992, temp993);
                            this.Manager.Comment("reaching state \'S909\'");
                            int temp994 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker3)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker4)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker6)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker7)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker9)));
                            if ((temp994 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1029();
                                goto label152;
                            }
                            if ((temp994 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1029();
                                goto label152;
                            }
                            if ((temp994 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1029();
                                goto label152;
                            }
                            if ((temp994 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1029();
                                goto label152;
                            }
                            if ((temp994 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1029();
                                goto label152;
                            }
                            if ((temp994 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1029();
                                goto label152;
                            }
                            if ((temp994 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1029();
                                goto label152;
                            }
                            if ((temp994 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1029();
                                goto label152;
                            }
                            if ((temp994 == 8)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1029();
                                goto label152;
                            }
                            if ((temp994 == 9)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1029();
                                goto label152;
                            }
                            throw new InvalidOperationException("never reached");
                        label152:
;
                            goto label154;
                        }
                        if ((temp1002 == 1)) {
                            this.Manager.Comment("reaching state \'S550\'");
                            bool temp995;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp995);
                            this.Manager.Comment("reaching state \'S670\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp995, "enabled of CheckRequirementEnabled, state S670");
                            this.Manager.Comment("reaching state \'S790\'");
                            bool temp996;
                            bool temp997;
                            bool temp998;
                            bool temp999;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp1000;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp996, out temp997, out temp998, out temp999, out temp1000);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp996, temp997, temp998, temp999, temp1000);
                            this.Manager.Comment("reaching state \'S910\'");
                            int temp1001 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker10)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker11)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker13)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker14)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker15)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker16)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker17)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker18)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker19)));
                            if ((temp1001 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1030();
                                goto label153;
                            }
                            if ((temp1001 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1030();
                                goto label153;
                            }
                            if ((temp1001 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1030();
                                goto label153;
                            }
                            if ((temp1001 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1030();
                                goto label153;
                            }
                            if ((temp1001 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1030();
                                goto label153;
                            }
                            if ((temp1001 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1030();
                                goto label153;
                            }
                            if ((temp1001 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1030();
                                goto label153;
                            }
                            if ((temp1001 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1030();
                                goto label153;
                            }
                            if ((temp1001 == 8)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1030();
                                goto label153;
                            }
                            if ((temp1001 == 9)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1030();
                                goto label153;
                            }
                            throw new InvalidOperationException("never reached");
                        label153:
;
                            goto label154;
                        }
                        throw new InvalidOperationException("never reached");
                    label154:
;
                        goto label158;
                    }
                    if ((temp1020 == 1)) {
                        this.Manager.Comment("reaching state \'S298\'");
                        bool temp1003;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp1003);
                        this.Manager.Comment("reaching state \'S358\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1003, "enabled of CheckRequirementEnabled, state S358");
                        this.Manager.Comment("reaching state \'S418\'");
                        bool temp1004;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp1004);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1004);
                        this.Manager.Comment("reaching state \'S478\'");
                        int temp1019 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker6)));
                        if ((temp1019 == 0)) {
                            this.Manager.Comment("reaching state \'S551\'");
                            bool temp1005;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp1005);
                            this.Manager.Comment("reaching state \'S671\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1005, "enabled of CheckRequirementEnabled, state S671");
                            this.Manager.Comment("reaching state \'S791\'");
                            bool temp1006;
                            bool temp1007;
                            bool temp1008;
                            bool temp1009;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp1010;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp1006, out temp1007, out temp1008, out temp1009, out temp1010);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp1006, temp1007, temp1008, temp1009, temp1010);
                            this.Manager.Comment("reaching state \'S911\'");
                            int temp1011 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker20)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker21)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker22)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker23)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker24)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker25)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker26)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker27)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker28)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker29)));
                            if ((temp1011 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1031();
                                goto label155;
                            }
                            if ((temp1011 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1031();
                                goto label155;
                            }
                            if ((temp1011 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1031();
                                goto label155;
                            }
                            if ((temp1011 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1031();
                                goto label155;
                            }
                            if ((temp1011 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1031();
                                goto label155;
                            }
                            if ((temp1011 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1031();
                                goto label155;
                            }
                            if ((temp1011 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1031();
                                goto label155;
                            }
                            if ((temp1011 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1031();
                                goto label155;
                            }
                            if ((temp1011 == 8)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1031();
                                goto label155;
                            }
                            if ((temp1011 == 9)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1031();
                                goto label155;
                            }
                            throw new InvalidOperationException("never reached");
                        label155:
;
                            goto label157;
                        }
                        if ((temp1019 == 1)) {
                            this.Manager.Comment("reaching state \'S552\'");
                            bool temp1012;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp1012);
                            this.Manager.Comment("reaching state \'S672\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1012, "enabled of CheckRequirementEnabled, state S672");
                            this.Manager.Comment("reaching state \'S792\'");
                            bool temp1013;
                            bool temp1014;
                            bool temp1015;
                            bool temp1016;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp1017;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp1013, out temp1014, out temp1015, out temp1016, out temp1017);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp1013, temp1014, temp1015, temp1016, temp1017);
                            this.Manager.Comment("reaching state \'S912\'");
                            int temp1018 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker30)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker31)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker32)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker33)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker34)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker35)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker36)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker37)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker38)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker39)));
                            if ((temp1018 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1032();
                                goto label156;
                            }
                            if ((temp1018 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1032();
                                goto label156;
                            }
                            if ((temp1018 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1032();
                                goto label156;
                            }
                            if ((temp1018 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1032();
                                goto label156;
                            }
                            if ((temp1018 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1032();
                                goto label156;
                            }
                            if ((temp1018 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1032();
                                goto label156;
                            }
                            if ((temp1018 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1032();
                                goto label156;
                            }
                            if ((temp1018 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1032();
                                goto label156;
                            }
                            if ((temp1018 == 8)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1032();
                                goto label156;
                            }
                            if ((temp1018 == 9)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1032();
                                goto label156;
                            }
                            throw new InvalidOperationException("never reached");
                        label156:
;
                            goto label157;
                        }
                        throw new InvalidOperationException("never reached");
                    label157:
;
                        goto label158;
                    }
                    throw new InvalidOperationException("never reached");
                label158:
;
                    goto label166;
                }
                if ((temp1058 == 1)) {
                    this.Manager.Comment("reaching state \'S172\'");
                    bool temp1021;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp1021);
                    this.Manager.Comment("reaching state \'S202\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1021, "enabled of CheckRequirementEnabled, state S202");
                    this.Manager.Comment("reaching state \'S232\'");
                    bool temp1022;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp1022);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1022);
                    this.Manager.Comment("reaching state \'S262\'");
                    int temp1057 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker11)));
                    if ((temp1057 == 0)) {
                        this.Manager.Comment("reaching state \'S299\'");
                        bool temp1023;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp1023);
                        this.Manager.Comment("reaching state \'S359\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1023, "enabled of CheckRequirementEnabled, state S359");
                        this.Manager.Comment("reaching state \'S419\'");
                        bool temp1024;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp1024);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1024);
                        this.Manager.Comment("reaching state \'S479\'");
                        int temp1039 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker10)));
                        if ((temp1039 == 0)) {
                            this.Manager.Comment("reaching state \'S553\'");
                            bool temp1025;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp1025);
                            this.Manager.Comment("reaching state \'S673\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1025, "enabled of CheckRequirementEnabled, state S673");
                            this.Manager.Comment("reaching state \'S793\'");
                            bool temp1026;
                            bool temp1027;
                            bool temp1028;
                            bool temp1029;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp1030;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp1026, out temp1027, out temp1028, out temp1029, out temp1030);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp1026, temp1027, temp1028, temp1029, temp1030);
                            this.Manager.Comment("reaching state \'S913\'");
                            int temp1031 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker40)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker41)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker42)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker43)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker44)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker45)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker46)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker47)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker48)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker49)));
                            if ((temp1031 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1033();
                                goto label159;
                            }
                            if ((temp1031 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1033();
                                goto label159;
                            }
                            if ((temp1031 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1033();
                                goto label159;
                            }
                            if ((temp1031 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1033();
                                goto label159;
                            }
                            if ((temp1031 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1033();
                                goto label159;
                            }
                            if ((temp1031 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1033();
                                goto label159;
                            }
                            if ((temp1031 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1033();
                                goto label159;
                            }
                            if ((temp1031 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1033();
                                goto label159;
                            }
                            if ((temp1031 == 8)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1033();
                                goto label159;
                            }
                            if ((temp1031 == 9)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1033();
                                goto label159;
                            }
                            throw new InvalidOperationException("never reached");
                        label159:
;
                            goto label161;
                        }
                        if ((temp1039 == 1)) {
                            this.Manager.Comment("reaching state \'S554\'");
                            bool temp1032;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp1032);
                            this.Manager.Comment("reaching state \'S674\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1032, "enabled of CheckRequirementEnabled, state S674");
                            this.Manager.Comment("reaching state \'S794\'");
                            bool temp1033;
                            bool temp1034;
                            bool temp1035;
                            bool temp1036;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp1037;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp1033, out temp1034, out temp1035, out temp1036, out temp1037);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp1033, temp1034, temp1035, temp1036, temp1037);
                            this.Manager.Comment("reaching state \'S914\'");
                            int temp1038 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker50)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker51)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker52)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker53)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker54)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker55)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker56)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker57)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker58)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker59)));
                            if ((temp1038 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1034();
                                goto label160;
                            }
                            if ((temp1038 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1034();
                                goto label160;
                            }
                            if ((temp1038 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1034();
                                goto label160;
                            }
                            if ((temp1038 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1034();
                                goto label160;
                            }
                            if ((temp1038 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1034();
                                goto label160;
                            }
                            if ((temp1038 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1034();
                                goto label160;
                            }
                            if ((temp1038 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1034();
                                goto label160;
                            }
                            if ((temp1038 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1034();
                                goto label160;
                            }
                            if ((temp1038 == 8)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1034();
                                goto label160;
                            }
                            if ((temp1038 == 9)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1034();
                                goto label160;
                            }
                            throw new InvalidOperationException("never reached");
                        label160:
;
                            goto label161;
                        }
                        throw new InvalidOperationException("never reached");
                    label161:
;
                        goto label165;
                    }
                    if ((temp1057 == 1)) {
                        this.Manager.Comment("reaching state \'S300\'");
                        bool temp1040;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp1040);
                        this.Manager.Comment("reaching state \'S360\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1040, "enabled of CheckRequirementEnabled, state S360");
                        this.Manager.Comment("reaching state \'S420\'");
                        bool temp1041;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp1041);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1041);
                        this.Manager.Comment("reaching state \'S480\'");
                        int temp1056 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker13)));
                        if ((temp1056 == 0)) {
                            this.Manager.Comment("reaching state \'S555\'");
                            bool temp1042;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp1042);
                            this.Manager.Comment("reaching state \'S675\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1042, "enabled of CheckRequirementEnabled, state S675");
                            this.Manager.Comment("reaching state \'S795\'");
                            bool temp1043;
                            bool temp1044;
                            bool temp1045;
                            bool temp1046;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp1047;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp1043, out temp1044, out temp1045, out temp1046, out temp1047);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp1043, temp1044, temp1045, temp1046, temp1047);
                            this.Manager.Comment("reaching state \'S915\'");
                            int temp1048 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker60)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker61)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker62)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker63)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker64)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker65)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker66)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker67)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker68)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker69)));
                            if ((temp1048 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1035();
                                goto label162;
                            }
                            if ((temp1048 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1035();
                                goto label162;
                            }
                            if ((temp1048 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1035();
                                goto label162;
                            }
                            if ((temp1048 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1035();
                                goto label162;
                            }
                            if ((temp1048 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1035();
                                goto label162;
                            }
                            if ((temp1048 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1035();
                                goto label162;
                            }
                            if ((temp1048 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1035();
                                goto label162;
                            }
                            if ((temp1048 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1035();
                                goto label162;
                            }
                            if ((temp1048 == 8)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1035();
                                goto label162;
                            }
                            if ((temp1048 == 9)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1035();
                                goto label162;
                            }
                            throw new InvalidOperationException("never reached");
                        label162:
;
                            goto label164;
                        }
                        if ((temp1056 == 1)) {
                            this.Manager.Comment("reaching state \'S556\'");
                            bool temp1049;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp1049);
                            this.Manager.Comment("reaching state \'S676\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1049, "enabled of CheckRequirementEnabled, state S676");
                            this.Manager.Comment("reaching state \'S796\'");
                            bool temp1050;
                            bool temp1051;
                            bool temp1052;
                            bool temp1053;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp1054;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Move,True,True,out _,out _,out _,out" +
                                    " _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags)(1)), true, true, out temp1050, out temp1051, out temp1052, out temp1053, out temp1054);
                            this.Manager.AddReturn(RopCopyPropertiesMethodInfo, null, temp1050, temp1051, temp1052, temp1053, temp1054);
                            this.Manager.Comment("reaching state \'S916\'");
                            int temp1055 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker70)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker71)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker72)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker73)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker74)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker75)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker76)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker77)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker78)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.RopCopyPropertiesMethodInfo, null, new RopCopyPropertiesMethodDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker79)));
                            if ((temp1055 == 0)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1036();
                                goto label163;
                            }
                            if ((temp1055 == 1)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1036();
                                goto label163;
                            }
                            if ((temp1055 == 2)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1036();
                                goto label163;
                            }
                            if ((temp1055 == 3)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1036();
                                goto label163;
                            }
                            if ((temp1055 == 4)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1036();
                                goto label163;
                            }
                            if ((temp1055 == 5)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1036();
                                goto label163;
                            }
                            if ((temp1055 == 6)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1036();
                                goto label163;
                            }
                            if ((temp1055 == 7)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1036();
                                goto label163;
                            }
                            if ((temp1055 == 8)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1036();
                                goto label163;
                            }
                            if ((temp1055 == 9)) {
                                S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1036();
                                goto label163;
                            }
                            throw new InvalidOperationException("never reached");
                        label163:
;
                            goto label164;
                        }
                        throw new InvalidOperationException("never reached");
                    label164:
;
                        goto label165;
                    }
                    throw new InvalidOperationException("never reached");
                label165:
;
                    goto label166;
                }
                throw new InvalidOperationException("never reached");
            label166:
;
                goto label167;
            }
            if ((temp1059 == 1)) {
                this.Manager.Comment("reaching state \'S37\'");
                goto label167;
            }
            throw new InvalidOperationException("never reached");
        label167:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S153");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S261");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S477");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out NotSupported]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, error, "error of RopCopyPropertiesMethod, state S909");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1029() {
            this.Manager.Comment("reaching state \'S1029\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker1(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S909");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker2(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S909");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker3(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S909");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker4(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S909");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker5(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S909");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker6(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S909");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker7(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S909");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker8(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out InvalidParameter]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, error, "error of RopCopyPropertiesMethod, state S909");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker9(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S909");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S909");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S477");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker10(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out NotSupported]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, error, "error of RopCopyPropertiesMethod, state S910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1030() {
            this.Manager.Comment("reaching state \'S1030\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker11(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker12(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker13(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker14(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker15(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker16(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker17(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker18(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out InvalidParameter]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, error, "error of RopCopyPropertiesMethod, state S910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker19(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S910");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S261");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S478");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker20(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out NotSupported]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, error, "error of RopCopyPropertiesMethod, state S911");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1031() {
            this.Manager.Comment("reaching state \'S1031\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker21(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S911");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker22(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S911");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker23(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S911");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker24(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S911");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker25(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S911");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker26(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S911");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker27(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S911");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker28(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out InvalidParameter]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, error, "error of RopCopyPropertiesMethod, state S911");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker29(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S911");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S911");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S478");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker30(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out NotSupported]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, error, "error of RopCopyPropertiesMethod, state S912");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1032() {
            this.Manager.Comment("reaching state \'S1032\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker31(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S912");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker32(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S912");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker33(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S912");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker34(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S912");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker35(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S912");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker36(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S912");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker37(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S912");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker38(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out InvalidParameter]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, error, "error of RopCopyPropertiesMethod, state S912");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker39(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S912");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S912");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S153");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S262");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S479");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker40(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out NotSupported]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, error, "error of RopCopyPropertiesMethod, state S913");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1033() {
            this.Manager.Comment("reaching state \'S1033\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker41(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S913");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker42(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S913");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker43(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S913");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker44(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S913");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker45(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S913");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker46(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S913");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker47(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S913");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker48(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out InvalidParameter]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, error, "error of RopCopyPropertiesMethod, state S913");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker49(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S913");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S913");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S479");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker50(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out NotSupported]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, error, "error of RopCopyPropertiesMethod, state S914");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1034() {
            this.Manager.Comment("reaching state \'S1034\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker51(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S914");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker52(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S914");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker53(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S914");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker54(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S914");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker55(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S914");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker56(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S914");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker57(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S914");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker58(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out InvalidParameter]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, error, "error of RopCopyPropertiesMethod, state S914");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker59(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S914");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S914");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S262");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S480");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker60(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out NotSupported]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, error, "error of RopCopyPropertiesMethod, state S915");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1035() {
            this.Manager.Comment("reaching state \'S1035\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker61(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S915");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker62(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S915");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker63(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S915");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker64(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S915");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker65(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S915");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker66(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S915");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker67(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S915");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker68(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out InvalidParameter]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, error, "error of RopCopyPropertiesMethod, state S915");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker69(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S915");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S915");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S480");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker70(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out NotSupported]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, error, "error of RopCopyPropertiesMethod, state S916");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void S05_RopCopyPropertiesSuccessSynchronously_TestSuiteS1036() {
            this.Manager.Comment("reaching state \'S1036\'");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker71(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out True,out Fal" +
                    "se,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S916");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker72(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S916");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker73(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out False,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S916");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker74(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out True,out True,out False,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S916");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker75(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out False,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S916");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker76(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out True,out True,out Fa" +
                    "lse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S916");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker77(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out True,out F" +
                    "alse,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S916");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker78(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out InvalidParameter]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, error, "error of RopCopyPropertiesMethod, state S916");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13RopCopyPropertiesMethodChecker79(bool isPropertiesDeleted, bool isChangedInDB, bool isOverwriteDestination, bool isReturnedRopProgress, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode error) {
            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                    "False,out None]\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isPropertiesDeleted, "isPropertiesDeleted of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isChangedInDB, "isChangedInDB of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isOverwriteDestination, "isOverwriteDestination of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReturnedRopProgress, "isReturnedRopProgress of RopCopyPropertiesMethod, state S916");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), error, "error of RopCopyPropertiesMethod, state S916");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite13CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14() {
            this.Manager.BeginTest("MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14");
            this.Manager.Comment("reaching state \'S8\'");
            bool temp1060;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp1060);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp1060);
            this.Manager.Comment("reaching state \'S9\'");
            int temp1129 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp1129 == 0)) {
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S64\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S79\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S94\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S109\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,SecondObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(1)));
                this.Manager.Comment("reaching state \'S124\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S139\'");
                bool temp1061;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(86701,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86701, out temp1061);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1061);
                this.Manager.Comment("reaching state \'S154\'");
                int temp1128 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker7)));
                if ((temp1128 == 0)) {
                    this.Manager.Comment("reaching state \'S173\'");
                    bool temp1062;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp1062);
                    this.Manager.Comment("reaching state \'S203\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1062, "enabled of CheckRequirementEnabled, state S203");
                    this.Manager.Comment("reaching state \'S233\'");
                    bool temp1063;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp1063);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1063);
                    this.Manager.Comment("reaching state \'S263\'");
                    int temp1094 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker1)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker4)));
                    if ((temp1094 == 0)) {
                        this.Manager.Comment("reaching state \'S301\'");
                        bool temp1064;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp1064);
                        this.Manager.Comment("reaching state \'S361\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1064, "enabled of CheckRequirementEnabled, state S361");
                        this.Manager.Comment("reaching state \'S421\'");
                        bool temp1065;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp1065);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1065);
                        this.Manager.Comment("reaching state \'S481\'");
                        int temp1078 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker2)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker3)));
                        if ((temp1078 == 0)) {
                            this.Manager.Comment("reaching state \'S557\'");
                            bool temp1066;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp1066);
                            this.Manager.Comment("reaching state \'S677\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1066, "enabled of CheckRequirementEnabled, state S677");
                            this.Manager.Comment("reaching state \'S797\'");
                            bool temp1067;
                            bool temp1068;
                            bool temp1069;
                            bool temp1070;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp1071;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp1067, out temp1068, out temp1069, out temp1070, out temp1071);
                            this.Manager.Comment("reaching state \'S917\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out InvalidParameter]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1067, "isPropertiesDeleted of RopCopyPropertiesMethod, state S917");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1068, "isChangedInDB of RopCopyPropertiesMethod, state S917");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1069, "isOverwriteDestination of RopCopyPropertiesMethod, state S917");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1070, "isReturnedRopProgress of RopCopyPropertiesMethod, state S917");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, temp1071, "error of RopCopyPropertiesMethod, state S917");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R88001");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R88001");
                            this.Manager.Comment("reaching state \'S1037\'");
                            goto label168;
                        }
                        if ((temp1078 == 1)) {
                            this.Manager.Comment("reaching state \'S558\'");
                            bool temp1072;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp1072);
                            this.Manager.Comment("reaching state \'S678\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1072, "enabled of CheckRequirementEnabled, state S678");
                            this.Manager.Comment("reaching state \'S798\'");
                            bool temp1073;
                            bool temp1074;
                            bool temp1075;
                            bool temp1076;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp1077;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp1073, out temp1074, out temp1075, out temp1076, out temp1077);
                            this.Manager.Comment("reaching state \'S918\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NotSupported]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1073, "isPropertiesDeleted of RopCopyPropertiesMethod, state S918");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1074, "isChangedInDB of RopCopyPropertiesMethod, state S918");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1075, "isOverwriteDestination of RopCopyPropertiesMethod, state S918");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1076, "isReturnedRopProgress of RopCopyPropertiesMethod, state S918");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp1077, "error of RopCopyPropertiesMethod, state S918");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1038\'");
                            goto label168;
                        }
                        throw new InvalidOperationException("never reached");
                    label168:
;
                        goto label170;
                    }
                    if ((temp1094 == 1)) {
                        this.Manager.Comment("reaching state \'S302\'");
                        bool temp1079;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp1079);
                        this.Manager.Comment("reaching state \'S362\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1079, "enabled of CheckRequirementEnabled, state S362");
                        this.Manager.Comment("reaching state \'S422\'");
                        bool temp1080;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp1080);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1080);
                        this.Manager.Comment("reaching state \'S482\'");
                        int temp1093 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker5)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker6)));
                        if ((temp1093 == 0)) {
                            this.Manager.Comment("reaching state \'S559\'");
                            bool temp1081;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp1081);
                            this.Manager.Comment("reaching state \'S679\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1081, "enabled of CheckRequirementEnabled, state S679");
                            this.Manager.Comment("reaching state \'S799\'");
                            bool temp1082;
                            bool temp1083;
                            bool temp1084;
                            bool temp1085;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp1086;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp1082, out temp1083, out temp1084, out temp1085, out temp1086);
                            this.Manager.Comment("reaching state \'S919\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out InvalidParameter]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1082, "isPropertiesDeleted of RopCopyPropertiesMethod, state S919");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1083, "isChangedInDB of RopCopyPropertiesMethod, state S919");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1084, "isOverwriteDestination of RopCopyPropertiesMethod, state S919");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1085, "isReturnedRopProgress of RopCopyPropertiesMethod, state S919");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, temp1086, "error of RopCopyPropertiesMethod, state S919");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R88001");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R88001");
                            this.Manager.Comment("reaching state \'S1039\'");
                            goto label169;
                        }
                        if ((temp1093 == 1)) {
                            this.Manager.Comment("reaching state \'S560\'");
                            bool temp1087;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp1087);
                            this.Manager.Comment("reaching state \'S680\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1087, "enabled of CheckRequirementEnabled, state S680");
                            this.Manager.Comment("reaching state \'S800\'");
                            bool temp1088;
                            bool temp1089;
                            bool temp1090;
                            bool temp1091;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp1092;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp1088, out temp1089, out temp1090, out temp1091, out temp1092);
                            this.Manager.Comment("reaching state \'S920\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NotSupported]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1088, "isPropertiesDeleted of RopCopyPropertiesMethod, state S920");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1089, "isChangedInDB of RopCopyPropertiesMethod, state S920");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1090, "isOverwriteDestination of RopCopyPropertiesMethod, state S920");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1091, "isReturnedRopProgress of RopCopyPropertiesMethod, state S920");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp1092, "error of RopCopyPropertiesMethod, state S920");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1040\'");
                            goto label169;
                        }
                        throw new InvalidOperationException("never reached");
                    label169:
;
                        goto label170;
                    }
                    throw new InvalidOperationException("never reached");
                label170:
;
                    goto label174;
                }
                if ((temp1128 == 1)) {
                    this.Manager.Comment("reaching state \'S174\'");
                    bool temp1095;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86502,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86502, out temp1095);
                    this.Manager.Comment("reaching state \'S204\'");
                    this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1095, "enabled of CheckRequirementEnabled, state S204");
                    this.Manager.Comment("reaching state \'S234\'");
                    bool temp1096;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(86704,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86704, out temp1096);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1096);
                    this.Manager.Comment("reaching state \'S264\'");
                    int temp1127 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker8)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker11)));
                    if ((temp1127 == 0)) {
                        this.Manager.Comment("reaching state \'S303\'");
                        bool temp1097;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp1097);
                        this.Manager.Comment("reaching state \'S363\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1097, "enabled of CheckRequirementEnabled, state S363");
                        this.Manager.Comment("reaching state \'S423\'");
                        bool temp1098;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp1098);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1098);
                        this.Manager.Comment("reaching state \'S483\'");
                        int temp1111 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker9)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker10)));
                        if ((temp1111 == 0)) {
                            this.Manager.Comment("reaching state \'S561\'");
                            bool temp1099;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp1099);
                            this.Manager.Comment("reaching state \'S681\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1099, "enabled of CheckRequirementEnabled, state S681");
                            this.Manager.Comment("reaching state \'S801\'");
                            bool temp1100;
                            bool temp1101;
                            bool temp1102;
                            bool temp1103;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp1104;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp1100, out temp1101, out temp1102, out temp1103, out temp1104);
                            this.Manager.Comment("reaching state \'S921\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out InvalidParameter]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1100, "isPropertiesDeleted of RopCopyPropertiesMethod, state S921");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1101, "isChangedInDB of RopCopyPropertiesMethod, state S921");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1102, "isOverwriteDestination of RopCopyPropertiesMethod, state S921");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1103, "isReturnedRopProgress of RopCopyPropertiesMethod, state S921");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, temp1104, "error of RopCopyPropertiesMethod, state S921");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R88001");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R88001");
                            this.Manager.Comment("reaching state \'S1041\'");
                            goto label171;
                        }
                        if ((temp1111 == 1)) {
                            this.Manager.Comment("reaching state \'S562\'");
                            bool temp1105;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp1105);
                            this.Manager.Comment("reaching state \'S682\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1105, "enabled of CheckRequirementEnabled, state S682");
                            this.Manager.Comment("reaching state \'S802\'");
                            bool temp1106;
                            bool temp1107;
                            bool temp1108;
                            bool temp1109;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp1110;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp1106, out temp1107, out temp1108, out temp1109, out temp1110);
                            this.Manager.Comment("reaching state \'S922\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NotSupported]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1106, "isPropertiesDeleted of RopCopyPropertiesMethod, state S922");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1107, "isChangedInDB of RopCopyPropertiesMethod, state S922");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1108, "isOverwriteDestination of RopCopyPropertiesMethod, state S922");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1109, "isReturnedRopProgress of RopCopyPropertiesMethod, state S922");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp1110, "error of RopCopyPropertiesMethod, state S922");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1042\'");
                            goto label171;
                        }
                        throw new InvalidOperationException("never reached");
                    label171:
;
                        goto label173;
                    }
                    if ((temp1127 == 1)) {
                        this.Manager.Comment("reaching state \'S304\'");
                        bool temp1112;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(50101,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(50101, out temp1112);
                        this.Manager.Comment("reaching state \'S364\'");
                        this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                        TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1112, "enabled of CheckRequirementEnabled, state S364");
                        this.Manager.Comment("reaching state \'S424\'");
                        bool temp1113;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(86705,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(86705, out temp1113);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1113);
                        this.Manager.Comment("reaching state \'S484\'");
                        int temp1126 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker12)), new ExpectedReturn(S05_RopCopyPropertiesSuccessSynchronously_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker13)));
                        if ((temp1126 == 0)) {
                            this.Manager.Comment("reaching state \'S563\'");
                            bool temp1114;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp1114);
                            this.Manager.Comment("reaching state \'S683\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1114, "enabled of CheckRequirementEnabled, state S683");
                            this.Manager.Comment("reaching state \'S803\'");
                            bool temp1115;
                            bool temp1116;
                            bool temp1117;
                            bool temp1118;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp1119;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp1115, out temp1116, out temp1117, out temp1118, out temp1119);
                            this.Manager.Comment("reaching state \'S923\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out InvalidParameter]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1115, "isPropertiesDeleted of RopCopyPropertiesMethod, state S923");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1116, "isChangedInDB of RopCopyPropertiesMethod, state S923");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1117, "isOverwriteDestination of RopCopyPropertiesMethod, state S923");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1118, "isReturnedRopProgress of RopCopyPropertiesMethod, state S923");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.InvalidParameter, temp1119, "error of RopCopyPropertiesMethod, state S923");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204, MS-OXCPRPT_R88001");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Checkpoint("MS-OXCPRPT_R88001");
                            this.Manager.Comment("reaching state \'S1043\'");
                            goto label172;
                        }
                        if ((temp1126 == 1)) {
                            this.Manager.Comment("reaching state \'S564\'");
                            bool temp1120;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(88001,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(88001, out temp1120);
                            this.Manager.Comment("reaching state \'S684\'");
                            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1120, "enabled of CheckRequirementEnabled, state S684");
                            this.Manager.Comment("reaching state \'S804\'");
                            bool temp1121;
                            bool temp1122;
                            bool temp1123;
                            bool temp1124;
                            Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp1125;
                            this.Manager.Comment("executing step \'call RopCopyPropertiesMethod(Other,True,True,out _,out _,out _,ou" +
                                    "t _,out _)\'");
                            this.IMS_OXCPRPTAdapterInstance.RopCopyPropertiesMethod(Microsoft.Protocols.TestSuites.MS_OXCPRPT.CopyFlags.Other, true, true, out temp1121, out temp1122, out temp1123, out temp1124, out temp1125);
                            this.Manager.Comment("reaching state \'S924\'");
                            this.Manager.Comment("checking step \'return RopCopyPropertiesMethod/[out False,out False,out False,out " +
                                    "False,out NotSupported]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1121, "isPropertiesDeleted of RopCopyPropertiesMethod, state S924");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1122, "isChangedInDB of RopCopyPropertiesMethod, state S924");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1123, "isOverwriteDestination of RopCopyPropertiesMethod, state S924");
                                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1124, "isReturnedRopProgress of RopCopyPropertiesMethod, state S924");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp1125, "error of RopCopyPropertiesMethod, state S924");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered MS-OXCPRPT_R15204");
                                throw;
                            }
                            this.Manager.Checkpoint("MS-OXCPRPT_R15204");
                            this.Manager.Comment("reaching state \'S1044\'");
                            goto label172;
                        }
                        throw new InvalidOperationException("never reached");
                    label172:
;
                        goto label173;
                    }
                    throw new InvalidOperationException("never reached");
                label173:
;
                    goto label174;
                }
                throw new InvalidOperationException("never reached");
            label174:
;
                goto label175;
            }
            if ((temp1129 == 1)) {
                this.Manager.Comment("reaching state \'S39\'");
                goto label175;
            }
            throw new InvalidOperationException("never reached");
        label175:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S154");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S263");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S481");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S481");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S263");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S482");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S482");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S154");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S264");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S483");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S483");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S264");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S484");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S484");
        }
        
        private void MSOXCPRPT_S05_RopCopyPropertiesSuccessSynchronously_TestSuite14CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        #endregion
    }
}