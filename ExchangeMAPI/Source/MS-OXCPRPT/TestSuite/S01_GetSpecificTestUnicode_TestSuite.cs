//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCPRPT {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.6.100.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S01_GetSpecificTestUnicode_TestSuite : PtfTestClassBase {
        
        public S01_GetSpecificTestUnicode_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter IMS_OXCPRPTAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCPRPTAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp1 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificTestUnicode_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificTestUnicode_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp1 == 0)) {
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("executing step \'call RopGetPropertiesSpecificForWantUnicode(True)\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificForWantUnicode(true);
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("checking step \'return RopGetPropertiesSpecificForWantUnicode\'");
                this.Manager.Comment("reaching state \'S36\'");
                goto label0;
            }
            if ((temp1 == 1)) {
                this.Manager.Comment("reaching state \'S9\'");
                goto label0;
            }
            throw new InvalidOperationException("never reached");
        label0:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite1() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite1");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp2;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp2);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp2);
            this.Manager.Comment("reaching state \'S3\'");
            int temp3 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificTestUnicode_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificTestUnicode_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp3 == 0)) {
                this.Manager.Comment("reaching state \'S10\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S17\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S25\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("executing step \'call RopGetPropertiesSpecificForWantUnicode(False)\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificForWantUnicode(false);
                this.Manager.Comment("reaching state \'S33\'");
                this.Manager.Comment("checking step \'return RopGetPropertiesSpecificForWantUnicode\'");
                this.Manager.Comment("reaching state \'S37\'");
                goto label1;
            }
            if ((temp3 == 1)) {
                this.Manager.Comment("reaching state \'S11\'");
                goto label1;
            }
            throw new InvalidOperationException("never reached");
        label1:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite2() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite2");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp4;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp4);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp4);
            this.Manager.Comment("reaching state \'S5\'");
            int temp5 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificTestUnicode_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificTestUnicode_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp5 == 0)) {
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S30\'");
                this.Manager.Comment("executing step \'call RopGetPropertiesSpecificForWantUnicode(True)\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificForWantUnicode(true);
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("checking step \'return RopGetPropertiesSpecificForWantUnicode\'");
                this.Manager.Comment("reaching state \'S38\'");
                goto label2;
            }
            if ((temp5 == 1)) {
                this.Manager.Comment("reaching state \'S13\'");
                goto label2;
            }
            throw new InvalidOperationException("never reached");
        label2:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite3() {
            this.Manager.BeginTest("MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite3");
            this.Manager.Comment("reaching state \'S6\'");
            bool temp6;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp6);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp6);
            this.Manager.Comment("reaching state \'S7\'");
            int temp7 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S01_GetSpecificTestUnicode_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite3CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S01_GetSpecificTestUnicode_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite3CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp7 == 0)) {
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S19\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S31\'");
                this.Manager.Comment("executing step \'call RopGetPropertiesSpecificForWantUnicode(False)\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetPropertiesSpecificForWantUnicode(false);
                this.Manager.Comment("reaching state \'S35\'");
                this.Manager.Comment("checking step \'return RopGetPropertiesSpecificForWantUnicode\'");
                this.Manager.Comment("reaching state \'S39\'");
                goto label3;
            }
            if ((temp7 == 1)) {
                this.Manager.Comment("reaching state \'S15\'");
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite3CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        
        private void MSOXCPRPT_S01_GetSpecificTestUnicode_TestSuite3CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        #endregion
    }
}