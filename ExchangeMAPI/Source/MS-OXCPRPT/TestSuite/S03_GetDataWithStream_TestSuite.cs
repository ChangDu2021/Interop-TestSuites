//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCPRPT {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.6.100.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S03_GetDataWithStream_TestSuite : PtfTestClassBase {
        
        public S03_GetDataWithStream_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter IMS_OXCPRPTAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCPRPTAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_GetDataWithStream_TestSuite() {
            this.Manager.BeginTest("MSOXCPRPT_S03_GetDataWithStream_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp4 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp4 == 0)) {
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S48\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S60\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S72\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S84\'");
                bool temp1;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp2;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadOnly,True,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), true, out temp1, out temp2);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S96\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp2, "error of RopOpenStreamMethod, state S96");
                this.Manager.Comment("reaching state \'S108\'");
                this.Manager.Comment("executing step \'call RopReadStreamWithLimitedSize(47806,3)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReadStreamWithLimitedSize(47806, 3u);
                this.Manager.Comment("reaching state \'S120\'");
                this.Manager.Comment("checking step \'return RopReadStreamWithLimitedSize\'");
                this.Manager.Comment("reaching state \'S132\'");
                bool temp3;
                this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp3);
                this.Manager.Comment("reaching state \'S144\'");
                this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp3, "isPropertyValueChanged of RopReleaseMethod, state S144");
                this.Manager.Comment("reaching state \'S156\'");
                goto label0;
            }
            if ((temp4 == 1)) {
                this.Manager.Comment("reaching state \'S25\'");
                goto label0;
            }
            throw new InvalidOperationException("never reached");
        label0:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_GetDataWithStream_TestSuite1() {
            this.Manager.BeginTest("MSOXCPRPT_S03_GetDataWithStream_TestSuite1");
            this.Manager.Comment("reaching state \'S10\'");
            bool temp5;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp5);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp5);
            this.Manager.Comment("reaching state \'S11\'");
            int temp9 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp9 == 0)) {
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S53\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S65\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S77\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S89\'");
                bool temp6;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp7;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadOnly,True,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), true, out temp6, out temp7);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S101\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp6, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S101");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp7, "error of RopOpenStreamMethod, state S101");
                this.Manager.Comment("reaching state \'S113\'");
                this.Manager.Comment("executing step \'call RopReadStreamWithLimitedSize(2,3)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReadStreamWithLimitedSize(2, 3u);
                this.Manager.Comment("reaching state \'S125\'");
                this.Manager.Comment("checking step \'return RopReadStreamWithLimitedSize\'");
                this.Manager.Comment("reaching state \'S137\'");
                bool temp8;
                this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp8);
                this.Manager.Comment("reaching state \'S149\'");
                this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp8, "isPropertyValueChanged of RopReleaseMethod, state S149");
                this.Manager.Comment("reaching state \'S161\'");
                goto label1;
            }
            if ((temp9 == 1)) {
                this.Manager.Comment("reaching state \'S35\'");
                goto label1;
            }
            throw new InvalidOperationException("never reached");
        label1:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_GetDataWithStream_TestSuite2() {
            this.Manager.BeginTest("MSOXCPRPT_S03_GetDataWithStream_TestSuite2");
            this.Manager.Comment("reaching state \'S12\'");
            bool temp10;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp10);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp10);
            this.Manager.Comment("reaching state \'S13\'");
            int temp14 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp14 == 0)) {
                this.Manager.Comment("reaching state \'S36\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S54\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S66\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S78\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S90\'");
                bool temp11;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp12;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadOnly,True,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), true, out temp11, out temp12);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S102\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp11, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S102");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp12, "error of RopOpenStreamMethod, state S102");
                this.Manager.Comment("reaching state \'S114\'");
                this.Manager.Comment("executing step \'call RopReadStreamMethod(True)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReadStreamMethod(true);
                this.Manager.Comment("reaching state \'S126\'");
                this.Manager.Comment("checking step \'return RopReadStreamMethod\'");
                this.Manager.Comment("reaching state \'S138\'");
                this.Manager.Comment("executing step \'call RopGetStreamSizeMethod()\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetStreamSizeMethod();
                this.Manager.Comment("reaching state \'S150\'");
                this.Manager.Comment("checking step \'return RopGetStreamSizeMethod\'");
                this.Manager.Comment("reaching state \'S162\'");
                bool temp13;
                this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp13);
                this.Manager.Comment("reaching state \'S170\'");
                this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp13, "isPropertyValueChanged of RopReleaseMethod, state S170");
                this.Manager.Comment("reaching state \'S176\'");
                goto label2;
            }
            if ((temp14 == 1)) {
                this.Manager.Comment("reaching state \'S37\'");
                goto label2;
            }
            throw new InvalidOperationException("never reached");
        label2:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S13");
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S13");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_GetDataWithStream_TestSuite3() {
            this.Manager.BeginTest("MSOXCPRPT_S03_GetDataWithStream_TestSuite3");
            this.Manager.Comment("reaching state \'S14\'");
            bool temp15;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp15);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp15);
            this.Manager.Comment("reaching state \'S15\'");
            int temp19 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp19 == 0)) {
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S55\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S67\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S79\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S91\'");
                bool temp16;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp17;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadOnly,True,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), true, out temp16, out temp17);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S103\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp16, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S103");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp17, "error of RopOpenStreamMethod, state S103");
                this.Manager.Comment("reaching state \'S115\'");
                this.Manager.Comment("executing step \'call RopReadStreamMethod(False)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReadStreamMethod(false);
                this.Manager.Comment("reaching state \'S127\'");
                this.Manager.Comment("checking step \'return RopReadStreamMethod\'");
                this.Manager.Comment("reaching state \'S139\'");
                this.Manager.Comment("executing step \'call RopGetStreamSizeMethod()\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetStreamSizeMethod();
                this.Manager.Comment("reaching state \'S151\'");
                this.Manager.Comment("checking step \'return RopGetStreamSizeMethod\'");
                this.Manager.Comment("reaching state \'S163\'");
                bool temp18;
                this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp18);
                this.Manager.Comment("reaching state \'S171\'");
                this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp18, "isPropertyValueChanged of RopReleaseMethod, state S171");
                this.Manager.Comment("reaching state \'S177\'");
                goto label3;
            }
            if ((temp19 == 1)) {
                this.Manager.Comment("reaching state \'S39\'");
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S15");
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite3CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S15");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_GetDataWithStream_TestSuite4() {
            this.Manager.BeginTest("MSOXCPRPT_S03_GetDataWithStream_TestSuite4");
            this.Manager.Comment("reaching state \'S16\'");
            bool temp20;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp20);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp20);
            this.Manager.Comment("reaching state \'S17\'");
            int temp24 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp24 == 0)) {
                this.Manager.Comment("reaching state \'S40\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S56\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S68\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S80\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S92\'");
                bool temp21;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp22;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadOnly,True,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), true, out temp21, out temp22);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S104\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp21, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S104");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp22, "error of RopOpenStreamMethod, state S104");
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment("executing step \'call RopReadStreamWithLimitedSize(47806,3)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReadStreamWithLimitedSize(47806, 3u);
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("checking step \'return RopReadStreamWithLimitedSize\'");
                this.Manager.Comment("reaching state \'S140\'");
                bool temp23;
                this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp23);
                this.Manager.Comment("reaching state \'S152\'");
                this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp23, "isPropertyValueChanged of RopReleaseMethod, state S152");
                this.Manager.Comment("reaching state \'S164\'");
                goto label4;
            }
            if ((temp24 == 1)) {
                this.Manager.Comment("reaching state \'S41\'");
                goto label4;
            }
            throw new InvalidOperationException("never reached");
        label4:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S17");
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite4CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S17");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_GetDataWithStream_TestSuite5() {
            this.Manager.BeginTest("MSOXCPRPT_S03_GetDataWithStream_TestSuite5");
            this.Manager.Comment("reaching state \'S18\'");
            bool temp25;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp25);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp25);
            this.Manager.Comment("reaching state \'S19\'");
            int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp29 == 0)) {
                this.Manager.Comment("reaching state \'S42\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S57\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S69\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S81\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S93\'");
                bool temp26;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp27;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadOnly,True,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), true, out temp26, out temp27);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S105\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp26, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S105");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp27, "error of RopOpenStreamMethod, state S105");
                this.Manager.Comment("reaching state \'S117\'");
                this.Manager.Comment("executing step \'call RopReadStreamWithLimitedSize(2,3)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReadStreamWithLimitedSize(2, 3u);
                this.Manager.Comment("reaching state \'S129\'");
                this.Manager.Comment("checking step \'return RopReadStreamWithLimitedSize\'");
                this.Manager.Comment("reaching state \'S141\'");
                bool temp28;
                this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp28);
                this.Manager.Comment("reaching state \'S153\'");
                this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp28, "isPropertyValueChanged of RopReleaseMethod, state S153");
                this.Manager.Comment("reaching state \'S165\'");
                goto label5;
            }
            if ((temp29 == 1)) {
                this.Manager.Comment("reaching state \'S43\'");
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S19");
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite5CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S19");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_GetDataWithStream_TestSuite6() {
            this.Manager.BeginTest("MSOXCPRPT_S03_GetDataWithStream_TestSuite6");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp30;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp30);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp30);
            this.Manager.Comment("reaching state \'S3\'");
            int temp34 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite6CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite6CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp34 == 0)) {
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S49\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S61\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S73\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S85\'");
                bool temp31;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp32;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadOnly,True,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), true, out temp31, out temp32);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S97\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp31, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp32, "error of RopOpenStreamMethod, state S97");
                this.Manager.Comment("reaching state \'S109\'");
                this.Manager.Comment("executing step \'call RopReadStreamWithLimitedSize(2,3)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReadStreamWithLimitedSize(2, 3u);
                this.Manager.Comment("reaching state \'S121\'");
                this.Manager.Comment("checking step \'return RopReadStreamWithLimitedSize\'");
                this.Manager.Comment("reaching state \'S133\'");
                bool temp33;
                this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp33);
                this.Manager.Comment("reaching state \'S145\'");
                this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp33, "isPropertyValueChanged of RopReleaseMethod, state S145");
                this.Manager.Comment("reaching state \'S157\'");
                goto label6;
            }
            if ((temp34 == 1)) {
                this.Manager.Comment("reaching state \'S27\'");
                goto label6;
            }
            throw new InvalidOperationException("never reached");
        label6:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite6CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite6CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_GetDataWithStream_TestSuite7() {
            this.Manager.BeginTest("MSOXCPRPT_S03_GetDataWithStream_TestSuite7");
            this.Manager.Comment("reaching state \'S20\'");
            bool temp35;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp35);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp35);
            this.Manager.Comment("reaching state \'S21\'");
            int temp39 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite7CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite7CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp39 == 0)) {
                this.Manager.Comment("reaching state \'S44\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S70\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S82\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S94\'");
                bool temp36;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp37;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadOnly,True,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), true, out temp36, out temp37);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S106\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp36, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S106");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp37, "error of RopOpenStreamMethod, state S106");
                this.Manager.Comment("reaching state \'S118\'");
                this.Manager.Comment("executing step \'call RopReadStreamMethod(True)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReadStreamMethod(true);
                this.Manager.Comment("reaching state \'S130\'");
                this.Manager.Comment("checking step \'return RopReadStreamMethod\'");
                this.Manager.Comment("reaching state \'S142\'");
                this.Manager.Comment("executing step \'call RopGetStreamSizeMethod()\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetStreamSizeMethod();
                this.Manager.Comment("reaching state \'S154\'");
                this.Manager.Comment("checking step \'return RopGetStreamSizeMethod\'");
                this.Manager.Comment("reaching state \'S166\'");
                bool temp38;
                this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp38);
                this.Manager.Comment("reaching state \'S172\'");
                this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp38, "isPropertyValueChanged of RopReleaseMethod, state S172");
                this.Manager.Comment("reaching state \'S178\'");
                goto label7;
            }
            if ((temp39 == 1)) {
                this.Manager.Comment("reaching state \'S45\'");
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite7CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S21");
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite7CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S21");
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_GetDataWithStream_TestSuite8() {
            this.Manager.BeginTest("MSOXCPRPT_S03_GetDataWithStream_TestSuite8");
            this.Manager.Comment("reaching state \'S22\'");
            bool temp40;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp40);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp40);
            this.Manager.Comment("reaching state \'S23\'");
            int temp44 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite8CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite8CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp44 == 0)) {
                this.Manager.Comment("reaching state \'S46\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S71\'");
                this.Manager.Comment("executing step \'call GetObject(Folder,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S83\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S95\'");
                bool temp41;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp42;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadOnly,True,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), true, out temp41, out temp42);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S107\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp41, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S107");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp42, "error of RopOpenStreamMethod, state S107");
                this.Manager.Comment("reaching state \'S119\'");
                this.Manager.Comment("executing step \'call RopReadStreamMethod(False)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReadStreamMethod(false);
                this.Manager.Comment("reaching state \'S131\'");
                this.Manager.Comment("checking step \'return RopReadStreamMethod\'");
                this.Manager.Comment("reaching state \'S143\'");
                this.Manager.Comment("executing step \'call RopGetStreamSizeMethod()\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetStreamSizeMethod();
                this.Manager.Comment("reaching state \'S155\'");
                this.Manager.Comment("checking step \'return RopGetStreamSizeMethod\'");
                this.Manager.Comment("reaching state \'S167\'");
                bool temp43;
                this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp43);
                this.Manager.Comment("reaching state \'S173\'");
                this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp43, "isPropertyValueChanged of RopReleaseMethod, state S173");
                this.Manager.Comment("reaching state \'S179\'");
                goto label8;
            }
            if ((temp44 == 1)) {
                this.Manager.Comment("reaching state \'S47\'");
                goto label8;
            }
            throw new InvalidOperationException("never reached");
        label8:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite8CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S23");
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite8CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S23");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_GetDataWithStream_TestSuite9() {
            this.Manager.BeginTest("MSOXCPRPT_S03_GetDataWithStream_TestSuite9");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp45;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp45);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp45);
            this.Manager.Comment("reaching state \'S5\'");
            int temp49 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite9CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite9CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp49 == 0)) {
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S50\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S62\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S74\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S86\'");
                bool temp46;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp47;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadOnly,True,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), true, out temp46, out temp47);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S98\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp46, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S98");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp47, "error of RopOpenStreamMethod, state S98");
                this.Manager.Comment("reaching state \'S110\'");
                this.Manager.Comment("executing step \'call RopReadStreamMethod(True)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReadStreamMethod(true);
                this.Manager.Comment("reaching state \'S122\'");
                this.Manager.Comment("checking step \'return RopReadStreamMethod\'");
                this.Manager.Comment("reaching state \'S134\'");
                this.Manager.Comment("executing step \'call RopGetStreamSizeMethod()\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetStreamSizeMethod();
                this.Manager.Comment("reaching state \'S146\'");
                this.Manager.Comment("checking step \'return RopGetStreamSizeMethod\'");
                this.Manager.Comment("reaching state \'S158\'");
                bool temp48;
                this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp48);
                this.Manager.Comment("reaching state \'S168\'");
                this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp48, "isPropertyValueChanged of RopReleaseMethod, state S168");
                this.Manager.Comment("reaching state \'S174\'");
                goto label9;
            }
            if ((temp49 == 1)) {
                this.Manager.Comment("reaching state \'S29\'");
                goto label9;
            }
            throw new InvalidOperationException("never reached");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite9CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite9CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_GetDataWithStream_TestSuite10() {
            this.Manager.BeginTest("MSOXCPRPT_S03_GetDataWithStream_TestSuite10");
            this.Manager.Comment("reaching state \'S6\'");
            bool temp50;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp50);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp50);
            this.Manager.Comment("reaching state \'S7\'");
            int temp54 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite10CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite10CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp54 == 0)) {
                this.Manager.Comment("reaching state \'S30\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S51\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S63\'");
                this.Manager.Comment("executing step \'call GetObject(Attachment,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Attachment, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S75\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S87\'");
                bool temp51;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp52;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadOnly,True,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), true, out temp51, out temp52);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S99\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp51, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S99");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp52, "error of RopOpenStreamMethod, state S99");
                this.Manager.Comment("reaching state \'S111\'");
                this.Manager.Comment("executing step \'call RopReadStreamMethod(False)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReadStreamMethod(false);
                this.Manager.Comment("reaching state \'S123\'");
                this.Manager.Comment("checking step \'return RopReadStreamMethod\'");
                this.Manager.Comment("reaching state \'S135\'");
                this.Manager.Comment("executing step \'call RopGetStreamSizeMethod()\'");
                this.IMS_OXCPRPTAdapterInstance.RopGetStreamSizeMethod();
                this.Manager.Comment("reaching state \'S147\'");
                this.Manager.Comment("checking step \'return RopGetStreamSizeMethod\'");
                this.Manager.Comment("reaching state \'S159\'");
                bool temp53;
                this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp53);
                this.Manager.Comment("reaching state \'S169\'");
                this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp53, "isPropertyValueChanged of RopReleaseMethod, state S169");
                this.Manager.Comment("reaching state \'S175\'");
                goto label10;
            }
            if ((temp54 == 1)) {
                this.Manager.Comment("reaching state \'S31\'");
                goto label10;
            }
            throw new InvalidOperationException("never reached");
        label10:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite10CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite10CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_GetDataWithStream_TestSuite11() {
            this.Manager.BeginTest("MSOXCPRPT_S03_GetDataWithStream_TestSuite11");
            this.Manager.Comment("reaching state \'S8\'");
            bool temp55;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp55);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp55);
            this.Manager.Comment("reaching state \'S9\'");
            int temp59 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite11CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_GetDataWithStream_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_GetDataWithStream_TestSuite11CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp59 == 0)) {
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S52\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S64\'");
                this.Manager.Comment("executing step \'call GetObject(Message,FirstObject)\'");
                this.IMS_OXCPRPTAdapterInstance.GetObject(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType.Message, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)));
                this.Manager.Comment("reaching state \'S76\'");
                this.Manager.Comment("checking step \'return GetObject\'");
                this.Manager.Comment("reaching state \'S88\'");
                bool temp56;
                Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp57;
                this.Manager.Comment("executing step \'call RopOpenStreamMethod(FirstObject,ReadOnly,True,out _,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopOpenStreamMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.OpenModeFlags)(0)), true, out temp56, out temp57);
                this.Manager.Checkpoint("MS-OXCPRPT_R885");
                this.Manager.Comment("reaching state \'S100\'");
                this.Manager.Comment("checking step \'return RopOpenStreamMethod/[out True,out None]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp56, "isStreamSizeEqualToStream of RopOpenStreamMethod, state S100");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp57, "error of RopOpenStreamMethod, state S100");
                this.Manager.Comment("reaching state \'S112\'");
                this.Manager.Comment("executing step \'call RopReadStreamWithLimitedSize(47806,3)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReadStreamWithLimitedSize(47806, 3u);
                this.Manager.Comment("reaching state \'S124\'");
                this.Manager.Comment("checking step \'return RopReadStreamWithLimitedSize\'");
                this.Manager.Comment("reaching state \'S136\'");
                bool temp58;
                this.Manager.Comment("executing step \'call RopReleaseMethod(FirstObject,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.RopReleaseMethod(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate)(0)), out temp58);
                this.Manager.Comment("reaching state \'S148\'");
                this.Manager.Comment("checking step \'return RopReleaseMethod/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp58, "isPropertyValueChanged of RopReleaseMethod, state S148");
                this.Manager.Comment("reaching state \'S160\'");
                goto label11;
            }
            if ((temp59 == 1)) {
                this.Manager.Comment("reaching state \'S33\'");
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite11CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        
        private void MSOXCPRPT_S03_GetDataWithStream_TestSuite11CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        #endregion
    }
}