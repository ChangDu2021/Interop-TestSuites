//-----------------------------------------------------------------------
// Copyright (c) 2014 Microsoft Corporation. All rights reserved.
// Use of this sample source code is subject to the terms of the Microsoft license 
// agreement under which you licensed this sample source code and is provided AS-IS.
// If you did not accept the terms of the license agreement, you are not authorized 
// to use this sample source code. For the terms of the license, please see the 
// license agreement between you and Microsoft.
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCPRPT {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.6.100.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S03_SeekStreamForFolder_TestSuite : PtfTestClassBase {
        
        public S03_SeekStreamForFolder_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter IMS_OXCPRPTAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCPRPTAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCPRPT.IMS_OXCPRPTAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStreamForFolder_TestSuite() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStreamForFolder_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp11 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStreamForFolder_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStreamForFolder_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStreamForFolder_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStreamForFolder_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp11 == 0)) {
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S10\'");
                bool temp1;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2561,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2561, out temp1);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1);
                this.Manager.Comment("reaching state \'S12\'");
                int temp10 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStreamForFolder_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStreamForFolder_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S03_SeekStreamForFolder_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStreamForFolder_TestSuiteCheckRequirementEnabledChecker3)));
                if ((temp10 == 0)) {
                    this.Manager.Comment("reaching state \'S14\'");
                    bool temp2;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp2);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp2);
                    this.Manager.Comment("reaching state \'S18\'");
                    int temp5 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStreamForFolder_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStreamForFolder_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S03_SeekStreamForFolder_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStreamForFolder_TestSuiteCheckRequirementEnabledChecker2)));
                    if ((temp5 == 0)) {
                        this.Manager.Comment("reaching state \'S22\'");
                        this.Manager.Comment("executing step \'call GetObject(Folder,FifthObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate.FifthObject);
                        this.Manager.Comment("reaching state \'S30\'");
                        this.Manager.Comment("checking step \'return GetObject\'");
                        this.Manager.Comment("reaching state \'S38\'");
                        Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp3;
                        this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FifthObject,PtypBinar" +
                                "y,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate.FifthObject, Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp3);
                        this.Manager.Comment("reaching state \'S46\'");
                        this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp3, "error of RopOpenStreamWithDifferentPropertyType, state S46");
                        this.Manager.Comment("reaching state \'S54\'");
                        goto label0;
                    }
                    if ((temp5 == 1)) {
                        this.Manager.Comment("reaching state \'S23\'");
                        this.Manager.Comment("executing step \'call GetObject(Folder,FifthObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate.FifthObject);
                        this.Manager.Comment("reaching state \'S31\'");
                        this.Manager.Comment("checking step \'return GetObject\'");
                        this.Manager.Comment("reaching state \'S39\'");
                        Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp4;
                        this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FifthObject,PtypBinar" +
                                "y,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate.FifthObject, Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp4);
                        this.Manager.Comment("reaching state \'S47\'");
                        this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp4, "error of RopOpenStreamWithDifferentPropertyType, state S47");
                        this.Manager.Comment("reaching state \'S55\'");
                        goto label0;
                    }
                    throw new InvalidOperationException("never reached");
                label0:
;
                    goto label2;
                }
                if ((temp10 == 1)) {
                    this.Manager.Comment("reaching state \'S15\'");
                    bool temp6;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp6);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp6);
                    this.Manager.Comment("reaching state \'S19\'");
                    int temp9 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStreamForFolder_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStreamForFolder_TestSuiteCheckRequirementEnabledChecker4)), new ExpectedReturn(S03_SeekStreamForFolder_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStreamForFolder_TestSuiteCheckRequirementEnabledChecker5)));
                    if ((temp9 == 0)) {
                        this.Manager.Comment("reaching state \'S24\'");
                        this.Manager.Comment("executing step \'call GetObject(Folder,FifthObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate.FifthObject);
                        this.Manager.Comment("reaching state \'S32\'");
                        this.Manager.Comment("checking step \'return GetObject\'");
                        this.Manager.Comment("reaching state \'S40\'");
                        Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp7;
                        this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FifthObject,PtypBinar" +
                                "y,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate.FifthObject, Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp7);
                        this.Manager.Checkpoint("MS-OXCPRPT_R2561");
                        this.Manager.Comment("reaching state \'S48\'");
                        this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out NotSupported]\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp7, "error of RopOpenStreamWithDifferentPropertyType, state S48");
                        this.Manager.Comment("reaching state \'S56\'");
                        goto label1;
                    }
                    if ((temp9 == 1)) {
                        this.Manager.Comment("reaching state \'S25\'");
                        this.Manager.Comment("executing step \'call GetObject(Folder,FifthObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate.FifthObject);
                        this.Manager.Comment("reaching state \'S33\'");
                        this.Manager.Comment("checking step \'return GetObject\'");
                        this.Manager.Comment("reaching state \'S41\'");
                        Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp8;
                        this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FifthObject,PtypBinar" +
                                "y,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate.FifthObject, Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypBinary, out temp8);
                        this.Manager.Checkpoint("MS-OXCPRPT_R2561");
                        this.Manager.Comment("reaching state \'S49\'");
                        this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out NotSupported]\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp8, "error of RopOpenStreamWithDifferentPropertyType, state S49");
                        this.Manager.Comment("reaching state \'S57\'");
                        goto label1;
                    }
                    throw new InvalidOperationException("never reached");
                label1:
;
                    goto label2;
                }
                throw new InvalidOperationException("never reached");
            label2:
;
                goto label3;
            }
            if ((temp11 == 1)) {
                this.Manager.Comment("reaching state \'S5\'");
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStreamForFolder_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCPRPT_S03_SeekStreamForFolder_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S12");
        }
        
        private void MSOXCPRPT_S03_SeekStreamForFolder_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S18");
        }
        
        private void MSOXCPRPT_S03_SeekStreamForFolder_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S18");
        }
        
        private void MSOXCPRPT_S03_SeekStreamForFolder_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S12");
        }
        
        private void MSOXCPRPT_S03_SeekStreamForFolder_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S19");
        }
        
        private void MSOXCPRPT_S03_SeekStreamForFolder_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S19");
        }
        
        private void MSOXCPRPT_S03_SeekStreamForFolder_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCPRPT_S03_SeekStreamForFolder_TestSuite1() {
            this.Manager.BeginTest("MSOXCPRPT_S03_SeekStreamForFolder_TestSuite1");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp12;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCPRPTAdapterInstance.CheckMAPIHTTPTransportSupported(out temp12);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp12);
            this.Manager.Comment("reaching state \'S3\'");
            int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStreamForFolder_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStreamForFolder_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_SeekStreamForFolder_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCPRPT_S03_SeekStreamForFolder_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp23 == 0)) {
                this.Manager.Comment("reaching state \'S6\'");
                this.Manager.Comment("executing step \'call InitializeMailBox()\'");
                this.IMS_OXCPRPTAdapterInstance.InitializeMailBox();
                this.Manager.Comment("reaching state \'S9\'");
                this.Manager.Comment("checking step \'return InitializeMailBox\'");
                this.Manager.Comment("reaching state \'S11\'");
                bool temp13;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(2561,out _)\'");
                this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2561, out temp13);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp13);
                this.Manager.Comment("reaching state \'S13\'");
                int temp22 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStreamForFolder_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStreamForFolder_TestSuite1CheckRequirementEnabledChecker)), new ExpectedReturn(S03_SeekStreamForFolder_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStreamForFolder_TestSuite1CheckRequirementEnabledChecker3)));
                if ((temp22 == 0)) {
                    this.Manager.Comment("reaching state \'S16\'");
                    bool temp14;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp14);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp14);
                    this.Manager.Comment("reaching state \'S20\'");
                    int temp17 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStreamForFolder_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStreamForFolder_TestSuite1CheckRequirementEnabledChecker1)), new ExpectedReturn(S03_SeekStreamForFolder_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStreamForFolder_TestSuite1CheckRequirementEnabledChecker2)));
                    if ((temp17 == 0)) {
                        this.Manager.Comment("reaching state \'S26\'");
                        this.Manager.Comment("executing step \'call GetObject(Folder,FifthObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate.FifthObject);
                        this.Manager.Comment("reaching state \'S34\'");
                        this.Manager.Comment("checking step \'return GetObject\'");
                        this.Manager.Comment("reaching state \'S42\'");
                        Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp15;
                        this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FifthObject,PtypStrin" +
                                "g,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate.FifthObject, Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp15);
                        this.Manager.Comment("reaching state \'S50\'");
                        this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp15, "error of RopOpenStreamWithDifferentPropertyType, state S50");
                        this.Manager.Comment("reaching state \'S58\'");
                        goto label4;
                    }
                    if ((temp17 == 1)) {
                        this.Manager.Comment("reaching state \'S27\'");
                        this.Manager.Comment("executing step \'call GetObject(Folder,FifthObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate.FifthObject);
                        this.Manager.Comment("reaching state \'S35\'");
                        this.Manager.Comment("checking step \'return GetObject\'");
                        this.Manager.Comment("reaching state \'S43\'");
                        Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp16;
                        this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FifthObject,PtypStrin" +
                                "g,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate.FifthObject, Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp16);
                        this.Manager.Checkpoint("MS-OXCPRPT_R2563");
                        this.Manager.Comment("reaching state \'S51\'");
                        this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out NotSupported]\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp16, "error of RopOpenStreamWithDifferentPropertyType, state S51");
                        this.Manager.Comment("reaching state \'S59\'");
                        goto label4;
                    }
                    throw new InvalidOperationException("never reached");
                label4:
;
                    goto label6;
                }
                if ((temp22 == 1)) {
                    this.Manager.Comment("reaching state \'S17\'");
                    bool temp18;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(2563,out _)\'");
                    this.IMS_OXCPRPTAdapterInstance.CheckRequirementEnabled(2563, out temp18);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp18);
                    this.Manager.Comment("reaching state \'S21\'");
                    int temp21 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_SeekStreamForFolder_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStreamForFolder_TestSuite1CheckRequirementEnabledChecker4)), new ExpectedReturn(S03_SeekStreamForFolder_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCPRPT_S03_SeekStreamForFolder_TestSuite1CheckRequirementEnabledChecker5)));
                    if ((temp21 == 0)) {
                        this.Manager.Comment("reaching state \'S28\'");
                        this.Manager.Comment("executing step \'call GetObject(Folder,FifthObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate.FifthObject);
                        this.Manager.Comment("reaching state \'S36\'");
                        this.Manager.Comment("checking step \'return GetObject\'");
                        this.Manager.Comment("reaching state \'S44\'");
                        Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp19;
                        this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FifthObject,PtypStrin" +
                                "g,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate.FifthObject, Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp19);
                        this.Manager.Comment("reaching state \'S52\'");
                        this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out None]\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode)(0)), temp19, "error of RopOpenStreamWithDifferentPropertyType, state S52");
                        this.Manager.Comment("reaching state \'S60\'");
                        goto label5;
                    }
                    if ((temp21 == 1)) {
                        this.Manager.Comment("reaching state \'S29\'");
                        this.Manager.Comment("executing step \'call GetObject(Folder,FifthObject)\'");
                        this.IMS_OXCPRPTAdapterInstance.GetObject(((Microsoft.Protocols.TestSuites.MS_OXCPRPT.ServerObjectType)(1)), Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate.FifthObject);
                        this.Manager.Comment("reaching state \'S37\'");
                        this.Manager.Comment("checking step \'return GetObject\'");
                        this.Manager.Comment("reaching state \'S45\'");
                        Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode temp20;
                        this.Manager.Comment("executing step \'call RopOpenStreamWithDifferentPropertyType(FifthObject,PtypStrin" +
                                "g,out _)\'");
                        this.IMS_OXCPRPTAdapterInstance.RopOpenStreamWithDifferentPropertyType(Microsoft.Protocols.TestSuites.MS_OXCPRPT.ObjectToOperate.FifthObject, Microsoft.Protocols.TestSuites.MS_OXCPRPT.PropertyTypeName.PtypString, out temp20);
                        this.Manager.Checkpoint("MS-OXCPRPT_R2563");
                        this.Manager.Comment("reaching state \'S53\'");
                        this.Manager.Comment("checking step \'return RopOpenStreamWithDifferentPropertyType/[out NotSupported]\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCPRPT.CPRPTErrorCode.NotSupported, temp20, "error of RopOpenStreamWithDifferentPropertyType, state S53");
                        this.Manager.Comment("reaching state \'S61\'");
                        goto label5;
                    }
                    throw new InvalidOperationException("never reached");
                label5:
;
                    goto label6;
                }
                throw new InvalidOperationException("never reached");
            label6:
;
                goto label7;
            }
            if ((temp23 == 1)) {
                this.Manager.Comment("reaching state \'S7\'");
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCPRPT_S03_SeekStreamForFolder_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCPRPT_S03_SeekStreamForFolder_TestSuite1CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S13");
        }
        
        private void MSOXCPRPT_S03_SeekStreamForFolder_TestSuite1CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S20");
        }
        
        private void MSOXCPRPT_S03_SeekStreamForFolder_TestSuite1CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S20");
        }
        
        private void MSOXCPRPT_S03_SeekStreamForFolder_TestSuite1CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S13");
        }
        
        private void MSOXCPRPT_S03_SeekStreamForFolder_TestSuite1CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S21");
        }
        
        private void MSOXCPRPT_S03_SeekStreamForFolder_TestSuite1CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S21");
        }
        
        private void MSOXCPRPT_S03_SeekStreamForFolder_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
    }
}